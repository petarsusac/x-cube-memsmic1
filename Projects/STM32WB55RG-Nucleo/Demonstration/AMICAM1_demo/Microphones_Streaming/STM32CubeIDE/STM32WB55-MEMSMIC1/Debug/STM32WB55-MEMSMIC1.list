
STM32WB55-MEMSMIC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006658  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08006794  08006794  00016794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080069c8  080069c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000154  20000004  080069cc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001e04  20000158  08006b20  00020158  2**2
                  ALLOC
  7 ._user_heap_stack 00001404  20001f5c  08006b20  00021f5c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
  9 .debug_line   0002816c  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   000244c1  00000000  00000000  000482f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000586f  00000000  00000000  0006c7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001530  00000000  00000000  00072028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0011b089  00000000  00000000  00073558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002710  00000000  00000000  0018e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00010e67  00000000  00000000  00190cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e4ce  00000000  00000000  001a1b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d002d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ba0  00000000  00000000  001d0080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000158 	.word	0x20000158
 8000158:	00000000 	.word	0x00000000
 800015c:	0800677c 	.word	0x0800677c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000015c 	.word	0x2000015c
 8000178:	0800677c 	.word	0x0800677c

0800017c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800017c:	480d      	ldr	r0, [pc, #52]	; (80001b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000180:	480d      	ldr	r0, [pc, #52]	; (80001b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000182:	490e      	ldr	r1, [pc, #56]	; (80001bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000184:	4a0e      	ldr	r2, [pc, #56]	; (80001c0 <LoopForever+0xe>)
  movs r3, #0
 8000186:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000188:	e002      	b.n	8000190 <LoopCopyDataInit>

0800018a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018e:	3304      	adds	r3, #4

08000190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000194:	d3f9      	bcc.n	800018a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000196:	4a0b      	ldr	r2, [pc, #44]	; (80001c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000198:	4c0b      	ldr	r4, [pc, #44]	; (80001c8 <LoopForever+0x16>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800019c:	e001      	b.n	80001a2 <LoopFillZerobss>

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a0:	3204      	adds	r2, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001a6:	f001 f981 	bl	80014ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80001aa:	f006 f99f 	bl	80064ec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80001ae:	f000 f8db 	bl	8000368 <main>

080001b2 <LoopForever>:

LoopForever:
  b LoopForever
 80001b2:	e7fe      	b.n	80001b2 <LoopForever>
  ldr   r0, =_estack
 80001b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80001b8:	20000004 	.word	0x20000004
  ldr r1, =_edata
 80001bc:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80001c0:	080069cc 	.word	0x080069cc
  ldr r2, =_sbss
 80001c4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80001c8:	20001f5c 	.word	0x20001f5c

080001cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001cc:	e7fe      	b.n	80001cc <ADC1_IRQHandler>
	...

080001d0 <_sbrk>:
{
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;

  if (heap_end == 0)
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <_sbrk+0x2c>)
 80001d2:	6811      	ldr	r1, [r2, #0]
{
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4603      	mov	r3, r0
  if (heap_end == 0)
 80001d8:	b909      	cbnz	r1, 80001de <_sbrk+0xe>
  {
    heap_end = &end;
 80001da:	4909      	ldr	r1, [pc, #36]	; (8000200 <_sbrk+0x30>)
 80001dc:	6011      	str	r1, [r2, #0]
  }

  prev_heap_end = heap_end;
 80001de:	6810      	ldr	r0, [r2, #0]
  if (heap_end + incr > stack_ptr)
 80001e0:	4669      	mov	r1, sp
 80001e2:	4403      	add	r3, r0
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d906      	bls.n	80001f6 <_sbrk+0x26>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 80001e8:	f006 f97a 	bl	80064e0 <__errno>
 80001ec:	230c      	movs	r3, #12
 80001ee:	6003      	str	r3, [r0, #0]
    return (caddr_t) -1;
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }

  heap_end += incr;

  return (caddr_t) prev_heap_end;
}
 80001f4:	bd08      	pop	{r3, pc}
  heap_end += incr;
 80001f6:	6013      	str	r3, [r2, #0]
  return (caddr_t) prev_heap_end;
 80001f8:	e7fc      	b.n	80001f4 <_sbrk+0x24>
 80001fa:	bf00      	nop
 80001fc:	20000174 	.word	0x20000174
 8000200:	20001f60 	.word	0x20001f60

08000204 <AudioProcessHalf>:
  * @param  none
  * @retval None
  */
void AudioProcessHalf(void)
{
	Send_Audio_to_USB((int16_t *)PCM_Buffer, HALF_BUFSIZE);
 8000204:	4802      	ldr	r0, [pc, #8]	; (8000210 <AudioProcessHalf+0xc>)
 8000206:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800020a:	f000 b9c5 	b.w	8000598 <Send_Audio_to_USB>
 800020e:	bf00      	nop
 8000210:	2000017c 	.word	0x2000017c

08000214 <AMICAM1_AUDIO_IN_HalfTransfer_CallBack>:
  AudioProcessHalf();
 8000214:	f7ff bff6 	b.w	8000204 <AudioProcessHalf>

08000218 <AudioProcessFull>:
}

void AudioProcessFull(void)
{
	Send_Audio_to_USB((int16_t *)(PCM_Buffer + HALF_BUFSIZE), HALF_BUFSIZE);
 8000218:	4802      	ldr	r0, [pc, #8]	; (8000224 <AudioProcessFull+0xc>)
 800021a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800021e:	f000 b9bb 	b.w	8000598 <Send_Audio_to_USB>
 8000222:	bf00      	nop
 8000224:	2000047c 	.word	0x2000047c

08000228 <AMICAM1_AUDIO_IN_TransferComplete_CallBack>:
  AudioProcessFull();
 8000228:	f7ff bff6 	b.w	8000218 <AudioProcessFull>

0800022c <Init_Acquisition_Peripherals>:
  *       User can add his own code here to perform some DSP or audio analysis.
  * @param  none
  * @retval None
  */
void Init_Acquisition_Peripherals(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 800022c:	b508      	push	{r3, lr}
	MicParams.BitsPerSample = 16;
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <Init_Acquisition_Peripherals+0x30>)
 8000230:	2210      	movs	r2, #16
 8000232:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
    MicParams.ChannelsNbr = ChnlNbrIn;
    MicParams.Device = AUDIO_IN_MICS;
 8000236:	2203      	movs	r2, #3
    MicParams.ChannelsNbr = ChnlNbrIn;
 8000238:	f8c3 160c 	str.w	r1, [r3, #1548]	; 0x60c
    MicParams.Device = AUDIO_IN_MICS;
 800023c:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    MicParams.SampleRate = AudioFreq;
 8000240:	f8c3 0604 	str.w	r0, [r3, #1540]	; 0x604
    MicParams.Volume = AUDIO_VOLUME_INPUT;
 8000244:	2240      	movs	r2, #64	; 0x40

    if (AMICAM1_AUDIO_IN_Init(AUDIO_IN_INSTANCE, &MicParams) != BSP_ERROR_NONE)
 8000246:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
 800024a:	2000      	movs	r0, #0
    MicParams.Volume = AUDIO_VOLUME_INPUT;
 800024c:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    if (AMICAM1_AUDIO_IN_Init(AUDIO_IN_INSTANCE, &MicParams) != BSP_ERROR_NONE)
 8000250:	f000 fff4 	bl	800123c <AMICAM1_AUDIO_IN_Init>
 8000254:	b100      	cbz	r0, 8000258 <Init_Acquisition_Peripherals+0x2c>
}


void Error_Handler(void)
{
  while (1);
 8000256:	e7fe      	b.n	8000256 <Init_Acquisition_Peripherals+0x2a>
}
 8000258:	bd08      	pop	{r3, pc}
 800025a:	bf00      	nop
 800025c:	2000017c 	.word	0x2000017c

08000260 <Start_Acquisition>:
	if (AMICAM1_AUDIO_IN_Record(AUDIO_IN_INSTANCE, (uint8_t *) PCM_Buffer, AUDIO_IN_NOT_USED) != BSP_ERROR_NONE)
 8000260:	2200      	movs	r2, #0
{
 8000262:	b508      	push	{r3, lr}
	if (AMICAM1_AUDIO_IN_Record(AUDIO_IN_INSTANCE, (uint8_t *) PCM_Buffer, AUDIO_IN_NOT_USED) != BSP_ERROR_NONE)
 8000264:	4903      	ldr	r1, [pc, #12]	; (8000274 <Start_Acquisition+0x14>)
 8000266:	4610      	mov	r0, r2
 8000268:	f000 ff08 	bl	800107c <AMICAM1_AUDIO_IN_Record>
 800026c:	b100      	cbz	r0, 8000270 <Start_Acquisition+0x10>
  while (1);
 800026e:	e7fe      	b.n	800026e <Start_Acquisition+0xe>
}
 8000270:	bd08      	pop	{r3, pc}
 8000272:	bf00      	nop
 8000274:	2000017c 	.word	0x2000017c

08000278 <SystemClock_Config>:
  * @brief  System Clock Configuration
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027c:	2420      	movs	r4, #32
{
 800027e:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000280:	4622      	mov	r2, r4
 8000282:	2100      	movs	r1, #0
 8000284:	a80a      	add	r0, sp, #40	; 0x28
 8000286:	f006 f973 	bl	8006570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028a:	221c      	movs	r2, #28
 800028c:	2100      	movs	r1, #0
 800028e:	a801      	add	r0, sp, #4
 8000290:	f006 f96e 	bl	8006570 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000294:	2100      	movs	r1, #0
 8000296:	2250      	movs	r2, #80	; 0x50
 8000298:	a81a      	add	r0, sp, #104	; 0x68
 800029a:	f006 f969 	bl	8006570 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800029e:	4a31      	ldr	r2, [pc, #196]	; (8000364 <SystemClock_Config+0xec>)
 80002a0:	6813      	ldr	r3, [r2, #0]
 80002a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80002a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002aa:	6013      	str	r3, [r2, #0]
 80002ac:	6813      	ldr	r3, [r2, #0]
 80002ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSI
                                     | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80002ba:	2343      	movs	r3, #67	; 0x43
 80002bc:	e9cd 3708 	strd	r3, r7, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2340      	movs	r3, #64	; 0x40
 80002cc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV8;
 80002ce:	2370      	movs	r3, #112	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 32;
 80002d0:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d4:	2503      	movs	r5, #3
 80002d6:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002dc:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
 80002e0:	f04f 5800 	mov.w	r8, #536870912	; 0x20000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e4:	eb0d 0004 	add.w	r0, sp, r4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002e8:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ea:	e9cd 6513 	strd	r6, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ee:	e9cd 9818 	strd	r9, r8, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f002 fc9d 	bl	8002c30 <HAL_RCC_OscConfig>
  {
//    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 80002f6:	236f      	movs	r3, #111	; 0x6f
                                | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80002fa:	4629      	mov	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fc:	e9cd 3501 	strd	r3, r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000300:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000302:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000304:	e9cd 3406 	strd	r3, r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000308:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030c:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800030e:	f002 ff57 	bl	80031c0 <HAL_RCC_ClockConfig>
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS | RCC_PERIPHCLK_SAI1
                                             | RCC_PERIPHCLK_USB;

  PeriphClkInitStruct.PLLSAI1.PLLN = 86;
 8000312:	f44f 5005 	mov.w	r0, #8512	; 0x2140
 8000316:	2356      	movs	r3, #86	; 0x56
 8000318:	e9cd 031a 	strd	r0, r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV7;
 800031c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000320:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000322:	e9cd 391c 	strd	r3, r9, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000326:	e9cd 871e 	strd	r8, r7, [sp, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800032a:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800032e:	e9cd 642c 	strd	r6, r4, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000332:	f003 f935 	bl	80035a0 <HAL_RCCEx_PeriphCLKConfig>
  {
//    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000336:	f002 fc6b 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 800033a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000342:	f001 f985 	bl	8001650 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000346:	2004      	movs	r0, #4
 8000348:	f001 f996 	bl	8001678 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800034c:	4622      	mov	r2, r4
 800034e:	4621      	mov	r1, r4
 8000350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000354:	f001 f93c 	bl	80015d0 <HAL_NVIC_SetPriority>
  HAL_PWREx_EnableVddUSB();
 8000358:	f002 fb38 	bl	80029cc <HAL_PWREx_EnableVddUSB>
}
 800035c:	b02f      	add	sp, #188	; 0xbc
 800035e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000362:	bf00      	nop
 8000364:	58000400 	.word	0x58000400

08000368 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000368:	b508      	push	{r3, lr}
  /* STM32F4xx HAL library initialization:
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 800036a:	f001 f8f7 	bl	800155c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800036e:	f7ff ff83 	bl	8000278 <SystemClock_Config>
  /* Initialize USB descriptor basing on channels number and sampling frequency */
  USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS);
 8000372:	490e      	ldr	r1, [pc, #56]	; (80003ac <main+0x44>)
 8000374:	480e      	ldr	r0, [pc, #56]	; (80003b0 <main+0x48>)
 8000376:	2202      	movs	r2, #2
 8000378:	f005 fb1a 	bl	80059b0 <USBD_AUDIO_Init_Microphone_Descriptor>
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
 800037c:	2200      	movs	r2, #0
 800037e:	490d      	ldr	r1, [pc, #52]	; (80003b4 <main+0x4c>)
 8000380:	480b      	ldr	r0, [pc, #44]	; (80003b0 <main+0x48>)
 8000382:	f005 fcb9 	bl	8005cf8 <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
 8000386:	490c      	ldr	r1, [pc, #48]	; (80003b8 <main+0x50>)
 8000388:	4809      	ldr	r0, [pc, #36]	; (80003b0 <main+0x48>)
 800038a:	f005 fcc8 	bl	8005d1e <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO Class */
  USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
 800038e:	490b      	ldr	r1, [pc, #44]	; (80003bc <main+0x54>)
 8000390:	4807      	ldr	r0, [pc, #28]	; (80003b0 <main+0x48>)
 8000392:	f005 fb07 	bl	80059a4 <USBD_AUDIO_RegisterInterface>
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8000396:	4806      	ldr	r0, [pc, #24]	; (80003b0 <main+0x48>)
 8000398:	f005 fcda 	bl	8005d50 <USBD_Start>

  /* Start audio acquisition and streaming */
#ifdef DISABLE_USB_DRIVEN_ACQUISITION
  Init_Acquisition_Peripherals(AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS, 0);
 800039c:	4803      	ldr	r0, [pc, #12]	; (80003ac <main+0x44>)
 800039e:	2200      	movs	r2, #0
 80003a0:	2102      	movs	r1, #2
 80003a2:	f7ff ff43 	bl	800022c <Init_Acquisition_Peripherals>
  Start_Acquisition();
 80003a6:	f7ff ff5b 	bl	8000260 <Start_Acquisition>
#endif

  while (1)
 80003aa:	e7fe      	b.n	80003aa <main+0x42>
 80003ac:	0002ee00 	.word	0x0002ee00
 80003b0:	20000790 	.word	0x20000790
 80003b4:	20000040 	.word	0x20000040
 80003b8:	200000bc 	.word	0x200000bc
 80003bc:	20000004 	.word	0x20000004

080003c0 <BSP_SPI1_DeInit>:

  return ret;
}

int32_t BSP_SPI1_DeInit(void)
{
 80003c0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_BUS_FAILURE;
  if (SPI1InitCounter > 0U)
 80003c2:	4c0d      	ldr	r4, [pc, #52]	; (80003f8 <BSP_SPI1_DeInit+0x38>)
 80003c4:	6823      	ldr	r3, [r4, #0]
 80003c6:	b913      	cbnz	r3, 80003ce <BSP_SPI1_DeInit+0xe>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80003c8:	f06f 0007 	mvn.w	r0, #7
        ret = BSP_ERROR_NONE;
      }
    }
  }
  return ret;
}
 80003cc:	bd10      	pop	{r4, pc}
    SPI1InitCounter--;
 80003ce:	3b01      	subs	r3, #1
 80003d0:	6023      	str	r3, [r4, #0]
    if (SPI1InitCounter == 0U)
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d1f8      	bne.n	80003c8 <BSP_SPI1_DeInit+0x8>
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80003d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  /**SPI1 GPIO Configuration
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
  PA5     ------> SPI1_SCK
    */
  HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 80003da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003de:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80003e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003e4:	6613      	str	r3, [r2, #96]	; 0x60
 80003e6:	21e0      	movs	r1, #224	; 0xe0
 80003e8:	f001 fb9e 	bl	8001b28 <HAL_GPIO_DeInit>
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 80003ec:	1d20      	adds	r0, r4, #4
 80003ee:	f004 f918 	bl	8004622 <HAL_SPI_DeInit>
 80003f2:	2800      	cmp	r0, #0
 80003f4:	d0ea      	beq.n	80003cc <BSP_SPI1_DeInit+0xc>
 80003f6:	e7e7      	b.n	80003c8 <BSP_SPI1_DeInit+0x8>
 80003f8:	20000a6c 	.word	0x20000a6c

080003fc <BSP_SPI1_Send>:
{
 80003fc:	b508      	push	{r3, lr}
 80003fe:	460a      	mov	r2, r1
  if (HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000404:	4601      	mov	r1, r0
 8000406:	4804      	ldr	r0, [pc, #16]	; (8000418 <BSP_SPI1_Send+0x1c>)
 8000408:	f004 f921 	bl	800464e <HAL_SPI_Transmit>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800040c:	2800      	cmp	r0, #0
}
 800040e:	bf14      	ite	ne
 8000410:	f06f 0005 	mvnne.w	r0, #5
 8000414:	2000      	moveq	r0, #0
 8000416:	bd08      	pop	{r3, pc}
 8000418:	20000a70 	.word	0x20000a70

0800041c <BSP_SPI1_SendRecv>:
{
 800041c:	b507      	push	{r0, r1, r2, lr}
 800041e:	4613      	mov	r3, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000424:	9200      	str	r2, [sp, #0]
 8000426:	460a      	mov	r2, r1
 8000428:	4601      	mov	r1, r0
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <BSP_SPI1_SendRecv+0x24>)
 800042c:	f004 f9eb 	bl	8004806 <HAL_SPI_TransmitReceive>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000430:	2800      	cmp	r0, #0
}
 8000432:	bf14      	ite	ne
 8000434:	f06f 0005 	mvnne.w	r0, #5
 8000438:	2000      	moveq	r0, #0
 800043a:	b003      	add	sp, #12
 800043c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000440:	20000a70 	.word	0x20000a70

08000444 <BSP_GetTick>:
  return HAL_GetTick();
 8000444:	f001 b8a6 	b.w	8001594 <HAL_GetTick>

08000448 <MX_SPI1_Init>:
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000448:	490f      	ldr	r1, [pc, #60]	; (8000488 <MX_SPI1_Init+0x40>)
 800044a:	f44f 7282 	mov.w	r2, #260	; 0x104
{
 800044e:	b508      	push	{r3, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000450:	e9c0 1200 	strd	r1, r2, [r0]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800045a:	e9c0 2102 	strd	r2, r1, [r0, #8]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800045e:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8000462:	2118      	movs	r1, #24
 8000464:	e9c0 c106 	strd	ip, r1, [r0, #24]
  hspi->Init.CRCPolynomial = 7;
 8000468:	2107      	movs	r1, #7
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800046a:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800046e:	e9c0 2204 	strd	r2, r2, [r0, #16]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000472:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000476:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000478:	2208      	movs	r2, #8
 800047a:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800047c:	f004 f84c 	bl	8004518 <HAL_SPI_Init>
}
 8000480:	3800      	subs	r0, #0
 8000482:	bf18      	it	ne
 8000484:	2001      	movne	r0, #1
 8000486:	bd08      	pop	{r3, pc}
 8000488:	40013000 	.word	0x40013000

0800048c <BSP_SPI1_Init>:
{
 800048c:	b510      	push	{r4, lr}
  hspi1.Instance  = SPI1;
 800048e:	4c1d      	ldr	r4, [pc, #116]	; (8000504 <BSP_SPI1_Init+0x78>)
 8000490:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <BSP_SPI1_Init+0x7c>)
 8000492:	6063      	str	r3, [r4, #4]
  if (SPI1InitCounter == 0U)
 8000494:	6823      	ldr	r3, [r4, #0]
{
 8000496:	b088      	sub	sp, #32
  if (SPI1InitCounter == 0U)
 8000498:	b113      	cbz	r3, 80004a0 <BSP_SPI1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 800049a:	2000      	movs	r0, #0
}
 800049c:	b008      	add	sp, #32
 800049e:	bd10      	pop	{r4, pc}
    SPI1InitCounter++;
 80004a0:	2301      	movs	r3, #1
 80004a2:	f844 3b04 	str.w	r3, [r4], #4
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80004a6:	4620      	mov	r0, r4
 80004a8:	f004 fb73 	bl	8004b92 <HAL_SPI_GetState>
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d1f4      	bne.n	800049a <BSP_SPI1_Init+0xe>
  SET_BIT(RCC->APB2ENR, Periphs);
 80004b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004b4:	2103      	movs	r1, #3
 80004b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80004bc:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80004c4:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80004c6:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ca:	f042 0201 	orr.w	r2, r2, #1
 80004ce:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	9005      	str	r0, [sp, #20]
 80004d4:	f003 0301 	and.w	r3, r3, #1
 80004d8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80004da:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004dc:	22e0      	movs	r2, #224	; 0xe0
 80004de:	2302      	movs	r3, #2
 80004e0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004e4:	2305      	movs	r3, #5
 80004e6:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ee:	a903      	add	r1, sp, #12
 80004f0:	f001 fa64 	bl	80019bc <HAL_GPIO_Init>
        if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80004f4:	4620      	mov	r0, r4
 80004f6:	f7ff ffa7 	bl	8000448 <MX_SPI1_Init>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d0cd      	beq.n	800049a <BSP_SPI1_Init+0xe>
          ret = BSP_ERROR_BUS_FAILURE;
 80004fe:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8000502:	e7cb      	b.n	800049c <BSP_SPI1_Init+0x10>
 8000504:	20000a6c 	.word	0x20000a6c
 8000508:	40013000 	.word	0x40013000

0800050c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800050c:	4770      	bx	lr

0800050e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800050e:	e7fe      	b.n	800050e <HardFault_Handler>

08000510 <SVC_Handler>:
 8000510:	4770      	bx	lr

08000512 <DebugMon_Handler>:
 8000512:	4770      	bx	lr

08000514 <PendSV_Handler>:
 8000514:	4770      	bx	lr

08000516 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000516:	f001 b831 	b.w	800157c <HAL_IncTick>
	...

0800051c <USB_LP_IRQHandler>:
  * @param  None
  * @retval None
  */
void USB_LP_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd);
 800051c:	4801      	ldr	r0, [pc, #4]	; (8000524 <USB_LP_IRQHandler+0x8>)
 800051e:	f001 bc11 	b.w	8001d44 <HAL_PCD_IRQHandler>
 8000522:	bf00      	nop
 8000524:	20000ad8 	.word	0x20000ad8

08000528 <DMA1_Channel1_IRQHandler>:
  * @retval None
  */

void DMA1_Channel1_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInSai.hdmarx);
 8000528:	4b02      	ldr	r3, [pc, #8]	; (8000534 <DMA1_Channel1_IRQHandler+0xc>)
 800052a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800052e:	f001 b9fb 	b.w	8001928 <HAL_DMA_IRQHandler>
 8000532:	bf00      	nop
 8000534:	20000fac 	.word	0x20000fac

08000538 <Audio_Init>:
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return CCA02M2_AUDIO_IN_Init(CCA02M2_AUDIO_INSTANCE, &MicParams);
#else
  return BSP_ERROR_NONE;
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000538:	2000      	movs	r0, #0
 800053a:	4770      	bx	lr

0800053c <Audio_DeInit>:
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_DeInit(uint32_t options)
{
  return BSP_ERROR_NONE;
}
 800053c:	2000      	movs	r0, #0
 800053e:	4770      	bx	lr

08000540 <Audio_Record>:
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return CCA02M2_AUDIO_IN_Record(CCA02M2_AUDIO_INSTANCE, (uint8_t *) PDM_Buffer, 0);
#else
  return BSP_ERROR_NONE;
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 8000540:	2000      	movs	r0, #0
 8000542:	4770      	bx	lr

08000544 <Audio_MuteCtl>:
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_MuteCtl(uint8_t cmd)
{
  return BSP_ERROR_NONE;
}
 8000544:	2000      	movs	r0, #0
 8000546:	4770      	bx	lr

08000548 <Audio_VolumeCtl>:
{
 8000548:	b538      	push	{r3, r4, r5, lr}
 800054a:	4c0e      	ldr	r4, [pc, #56]	; (8000584 <Audio_VolumeCtl+0x3c>)
  uint32_t j = 0;
 800054c:	2100      	movs	r1, #0
  while (j < 64 && abs(Volume - vol_table[j]) > abs(Volume - vol_table[j + 1]))
 800054e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8000552:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 8000556:	1a82      	subs	r2, r0, r2
 8000558:	1ac3      	subs	r3, r0, r3
 800055a:	2a00      	cmp	r2, #0
 800055c:	bfb8      	it	lt
 800055e:	4252      	neglt	r2, r2
 8000560:	2b00      	cmp	r3, #0
 8000562:	bfb8      	it	lt
 8000564:	425b      	neglt	r3, r3
 8000566:	429a      	cmp	r2, r3
 8000568:	460d      	mov	r5, r1
 800056a:	f101 0101 	add.w	r1, r1, #1
 800056e:	dc01      	bgt.n	8000574 <Audio_VolumeCtl+0x2c>
 8000570:	4629      	mov	r1, r5
 8000572:	e001      	b.n	8000578 <Audio_VolumeCtl+0x30>
 8000574:	2940      	cmp	r1, #64	; 0x40
 8000576:	d1ea      	bne.n	800054e <Audio_VolumeCtl+0x6>
  return AMICAM1_AUDIO_IN_SetVolume(mic_instance, j);
 8000578:	2000      	movs	r0, #0
 800057a:	f000 fdc9 	bl	8001110 <AMICAM1_AUDIO_IN_SetVolume>
}
 800057e:	b240      	sxtb	r0, r0
 8000580:	bd38      	pop	{r3, r4, r5, pc}
 8000582:	bf00      	nop
 8000584:	08006794 	.word	0x08006794

08000588 <Audio_CommandMgr>:
 8000588:	2000      	movs	r0, #0
 800058a:	4770      	bx	lr

0800058c <Audio_Stop>:
 800058c:	2000      	movs	r0, #0
 800058e:	4770      	bx	lr

08000590 <Audio_Pause>:
 8000590:	2000      	movs	r0, #0
 8000592:	4770      	bx	lr

08000594 <Audio_Resume>:
 8000594:	2000      	movs	r0, #0
 8000596:	4770      	bx	lr

08000598 <Send_Audio_to_USB>:
  *       the function. E.g.: assuming a Sampling frequency of 16 KHz and 1 channel,
  *       you can pass 16 PCM samples if the function is called each millisecond,
  *       32 samples if called every 2 milliseconds and so on.
  */
void Send_Audio_to_USB(int16_t *audioData, uint16_t PCMSamples)
{
 8000598:	460a      	mov	r2, r1
  USBD_AUDIO_Data_Transfer(&hUSBDDevice, (int16_t *)audioData, PCMSamples);
 800059a:	4601      	mov	r1, r0
 800059c:	4801      	ldr	r0, [pc, #4]	; (80005a4 <Send_Audio_to_USB+0xc>)
 800059e:	f005 b98d 	b.w	80058bc <USBD_AUDIO_Data_Transfer>
 80005a2:	bf00      	nop
 80005a4:	20000790 	.word	0x20000790

080005a8 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 80005a8:	b570      	push	{r4, r5, r6, lr}
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005aa:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80005ae:	b088      	sub	sp, #32
 80005b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80005c0:	9b02      	ldr	r3, [sp, #8]
  /* Enable the GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c2:	2500      	movs	r5, #0
 80005c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005c8:	e9cd 3503 	strd	r3, r5, [sp, #12]
{
 80005cc:	4606      	mov	r6, r0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ce:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	a903      	add	r1, sp, #12
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f001 f9ef 	bl	80019bc <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80005de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80005e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005e4:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80005e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80005e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005ec:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80005ee:	9b01      	ldr	r3, [sp, #4]
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_CRS_IRQn);

#else

  if (hpcd->Init.low_power_enable == 1)
 80005f0:	69b3      	ldr	r3, [r6, #24]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d10e      	bne.n	8000614 <HAL_PCD_MspInit+0x6c>
  {
    /* Enable EXTI Line 18 for USB wakeup */
    __HAL_USB_WAKEUP_EXTI_ENABLE_IT();
 80005f6:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <HAL_PCD_MspInit+0x80>)
 80005f8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    /* USB Default Wakeup Interrupt */
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8000604:	2014      	movs	r0, #20
 8000606:	f001 f815 	bl	8001634 <HAL_NVIC_EnableIRQ>

    /* Enable USB Wake-up interrupt */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800060a:	462a      	mov	r2, r5
 800060c:	4629      	mov	r1, r5
 800060e:	2014      	movs	r0, #20
 8000610:	f000 ffde 	bl	80015d0 <HAL_NVIC_SetPriority>
  }

  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_LP_IRQn, 0x00, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	4611      	mov	r1, r2
 8000618:	2014      	movs	r0, #20
 800061a:	f000 ffd9 	bl	80015d0 <HAL_NVIC_SetPriority>

  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800061e:	2014      	movs	r0, #20
 8000620:	f001 f808 	bl	8001634 <HAL_NVIC_EnableIRQ>
#endif
}
 8000624:	b008      	add	sp, #32
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	58000800 	.word	0x58000800

0800062c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *) hpcd->Setup);
 800062c:	f500 712d 	add.w	r1, r0, #692	; 0x2b4
 8000630:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 8000634:	f005 bb9e 	b.w	8005d74 <USBD_LL_SetupStage>

08000638 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000638:	2328      	movs	r3, #40	; 0x28
 800063a:	fb03 0301 	mla	r3, r3, r1, r0
 800063e:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 8000642:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000646:	f005 bbc5 	b.w	8005dd4 <USBD_LL_DataOutStage>

0800064a <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800064a:	2328      	movs	r3, #40	; 0x28
 800064c:	fb03 0301 	mla	r3, r3, r1, r0
 8000650:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 8000654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000656:	f005 bbf2 	b.w	8005e3e <USBD_LL_DataInStage>

0800065a <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 800065a:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 800065e:	f005 bc8c 	b.w	8005f7a <USBD_LL_SOF>

08000662 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8000662:	b510      	push	{r4, lr}
 8000664:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8000666:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 800066a:	f005 fc3f 	bl	8005eec <USBD_LL_Reset>

  /* Set USB Current Speed */
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800066e:	f8d4 02f4 	ldr.w	r0, [r4, #756]	; 0x2f4
 8000672:	2101      	movs	r1, #1
}
 8000674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8000678:	f005 bc67 	b.w	8005f4a <USBD_LL_SetSpeed>

0800067c <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800067c:	b510      	push	{r4, lr}
 800067e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend(hpcd->pData);
 8000680:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 8000684:	f005 fc64 	bl	8005f50 <USBD_LL_Suspend>

  /* Enter in STOP mode */
  if (hpcd->Init.low_power_enable)
 8000688:	69a3      	ldr	r3, [r4, #24]
 800068a:	b12b      	cbz	r3, 8000698 <HAL_PCD_SuspendCallback+0x1c>
  {
    HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
  }
}
 800068c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000690:	2101      	movs	r1, #1
 8000692:	2000      	movs	r0, #0
 8000694:	f002 b988 	b.w	80029a8 <HAL_PWR_EnterSTOPMode>
}
 8000698:	bd10      	pop	{r4, pc}
	...

0800069c <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hpcd->Init.low_power_enable) && (remotewakeupon == 0))
 80006a0:	6983      	ldr	r3, [r0, #24]
 80006a2:	4f24      	ldr	r7, [pc, #144]	; (8000734 <HAL_PCD_ResumeCallback+0x98>)
{
 80006a4:	b09a      	sub	sp, #104	; 0x68
 80006a6:	4606      	mov	r6, r0
  if ((hpcd->Init.low_power_enable) && (remotewakeupon == 0))
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d03a      	beq.n	8000722 <HAL_PCD_ResumeCallback+0x86>
 80006ac:	683c      	ldr	r4, [r7, #0]
 80006ae:	2c00      	cmp	r4, #0
 80006b0:	d137      	bne.n	8000722 <HAL_PCD_ResumeCallback+0x86>
static void SystemClockConfig_STOP(void)
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE |
 80006b2:	2324      	movs	r3, #36	; 0x24
 80006b4:	9308      	str	r3, [sp, #32]
                                     RCC_OSCILLATORTYPE_MSI;

  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b6:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b8:	2228      	movs	r2, #40	; 0x28
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ba:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006bc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80006c0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c4:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c6:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80006ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	f04f 0802 	mov.w	r8, #2
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006d2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d4:	e9cd 1318 	strd	r1, r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d8:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006dc:	e9cd 8513 	strd	r8, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006e0:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e2:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006e4:	f002 faa4 	bl	8002c30 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2303      	movs	r3, #3
 80006ea:	200f      	movs	r0, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80006ec:	4641      	mov	r1, r8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	e9cd 0301 	strd	r0, r3, [sp, #4]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80006f2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80006fa:	f002 fd61 	bl	80031c0 <HAL_RCC_ClockConfig>


  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80006fe:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000700:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000702:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	e9cd 5412 	strd	r5, r4, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000708:	f002 fa92 	bl	8002c30 <HAL_RCC_OscConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800070c:	f002 fa80 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8000710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000714:	fbb0 f0f3 	udiv	r0, r0, r3
 8000718:	f000 ff9a 	bl	8001650 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800071c:	2004      	movs	r0, #4
 800071e:	f000 ffab 	bl	8001678 <HAL_SYSTICK_CLKSourceConfig>
  USBD_LL_Resume(hpcd->pData);
 8000722:	f8d6 02f4 	ldr.w	r0, [r6, #756]	; 0x2f4
 8000726:	f005 fc1d 	bl	8005f64 <USBD_LL_Resume>
  remotewakeupon = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
}
 800072e:	b01a      	add	sp, #104	; 0x68
 8000730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000734:	20000ad4 	.word	0x20000ad4

08000738 <USBD_LL_Init>:
{
 8000738:	b538      	push	{r3, r4, r5, lr}
 800073a:	4604      	mov	r4, r0
  hpcd.Init.dev_endpoints = 4;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <USBD_LL_Init+0x58>)
  hpcd.Instance = USB;
 800073e:	4815      	ldr	r0, [pc, #84]	; (8000794 <USBD_LL_Init+0x5c>)
  hpcd.Init.dev_endpoints = 4;
 8000740:	2204      	movs	r2, #4
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000742:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 4;
 8000744:	e9c0 3201 	strd	r3, r2, [r0, #4]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000748:	2202      	movs	r2, #2
 800074a:	e9c0 5204 	strd	r5, r2, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800074e:	60c2      	str	r2, [r0, #12]
  hpcd.Init.low_power_enable = 0;
 8000750:	61c5      	str	r5, [r0, #28]
  hpcd.pData = pdev;
 8000752:	f8c0 42f8 	str.w	r4, [r0, #760]	; 0x2f8
  pdev->pData = &hpcd;
 8000756:	3004      	adds	r0, #4
 8000758:	f8c4 02c8 	str.w	r0, [r4, #712]	; 0x2c8
  HAL_PCD_Init(&hpcd);
 800075c:	f001 fa67 	bl	8001c2e <HAL_PCD_Init>
  HAL_PCDEx_PMAConfig(pdev->pData, 0x00, PCD_SNG_BUF, 0x40);
 8000760:	462a      	mov	r2, r5
 8000762:	4629      	mov	r1, r5
 8000764:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8000768:	2340      	movs	r3, #64	; 0x40
 800076a:	f002 f8e1 	bl	8002930 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData, 0x80, PCD_SNG_BUF, 0x80);
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	462a      	mov	r2, r5
 8000772:	4619      	mov	r1, r3
 8000774:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8000778:	f002 f8da 	bl	8002930 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData, 0x81, PCD_DBL_BUF, 0x00C00120);
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <USBD_LL_Init+0x60>)
 800077e:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8000782:	2201      	movs	r2, #1
 8000784:	2181      	movs	r1, #129	; 0x81
 8000786:	f002 f8d3 	bl	8002930 <HAL_PCDEx_PMAConfig>
}
 800078a:	4628      	mov	r0, r5
 800078c:	bd38      	pop	{r3, r4, r5, pc}
 800078e:	bf00      	nop
 8000790:	40006800 	.word	0x40006800
 8000794:	20000ad4 	.word	0x20000ad4
 8000798:	00c00120 	.word	0x00c00120

0800079c <USBD_LL_Start>:
{
 800079c:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800079e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80007a2:	f001 faa5 	bl	8001cf0 <HAL_PCD_Start>
}
 80007a6:	2000      	movs	r0, #0
 80007a8:	bd08      	pop	{r3, pc}

080007aa <USBD_LL_OpenEP>:
{
 80007aa:	b510      	push	{r4, lr}
 80007ac:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80007ae:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 80007b2:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80007b4:	4623      	mov	r3, r4
 80007b6:	f001 ffb9 	bl	800272c <HAL_PCD_EP_Open>
}
 80007ba:	2000      	movs	r0, #0
 80007bc:	bd10      	pop	{r4, pc}

080007be <USBD_LL_CloseEP>:
{
 80007be:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80007c0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80007c4:	f001 ffe8 	bl	8002798 <HAL_PCD_EP_Close>
}
 80007c8:	2000      	movs	r0, #0
 80007ca:	bd08      	pop	{r3, pc}

080007cc <USBD_LL_FlushEP>:
{
 80007cc:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80007ce:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80007d2:	f002 f8ab 	bl	800292c <HAL_PCD_EP_Flush>
}
 80007d6:	2000      	movs	r0, #0
 80007d8:	bd08      	pop	{r3, pc}

080007da <USBD_LL_StallEP>:
{
 80007da:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80007dc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80007e0:	f002 f83c 	bl	800285c <HAL_PCD_EP_SetStall>
}
 80007e4:	2000      	movs	r0, #0
 80007e6:	bd08      	pop	{r3, pc}

080007e8 <USBD_LL_ClearStallEP>:
{
 80007e8:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80007ea:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80007ee:	f002 f867 	bl	80028c0 <HAL_PCD_EP_ClrStall>
}
 80007f2:	2000      	movs	r0, #0
 80007f4:	bd08      	pop	{r3, pc}

080007f6 <USBD_LL_IsStallEP>:
  if ((ep_addr & 0x80) == 0x80)
 80007f6:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80007fa:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if ((ep_addr & 0x80) == 0x80)
 80007fe:	f04f 0228 	mov.w	r2, #40	; 0x28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8000802:	bf1d      	ittte	ne
 8000804:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000808:	fb01 2102 	mlane	r1, r1, r2, r2
 800080c:	185b      	addne	r3, r3, r1
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800080e:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8000812:	bf14      	ite	ne
 8000814:	7998      	ldrbne	r0, [r3, #6]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8000816:	f891 016e 	ldrbeq.w	r0, [r1, #366]	; 0x16e
}
 800081a:	4770      	bx	lr

0800081c <USBD_LL_SetUSBAddress>:
{
 800081c:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800081e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8000822:	f001 fa7a 	bl	8001d1a <HAL_PCD_SetAddress>
}
 8000826:	2000      	movs	r0, #0
 8000828:	bd08      	pop	{r3, pc}

0800082a <USBD_LL_Transmit>:
{
 800082a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800082c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8000830:	f001 fff5 	bl	800281e <HAL_PCD_EP_Transmit>
}
 8000834:	2000      	movs	r0, #0
 8000836:	bd08      	pop	{r3, pc}

08000838 <USBD_LL_PrepareReceive>:
{
 8000838:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800083a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800083e:	f001 ffd8 	bl	80027f2 <HAL_PCD_EP_Receive>
}
 8000842:	2000      	movs	r0, #0
 8000844:	bd08      	pop	{r3, pc}
	...

08000848 <USBD_AUDIO_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 8000848:	2312      	movs	r3, #18
  return hUSBDDeviceDesc;
}
 800084a:	4801      	ldr	r0, [pc, #4]	; (8000850 <USBD_AUDIO_DeviceDescriptor+0x8>)
  *length = sizeof(hUSBDDeviceDesc);
 800084c:	800b      	strh	r3, [r1, #0]
}
 800084e:	4770      	bx	lr
 8000850:	20000028 	.word	0x20000028

08000854 <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8000854:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8000856:	4801      	ldr	r0, [pc, #4]	; (800085c <USBD_AUDIO_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8000858:	800b      	strh	r3, [r1, #0]
}
 800085a:	4770      	bx	lr
 800085c:	2000003c 	.word	0x2000003c

08000860 <USBD_AUDIO_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000860:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000862:	4c04      	ldr	r4, [pc, #16]	; (8000874 <USBD_AUDIO_ManufacturerStrDescriptor+0x14>)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <USBD_AUDIO_ManufacturerStrDescriptor+0x18>)
{
 8000866:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000868:	4621      	mov	r1, r4
 800086a:	f005 fddc 	bl	8006426 <USBD_GetString>
  return USBD_StrDesc;
}
 800086e:	4620      	mov	r0, r4
 8000870:	bd10      	pop	{r4, pc}
 8000872:	bf00      	nop
 8000874:	20000de4 	.word	0x20000de4
 8000878:	08006938 	.word	0x08006938

0800087c <USBD_AUDIO_ProductStrDescriptor>:
{
 800087c:	460a      	mov	r2, r1
 800087e:	b508      	push	{r3, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8000880:	4904      	ldr	r1, [pc, #16]	; (8000894 <USBD_AUDIO_ProductStrDescriptor+0x18>)
  if (speed == 0)
 8000882:	b920      	cbnz	r0, 800088e <USBD_AUDIO_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <USBD_AUDIO_ProductStrDescriptor+0x1c>)
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8000886:	f005 fdce 	bl	8006426 <USBD_GetString>
}
 800088a:	4802      	ldr	r0, [pc, #8]	; (8000894 <USBD_AUDIO_ProductStrDescriptor+0x18>)
 800088c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800088e:	4803      	ldr	r0, [pc, #12]	; (800089c <USBD_AUDIO_ProductStrDescriptor+0x20>)
 8000890:	e7f9      	b.n	8000886 <USBD_AUDIO_ProductStrDescriptor+0xa>
 8000892:	bf00      	nop
 8000894:	20000de4 	.word	0x20000de4
 8000898:	0800694b 	.word	0x0800694b
 800089c:	0800696c 	.word	0x0800696c

080008a0 <USBD_AUDIO_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80008a0:	460a      	mov	r2, r1
 80008a2:	b508      	push	{r3, lr}
  if (speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 80008a4:	4904      	ldr	r1, [pc, #16]	; (80008b8 <USBD_AUDIO_SerialStrDescriptor+0x18>)
  if (speed == USBD_SPEED_HIGH)
 80008a6:	b920      	cbnz	r0, 80008b2 <USBD_AUDIO_SerialStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <USBD_AUDIO_SerialStrDescriptor+0x1c>)
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 80008aa:	f005 fdbc 	bl	8006426 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 80008ae:	4802      	ldr	r0, [pc, #8]	; (80008b8 <USBD_AUDIO_SerialStrDescriptor+0x18>)
 80008b0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 80008b2:	4803      	ldr	r0, [pc, #12]	; (80008c0 <USBD_AUDIO_SerialStrDescriptor+0x20>)
 80008b4:	e7f9      	b.n	80008aa <USBD_AUDIO_SerialStrDescriptor+0xa>
 80008b6:	bf00      	nop
 80008b8:	20000de4 	.word	0x20000de4
 80008bc:	0800698d 	.word	0x0800698d
 80008c0:	0800699a 	.word	0x0800699a

080008c4 <USBD_AUDIO_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80008c4:	b510      	push	{r4, lr}
  if (speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80008c6:	4c04      	ldr	r4, [pc, #16]	; (80008d8 <USBD_AUDIO_ConfigStrDescriptor+0x14>)
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <USBD_AUDIO_ConfigStrDescriptor+0x18>)
{
 80008ca:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80008cc:	4621      	mov	r1, r4
 80008ce:	f005 fdaa 	bl	8006426 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80008d2:	4620      	mov	r0, r4
 80008d4:	bd10      	pop	{r4, pc}
 80008d6:	bf00      	nop
 80008d8:	20000de4 	.word	0x20000de4
 80008dc:	080069a7 	.word	0x080069a7

080008e0 <USBD_AUDIO_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80008e0:	b510      	push	{r4, lr}
  if (speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80008e2:	4c04      	ldr	r4, [pc, #16]	; (80008f4 <USBD_AUDIO_InterfaceStrDescriptor+0x14>)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <USBD_AUDIO_InterfaceStrDescriptor+0x18>)
{
 80008e6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80008e8:	4621      	mov	r1, r4
 80008ea:	f005 fd9c 	bl	8006426 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80008ee:	4620      	mov	r0, r4
 80008f0:	bd10      	pop	{r4, pc}
 80008f2:	bf00      	nop
 80008f4:	20000de4 	.word	0x20000de4
 80008f8:	080069b4 	.word	0x080069b4

080008fc <AD1974_ReadID>:
int32_t AD1974_ReadID(AD1974_Object_t *pObj, uint32_t *Id)
{
  UNUSED(Id);
  UNUSED(pObj);
  return AD1974_OK;
}
 80008fc:	2000      	movs	r0, #0
 80008fe:	4770      	bx	lr

08000900 <AD1974_SetVolume>:
  
  UNUSED(Volume);
  UNUSED(Cmd);
  UNUSED(pObj);
  return AD1974_NOT_IMPLEMENTED;
}
 8000900:	f06f 0001 	mvn.w	r0, #1
 8000904:	4770      	bx	lr

08000906 <AD1974_SetOutputMode>:
int32_t AD1974_SetOutputMode(AD1974_Object_t *pObj, uint8_t Output)
{
  UNUSED(pObj);
  UNUSED(Output);
  return AD1974_ERROR;
}
 8000906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800090a:	4770      	bx	lr

0800090c <AD1974_SetProtocol>:
int32_t AD1974_SetProtocol(AD1974_Object_t *pObj, uint32_t params)
{
  UNUSED(params);
  UNUSED(pObj);
  return AD1974_ERROR;
}
 800090c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000910:	4770      	bx	lr

08000912 <AD1974_GetProtocol>:
int32_t AD1974_GetProtocol(AD1974_Object_t *pObj, uint32_t* params)
{
  UNUSED(params);
  UNUSED(pObj);
  return AD1974_ERROR;
}
 8000912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000916:	4770      	bx	lr

08000918 <AD1974_GetVolume>:
  
  UNUSED(value);
  UNUSED(params);
  UNUSED(pObj);
  return AD1974_NOT_IMPLEMENTED;
}
 8000918:	f06f 0001 	mvn.w	r0, #1
 800091c:	4770      	bx	lr

0800091e <AD1974_GetFrequency>:

int32_t AD1974_GetFrequency(AD1974_Object_t *pObj)
{
  UNUSED(pObj);
  return AD1974_ERROR;
}
 800091e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000922:	4770      	bx	lr

08000924 <ReadRegWrap>:
* @param  pData the stored data pointer
* @param  Length the length
* @retval 0 in case of success, an error code otherwise
*/
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000924:	b410      	push	{r4}
  AD1974_Object_t *pObj = (AD1974_Object_t *)Handle;
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000926:	6944      	ldr	r4, [r0, #20]
 8000928:	7b00      	ldrb	r0, [r0, #12]
 800092a:	46a4      	mov	ip, r4
  
}
 800092c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000930:	4760      	bx	ip

08000932 <WriteRegWrap>:
* @param  pData the stored data pointer
* @param  Length the length
* @retval 0 in case of success, an error code otherwise
*/
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000932:	b410      	push	{r4}
  AD1974_Object_t *pObj = (AD1974_Object_t *)Handle;
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000934:	6904      	ldr	r4, [r0, #16]
 8000936:	7b00      	ldrb	r0, [r0, #12]
 8000938:	46a4      	mov	ip, r4
}
 800093a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800093e:	4760      	bx	ip

08000940 <AD1974_Reset>:
{
 8000940:	b538      	push	{r3, r4, r5, lr}
  if(ad1974_power_down_set(&(pObj->Ctx), 1) != AD1974_OK)
 8000942:	f100 051c 	add.w	r5, r0, #28
 8000946:	2101      	movs	r1, #1
{
 8000948:	4604      	mov	r4, r0
  if(ad1974_power_down_set(&(pObj->Ctx), 1) != AD1974_OK)
 800094a:	4628      	mov	r0, r5
 800094c:	f000 fa17 	bl	8000d7e <ad1974_power_down_set>
 8000950:	4601      	mov	r1, r0
 8000952:	b110      	cbz	r0, 800095a <AD1974_Reset+0x1a>
    return AD1974_ERROR;      
 8000954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000958:	bd38      	pop	{r3, r4, r5, pc}
  if(ad1974_power_down_set(&(pObj->Ctx), 0) != AD1974_OK)
 800095a:	4628      	mov	r0, r5
 800095c:	f000 fa0f 	bl	8000d7e <ad1974_power_down_set>
 8000960:	2800      	cmp	r0, #0
 8000962:	d1f7      	bne.n	8000954 <AD1974_Reset+0x14>
  pObj->is_initialized = 0;
 8000964:	8520      	strh	r0, [r4, #40]	; 0x28
  return AD1974_OK;
 8000966:	e7f7      	b.n	8000958 <AD1974_Reset+0x18>

08000968 <AD1974_SetMute>:
{
 8000968:	b513      	push	{r0, r1, r4, lr}
  if(ad1974_adc1l_mute_set(&(pObj->Ctx), (uint8_t)Cmd) != AD1974_OK)
 800096a:	f100 041c 	add.w	r4, r0, #28
 800096e:	b2c9      	uxtb	r1, r1
 8000970:	4620      	mov	r0, r4
 8000972:	9101      	str	r1, [sp, #4]
 8000974:	f000 fa31 	bl	8000dda <ad1974_adc1l_mute_set>
 8000978:	9901      	ldr	r1, [sp, #4]
 800097a:	b118      	cbz	r0, 8000984 <AD1974_SetMute+0x1c>
    return AD1974_ERROR;      
 800097c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000980:	b002      	add	sp, #8
 8000982:	bd10      	pop	{r4, pc}
  if(ad1974_adc1r_mute_set(&(pObj->Ctx), (uint8_t)Cmd) != AD1974_OK)
 8000984:	4620      	mov	r0, r4
 8000986:	9101      	str	r1, [sp, #4]
 8000988:	f000 fa3e 	bl	8000e08 <ad1974_adc1r_mute_set>
 800098c:	2800      	cmp	r0, #0
 800098e:	d1f5      	bne.n	800097c <AD1974_SetMute+0x14>
  if(ad1974_adc2l_mute_set(&(pObj->Ctx), (uint8_t)Cmd) != AD1974_OK)
 8000990:	9901      	ldr	r1, [sp, #4]
 8000992:	4620      	mov	r0, r4
 8000994:	f000 fa4f 	bl	8000e36 <ad1974_adc2l_mute_set>
 8000998:	2800      	cmp	r0, #0
 800099a:	d1ef      	bne.n	800097c <AD1974_SetMute+0x14>
  if(ad1974_adc2r_mute_set(&(pObj->Ctx),(uint8_t)Cmd) != AD1974_OK)
 800099c:	9901      	ldr	r1, [sp, #4]
 800099e:	4620      	mov	r0, r4
 80009a0:	f000 fa60 	bl	8000e64 <ad1974_adc2r_mute_set>
 80009a4:	3800      	subs	r0, #0
 80009a6:	bf18      	it	ne
 80009a8:	2001      	movne	r0, #1
 80009aa:	4240      	negs	r0, r0
 80009ac:	e7e8      	b.n	8000980 <AD1974_SetMute+0x18>

080009ae <AD1974_Play>:
{
 80009ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (pObj->is_initialized == 1U)
 80009b0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
  uint8_t lock = 0;
 80009b4:	2100      	movs	r1, #0
  if (pObj->is_initialized == 1U)
 80009b6:	2b01      	cmp	r3, #1
{
 80009b8:	4604      	mov	r4, r0
  uint8_t lock = 0;
 80009ba:	f88d 1007 	strb.w	r1, [sp, #7]
  if (pObj->is_initialized == 1U)
 80009be:	d003      	beq.n	80009c8 <AD1974_Play+0x1a>
  return AD1974_ERROR;
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80009c4:	b003      	add	sp, #12
 80009c6:	bd30      	pop	{r4, r5, pc}
    if(ad1974_pll_power_down_set(&(pObj->Ctx), 0) != AD1974_OK)
 80009c8:	f100 051c 	add.w	r5, r0, #28
 80009cc:	4628      	mov	r0, r5
 80009ce:	f000 f927 	bl	8000c20 <ad1974_pll_power_down_set>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d1f4      	bne.n	80009c0 <AD1974_Play+0x12>
    while (lock == 0U)
 80009d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80009da:	b16b      	cbz	r3, 80009f8 <AD1974_Play+0x4a>
    (void)ad1974_internal_mclk_enable_set(&(pObj->Ctx), 1);  
 80009dc:	2101      	movs	r1, #1
 80009de:	4628      	mov	r0, r5
 80009e0:	f000 f97a 	bl	8000cd8 <ad1974_internal_mclk_enable_set>
    if(AD1974_SetMute(pObj, 0) != AD1974_OK)
 80009e4:	2100      	movs	r1, #0
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff ffbe 	bl	8000968 <AD1974_SetMute>
 80009ec:	2800      	cmp	r0, #0
 80009ee:	d1e7      	bne.n	80009c0 <AD1974_Play+0x12>
    pObj->audio_is_enabled = 1U;
 80009f0:	2301      	movs	r3, #1
 80009f2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    return AD1974_OK;
 80009f6:	e7e5      	b.n	80009c4 <AD1974_Play+0x16>
      (void)ad1974_pll_lock_get(&(pObj->Ctx), &lock);
 80009f8:	f10d 0107 	add.w	r1, sp, #7
 80009fc:	4628      	mov	r0, r5
 80009fe:	f000 f9b0 	bl	8000d62 <ad1974_pll_lock_get>
 8000a02:	e7e8      	b.n	80009d6 <AD1974_Play+0x28>

08000a04 <AD1974_Pause>:
{
 8000a04:	b510      	push	{r4, lr}
  if (pObj->audio_is_enabled == 1U)
 8000a06:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
 8000a0a:	2901      	cmp	r1, #1
{
 8000a0c:	4604      	mov	r4, r0
  if (pObj->audio_is_enabled == 1U)
 8000a0e:	d002      	beq.n	8000a16 <AD1974_Pause+0x12>
    return AD1974_ERROR;  
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000a14:	bd10      	pop	{r4, pc}
    if(AD1974_SetMute(pObj, 1) != AD1974_OK)
 8000a16:	f7ff ffa7 	bl	8000968 <AD1974_SetMute>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	d1f8      	bne.n	8000a10 <AD1974_Pause+0xc>
    pObj->audio_is_enabled = 0U;
 8000a1e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  return AD1974_OK;
 8000a22:	e7f7      	b.n	8000a14 <AD1974_Pause+0x10>

08000a24 <AD1974_Resume>:
{
 8000a24:	b510      	push	{r4, lr}
  if (pObj->audio_is_enabled == 0U)
 8000a26:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
{
 8000a2a:	4604      	mov	r4, r0
  if (pObj->audio_is_enabled == 0U)
 8000a2c:	b111      	cbz	r1, 8000a34 <AD1974_Resume+0x10>
    return AD1974_ERROR;  
 8000a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000a32:	bd10      	pop	{r4, pc}
    if(AD1974_SetMute(pObj, 0) != AD1974_OK)
 8000a34:	f7ff ff98 	bl	8000968 <AD1974_SetMute>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d1f8      	bne.n	8000a2e <AD1974_Resume+0xa>
    pObj->audio_is_enabled = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  return AD1974_OK;
 8000a42:	e7f6      	b.n	8000a32 <AD1974_Resume+0xe>

08000a44 <AD1974_Stop>:
{
 8000a44:	b510      	push	{r4, lr}
  if (pObj->audio_is_enabled == 1U)
 8000a46:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
 8000a4a:	2901      	cmp	r1, #1
{
 8000a4c:	4604      	mov	r4, r0
  if (pObj->audio_is_enabled == 1U)
 8000a4e:	d002      	beq.n	8000a56 <AD1974_Stop+0x12>
    return AD1974_ERROR;  
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000a54:	bd10      	pop	{r4, pc}
    if(AD1974_SetMute(pObj, 1) != AD1974_OK)
 8000a56:	f7ff ff87 	bl	8000968 <AD1974_SetMute>
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	d1f8      	bne.n	8000a50 <AD1974_Stop+0xc>
    pObj->audio_is_enabled = 0;
 8000a5e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  return AD1974_OK;
 8000a62:	e7f7      	b.n	8000a54 <AD1974_Stop+0x10>

08000a64 <AD1974_SetResolution>:
  switch (BitRes)
 8000a64:	2914      	cmp	r1, #20
{
 8000a66:	b508      	push	{r3, lr}
    if(ad1974_word_width_set(&(pObj->Ctx), AD1974_WORD_WIDTH_16) != AD1974_OK)
 8000a68:	f100 001c 	add.w	r0, r0, #28
  switch (BitRes)
 8000a6c:	d003      	beq.n	8000a76 <AD1974_SetResolution+0x12>
 8000a6e:	2918      	cmp	r1, #24
 8000a70:	d109      	bne.n	8000a86 <AD1974_SetResolution+0x22>
    if(ad1974_word_width_set(&(pObj->Ctx), AD1974_WORD_WIDTH_24) != AD1974_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	e000      	b.n	8000a78 <AD1974_SetResolution+0x14>
    if(ad1974_word_width_set(&(pObj->Ctx), AD1974_WORD_WIDTH_20) != AD1974_OK)
 8000a76:	2101      	movs	r1, #1
    if(ad1974_word_width_set(&(pObj->Ctx), AD1974_WORD_WIDTH_16) != AD1974_OK)
 8000a78:	f000 fa22 	bl	8000ec0 <ad1974_word_width_set>
 8000a7c:	3800      	subs	r0, #0
 8000a7e:	bf18      	it	ne
 8000a80:	2001      	movne	r0, #1
 8000a82:	4240      	negs	r0, r0
}
 8000a84:	bd08      	pop	{r3, pc}
    if(ad1974_word_width_set(&(pObj->Ctx), AD1974_WORD_WIDTH_16) != AD1974_OK)
 8000a86:	2103      	movs	r1, #3
 8000a88:	e7f6      	b.n	8000a78 <AD1974_SetResolution+0x14>

08000a8a <AD1974_GetResolution>:
{
 8000a8a:	b513      	push	{r0, r1, r4, lr}
 8000a8c:	460c      	mov	r4, r1
  if(ad1974_word_width_get(&(pObj->Ctx), &temp) != AD1974_OK)
 8000a8e:	301c      	adds	r0, #28
 8000a90:	f10d 0107 	add.w	r1, sp, #7
 8000a94:	f000 fa2b 	bl	8000eee <ad1974_word_width_get>
 8000a98:	b920      	cbnz	r0, 8000aa4 <AD1974_GetResolution+0x1a>
  *BitRes = (uint32_t)temp;   
 8000a9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000a9e:	6023      	str	r3, [r4, #0]
}
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd10      	pop	{r4, pc}
    return AD1974_ERROR;      
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa8:	e7fa      	b.n	8000aa0 <AD1974_GetResolution+0x16>

08000aaa <AD1974_DeInit>:
{
 8000aaa:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 8000aac:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8000ab0:	2901      	cmp	r1, #1
{
 8000ab2:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8000ab4:	d106      	bne.n	8000ac4 <AD1974_DeInit+0x1a>
    if(ad1974_power_down_set(&(pObj->Ctx), 1) != AD1974_OK)
 8000ab6:	301c      	adds	r0, #28
 8000ab8:	f000 f961 	bl	8000d7e <ad1974_power_down_set>
 8000abc:	b920      	cbnz	r0, 8000ac8 <AD1974_DeInit+0x1e>
    pObj->is_initialized = 0;
 8000abe:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8000ac2:	bd10      	pop	{r4, pc}
  return AD1974_OK;
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e7fc      	b.n	8000ac2 <AD1974_DeInit+0x18>
      return AD1974_ERROR;      
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000acc:	e7f9      	b.n	8000ac2 <AD1974_DeInit+0x18>
	...

08000ad0 <AD1974_SetFrequency>:
  if (AudioFreq <= AUDIO_FREQUENCY_16K)
 8000ad0:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
{
 8000ad4:	b508      	push	{r3, lr}
  if (AudioFreq <= AUDIO_FREQUENCY_16K)
 8000ad6:	d808      	bhi.n	8000aea <AD1974_SetFrequency+0x1a>
    if(ad1974_out_rate_set(&(pObj->Ctx), AD1974_OUT_RATE_64_882_96) != AD1974_OK)
 8000ad8:	2101      	movs	r1, #1
    if(ad1974_out_rate_set(&(pObj->Ctx), AD1974_OUT_RATE_128_1764_192) != AD1974_OK)
 8000ada:	301c      	adds	r0, #28
 8000adc:	f000 f9d9 	bl	8000e92 <ad1974_out_rate_set>
 8000ae0:	3800      	subs	r0, #0
 8000ae2:	bf18      	it	ne
 8000ae4:	2001      	movne	r0, #1
 8000ae6:	4240      	negs	r0, r0
}
 8000ae8:	bd08      	pop	{r3, pc}
  else if (AudioFreq <= AUDIO_FREQUENCY_48K)
 8000aea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8000aee:	4299      	cmp	r1, r3
 8000af0:	d801      	bhi.n	8000af6 <AD1974_SetFrequency+0x26>
    if(ad1974_out_rate_set(&(pObj->Ctx), AD1974_OUT_RATE_32_441_48) != AD1974_OK)
 8000af2:	2100      	movs	r1, #0
 8000af4:	e7f1      	b.n	8000ada <AD1974_SetFrequency+0xa>
  else if(AudioFreq <= AUDIO_FREQUENCY_96K)
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <AD1974_SetFrequency+0x3c>)
 8000af8:	4299      	cmp	r1, r3
 8000afa:	d9ed      	bls.n	8000ad8 <AD1974_SetFrequency+0x8>
  else if(AudioFreq <= AUDIO_FREQUENCY_192K)
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <AD1974_SetFrequency+0x40>)
 8000afe:	4299      	cmp	r1, r3
 8000b00:	d801      	bhi.n	8000b06 <AD1974_SetFrequency+0x36>
    if(ad1974_out_rate_set(&(pObj->Ctx), AD1974_OUT_RATE_128_1764_192) != AD1974_OK)
 8000b02:	2102      	movs	r1, #2
 8000b04:	e7e9      	b.n	8000ada <AD1974_SetFrequency+0xa>
    return AD1974_ERROR;   
 8000b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b0a:	e7ed      	b.n	8000ae8 <AD1974_SetFrequency+0x18>
 8000b0c:	00017700 	.word	0x00017700
 8000b10:	0002ee00 	.word	0x0002ee00

08000b14 <AD1974_Init>:
{  
 8000b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (pObj->is_initialized == 0U)
 8000b18:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
{  
 8000b1c:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8000b1e:	bb51      	cbnz	r1, 8000b76 <AD1974_Init+0x62>
  uint32_t channel_number = pObj->ChannelNbr;
 8000b20:	e9d0 870b 	ldrd	r8, r7, [r0, #44]	; 0x2c
    if (sampling_freq <= AUDIO_FREQUENCY_16K)
 8000b24:	f5b8 5f7a 	cmp.w	r8, #16000	; 0x3e80
  uint32_t bit_resolution = pObj->bit_resolution;
 8000b28:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
      if(ad1974_auxport_clk_sel_set(&(pObj->Ctx), AD1974_AUX_CLOCK_MCLK) != AD1974_OK)
 8000b2c:	f100 051c 	add.w	r5, r0, #28
    if (sampling_freq <= AUDIO_FREQUENCY_16K)
 8000b30:	d826      	bhi.n	8000b80 <AD1974_Init+0x6c>
      if(ad1974_auxport_clk_sel_set(&(pObj->Ctx), AD1974_AUX_CLOCK_MCLK) != AD1974_OK)
 8000b32:	2101      	movs	r1, #1
 8000b34:	4628      	mov	r0, r5
 8000b36:	f000 f8e6 	bl	8000d06 <ad1974_auxport_clk_sel_set>
 8000b3a:	b118      	cbz	r0, 8000b44 <AD1974_Init+0x30>
        return AD1974_ERROR;      
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if(ad1974_adc_clk_sel_set(&(pObj->Ctx), AD1974_ADC_CLOCK_MCLK) != AD1974_OK)
 8000b44:	2101      	movs	r1, #1
 8000b46:	4628      	mov	r0, r5
 8000b48:	f000 f8f4 	bl	8000d34 <ad1974_adc_clk_sel_set>
      if(ad1974_pll_mclk_out_rate_set(&(pObj->Ctx), AD1974_PLL_MCLK_OUT_RATE_OFF) != AD1974_OK)
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d1f5      	bne.n	8000b3c <AD1974_Init+0x28>
    if(ad1974_hpf_enable_set(&(pObj->Ctx), 1) != AD1974_OK)
 8000b50:	2101      	movs	r1, #1
 8000b52:	4628      	mov	r0, r5
 8000b54:	f000 f92a 	bl	8000dac <ad1974_hpf_enable_set>
 8000b58:	4606      	mov	r6, r0
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	d1ee      	bne.n	8000b3c <AD1974_Init+0x28>
    (void)AD1974_SetResolution(pObj, bit_resolution);
 8000b5e:	4649      	mov	r1, r9
 8000b60:	4620      	mov	r0, r4
 8000b62:	f7ff ff7f 	bl	8000a64 <AD1974_SetResolution>
    (void)AD1974_SetFrequency(pObj, sampling_freq);    
 8000b66:	4641      	mov	r1, r8
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f7ff ffb1 	bl	8000ad0 <AD1974_SetFrequency>
    switch (channel_number)
 8000b6e:	2f02      	cmp	r7, #2
 8000b70:	d022      	beq.n	8000bb8 <AD1974_Init+0xa4>
 8000b72:	2f04      	cmp	r7, #4
 8000b74:	d025      	beq.n	8000bc2 <AD1974_Init+0xae>
  pObj->is_initialized = 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return AD1974_OK;
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	e7df      	b.n	8000b40 <AD1974_Init+0x2c>
      if(ad1974_internal_mclk_enable_set(&(pObj->Ctx), 0) != AD1974_OK)
 8000b80:	4628      	mov	r0, r5
 8000b82:	f000 f8a9 	bl	8000cd8 <ad1974_internal_mclk_enable_set>
 8000b86:	2800      	cmp	r0, #0
 8000b88:	d1d8      	bne.n	8000b3c <AD1974_Init+0x28>
      if(ad1974_pll_power_down_set(&(pObj->Ctx),1) != AD1974_OK)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	4628      	mov	r0, r5
 8000b8e:	f000 f847 	bl	8000c20 <ad1974_pll_power_down_set>
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d1d2      	bne.n	8000b3c <AD1974_Init+0x28>
      if(ad1974_pll_input_set(&(pObj->Ctx), AD1974_PLL_IN_ALRCLK) != AD1974_OK)
 8000b96:	2102      	movs	r1, #2
 8000b98:	4628      	mov	r0, r5
 8000b9a:	f000 f886 	bl	8000caa <ad1974_pll_input_set>
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d1cb      	bne.n	8000b3c <AD1974_Init+0x28>
      if(ad1974_pll_mclk_in_rate_set(&(pObj->Ctx), AD1974_PLL_MCLK_IN_RATE_INX256) != AD1974_OK)
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	f000 f852 	bl	8000c4e <ad1974_pll_mclk_in_rate_set>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d1c6      	bne.n	8000b3c <AD1974_Init+0x28>
      if(ad1974_pll_mclk_out_rate_set(&(pObj->Ctx), AD1974_PLL_MCLK_OUT_RATE_OFF) != AD1974_OK)
 8000bae:	2103      	movs	r1, #3
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	f000 f863 	bl	8000c7c <ad1974_pll_mclk_out_rate_set>
 8000bb6:	e7c9      	b.n	8000b4c <AD1974_Init+0x38>
      (void)ad1974_serial_format_set(&(pObj->Ctx), AD1974_SERIAL_FORMAT_STEREO);
 8000bb8:	4631      	mov	r1, r6
      (void)ad1974_serial_format_set(&(pObj->Ctx), AD1974_SERIAL_FORMAT_TDM);
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f000 f9b4 	bl	8000f28 <ad1974_serial_format_set>
      break;     
 8000bc0:	e7d9      	b.n	8000b76 <AD1974_Init+0x62>
      (void)ad1974_serial_format_set(&(pObj->Ctx), AD1974_SERIAL_FORMAT_TDM);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	e7f9      	b.n	8000bba <AD1974_Init+0xa6>
	...

08000bc8 <AD1974_RegisterBusIO>:
  if (pObj == NULL)
 8000bc8:	b1a0      	cbz	r0, 8000bf4 <AD1974_RegisterBusIO+0x2c>
    pObj->IO.DeInit    = pIO->DeInit;
 8000bca:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8000bcc:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000bce:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000bd0:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8000bd2:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 8000bd4:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8000bd6:	7b0a      	ldrb	r2, [r1, #12]
 8000bd8:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000bda:	690a      	ldr	r2, [r1, #16]
 8000bdc:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000bde:	694a      	ldr	r2, [r1, #20]
 8000be0:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000be2:	698a      	ldr	r2, [r1, #24]
 8000be4:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <AD1974_RegisterBusIO+0x34>)
 8000be8:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <AD1974_RegisterBusIO+0x38>)
 8000bec:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8000bee:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init != NULL)
 8000bf0:	b103      	cbz	r3, 8000bf4 <AD1974_RegisterBusIO+0x2c>
      ret = pObj->IO.Init();
 8000bf2:	4718      	bx	r3
}
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	08000925 	.word	0x08000925
 8000c00:	08000933 	.word	0x08000933

08000c04 <ad1974_read_reg>:
  * @param  uint8_t* data: pointer to buffer that store the data read
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t ad1974_read_reg(ad1974_ctx_t *ctx, uint8_t reg, uint8_t * data, uint16_t len)
{
 8000c04:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000c06:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8000c0a:	46a4      	mov	ip, r4
  return ret;
}
 8000c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000c10:	4760      	bx	ip

08000c12 <ad1974_write_reg>:
* @param  uint8_t* data: pointer to data to write in register reg
* @param  uint16_t len: number of consecutive register to write
*
*/
int32_t ad1974_write_reg(ad1974_ctx_t *ctx, uint8_t reg, uint8_t * data, uint16_t len)
{
 8000c12:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000c14:	6804      	ldr	r4, [r0, #0]
 8000c16:	6880      	ldr	r0, [r0, #8]
 8000c18:	46a4      	mov	ip, r4
  return ret;
}
 8000c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000c1e:	4760      	bx	ip

08000c20 <ad1974_pll_power_down_set>:
  * @param  ad1974_ctx_t *ctx: read / write interface definitions
  * @param  val: value to be written
  *
  */
int32_t ad1974_pll_power_down_set(ad1974_ctx_t *ctx, uint8_t val)
{
 8000c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_pll_clock_0_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000c22:	2301      	movs	r3, #1
{
 8000c24:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000c26:	aa01      	add	r2, sp, #4
 8000c28:	2100      	movs	r1, #0
{
 8000c2a:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000c2c:	f7ff ffea 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000c30:	b958      	cbnz	r0, 8000c4a <ad1974_pll_power_down_set+0x2a>
  {
    reg.pll_pd = (uint8_t)val;
 8000c32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000c36:	f365 0300 	bfi	r3, r5, #0, #1
 8000c3a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000c3e:	4601      	mov	r1, r0
 8000c40:	2301      	movs	r3, #1
 8000c42:	aa01      	add	r2, sp, #4
 8000c44:	4620      	mov	r0, r4
 8000c46:	f7ff ffe4 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;   
}
 8000c4a:	b003      	add	sp, #12
 8000c4c:	bd30      	pop	{r4, r5, pc}

08000c4e <ad1974_pll_mclk_in_rate_set>:
* @param  ad1974_ctx_t *ctx: read / write interface definitions
* @param  val: value to be written
*
*/
int32_t ad1974_pll_mclk_in_rate_set(ad1974_ctx_t *ctx, ad1974_pll_mclk_in_rate_t val)
{
 8000c4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_pll_clock_0_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000c50:	2301      	movs	r3, #1
{
 8000c52:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000c54:	aa01      	add	r2, sp, #4
 8000c56:	2100      	movs	r1, #0
{
 8000c58:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000c5a:	f7ff ffd3 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000c5e:	b958      	cbnz	r0, 8000c78 <ad1974_pll_mclk_in_rate_set+0x2a>
  {
    reg.mclki_xi = (uint8_t)val;
 8000c60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000c64:	f365 0342 	bfi	r3, r5, #1, #2
 8000c68:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000c6c:	4601      	mov	r1, r0
 8000c6e:	2301      	movs	r3, #1
 8000c70:	aa01      	add	r2, sp, #4
 8000c72:	4620      	mov	r0, r4
 8000c74:	f7ff ffcd 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;
}
 8000c78:	b003      	add	sp, #12
 8000c7a:	bd30      	pop	{r4, r5, pc}

08000c7c <ad1974_pll_mclk_out_rate_set>:
* @param  ad1974_ctx_t *ctx: read / write interface definitions
* @param  val: value to be written
*
*/
int32_t ad1974_pll_mclk_out_rate_set(ad1974_ctx_t *ctx, ad1974_pll_mclk_out_rate_t val)
{
 8000c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_pll_clock_0_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000c7e:	2301      	movs	r3, #1
{
 8000c80:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000c82:	aa01      	add	r2, sp, #4
 8000c84:	2100      	movs	r1, #0
{
 8000c86:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000c88:	f7ff ffbc 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000c8c:	b958      	cbnz	r0, 8000ca6 <ad1974_pll_mclk_out_rate_set+0x2a>
  {
    reg.mclko_xo = (uint8_t)val;
 8000c8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000c92:	f365 03c4 	bfi	r3, r5, #3, #2
 8000c96:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	aa01      	add	r2, sp, #4
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f7ff ffb6 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;
}
 8000ca6:	b003      	add	sp, #12
 8000ca8:	bd30      	pop	{r4, r5, pc}

08000caa <ad1974_pll_input_set>:
* @param  ad1974_ctx_t *ctx: read / write interface definitions
* @param  val: value to be written
*
*/
int32_t ad1974_pll_input_set(ad1974_ctx_t *ctx, ad1974_pll_input_t val)
{
 8000caa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_pll_clock_0_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000cac:	2301      	movs	r3, #1
{
 8000cae:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000cb0:	aa01      	add	r2, sp, #4
 8000cb2:	2100      	movs	r1, #0
{
 8000cb4:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000cb6:	f7ff ffa5 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000cba:	b958      	cbnz	r0, 8000cd4 <ad1974_pll_input_set+0x2a>
  {
    reg.pll_input = (uint8_t)val;
 8000cbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000cc0:	f365 1346 	bfi	r3, r5, #5, #2
 8000cc4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000cc8:	4601      	mov	r1, r0
 8000cca:	2301      	movs	r3, #1
 8000ccc:	aa01      	add	r2, sp, #4
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f7ff ff9f 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;
}
 8000cd4:	b003      	add	sp, #12
 8000cd6:	bd30      	pop	{r4, r5, pc}

08000cd8 <ad1974_internal_mclk_enable_set>:
  * @param  ad1974_ctx_t *ctx: read / write interface definitions
  * @param  val: value to be written
  *
  */
int32_t ad1974_internal_mclk_enable_set(ad1974_ctx_t *ctx, uint8_t val)
{
 8000cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_pll_clock_0_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000cda:	2301      	movs	r3, #1
{
 8000cdc:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000cde:	aa01      	add	r2, sp, #4
 8000ce0:	2100      	movs	r1, #0
{
 8000ce2:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000ce4:	f7ff ff8e 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000ce8:	b958      	cbnz	r0, 8000d02 <ad1974_internal_mclk_enable_set+0x2a>
  {
    reg.int_mclk_en = (uint8_t)val;
 8000cea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000cee:	f365 13c7 	bfi	r3, r5, #7, #1
 8000cf2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_PLL_CLOCK_0, (uint8_t*) &reg, 1);
 8000cf6:	4601      	mov	r1, r0
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	aa01      	add	r2, sp, #4
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f7ff ff88 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;   
}
 8000d02:	b003      	add	sp, #12
 8000d04:	bd30      	pop	{r4, r5, pc}

08000d06 <ad1974_auxport_clk_sel_set>:
* @param  ad1974_ctx_t *ctx: read / write interface definitions
* @param  val: value to be written
*
*/
int32_t ad1974_auxport_clk_sel_set(ad1974_ctx_t *ctx, ad1974_auxport_clk_sel_t val)
{
 8000d06:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_pll_clock_1_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_1, (uint8_t*) &reg, 1);
 8000d08:	2301      	movs	r3, #1
{
 8000d0a:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_1, (uint8_t*) &reg, 1);
 8000d0c:	aa01      	add	r2, sp, #4
 8000d0e:	4619      	mov	r1, r3
{
 8000d10:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_1, (uint8_t*) &reg, 1);
 8000d12:	f7ff ff77 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000d16:	b958      	cbnz	r0, 8000d30 <ad1974_auxport_clk_sel_set+0x2a>
  {
    reg.auxport_clk_src = (uint8_t)val;
 8000d18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000d1c:	f365 0300 	bfi	r3, r5, #0, #1
 8000d20:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_PLL_CLOCK_1, (uint8_t*) &reg, 1);
 8000d24:	2301      	movs	r3, #1
 8000d26:	aa01      	add	r2, sp, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f7ff ff71 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;
}
 8000d30:	b003      	add	sp, #12
 8000d32:	bd30      	pop	{r4, r5, pc}

08000d34 <ad1974_adc_clk_sel_set>:
* @param  ad1974_ctx_t *ctx: read / write interface definitions
* @param  val: value to be written
*
*/
int32_t ad1974_adc_clk_sel_set(ad1974_ctx_t *ctx, ad1974_adc_clk_sel_t_t val)
{
 8000d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_pll_clock_1_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_1, (uint8_t*) &reg, 1);
 8000d36:	2301      	movs	r3, #1
{
 8000d38:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_1, (uint8_t*) &reg, 1);
 8000d3a:	aa01      	add	r2, sp, #4
 8000d3c:	4619      	mov	r1, r3
{
 8000d3e:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_1, (uint8_t*) &reg, 1);
 8000d40:	f7ff ff60 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000d44:	b958      	cbnz	r0, 8000d5e <ad1974_adc_clk_sel_set+0x2a>
  {
    reg.adc_clk_src = (uint8_t)val;
 8000d46:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000d4a:	f365 0341 	bfi	r3, r5, #1, #1
 8000d4e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_PLL_CLOCK_1, (uint8_t*) &reg, 1);
 8000d52:	2301      	movs	r3, #1
 8000d54:	aa01      	add	r2, sp, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff ff5a 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;
}
 8000d5e:	b003      	add	sp, #12
 8000d60:	bd30      	pop	{r4, r5, pc}

08000d62 <ad1974_pll_lock_get>:
  * @param  ad1974_ctx_t *ctx: read / write interface definitions
  * @param  val: destination pointer
  *
  */
int32_t ad1974_pll_lock_get(ad1974_ctx_t *ctx, uint8_t *val)
{
 8000d62:	b513      	push	{r0, r1, r4, lr}
  ad1974_pll_clock_1_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_1, (uint8_t*) &reg, 1);
 8000d64:	2301      	movs	r3, #1
{
 8000d66:	460c      	mov	r4, r1
  ret = ad1974_read_reg(ctx, AD1974_PLL_CLOCK_1, (uint8_t*) &reg, 1);
 8000d68:	aa01      	add	r2, sp, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f7ff ff4a 	bl	8000c04 <ad1974_read_reg>
  *val = reg.pll_lock;
 8000d70:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000d74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000d78:	7023      	strb	r3, [r4, #0]
  
  return ret;  
}
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd10      	pop	{r4, pc}

08000d7e <ad1974_power_down_set>:
  * @param  ad1974_ctx_t *ctx: read / write interface definitions
  * @param  val: value to be written
  *
  */
int32_t ad1974_power_down_set(ad1974_ctx_t *ctx, uint8_t val)
{
 8000d7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_ADC_ctrl_0_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000d80:	2301      	movs	r3, #1
{
 8000d82:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000d84:	aa01      	add	r2, sp, #4
 8000d86:	210e      	movs	r1, #14
{
 8000d88:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000d8a:	f7ff ff3b 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000d8e:	b958      	cbnz	r0, 8000da8 <ad1974_power_down_set+0x2a>
  {
    reg.pd = (uint8_t)val;
 8000d90:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000d94:	f365 0300 	bfi	r3, r5, #0, #1
 8000d98:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000d9c:	aa01      	add	r2, sp, #4
 8000d9e:	2301      	movs	r3, #1
 8000da0:	210e      	movs	r1, #14
 8000da2:	4620      	mov	r0, r4
 8000da4:	f7ff ff35 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;   
}
 8000da8:	b003      	add	sp, #12
 8000daa:	bd30      	pop	{r4, r5, pc}

08000dac <ad1974_hpf_enable_set>:
  * @param  ad1974_ctx_t *ctx: read / write interface definitions
  * @param  val: value to be written
  *
  */
int32_t ad1974_hpf_enable_set(ad1974_ctx_t *ctx, uint8_t val)
{
 8000dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_ADC_ctrl_0_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000dae:	2301      	movs	r3, #1
{
 8000db0:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000db2:	aa01      	add	r2, sp, #4
 8000db4:	210e      	movs	r1, #14
{
 8000db6:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000db8:	f7ff ff24 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000dbc:	b958      	cbnz	r0, 8000dd6 <ad1974_hpf_enable_set+0x2a>
  {
    reg.hpf = (uint8_t)val;
 8000dbe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000dc2:	f365 0341 	bfi	r3, r5, #1, #1
 8000dc6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000dca:	aa01      	add	r2, sp, #4
 8000dcc:	2301      	movs	r3, #1
 8000dce:	210e      	movs	r1, #14
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f7ff ff1e 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;   
}
 8000dd6:	b003      	add	sp, #12
 8000dd8:	bd30      	pop	{r4, r5, pc}

08000dda <ad1974_adc1l_mute_set>:
  * @param  ad1974_ctx_t *ctx: read / write interface definitions
  * @param  val: value to be written
  *
  */
int32_t ad1974_adc1l_mute_set(ad1974_ctx_t *ctx, uint8_t val)
{
 8000dda:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_ADC_ctrl_0_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000ddc:	2301      	movs	r3, #1
{
 8000dde:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000de0:	aa01      	add	r2, sp, #4
 8000de2:	210e      	movs	r1, #14
{
 8000de4:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000de6:	f7ff ff0d 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000dea:	b958      	cbnz	r0, 8000e04 <ad1974_adc1l_mute_set+0x2a>
  {
    reg.adc1l_mute = (uint8_t)val;
 8000dec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000df0:	f365 0382 	bfi	r3, r5, #2, #1
 8000df4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000df8:	aa01      	add	r2, sp, #4
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	210e      	movs	r1, #14
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f7ff ff07 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;   
}
 8000e04:	b003      	add	sp, #12
 8000e06:	bd30      	pop	{r4, r5, pc}

08000e08 <ad1974_adc1r_mute_set>:
  * @param  ad1974_ctx_t *ctx: read / write interface definitions
  * @param  val: value to be written
  *
  */
int32_t ad1974_adc1r_mute_set(ad1974_ctx_t *ctx, uint8_t val)
{
 8000e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_ADC_ctrl_0_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e0a:	2301      	movs	r3, #1
{
 8000e0c:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e0e:	aa01      	add	r2, sp, #4
 8000e10:	210e      	movs	r1, #14
{
 8000e12:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e14:	f7ff fef6 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000e18:	b958      	cbnz	r0, 8000e32 <ad1974_adc1r_mute_set+0x2a>
  {
    reg.adc1r_mute = (uint8_t)val;
 8000e1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000e1e:	f365 03c3 	bfi	r3, r5, #3, #1
 8000e22:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e26:	aa01      	add	r2, sp, #4
 8000e28:	2301      	movs	r3, #1
 8000e2a:	210e      	movs	r1, #14
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f7ff fef0 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;   
}
 8000e32:	b003      	add	sp, #12
 8000e34:	bd30      	pop	{r4, r5, pc}

08000e36 <ad1974_adc2l_mute_set>:
  * @param  ad1974_ctx_t *ctx: read / write interface definitions
  * @param  val: value to be written
  *
  */
int32_t ad1974_adc2l_mute_set(ad1974_ctx_t *ctx, uint8_t val)
{
 8000e36:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_ADC_ctrl_0_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e38:	2301      	movs	r3, #1
{
 8000e3a:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e3c:	aa01      	add	r2, sp, #4
 8000e3e:	210e      	movs	r1, #14
{
 8000e40:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e42:	f7ff fedf 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000e46:	b958      	cbnz	r0, 8000e60 <ad1974_adc2l_mute_set+0x2a>
  {
    reg.adc2l_mute = (uint8_t)val;
 8000e48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000e4c:	f365 1304 	bfi	r3, r5, #4, #1
 8000e50:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e54:	aa01      	add	r2, sp, #4
 8000e56:	2301      	movs	r3, #1
 8000e58:	210e      	movs	r1, #14
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f7ff fed9 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;   
}
 8000e60:	b003      	add	sp, #12
 8000e62:	bd30      	pop	{r4, r5, pc}

08000e64 <ad1974_adc2r_mute_set>:
  * @param  ad1974_ctx_t *ctx: read / write interface definitions
  * @param  val: value to be written
  *
  */
int32_t ad1974_adc2r_mute_set(ad1974_ctx_t *ctx, uint8_t val)
{
 8000e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_ADC_ctrl_0_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e66:	2301      	movs	r3, #1
{
 8000e68:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e6a:	aa01      	add	r2, sp, #4
 8000e6c:	210e      	movs	r1, #14
{
 8000e6e:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e70:	f7ff fec8 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000e74:	b958      	cbnz	r0, 8000e8e <ad1974_adc2r_mute_set+0x2a>
  {
    reg.adc2r_mute = (uint8_t)val;
 8000e76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000e7a:	f365 1345 	bfi	r3, r5, #5, #1
 8000e7e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e82:	aa01      	add	r2, sp, #4
 8000e84:	2301      	movs	r3, #1
 8000e86:	210e      	movs	r1, #14
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff fec2 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;   
}
 8000e8e:	b003      	add	sp, #12
 8000e90:	bd30      	pop	{r4, r5, pc}

08000e92 <ad1974_out_rate_set>:
* @param  ad1974_ctx_t *ctx: read / write interface definitions
* @param  val: value to be written
*
*/
int32_t ad1974_out_rate_set(ad1974_ctx_t *ctx, ad1974_out_rate_t val)
{
 8000e92:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_ADC_ctrl_0_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e94:	2301      	movs	r3, #1
{
 8000e96:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e98:	aa01      	add	r2, sp, #4
 8000e9a:	210e      	movs	r1, #14
{
 8000e9c:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000e9e:	f7ff feb1 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000ea2:	b958      	cbnz	r0, 8000ebc <ad1974_out_rate_set+0x2a>
  {
    reg.out_sample_rate = (uint8_t)val;
 8000ea4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ea8:	f365 1387 	bfi	r3, r5, #6, #2
 8000eac:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_ADC_CTRL_0, (uint8_t*) &reg, 1);
 8000eb0:	aa01      	add	r2, sp, #4
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	210e      	movs	r1, #14
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f7ff feab 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;
}
 8000ebc:	b003      	add	sp, #12
 8000ebe:	bd30      	pop	{r4, r5, pc}

08000ec0 <ad1974_word_width_set>:
* @param  ad1974_ctx_t *ctx: read / write interface definitions
* @param  val: value to be written
*
*/
int32_t ad1974_word_width_set(ad1974_ctx_t *ctx, ad1974_word_width_t val)
{
 8000ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_ADC_ctrl_1_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_1, (uint8_t*) &reg, 1);
 8000ec2:	2301      	movs	r3, #1
{
 8000ec4:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_1, (uint8_t*) &reg, 1);
 8000ec6:	aa01      	add	r2, sp, #4
 8000ec8:	210f      	movs	r1, #15
{
 8000eca:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_1, (uint8_t*) &reg, 1);
 8000ecc:	f7ff fe9a 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000ed0:	b958      	cbnz	r0, 8000eea <ad1974_word_width_set+0x2a>
  {
    reg.word_width = (uint8_t)val;
 8000ed2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ed6:	f365 0301 	bfi	r3, r5, #0, #2
 8000eda:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_ADC_CTRL_1, (uint8_t*) &reg, 1);
 8000ede:	aa01      	add	r2, sp, #4
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f7ff fe94 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;
}
 8000eea:	b003      	add	sp, #12
 8000eec:	bd30      	pop	{r4, r5, pc}

08000eee <ad1974_word_width_get>:
  * @param  ad1974_ctx_t *ctx: read / write interface definitions
  * @param  val: destination pointer
  *
  */
int32_t ad1974_word_width_get(ad1974_ctx_t *ctx, ad1974_word_width_t *val)
{
 8000eee:	b513      	push	{r0, r1, r4, lr}
  ad1974_ADC_ctrl_1_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_1, (uint8_t*) &reg, 1);
 8000ef0:	2301      	movs	r3, #1
{
 8000ef2:	460c      	mov	r4, r1
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_1, (uint8_t*) &reg, 1);
 8000ef4:	aa01      	add	r2, sp, #4
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f7ff fe84 	bl	8000c04 <ad1974_read_reg>
  switch (reg.word_width)
 8000efc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d80d      	bhi.n	8000f24 <ad1974_word_width_get+0x36>
 8000f08:	e8df f003 	tbb	[pc, r3]
 8000f0c:	0a080602 	.word	0x0a080602
  {
  case AD1974_WORD_WIDTH_24:
    *val = AD1974_WORD_WIDTH_24;
 8000f10:	2300      	movs	r3, #0
    break; 
  case AD1974_WORD_WIDTH_16:
    *val = AD1974_WORD_WIDTH_16;
    break; 
  default:
    *val = AD1974_WORD_WIDTH_ND;
 8000f12:	7023      	strb	r3, [r4, #0]
    break;
  }  
  return ret;  
}
 8000f14:	b002      	add	sp, #8
 8000f16:	bd10      	pop	{r4, pc}
    *val = AD1974_WORD_WIDTH_20;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e7fa      	b.n	8000f12 <ad1974_word_width_get+0x24>
    *val = AD1974_WORD_WIDTH_RESERVED;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e7f8      	b.n	8000f12 <ad1974_word_width_get+0x24>
    *val = AD1974_WORD_WIDTH_16;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e7f6      	b.n	8000f12 <ad1974_word_width_get+0x24>
    *val = AD1974_WORD_WIDTH_ND;
 8000f24:	2304      	movs	r3, #4
 8000f26:	e7f4      	b.n	8000f12 <ad1974_word_width_get+0x24>

08000f28 <ad1974_serial_format_set>:
* @param  ad1974_ctx_t *ctx: read / write interface definitions
* @param  val: value to be written
*
*/
int32_t ad1974_serial_format_set(ad1974_ctx_t *ctx, ad1974_serial_format_t val)
{
 8000f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ad1974_ADC_ctrl_1_t reg;
  int32_t ret;
  
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_1, (uint8_t*) &reg, 1);
 8000f2a:	2301      	movs	r3, #1
{
 8000f2c:	460d      	mov	r5, r1
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_1, (uint8_t*) &reg, 1);
 8000f2e:	aa01      	add	r2, sp, #4
 8000f30:	210f      	movs	r1, #15
{
 8000f32:	4604      	mov	r4, r0
  ret = ad1974_read_reg(ctx, AD1974_ADC_CTRL_1, (uint8_t*) &reg, 1);
 8000f34:	f7ff fe66 	bl	8000c04 <ad1974_read_reg>
  
  if (ret == 0)
 8000f38:	b958      	cbnz	r0, 8000f52 <ad1974_serial_format_set+0x2a>
  {
    reg.serial_format = (uint8_t)val;
 8000f3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f3e:	f365 1346 	bfi	r3, r5, #5, #2
 8000f42:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ad1974_write_reg(ctx, AD1974_ADC_CTRL_1, (uint8_t*) &reg, 1);
 8000f46:	aa01      	add	r2, sp, #4
 8000f48:	2301      	movs	r3, #1
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	f7ff fe60 	bl	8000c12 <ad1974_write_reg>
  }
  
  return ret;
}
 8000f52:	b003      	add	sp, #12
 8000f54:	bd30      	pop	{r4, r5, pc}

08000f56 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000f5a:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f5e:	4302      	orrs	r2, r0
 8000f60:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	4018      	ands	r0, r3
 8000f66:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000f68:	9b01      	ldr	r3, [sp, #4]
}
 8000f6a:	b002      	add	sp, #8
 8000f6c:	4770      	bx	lr
	...

08000f70 <BSP_AD1974_WriteReg>:
  return ret;
  
}

static int32_t BSP_AD1974_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8000f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  {      
    aTxBuffer[0] = 0x08;             /* Write */
    aTxBuffer[1] = (uint8_t)(Reg + idx);        /*RegAddr*/
    aTxBuffer[2] = pdata[idx];        /*Data*/
    
    HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_RESET); 
 8000f74:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8000fc4 <BSP_AD1974_WriteReg+0x54>
{
 8000f78:	460e      	mov	r6, r1
 8000f7a:	4617      	mov	r7, r2
 8000f7c:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx ++)
 8000f7e:	2400      	movs	r4, #0
    aTxBuffer[0] = 0x08;             /* Write */
 8000f80:	f04f 0808 	mov.w	r8, #8
  for (idx = 0; idx < len; idx ++)
 8000f84:	42a5      	cmp	r5, r4
 8000f86:	d803      	bhi.n	8000f90 <BSP_AD1974_WriteReg+0x20>
      return ret;
    }
    
    HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_SET);   
  }
  return ret;
 8000f88:	2000      	movs	r0, #0
}
 8000f8a:	b003      	add	sp, #12
 8000f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    aTxBuffer[1] = (uint8_t)(Reg + idx);        /*RegAddr*/
 8000f90:	1933      	adds	r3, r6, r4
    HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_RESET); 
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <BSP_AD1974_WriteReg+0x54>)
    aTxBuffer[1] = (uint8_t)(Reg + idx);        /*RegAddr*/
 8000f94:	f88d 3005 	strb.w	r3, [sp, #5]
    HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_RESET); 
 8000f98:	2110      	movs	r1, #16
    aTxBuffer[2] = pdata[idx];        /*Data*/
 8000f9a:	5d3b      	ldrb	r3, [r7, r4]
    aTxBuffer[0] = 0x08;             /* Write */
 8000f9c:	f88d 8004 	strb.w	r8, [sp, #4]
    HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_RESET); 
 8000fa0:	2200      	movs	r2, #0
    aTxBuffer[2] = pdata[idx];        /*Data*/
 8000fa2:	f88d 3006 	strb.w	r3, [sp, #6]
    HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_RESET); 
 8000fa6:	f000 fe3d 	bl	8001c24 <HAL_GPIO_WritePin>
    ret = BSP_SPI1_Send(aTxBuffer, 3);
 8000faa:	2103      	movs	r1, #3
 8000fac:	a801      	add	r0, sp, #4
 8000fae:	f7ff fa25 	bl	80003fc <BSP_SPI1_Send>
    if(ret != BSP_ERROR_NONE)
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d1e9      	bne.n	8000f8a <BSP_AD1974_WriteReg+0x1a>
    HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_SET);   
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2110      	movs	r1, #16
 8000fba:	4648      	mov	r0, r9
 8000fbc:	f000 fe32 	bl	8001c24 <HAL_GPIO_WritePin>
  for (idx = 0; idx < len; idx ++)
 8000fc0:	3401      	adds	r4, #1
 8000fc2:	e7df      	b.n	8000f84 <BSP_AD1974_WriteReg+0x14>
 8000fc4:	48000800 	.word	0x48000800

08000fc8 <BSP_AD1974_ReadReg>:
{
 8000fc8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  for (idx = 0; idx < len; idx ++)
 8000fcc:	2400      	movs	r4, #0
    HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_RESET);
 8000fce:	f8df a054 	ldr.w	sl, [pc, #84]	; 8001024 <BSP_AD1974_ReadReg+0x5c>
{
 8000fd2:	460e      	mov	r6, r1
 8000fd4:	4617      	mov	r7, r2
 8000fd6:	461d      	mov	r5, r3
    aTxBuffer[0] = 0x09;             /* Read */
 8000fd8:	f04f 0809 	mov.w	r8, #9
    aTxBuffer[2] = 0x00;             /* Dummy */
 8000fdc:	46a1      	mov	r9, r4
  for (idx = 0; idx < len; idx ++)
 8000fde:	42a5      	cmp	r5, r4
 8000fe0:	d803      	bhi.n	8000fea <BSP_AD1974_ReadReg+0x22>
  return ret;
 8000fe2:	2000      	movs	r0, #0
}
 8000fe4:	b002      	add	sp, #8
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_RESET);
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <BSP_AD1974_ReadReg+0x5c>)
    aTxBuffer[0] = 0x09;             /* Read */
 8000fec:	f88d 8000 	strb.w	r8, [sp]
    aTxBuffer[1] = (uint8_t)(Reg + idx);        /* RegAddr */
 8000ff0:	1933      	adds	r3, r6, r4
    HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2110      	movs	r1, #16
    aTxBuffer[1] = (uint8_t)(Reg + idx);        /* RegAddr */
 8000ff6:	f88d 3001 	strb.w	r3, [sp, #1]
    aTxBuffer[2] = 0x00;             /* Dummy */
 8000ffa:	f88d 9002 	strb.w	r9, [sp, #2]
    HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_RESET);
 8000ffe:	f000 fe11 	bl	8001c24 <HAL_GPIO_WritePin>
    ret = BSP_SPI1_SendRecv(aTxBuffer, aRxBuffer, 3);
 8001002:	2203      	movs	r2, #3
 8001004:	a901      	add	r1, sp, #4
 8001006:	4668      	mov	r0, sp
 8001008:	f7ff fa08 	bl	800041c <BSP_SPI1_SendRecv>
    if(ret != BSP_ERROR_NONE)
 800100c:	2800      	cmp	r0, #0
 800100e:	d1e9      	bne.n	8000fe4 <BSP_AD1974_ReadReg+0x1c>
    HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_SET);   
 8001010:	2201      	movs	r2, #1
 8001012:	2110      	movs	r1, #16
 8001014:	4650      	mov	r0, sl
 8001016:	f000 fe05 	bl	8001c24 <HAL_GPIO_WritePin>
    pdata[idx] = aRxBuffer[2];    
 800101a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800101e:	553b      	strb	r3, [r7, r4]
  for (idx = 0; idx < len; idx ++)
 8001020:	3401      	adds	r4, #1
 8001022:	e7dc      	b.n	8000fde <BSP_AD1974_ReadReg+0x16>
 8001024:	48000800 	.word	0x48000800

08001028 <BSP_AD1974_DeInit>:
{  
 8001028:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN);
 800102a:	4804      	ldr	r0, [pc, #16]	; (800103c <BSP_AD1974_DeInit+0x14>)
 800102c:	2110      	movs	r1, #16
 800102e:	f000 fd7b 	bl	8001b28 <HAL_GPIO_DeInit>
}
 8001032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return AD1974_BUS_DeInit();
 8001036:	f7ff b9c3 	b.w	80003c0 <BSP_SPI1_DeInit>
 800103a:	bf00      	nop
 800103c:	48000800 	.word	0x48000800

08001040 <BSP_AD1974_Init>:
{  
 8001040:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001042:	2214      	movs	r2, #20
 8001044:	2100      	movs	r1, #0
 8001046:	a801      	add	r0, sp, #4
 8001048:	f005 fa92 	bl	8006570 <memset>
  AD1974_BUS_CS_CLK_ENABLE(); 
 800104c:	2004      	movs	r0, #4
 800104e:	f7ff ff82 	bl	8000f56 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2110      	movs	r1, #16
 8001054:	2201      	movs	r2, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001056:	2302      	movs	r3, #2
  HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_SET); 
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <BSP_AD1974_Init+0x38>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105a:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	e9cd 1201 	strd	r1, r2, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001060:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(AD1974_BUS_CS_PORT, AD1974_BUS_CS_PIN, GPIO_PIN_SET); 
 8001062:	f000 fddf 	bl	8001c24 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(AD1974_BUS_CS_PORT, &GPIO_InitStruct);
 8001066:	a901      	add	r1, sp, #4
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <BSP_AD1974_Init+0x38>)
 800106a:	f000 fca7 	bl	80019bc <HAL_GPIO_Init>
  return AD1974_BUS_Init();  
 800106e:	f7ff fa0d 	bl	800048c <BSP_SPI1_Init>
}
 8001072:	b007      	add	sp, #28
 8001074:	f85d fb04 	ldr.w	pc, [sp], #4
 8001078:	48000800 	.word	0x48000800

0800107c <AMICAM1_AUDIO_IN_Record>:
{
 800107c:	b570      	push	{r4, r5, r6, lr}
  amicam1_ctx[Instance].pBuff = (uint16_t*)pBuf;
 800107e:	4d22      	ldr	r5, [pc, #136]	; (8001108 <AMICAM1_AUDIO_IN_Record+0x8c>)
 8001080:	2364      	movs	r3, #100	; 0x64
 8001082:	fb03 5300 	mla	r3, r3, r0, r5
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8001086:	2801      	cmp	r0, #1
{
 8001088:	4606      	mov	r6, r0
  amicam1_ctx[Instance].pBuff = (uint16_t*)pBuf;
 800108a:	6159      	str	r1, [r3, #20]
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 800108c:	d838      	bhi.n	8001100 <AMICAM1_AUDIO_IN_Record+0x84>
  if ((amicam1_ctx[Instance].Device & (AUDIO_IN_ANALOG_MIC1 | AUDIO_IN_ANALOG_MIC2 | AUDIO_IN_ANALOG_MIC3| AUDIO_IN_ANALOG_MIC4)) != 0U)
 800108e:	685c      	ldr	r4, [r3, #4]
 8001090:	f014 040f 	ands.w	r4, r4, #15
 8001094:	d023      	beq.n	80010de <AMICAM1_AUDIO_IN_Record+0x62>
    if (amicam1_ctx[Instance].ChannelsNbr <= 2U)
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d827      	bhi.n	80010ec <AMICAM1_AUDIO_IN_Record+0x70>
      if(HAL_SAI_InitProtocol(&hAudioInSai, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BITEXTENDED, 2) != HAL_OK)
 800109c:	2302      	movs	r3, #2
 800109e:	2201      	movs	r2, #1
 80010a0:	2100      	movs	r1, #0
 80010a2:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 80010a6:	f003 f823 	bl	80040f0 <HAL_SAI_InitProtocol>
      if (HAL_SAI_Init(&hAudioInSai) != HAL_OK)
 80010aa:	1e04      	subs	r4, r0, #0
 80010ac:	bf18      	it	ne
 80010ae:	2401      	movne	r4, #1
    uint32_t total_size = (amicam1_ctx[AUDIO_IN_INSTANCE_ADC_EXT].Size * amicam1_ctx[AUDIO_IN_INSTANCE_ADC_EXT].ChannelsNbr * N_MS_PER_INTERRUPT );
 80010b0:	692b      	ldr	r3, [r5, #16]
 80010b2:	69ea      	ldr	r2, [r5, #28]
    if (HAL_OK != HAL_SAI_Receive_DMA(&hAudioInSai, (uint8_t *)SAI_internal_buff, (uint16_t)(total_size)))
 80010b4:	4915      	ldr	r1, [pc, #84]	; (800110c <AMICAM1_AUDIO_IN_Record+0x90>)
    uint32_t total_size = (amicam1_ctx[AUDIO_IN_INSTANCE_ADC_EXT].Size * amicam1_ctx[AUDIO_IN_INSTANCE_ADC_EXT].ChannelsNbr * N_MS_PER_INTERRUPT );
 80010b6:	435a      	muls	r2, r3
    if (HAL_OK != HAL_SAI_Receive_DMA(&hAudioInSai, (uint8_t *)SAI_internal_buff, (uint16_t)(total_size)))
 80010b8:	b292      	uxth	r2, r2
 80010ba:	f1a1 00a0 	sub.w	r0, r1, #160	; 0xa0
 80010be:	f003 f8ab 	bl	8004218 <HAL_SAI_Receive_DMA>
    if(AudioDrv->Play(CompObj) != 0)
 80010c2:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80010c6:	2800      	cmp	r0, #0
    if(AudioDrv->Play(CompObj) != 0)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f8d5 0160 	ldr.w	r0, [r5, #352]	; 0x160
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80010ce:	bf18      	it	ne
 80010d0:	f06f 0403 	mvnne.w	r4, #3
    if(AudioDrv->Play(CompObj) != 0)
 80010d4:	4798      	blx	r3
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80010d6:	2800      	cmp	r0, #0
 80010d8:	bf18      	it	ne
 80010da:	f06f 0404 	mvnne.w	r4, #4
  amicam1_ctx[Instance].State = AUDIO_IN_STATE_RECORDING;
 80010de:	2064      	movs	r0, #100	; 0x64
 80010e0:	fb00 5006 	mla	r0, r0, r6, r5
 80010e4:	2301      	movs	r3, #1
 80010e6:	6243      	str	r3, [r0, #36]	; 0x24
}
 80010e8:	4620      	mov	r0, r4
 80010ea:	bd70      	pop	{r4, r5, r6, pc}
    else if (amicam1_ctx[Instance].ChannelsNbr == 4U)
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d104      	bne.n	80010fa <AMICAM1_AUDIO_IN_Record+0x7e>
      if (HAL_SAI_Init(&hAudioInSai) != HAL_OK)
 80010f0:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 80010f4:	f002 ff0e 	bl	8003f14 <HAL_SAI_Init>
 80010f8:	e7d7      	b.n	80010aa <AMICAM1_AUDIO_IN_Record+0x2e>
      ret = BSP_ERROR_WRONG_PARAM;
 80010fa:	f06f 0401 	mvn.w	r4, #1
 80010fe:	e7d7      	b.n	80010b0 <AMICAM1_AUDIO_IN_Record+0x34>
    return BSP_ERROR_WRONG_PARAM;
 8001100:	f06f 0401 	mvn.w	r4, #1
 8001104:	e7f0      	b.n	80010e8 <AMICAM1_AUDIO_IN_Record+0x6c>
 8001106:	bf00      	nop
 8001108:	20000ee4 	.word	0x20000ee4
 800110c:	2000104c 	.word	0x2000104c

08001110 <AMICAM1_AUDIO_IN_SetVolume>:
  amicam1_ctx[Instance].Volume = Volume;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <AMICAM1_AUDIO_IN_SetVolume+0x18>)
 8001112:	2264      	movs	r2, #100	; 0x64
    ret = BSP_ERROR_WRONG_PARAM;
 8001114:	2802      	cmp	r0, #2
  amicam1_ctx[Instance].Volume = Volume;
 8001116:	fb02 3000 	mla	r0, r2, r0, r3
 800111a:	6201      	str	r1, [r0, #32]
}
 800111c:	bf2c      	ite	cs
 800111e:	f06f 0001 	mvncs.w	r0, #1
 8001122:	2000      	movcc	r0, #0
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000ee4 	.word	0x20000ee4

0800112c <HAL_SAI_ErrorCallback>:
}
 800112c:	4770      	bx	lr
	...

08001130 <HAL_SAI_RxCpltCallback>:
  uint32_t total_size_per_interrupt = (amicam1_ctx[AUDIO_IN_INSTANCE_ADC_EXT].Size * amicam1_ctx[AUDIO_IN_INSTANCE_ADC_EXT].ChannelsNbr * N_MS_PER_INTERRUPT ) / 2U;
 8001130:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_SAI_RxCpltCallback+0x30>)
{
 8001132:	b508      	push	{r3, lr}
  uint32_t total_size_per_interrupt = (amicam1_ctx[AUDIO_IN_INSTANCE_ADC_EXT].Size * amicam1_ctx[AUDIO_IN_INSTANCE_ADC_EXT].ChannelsNbr * N_MS_PER_INTERRUPT ) / 2U;
 8001134:	6911      	ldr	r1, [r2, #16]
 8001136:	69d3      	ldr	r3, [r2, #28]
 8001138:	434b      	muls	r3, r1
 800113a:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800113e:	6952      	ldr	r2, [r2, #20]
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	4419      	add	r1, r3
 8001146:	4413      	add	r3, r2
  for (idx = 0; idx < total_size_per_interrupt ;idx ++)
 8001148:	429a      	cmp	r2, r3
 800114a:	d103      	bne.n	8001154 <HAL_SAI_RxCpltCallback+0x24>
  AMICAM1_AUDIO_IN_TransferComplete_CallBack(0);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff f86b 	bl	8000228 <AMICAM1_AUDIO_IN_TransferComplete_CallBack>
}
 8001152:	bd08      	pop	{r3, pc}
    ((uint16_t *)(amicam1_ctx[AUDIO_IN_INSTANCE_ADC_EXT].pBuff))[idx] = SAI_internal_buff[total_size_per_interrupt + idx];
 8001154:	f831 0b02 	ldrh.w	r0, [r1], #2
 8001158:	f822 0b02 	strh.w	r0, [r2], #2
  for (idx = 0; idx < total_size_per_interrupt ;idx ++)
 800115c:	e7f4      	b.n	8001148 <HAL_SAI_RxCpltCallback+0x18>
 800115e:	bf00      	nop
 8001160:	20000ee4 	.word	0x20000ee4

08001164 <HAL_SAI_RxHalfCpltCallback>:
  for (idx = 0; idx < total_size_per_interrupt ;idx ++)
 8001164:	490a      	ldr	r1, [pc, #40]	; (8001190 <HAL_SAI_RxHalfCpltCallback+0x2c>)
{
 8001166:	b508      	push	{r3, lr}
 8001168:	694a      	ldr	r2, [r1, #20]
  uint32_t total_size_per_interrupt = (amicam1_ctx[AUDIO_IN_INSTANCE_ADC_EXT].Size * amicam1_ctx[AUDIO_IN_INSTANCE_ADC_EXT].ChannelsNbr * N_MS_PER_INTERRUPT ) / 2U;
 800116a:	69cb      	ldr	r3, [r1, #28]
 800116c:	f501 70b4 	add.w	r0, r1, #360	; 0x168
 8001170:	6909      	ldr	r1, [r1, #16]
 8001172:	434b      	muls	r3, r1
 8001174:	f023 0301 	bic.w	r3, r3, #1
 8001178:	4413      	add	r3, r2
  for (idx = 0; idx < total_size_per_interrupt ;idx ++)
 800117a:	429a      	cmp	r2, r3
 800117c:	d103      	bne.n	8001186 <HAL_SAI_RxHalfCpltCallback+0x22>
  AMICAM1_AUDIO_IN_HalfTransfer_CallBack(0);
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff f848 	bl	8000214 <AMICAM1_AUDIO_IN_HalfTransfer_CallBack>
}
 8001184:	bd08      	pop	{r3, pc}
    ((uint16_t *)(amicam1_ctx[0].pBuff))[idx]  = SAI_internal_buff[idx];
 8001186:	f830 1b02 	ldrh.w	r1, [r0], #2
 800118a:	f822 1b02 	strh.w	r1, [r2], #2
  for (idx = 0; idx < total_size_per_interrupt ;idx ++)
 800118e:	e7f4      	b.n	800117a <HAL_SAI_RxHalfCpltCallback+0x16>
 8001190:	20000ee4 	.word	0x20000ee4

08001194 <MX_SAI_ClockConfig>:
{
 8001194:	b500      	push	{lr}
 8001196:	b095      	sub	sp, #84	; 0x54
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 8001198:	4668      	mov	r0, sp
 800119a:	f002 fbd4 	bl	8003946 <HAL_RCCEx_GetPeriphCLKConfig>
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800119e:	2340      	movs	r3, #64	; 0x40
 80011a0:	9300      	str	r3, [sp, #0]
    RCC_ExCLKInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	930c      	str	r3, [sp, #48]	; 0x30
    RCC_ExCLKInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV7;
 80011a6:	2056      	movs	r0, #86	; 0x56
 80011a8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80011ac:	e9cd 0301 	strd	r0, r3, [sp, #4]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80011b0:	f04f 4cc0 	mov.w	ip, #1610612736	; 0x60000000
 80011b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if(HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct) != HAL_OK)
 80011b8:	4668      	mov	r0, sp
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80011ba:	e9cd c304 	strd	ip, r3, [sp, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct) != HAL_OK)
 80011be:	f002 f9ef 	bl	80035a0 <HAL_RCCEx_PeriphCLKConfig>
}
 80011c2:	3800      	subs	r0, #0
 80011c4:	bf18      	it	ne
 80011c6:	2001      	movne	r0, #1
 80011c8:	b015      	add	sp, #84	; 0x54
 80011ca:	f85d fb04 	ldr.w	pc, [sp], #4

080011ce <MX_SAI_Init>:
  __HAL_SAI_DISABLE(hsai);
 80011ce:	6802      	ldr	r2, [r0, #0]
 80011d0:	6813      	ldr	r3, [r2, #0]
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{ 
 80011d6:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(hsai);
 80011d8:	6013      	str	r3, [r2, #0]
  hsai->Init.Protocol =         MXConfig->Protocol;     
 80011da:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80011dc:	6443      	str	r3, [r0, #68]	; 0x44
  hsai->Init.DataSize =         MXConfig->DataSize;     
 80011de:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80011e0:	6483      	str	r3, [r0, #72]	; 0x48
  hsai->Init.FirstBit =         MXConfig->FirstBit;     
 80011e2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80011e4:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai->Init.ClockStrobing =    MXConfig->ClockStrobing;  
 80011e6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80011e8:	6503      	str	r3, [r0, #80]	; 0x50
  hsai->Init.AudioMode =        MXConfig->AudioMode;     
 80011ea:	680b      	ldr	r3, [r1, #0]
 80011ec:	6043      	str	r3, [r0, #4]
  hsai->Init.Synchro =          MXConfig->Synchro;       
 80011ee:	684b      	ldr	r3, [r1, #4]
 80011f0:	6083      	str	r3, [r0, #8]
  hsai->Init.OutputDrive =      MXConfig->OutputDrive;   
 80011f2:	68cb      	ldr	r3, [r1, #12]
 80011f4:	6143      	str	r3, [r0, #20]
  hsai->Init.NoDivider =        MXConfig->NoDivider;     
 80011f6:	690b      	ldr	r3, [r1, #16]
 80011f8:	6183      	str	r3, [r0, #24]
  hsai->Init.FIFOThreshold =    MXConfig->FIFOThreshold; 
 80011fa:	694b      	ldr	r3, [r1, #20]
 80011fc:	61c3      	str	r3, [r0, #28]
  hsai->Init.AudioFrequency =   MXConfig->AudioFrequency;
 80011fe:	698b      	ldr	r3, [r1, #24]
 8001200:	6203      	str	r3, [r0, #32]
  hsai->Init.SynchroExt =       MXConfig->SynchroExt;    
 8001202:	688b      	ldr	r3, [r1, #8]
 8001204:	60c3      	str	r3, [r0, #12]
  hsai->Init.MonoStereoMode =   MXConfig->MonoStereoMode;
 8001206:	6a0b      	ldr	r3, [r1, #32]
 8001208:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai->Init.CompandingMode =   MXConfig->CompandingMode;
 800120a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800120c:	6303      	str	r3, [r0, #48]	; 0x30
  hsai->FrameInit.ActiveFrameLength = 128;
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001214:	e9c0 3115 	strd	r3, r1, [r0, #84]	; 0x54
  hsai->FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001218:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  hsai->FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800121c:	2300      	movs	r3, #0
  hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800121e:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset = 0;
 8001222:	e9c0 4319 	strd	r4, r3, [r0, #100]	; 0x64
  hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8001226:	66c1      	str	r1, [r0, #108]	; 0x6c
  hsai->SlotInit.SlotActive = 0x0000000F;
 8001228:	2408      	movs	r4, #8
 800122a:	210f      	movs	r1, #15
 800122c:	e9c0 411c 	strd	r4, r1, [r0, #112]	; 0x70
  __HAL_SAI_ENABLE(hsai);
 8001230:	6811      	ldr	r1, [r2, #0]
 8001232:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001236:	6011      	str	r1, [r2, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	bd10      	pop	{r4, pc}

0800123c <AMICAM1_AUDIO_IN_Init>:
{
 800123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8001240:	2801      	cmp	r0, #1
{
 8001242:	b09b      	sub	sp, #108	; 0x6c
 8001244:	4680      	mov	r8, r0
  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8001246:	d904      	bls.n	8001252 <AMICAM1_AUDIO_IN_Init+0x16>
      return BSP_ERROR_WRONG_PARAM;
 8001248:	f06f 0001 	mvn.w	r0, #1
}
 800124c:	b01b      	add	sp, #108	; 0x6c
 800124e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  amicam1_ctx[Instance].Device          = AudioInit->Device;
 8001252:	4c8b      	ldr	r4, [pc, #556]	; (8001480 <AMICAM1_AUDIO_IN_Init+0x244>)
 8001254:	680a      	ldr	r2, [r1, #0]
  amicam1_ctx[Instance].SampleRate      = AudioInit->SampleRate; 
 8001256:	684b      	ldr	r3, [r1, #4]
  amicam1_ctx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8001258:	688d      	ldr	r5, [r1, #8]
  amicam1_ctx[Instance].Device          = AudioInit->Device;
 800125a:	2664      	movs	r6, #100	; 0x64
 800125c:	fb06 4600 	mla	r6, r6, r0, r4
  amicam1_ctx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;  
 8001260:	68c8      	ldr	r0, [r1, #12]
  amicam1_ctx[Instance].Volume          = AudioInit->Volume;
 8001262:	6909      	ldr	r1, [r1, #16]
  amicam1_ctx[Instance].SampleRate      = AudioInit->SampleRate; 
 8001264:	60b3      	str	r3, [r6, #8]
  amicam1_ctx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8001266:	60f5      	str	r5, [r6, #12]
  amicam1_ctx[Instance].Volume          = AudioInit->Volume;
 8001268:	6231      	str	r1, [r6, #32]
  amicam1_ctx[Instance].Size            = ((AudioInit->SampleRate)/1000U) * 2U * N_MS_PER_INTERRUPT; /* Per single mic, in samples */
 800126a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  amicam1_ctx[Instance].State           = AUDIO_IN_STATE_RESET;
 800126e:	2100      	movs	r1, #0
  amicam1_ctx[Instance].Size            = ((AudioInit->SampleRate)/1000U) * 2U * N_MS_PER_INTERRUPT; /* Per single mic, in samples */
 8001270:	fbb3 f3f5 	udiv	r3, r3, r5
  if ((amicam1_ctx[Instance].Device & (AUDIO_IN_ANALOG_MIC1 | AUDIO_IN_ANALOG_MIC2 | AUDIO_IN_ANALOG_MIC3| AUDIO_IN_ANALOG_MIC4)) != 0U)
 8001274:	0715      	lsls	r5, r2, #28
  amicam1_ctx[Instance].Size            = ((AudioInit->SampleRate)/1000U) * 2U * N_MS_PER_INTERRUPT; /* Per single mic, in samples */
 8001276:	ea4f 0343 	mov.w	r3, r3, lsl #1
  amicam1_ctx[Instance].Device          = AudioInit->Device;
 800127a:	6072      	str	r2, [r6, #4]
  amicam1_ctx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;  
 800127c:	6130      	str	r0, [r6, #16]
  amicam1_ctx[Instance].State           = AUDIO_IN_STATE_RESET;
 800127e:	6271      	str	r1, [r6, #36]	; 0x24
  amicam1_ctx[Instance].Size            = ((AudioInit->SampleRate)/1000U) * 2U * N_MS_PER_INTERRUPT; /* Per single mic, in samples */
 8001280:	61f3      	str	r3, [r6, #28]
  if ((amicam1_ctx[Instance].Device & (AUDIO_IN_ANALOG_MIC1 | AUDIO_IN_ANALOG_MIC2 | AUDIO_IN_ANALOG_MIC3| AUDIO_IN_ANALOG_MIC4)) != 0U)
 8001282:	d0e1      	beq.n	8001248 <AMICAM1_AUDIO_IN_Init+0xc>
    uint32_t mic_count = (amicam1_ctx[Instance].Device & AUDIO_IN_ANALOG_MIC1) + ((amicam1_ctx[Instance].Device & AUDIO_IN_ANALOG_MIC2) >> 1) + ((amicam1_ctx[Instance].Device & AUDIO_IN_ANALOG_MIC3) >> 2) + ((amicam1_ctx[Instance].Device & AUDIO_IN_ANALOG_MIC4) >> 3 ) + ((amicam1_ctx[Instance].Device & AUDIO_IN_ANALOG_MIC5) >> 4);
 8001284:	f3c2 0580 	ubfx	r5, r2, #2, #1
 8001288:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800128c:	442b      	add	r3, r5
 800128e:	f002 0501 	and.w	r5, r2, #1
 8001292:	442b      	add	r3, r5
 8001294:	f3c2 05c0 	ubfx	r5, r2, #3, #1
 8001298:	442b      	add	r3, r5
 800129a:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800129e:	4413      	add	r3, r2
    if ((mic_count != amicam1_ctx[Instance].ChannelsNbr))// || ((amicam1_ctx[Instance].ChannelsNbr != 2U) && (amicam1_ctx[Instance].ChannelsNbr != 4U)))
 80012a0:	4298      	cmp	r0, r3
 80012a2:	d1d1      	bne.n	8001248 <AMICAM1_AUDIO_IN_Init+0xc>
    if(MX_SAI_ClockConfig(&hAudioInSai, (uint32_t)NULL) != HAL_OK)
 80012a4:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
 80012a8:	4650      	mov	r0, sl
 80012aa:	f7ff ff73 	bl	8001194 <MX_SAI_ClockConfig>
 80012ae:	4605      	mov	r5, r0
 80012b0:	2800      	cmp	r0, #0
 80012b2:	f040 80e1 	bne.w	8001478 <AMICAM1_AUDIO_IN_Init+0x23c>
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012b6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
    hAudioInSai.Instance = AMICAM1_SAI_INSTANCE;
 80012ba:	4b72      	ldr	r3, [pc, #456]	; (8001484 <AMICAM1_AUDIO_IN_Init+0x248>)
 80012bc:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 80012c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	64bb      	str	r3, [r7, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80012d0:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->APB2ENR, Periphs);
 80012d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d8:	663b      	str	r3, [r7, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	9302      	str	r3, [sp, #8]
    AMICAM1_SD_CLK_ENABLE(); 
 80012e2:	2001      	movs	r0, #1
  (void)tmpreg;
 80012e4:	9b02      	ldr	r3, [sp, #8]
 80012e6:	f7ff fe36 	bl	8000f56 <LL_AHB2_GRP1_EnableClock>
    AMICAM1_SCK_CLK_ENABLE();
 80012ea:	2001      	movs	r0, #1
 80012ec:	f7ff fe33 	bl	8000f56 <LL_AHB2_GRP1_EnableClock>
    AMICAM1_MCLK_CLK_ENABLE();
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff fe30 	bl	8000f56 <LL_AHB2_GRP1_EnableClock>
    AMICAM1_FS_CLK_ENABLE();
 80012f6:	2001      	movs	r0, #1
 80012f8:	f7ff fe2d 	bl	8000f56 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80012fc:	f44f 6b80 	mov.w	fp, #1024	; 0x400
 8001300:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate   = AMICAM1_SD_AF;
 8001302:	f04f 090d 	mov.w	r9, #13
    GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8001306:	e9cd b30b 	strd	fp, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull        = GPIO_PULLDOWN;
 800130a:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(AMICAM1_SD_GPIO_PORT, &GPIO_InitStruct);
 800130c:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate   = AMICAM1_SD_AF;
 800130e:	2303      	movs	r3, #3
    HAL_GPIO_Init(AMICAM1_SD_GPIO_PORT, &GPIO_InitStruct);
 8001310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate   = AMICAM1_SD_AF;
 8001314:	e9cd 390e 	strd	r3, r9, [sp, #56]	; 0x38
    HAL_GPIO_Init(AMICAM1_SD_GPIO_PORT, &GPIO_InitStruct);
 8001318:	f000 fb50 	bl	80019bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin         = AMICAM1_SCK_PIN ;
 800131c:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(AMICAM1_SCK_GPIO_PORT, &GPIO_InitStruct);     
 8001320:	a90b      	add	r1, sp, #44	; 0x2c
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin         = AMICAM1_SCK_PIN ;
 8001326:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate   = AMICAM1_SCK_AF;
 8001328:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    HAL_GPIO_Init(AMICAM1_SCK_GPIO_PORT, &GPIO_InitStruct);     
 800132c:	f000 fb46 	bl	80019bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin         = AMICAM1_MCLK_PIN ;
 8001330:	2208      	movs	r2, #8
    HAL_GPIO_Init(AMICAM1_MCLK_GPIO_PORT, &GPIO_InitStruct);   
 8001332:	a90b      	add	r1, sp, #44	; 0x2c
 8001334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin         = AMICAM1_MCLK_PIN ;
 8001338:	920b      	str	r2, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate   = AMICAM1_MCLK_AF;
 800133a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    HAL_GPIO_Init(AMICAM1_MCLK_GPIO_PORT, &GPIO_InitStruct);   
 800133e:	f000 fb3d 	bl	80019bc <HAL_GPIO_Init>
    HAL_GPIO_Init(AMICAM1_FS_GPIO_PORT, &GPIO_InitStruct);    
 8001342:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin         = AMICAM1_FS_PIN ;
 8001344:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(AMICAM1_FS_GPIO_PORT, &GPIO_InitStruct);    
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin         = AMICAM1_FS_PIN ;
 800134c:	920b      	str	r2, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate   = AMICAM1_FS_AF;
 800134e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    HAL_GPIO_Init(AMICAM1_FS_GPIO_PORT, &GPIO_InitStruct);    
 8001352:	f000 fb33 	bl	80019bc <HAL_GPIO_Init>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001358:	f042 0201 	orr.w	r2, r2, #1
 800135c:	64ba      	str	r2, [r7, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800135e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    hdma_SaiRx_1.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001360:	f8c4 5d70 	str.w	r5, [r4, #3440]	; 0xd70
 8001364:	f002 0201 	and.w	r2, r2, #1
 8001368:	9201      	str	r2, [sp, #4]
    hdma_SaiRx_1.Init.PeriphDataAlignment = AMICAM1_DMAx_PERIPH_DATA_SIZE;
 800136a:	f44f 7380 	mov.w	r3, #256	; 0x100
    __HAL_LINKDMA(hsai, hdmarx, hdma_SaiRx_1);
 800136e:	f604 5768 	addw	r7, r4, #3432	; 0xd68
  (void)tmpreg;
 8001372:	9a01      	ldr	r2, [sp, #4]
    hdma_SaiRx_1.Init.PeriphDataAlignment = AMICAM1_DMAx_PERIPH_DATA_SIZE;
 8001374:	f8c4 3d7c 	str.w	r3, [r4, #3452]	; 0xd7c
    hdma_SaiRx_1.Instance                 = AMICAM1_DMAx_INSTANCE;  
 8001378:	4a43      	ldr	r2, [pc, #268]	; (8001488 <AMICAM1_AUDIO_IN_Init+0x24c>)
 800137a:	f8c4 2d68 	str.w	r2, [r4, #3432]	; 0xd68
    hdma_SaiRx_1.Init.Mode                = DMA_CIRCULAR;
 800137e:	2320      	movs	r3, #32
    hdma_SaiRx_1.Init.Request             = AMICAM1_DMAx_REQUEST;   
 8001380:	2212      	movs	r2, #18
    hdma_SaiRx_1.Init.Mode                = DMA_CIRCULAR;
 8001382:	f8c4 3d84 	str.w	r3, [r4, #3460]	; 0xd84
    hdma_SaiRx_1.Init.MemInc              = DMA_MINC_ENABLE;
 8001386:	f04f 0980 	mov.w	r9, #128	; 0x80
    hdma_SaiRx_1.Init.Priority            = DMA_PRIORITY_HIGH;      
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    (void)HAL_DMA_DeInit(&hdma_SaiRx_1);
 800138e:	4638      	mov	r0, r7
    hdma_SaiRx_1.Init.Priority            = DMA_PRIORITY_HIGH;      
 8001390:	f8c4 3d88 	str.w	r3, [r4, #3464]	; 0xd88
    hdma_SaiRx_1.Init.Request             = AMICAM1_DMAx_REQUEST;   
 8001394:	f8c4 2d6c 	str.w	r2, [r4, #3436]	; 0xd6c
    hdma_SaiRx_1.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001398:	f8c4 5d74 	str.w	r5, [r4, #3444]	; 0xd74
    hdma_SaiRx_1.Init.MemInc              = DMA_MINC_ENABLE;
 800139c:	f8c4 9d78 	str.w	r9, [r4, #3448]	; 0xd78
    hdma_SaiRx_1.Init.MemDataAlignment    = AMICAM1_DMAx_MEM_DATA_SIZE;
 80013a0:	f8c4 bd80 	str.w	fp, [r4, #3456]	; 0xd80
    __HAL_LINKDMA(hsai, hdmarx, hdma_SaiRx_1);
 80013a4:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
 80013a8:	f8c4 ad90 	str.w	sl, [r4, #3472]	; 0xd90
    (void)HAL_DMA_DeInit(&hdma_SaiRx_1);
 80013ac:	f000 fa22 	bl	80017f4 <HAL_DMA_DeInit>
    (void)HAL_DMA_Init(&hdma_SaiRx_1);      
 80013b0:	4638      	mov	r0, r7
 80013b2:	f000 f9ab 	bl	800170c <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AMICAM1_DMAx_IRQ, AMICAM1_AUDIO_IN_IT_PRIORITY, 0);
 80013b6:	462a      	mov	r2, r5
 80013b8:	2106      	movs	r1, #6
 80013ba:	200b      	movs	r0, #11
 80013bc:	f000 f908 	bl	80015d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AMICAM1_DMAx_IRQ);
 80013c0:	200b      	movs	r0, #11
 80013c2:	f000 f937 	bl	8001634 <HAL_NVIC_EnableIRQ>
    if (amicam1_ctx[Instance].ChannelsNbr == 1U)
 80013c6:	6933      	ldr	r3, [r6, #16]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d133      	bne.n	8001434 <AMICAM1_AUDIO_IN_Init+0x1f8>
      mx_sai_config.MonoStereoMode = SAI_MONOMODE;      
 80013cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d0:	9313      	str	r3, [sp, #76]	; 0x4c
      mx_sai_config.Synchro = SAI_ASYNCHRONOUS;
 80013d2:	2300      	movs	r3, #0
 80013d4:	2201      	movs	r2, #1
 80013d6:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
      mx_sai_config.AudioFrequency = amicam1_ctx[Instance].SampleRate;
 80013da:	2264      	movs	r2, #100	; 0x64
 80013dc:	fb02 4208 	mla	r2, r2, r8, r4
      mx_sai_config.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80013e0:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
      mx_sai_config.AudioFrequency = amicam1_ctx[Instance].SampleRate;
 80013e4:	6892      	ldr	r2, [r2, #8]
      mx_sai_config.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80013e6:	9310      	str	r3, [sp, #64]	; 0x40
      mx_sai_config.AudioFrequency = amicam1_ctx[Instance].SampleRate;
 80013e8:	9211      	str	r2, [sp, #68]	; 0x44
      mx_sai_config.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013ea:	930d      	str	r3, [sp, #52]	; 0x34
      mx_sai_config.CompandingMode = SAI_NOCOMPANDING;
 80013ec:	9314      	str	r3, [sp, #80]	; 0x50
    (void)MX_SAI_Init(&hAudioInSai, &mx_sai_config);
 80013ee:	a90b      	add	r1, sp, #44	; 0x2c
 80013f0:	4826      	ldr	r0, [pc, #152]	; (800148c <AMICAM1_AUDIO_IN_Init+0x250>)
  if(AD1974_RegisterBusIO (&AD1974Obj, &IOCtx) != AD1974_OK)
 80013f2:	4e27      	ldr	r6, [pc, #156]	; (8001490 <AMICAM1_AUDIO_IN_Init+0x254>)
    (void)MX_SAI_Init(&hAudioInSai, &mx_sai_config);
 80013f4:	f7ff feeb 	bl	80011ce <MX_SAI_Init>
  IOCtx.Address     = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f88d 301c 	strb.w	r3, [sp, #28]
  IOCtx.Init        = BSP_AD1974_Init;
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <AMICAM1_AUDIO_IN_Init+0x258>)
 8001400:	9304      	str	r3, [sp, #16]
  IOCtx.DeInit      = BSP_AD1974_DeInit;  
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <AMICAM1_AUDIO_IN_Init+0x25c>)
 8001404:	9305      	str	r3, [sp, #20]
  IOCtx.ReadReg     = BSP_AD1974_ReadReg;
 8001406:	4b25      	ldr	r3, [pc, #148]	; (800149c <AMICAM1_AUDIO_IN_Init+0x260>)
 8001408:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.WriteReg    = BSP_AD1974_WriteReg; 
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <AMICAM1_AUDIO_IN_Init+0x264>)
 800140c:	9308      	str	r3, [sp, #32]
  IOCtx.GetTick     = BSP_GetTick; 
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <AMICAM1_AUDIO_IN_Init+0x268>)
 8001410:	930a      	str	r3, [sp, #40]	; 0x28
  AD1974Obj.ChannelNbr = amicam1_ctx[0].ChannelsNbr;
 8001412:	6923      	ldr	r3, [r4, #16]
 8001414:	f8c4 3df8 	str.w	r3, [r4, #3576]	; 0xdf8
  if(AD1974_RegisterBusIO (&AD1974Obj, &IOCtx) != AD1974_OK)
 8001418:	a904      	add	r1, sp, #16
  AD1974Obj.SampleRate = amicam1_ctx[0].SampleRate;
 800141a:	68a3      	ldr	r3, [r4, #8]
 800141c:	f8c4 3df4 	str.w	r3, [r4, #3572]	; 0xdf4
  IOCtx.BusType     = AD1974_SPI_BUS;
 8001420:	2502      	movs	r5, #2
  if(AD1974_RegisterBusIO (&AD1974Obj, &IOCtx) != AD1974_OK)
 8001422:	4630      	mov	r0, r6
  IOCtx.BusType     = AD1974_SPI_BUS;
 8001424:	9506      	str	r5, [sp, #24]
  if(AD1974_RegisterBusIO (&AD1974Obj, &IOCtx) != AD1974_OK)
 8001426:	f7ff fbcf 	bl	8000bc8 <AD1974_RegisterBusIO>
 800142a:	4601      	mov	r1, r0
 800142c:	b1b8      	cbz	r0, 800145e <AMICAM1_AUDIO_IN_Init+0x222>
      return BSP_ERROR_COMPONENT_FAILURE;
 800142e:	f06f 0004 	mvn.w	r0, #4
 8001432:	e70b      	b.n	800124c <AMICAM1_AUDIO_IN_Init+0x10>
    if (amicam1_ctx[Instance].ChannelsNbr <= 2U)
 8001434:	2b02      	cmp	r3, #2
      mx_sai_config.MonoStereoMode = SAI_STEREOMODE;
 8001436:	9513      	str	r5, [sp, #76]	; 0x4c
    if (amicam1_ctx[Instance].ChannelsNbr <= 2U)
 8001438:	d9cb      	bls.n	80013d2 <AMICAM1_AUDIO_IN_Init+0x196>
    else if (amicam1_ctx[Instance].ChannelsNbr == 4U)
 800143a:	2b04      	cmp	r3, #4
 800143c:	f47f af04 	bne.w	8001248 <AMICAM1_AUDIO_IN_Init+0xc>
      mx_sai_config.AudioMode = SAI_MODEMASTER_RX;
 8001440:	2301      	movs	r3, #1
 8001442:	930b      	str	r3, [sp, #44]	; 0x2c
      mx_sai_config.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001444:	9319      	str	r3, [sp, #100]	; 0x64
      mx_sai_config.AudioFrequency = amicam1_ctx[Instance].SampleRate;
 8001446:	68b3      	ldr	r3, [r6, #8]
      mx_sai_config.Protocol = SAI_FREE_PROTOCOL;
 8001448:	9516      	str	r5, [sp, #88]	; 0x58
      mx_sai_config.FirstBit = SAI_FIRSTBIT_MSB;
 800144a:	e9cd 9517 	strd	r9, r5, [sp, #92]	; 0x5c
      mx_sai_config.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800144e:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
      mx_sai_config.Synchro = SAI_ASYNCHRONOUS;
 8001452:	950c      	str	r5, [sp, #48]	; 0x30
      mx_sai_config.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001454:	9510      	str	r5, [sp, #64]	; 0x40
      mx_sai_config.AudioFrequency = amicam1_ctx[Instance].SampleRate;
 8001456:	9311      	str	r3, [sp, #68]	; 0x44
      mx_sai_config.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001458:	950d      	str	r5, [sp, #52]	; 0x34
      mx_sai_config.CompandingMode = SAI_NOCOMPANDING;      
 800145a:	9514      	str	r5, [sp, #80]	; 0x50
 800145c:	e7c7      	b.n	80013ee <AMICAM1_AUDIO_IN_Init+0x1b2>
    AudioDrv = (AUDIO_Drv_t *) (void *) &AD1974_AUDIO_Driver;
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <AMICAM1_AUDIO_IN_Init+0x26c>)
  if (AudioDrv->Init(CompObj, NULL) != AD1974_OK)
 8001460:	4630      	mov	r0, r6
    CompObj = &AD1974Obj;    
 8001462:	e9c4 6358 	strd	r6, r3, [r4, #352]	; 0x160
  if (AudioDrv->Init(CompObj, NULL) != AD1974_OK)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4798      	blx	r3
 800146a:	2800      	cmp	r0, #0
 800146c:	d1df      	bne.n	800142e <AMICAM1_AUDIO_IN_Init+0x1f2>
  amicam1_ctx[Instance].State = AUDIO_IN_STATE_STOP; 
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	fb03 4408 	mla	r4, r3, r8, r4
 8001474:	6265      	str	r5, [r4, #36]	; 0x24
  return BSP_ERROR_NONE; 
 8001476:	e6e9      	b.n	800124c <AMICAM1_AUDIO_IN_Init+0x10>
      return BSP_ERROR_CLOCK_FAILURE;
 8001478:	f06f 0008 	mvn.w	r0, #8
 800147c:	e6e6      	b.n	800124c <AMICAM1_AUDIO_IN_Init+0x10>
 800147e:	bf00      	nop
 8001480:	20000ee4 	.word	0x20000ee4
 8001484:	40015404 	.word	0x40015404
 8001488:	40020008 	.word	0x40020008
 800148c:	20000fac 	.word	0x20000fac
 8001490:	20001cac 	.word	0x20001cac
 8001494:	08001041 	.word	0x08001041
 8001498:	08001029 	.word	0x08001029
 800149c:	08000fc9 	.word	0x08000fc9
 80014a0:	08000f71 	.word	0x08000f71
 80014a4:	08000445 	.word	0x08000445
 80014a8:	2000005c 	.word	0x2000005c

080014ac <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <SystemInit+0x60>)
 80014ae:	2100      	movs	r1, #0
 80014b0:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80014b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014b6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80014ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014c2:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	f042 0201 	orr.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 80014ce:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80014d2:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 80014da:	4462      	add	r2, ip
 80014dc:	4002      	ands	r2, r0
 80014de:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80014e0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80014e4:	f022 0205 	bic.w	r2, r2, #5
 80014e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80014ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <SystemInit+0x64>)
 80014fa:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80014fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001504:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001506:	6199      	str	r1, [r3, #24]
}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	22041000 	.word	0x22041000

08001514 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{   
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001514:	4770      	bx	lr
	...

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 800151a:	4e0f      	ldr	r6, [pc, #60]	; (8001558 <HAL_InitTick+0x40>)
 800151c:	7833      	ldrb	r3, [r6, #0]
{
 800151e:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001520:	b90b      	cbnz	r3, 8001526 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001522:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001524:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001526:	f001 fb73 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 800152a:	7832      	ldrb	r2, [r6, #0]
 800152c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001530:	fbb3 f3f2 	udiv	r3, r3, r2
 8001534:	fbb0 f0f3 	udiv	r0, r0, r3
 8001538:	f000 f88a 	bl	8001650 <HAL_SYSTICK_Config>
 800153c:	4604      	mov	r4, r0
 800153e:	2800      	cmp	r0, #0
 8001540:	d1ef      	bne.n	8001522 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	2d0f      	cmp	r5, #15
 8001544:	d8ed      	bhi.n	8001522 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001546:	4602      	mov	r2, r0
 8001548:	4629      	mov	r1, r5
 800154a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800154e:	f000 f83f 	bl	80015d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001552:	6075      	str	r5, [r6, #4]
 8001554:	4620      	mov	r0, r4
 8001556:	e7e5      	b.n	8001524 <HAL_InitTick+0xc>
 8001558:	200000a8 	.word	0x200000a8

0800155c <HAL_Init>:
{
 800155c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155e:	2003      	movs	r0, #3
 8001560:	f000 f824 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001564:	200f      	movs	r0, #15
 8001566:	f7ff ffd7 	bl	8001518 <HAL_InitTick>
 800156a:	4604      	mov	r4, r0
 800156c:	b918      	cbnz	r0, 8001576 <HAL_Init+0x1a>
    HAL_MspInit();
 800156e:	f7ff ffd1 	bl	8001514 <HAL_MspInit>
}
 8001572:	4620      	mov	r0, r4
 8001574:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001576:	2401      	movs	r4, #1
 8001578:	e7fb      	b.n	8001572 <HAL_Init+0x16>
	...

0800157c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <HAL_IncTick+0x10>)
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_IncTick+0x14>)
 8001580:	6811      	ldr	r1, [r2, #0]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	440b      	add	r3, r1
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20001ce8 	.word	0x20001ce8
 8001590:	200000a8 	.word	0x200000a8

08001594 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001594:	4b01      	ldr	r3, [pc, #4]	; (800159c <HAL_GetTick+0x8>)
 8001596:	6818      	ldr	r0, [r3, #0]
}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20001ce8 	.word	0x20001ce8

080015a0 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80015a0:	4b01      	ldr	r3, [pc, #4]	; (80015a8 <HAL_GetTickPrio+0x8>)
 80015a2:	6858      	ldr	r0, [r3, #4]
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200000a8 	.word	0x200000a8

080015ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015ae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015bc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80015c8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d2:	b530      	push	{r4, r5, lr}
 80015d4:	68dc      	ldr	r4, [r3, #12]
 80015d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015da:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	2d04      	cmp	r5, #4
 80015e2:	bf28      	it	cs
 80015e4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ec:	bf8c      	ite	hi
 80015ee:	3c03      	subhi	r4, #3
 80015f0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f2:	fa03 f505 	lsl.w	r5, r3, r5
 80015f6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fa:	40a3      	lsls	r3, r4
 80015fc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001602:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	bfac      	ite	ge
 800160a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	4a08      	ldrlt	r2, [pc, #32]	; (8001630 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	bfb8      	it	lt
 8001616:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	b2db      	uxtb	r3, r3
 800161c:	bfaa      	itet	ge
 800161e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001628:	bd30      	pop	{r4, r5, pc}
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00
 8001630:	e000ed14 	.word	0xe000ed14

08001634 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001634:	2800      	cmp	r0, #0
 8001636:	db08      	blt.n	800164a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001638:	2301      	movs	r3, #1
 800163a:	0942      	lsrs	r2, r0, #5
 800163c:	f000 001f 	and.w	r0, r0, #31
 8001640:	fa03 f000 	lsl.w	r0, r3, r0
 8001644:	4b01      	ldr	r3, [pc, #4]	; (800164c <HAL_NVIC_EnableIRQ+0x18>)
 8001646:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100

08001650 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	3801      	subs	r0, #1
 8001652:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001656:	d20b      	bcs.n	8001670 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001658:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	4a05      	ldr	r2, [pc, #20]	; (8001674 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	21f0      	movs	r1, #240	; 0xf0
 8001662:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001666:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001668:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001670:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001678:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800167c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	bf0c      	ite	eq
 8001682:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001686:	f022 0204 	bicne.w	r2, r2, #4
 800168a:	611a      	str	r2, [r3, #16]
  }
}
 800168c:	4770      	bx	lr

0800168e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800168e:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001690:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 8001694:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001696:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001698:	b114      	cbz	r4, 80016a0 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800169a:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 800169e:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016a0:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
 80016a4:	f004 061c 	and.w	r6, r4, #28
 80016a8:	2401      	movs	r4, #1
 80016aa:	40b4      	lsls	r4, r6
 80016ac:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016ae:	6804      	ldr	r4, [r0, #0]
 80016b0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016b2:	6883      	ldr	r3, [r0, #8]
 80016b4:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016b6:	bf0b      	itete	eq
 80016b8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80016ba:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80016bc:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80016be:	60e2      	strne	r2, [r4, #12]
  }
}
 80016c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080016c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80016c6:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80016c8:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016ca:	4293      	cmp	r3, r2
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80016cc:	bf88      	it	hi
 80016ce:	4a0d      	ldrhi	r2, [pc, #52]	; (8001704 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80016d0:	f021 0103 	bic.w	r1, r1, #3
 80016d4:	bf9a      	itte	ls
 80016d6:	f101 4280 	addls.w	r2, r1, #1073741824	; 0x40000000
 80016da:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80016de:	1852      	addhi	r2, r2, r1
 80016e0:	6482      	str	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016e2:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016e4:	4a08      	ldr	r2, [pc, #32]	; (8001708 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80016e6:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016e8:	3b08      	subs	r3, #8
 80016ea:	2214      	movs	r2, #20
 80016ec:	fbb3 f3f2 	udiv	r3, r3, r2

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016f0:	2201      	movs	r2, #1
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	6503      	str	r3, [r0, #80]	; 0x50
}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40020407 	.word	0x40020407
 8001704:	4002081c 	.word	0x4002081c
 8001708:	40020880 	.word	0x40020880

0800170c <HAL_DMA_Init>:
{
 800170c:	b510      	push	{r4, lr}
  if (hdma == NULL)
 800170e:	2800      	cmp	r0, #0
 8001710:	d05f      	beq.n	80017d2 <HAL_DMA_Init+0xc6>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001712:	6801      	ldr	r1, [r0, #0]
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_DMA_Init+0xcc>)
 8001716:	4299      	cmp	r1, r3
 8001718:	f04f 0414 	mov.w	r4, #20
 800171c:	d84c      	bhi.n	80017b8 <HAL_DMA_Init+0xac>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800171e:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <HAL_DMA_Init+0xd0>)
 8001720:	440a      	add	r2, r1
 8001722:	fbb2 f2f4 	udiv	r2, r2, r4
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800172a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 800172e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001730:	2302      	movs	r3, #2
 8001732:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8001736:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
 800173a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173c:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 800173e:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001740:	4323      	orrs	r3, r4
 8001742:	6944      	ldr	r4, [r0, #20]
 8001744:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001746:	6984      	ldr	r4, [r0, #24]
 8001748:	4323      	orrs	r3, r4
 800174a:	69c4      	ldr	r4, [r0, #28]
 800174c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800174e:	6a04      	ldr	r4, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001750:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001754:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001758:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800175a:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 800175c:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800175e:	f7ff ffb1 	bl	80016c4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001762:	6883      	ldr	r3, [r0, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001764:	6c81      	ldr	r1, [r0, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800176a:	bf04      	itt	eq
 800176c:	2300      	moveq	r3, #0
 800176e:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001770:	6842      	ldr	r2, [r0, #4]
 8001772:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8001776:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001778:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800177c:	3a01      	subs	r2, #1
 800177e:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001780:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001782:	d821      	bhi.n	80017c8 <HAL_DMA_Init+0xbc>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001784:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <HAL_DMA_Init+0xd4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001786:	4917      	ldr	r1, [pc, #92]	; (80017e4 <HAL_DMA_Init+0xd8>)
 8001788:	6581      	str	r1, [r0, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800178a:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800178c:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800178e:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001790:	2101      	movs	r1, #1
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800179a:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800179c:	6542      	str	r2, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800179e:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017a0:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017a2:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <HAL_DMA_Init+0xdc>)
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a6:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80017a8:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017aa:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80017ac:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80017b0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 80017b4:	4618      	mov	r0, r3
}
 80017b6:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_DMA_Init+0xe0>)
 80017ba:	440b      	add	r3, r1
 80017bc:	fbb3 f3f4 	udiv	r3, r3, r4
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_DMA_Init+0xe4>)
 80017c6:	e7b2      	b.n	800172e <HAL_DMA_Init+0x22>
    hdma->DMAmuxRequestGen = 0U;
 80017c8:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80017ca:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017ce:	65c3      	str	r3, [r0, #92]	; 0x5c
 80017d0:	e7e9      	b.n	80017a6 <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 80017d2:	2001      	movs	r0, #1
 80017d4:	e7ef      	b.n	80017b6 <HAL_DMA_Init+0xaa>
 80017d6:	bf00      	nop
 80017d8:	40020407 	.word	0x40020407
 80017dc:	bffdfff8 	.word	0xbffdfff8
 80017e0:	1000823f 	.word	0x1000823f
 80017e4:	40020940 	.word	0x40020940
 80017e8:	40020900 	.word	0x40020900
 80017ec:	bffdfbf8 	.word	0xbffdfbf8
 80017f0:	40020400 	.word	0x40020400

080017f4 <HAL_DMA_DeInit>:
{
 80017f4:	b538      	push	{r3, r4, r5, lr}
  if (NULL == hdma)
 80017f6:	2800      	cmp	r0, #0
 80017f8:	d045      	beq.n	8001886 <HAL_DMA_DeInit+0x92>
  __HAL_DMA_DISABLE(hdma);
 80017fa:	6801      	ldr	r1, [r0, #0]
 80017fc:	680b      	ldr	r3, [r1, #0]
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <HAL_DMA_DeInit+0x98>)
 8001806:	4299      	cmp	r1, r3
 8001808:	f04f 0414 	mov.w	r4, #20
 800180c:	d833      	bhi.n	8001876 <HAL_DMA_DeInit+0x82>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800180e:	4a20      	ldr	r2, [pc, #128]	; (8001890 <HAL_DMA_DeInit+0x9c>)
 8001810:	440a      	add	r2, r1
 8001812:	fbb2 f2f4 	udiv	r2, r2, r4
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800181a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 800181e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001820:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 8001824:	2401      	movs	r4, #1
 8001826:	f003 031c 	and.w	r3, r3, #28
 800182a:	fa04 f303 	lsl.w	r3, r4, r3
  hdma->Instance->CCR  = 0U;
 800182e:	2500      	movs	r5, #0
 8001830:	600d      	str	r5, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001832:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001834:	f7ff ff46 	bl	80016c4 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8001838:	6c83      	ldr	r3, [r0, #72]	; 0x48
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800183a:	6841      	ldr	r1, [r0, #4]
  hdma->DMAmuxChannel->CCR = 0U;
 800183c:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800183e:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 8001842:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001844:	1e4a      	subs	r2, r1, #1
 8001846:	2a03      	cmp	r2, #3
 8001848:	d806      	bhi.n	8001858 <HAL_DMA_DeInit+0x64>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_DMA_DeInit+0xa0>)
 800184c:	440b      	add	r3, r1
 800184e:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001850:	4094      	lsls	r4, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001852:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_DMA_DeInit+0xa4>)
 8001856:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->DMAmuxRequestGen = 0U;
 8001858:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->DMAmuxRequestGenStatus = 0U;
 800185c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  hdma->XferHalfCpltCallback = NULL;
 8001860:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hdma->XferAbortCallback = NULL;
 8001864:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001868:	65c3      	str	r3, [r0, #92]	; 0x5c
  hdma->State = HAL_DMA_STATE_RESET;
 800186a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800186e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  return HAL_OK;
 8001872:	4618      	mov	r0, r3
}
 8001874:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_DMA_DeInit+0xa8>)
 8001878:	440b      	add	r3, r1
 800187a:	fbb3 f3f4 	udiv	r3, r3, r4
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_DMA_DeInit+0xac>)
 8001884:	e7cb      	b.n	800181e <HAL_DMA_DeInit+0x2a>
    return HAL_ERROR;
 8001886:	2001      	movs	r0, #1
 8001888:	e7f4      	b.n	8001874 <HAL_DMA_DeInit+0x80>
 800188a:	bf00      	nop
 800188c:	40020407 	.word	0x40020407
 8001890:	bffdfff8 	.word	0xbffdfff8
 8001894:	1000823f 	.word	0x1000823f
 8001898:	40020900 	.word	0x40020900
 800189c:	bffdfbf8 	.word	0xbffdfbf8
 80018a0:	40020400 	.word	0x40020400

080018a4 <HAL_DMA_Start_IT>:
{
 80018a4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80018a6:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 80018aa:	2d01      	cmp	r5, #1
{
 80018ac:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80018ae:	d039      	beq.n	8001924 <HAL_DMA_Start_IT+0x80>
 80018b0:	2501      	movs	r5, #1
 80018b2:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80018b6:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 80018ba:	2d01      	cmp	r5, #1
 80018bc:	f04f 0600 	mov.w	r6, #0
 80018c0:	f04f 0502 	mov.w	r5, #2
 80018c4:	d12c      	bne.n	8001920 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80018c6:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ca:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80018cc:	6806      	ldr	r6, [r0, #0]
 80018ce:	6835      	ldr	r5, [r6, #0]
 80018d0:	f025 0501 	bic.w	r5, r5, #1
 80018d4:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018d6:	f7ff feda 	bl	800168e <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80018da:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80018dc:	6803      	ldr	r3, [r0, #0]
 80018de:	b1ba      	cbz	r2, 8001910 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018e6:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80018e8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80018ea:	6811      	ldr	r1, [r2, #0]
 80018ec:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80018ee:	bf42      	ittt	mi
 80018f0:	6811      	ldrmi	r1, [r2, #0]
 80018f2:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 80018f6:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80018f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80018fa:	b11a      	cbz	r2, 8001904 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018fc:	6811      	ldr	r1, [r2, #0]
 80018fe:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001902:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800190c:	2000      	movs	r0, #0
}
 800190e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	f022 0204 	bic.w	r2, r2, #4
 8001916:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f042 020a 	orr.w	r2, r2, #10
 800191e:	e7e2      	b.n	80018e6 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8001920:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001924:	2002      	movs	r0, #2
 8001926:	e7f2      	b.n	800190e <HAL_DMA_Start_IT+0x6a>

08001928 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001928:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800192a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 800192c:	6803      	ldr	r3, [r0, #0]
{
 800192e:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001930:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001934:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001936:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001938:	2404      	movs	r4, #4
 800193a:	4094      	lsls	r4, r2
 800193c:	4234      	tst	r4, r6
 800193e:	d00e      	beq.n	800195e <HAL_DMA_IRQHandler+0x36>
 8001940:	f015 0f04 	tst.w	r5, #4
 8001944:	d00b      	beq.n	800195e <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800194a:	bf5e      	ittt	pl
 800194c:	681a      	ldrpl	r2, [r3, #0]
 800194e:	f022 0204 	bicpl.w	r2, r2, #4
 8001952:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001954:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001956:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001958:	b373      	cbz	r3, 80019b8 <HAL_DMA_IRQHandler+0x90>
}
 800195a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800195c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800195e:	2402      	movs	r4, #2
 8001960:	4094      	lsls	r4, r2
 8001962:	4234      	tst	r4, r6
 8001964:	d012      	beq.n	800198c <HAL_DMA_IRQHandler+0x64>
 8001966:	f015 0f02 	tst.w	r5, #2
 800196a:	d00f      	beq.n	800198c <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	0695      	lsls	r5, r2, #26
 8001970:	d406      	bmi.n	8001980 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	f022 020a 	bic.w	r2, r2, #10
 8001978:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800197a:	2301      	movs	r3, #1
 800197c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001980:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001982:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001984:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8001988:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800198a:	e7e5      	b.n	8001958 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800198c:	2408      	movs	r4, #8
 800198e:	4094      	lsls	r4, r2
 8001990:	4234      	tst	r4, r6
 8001992:	d011      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x90>
 8001994:	072c      	lsls	r4, r5, #28
 8001996:	d50f      	bpl.n	80019b8 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001998:	681c      	ldr	r4, [r3, #0]
 800199a:	f024 040e 	bic.w	r4, r4, #14
 800199e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80019a0:	2301      	movs	r3, #1
 80019a2:	fa03 f202 	lsl.w	r2, r3, r2
 80019a6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019a8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80019aa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80019ae:	2300      	movs	r3, #0
 80019b0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80019b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80019b6:	e7cf      	b.n	8001958 <HAL_DMA_IRQHandler+0x30>
}
 80019b8:	bc70      	pop	{r4, r5, r6}
 80019ba:	4770      	bx	lr

080019bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019c0:	4c57      	ldr	r4, [pc, #348]	; (8001b20 <HAL_GPIO_Init+0x164>)
  uint32_t position = 0x00u;
 80019c2:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019c4:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c8:	680a      	ldr	r2, [r1, #0]
 80019ca:	fa32 f503 	lsrs.w	r5, r2, r3
 80019ce:	d101      	bne.n	80019d4 <HAL_GPIO_Init+0x18>
      }
    }

    position++;
  }
}
 80019d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019d4:	2501      	movs	r5, #1
 80019d6:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80019da:	ea18 0202 	ands.w	r2, r8, r2
 80019de:	f000 8094 	beq.w	8001b0a <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e2:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019e4:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e6:	f006 0503 	and.w	r5, r6, #3
 80019ea:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ee:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f2:	1e6f      	subs	r7, r5, #1
 80019f4:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019f6:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019fa:	d832      	bhi.n	8001a62 <HAL_GPIO_Init+0xa6>
        temp = GPIOx->OSPEEDR;
 80019fc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019fe:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a02:	68cf      	ldr	r7, [r1, #12]
 8001a04:	fa07 f70e 	lsl.w	r7, r7, lr
 8001a08:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001a0c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a0e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a10:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a14:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8001a18:	409f      	lsls	r7, r3
 8001a1a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001a1e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001a20:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a22:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a26:	688f      	ldr	r7, [r1, #8]
 8001a28:	fa07 f70e 	lsl.w	r7, r7, lr
 8001a2c:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a30:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8001a32:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a34:	d117      	bne.n	8001a66 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3u];
 8001a36:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8001a3a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a3e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001a42:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a46:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001a4a:	fa09 fb0a 	lsl.w	fp, r9, sl
 8001a4e:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a52:	690f      	ldr	r7, [r1, #16]
 8001a54:	fa07 f70a 	lsl.w	r7, r7, sl
 8001a58:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8001a5c:	f8c8 7020 	str.w	r7, [r8, #32]
 8001a60:	e001      	b.n	8001a66 <HAL_GPIO_Init+0xaa>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a62:	2d03      	cmp	r5, #3
 8001a64:	d1dc      	bne.n	8001a20 <HAL_GPIO_Init+0x64>
      temp = GPIOx->MODER;
 8001a66:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a68:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a6c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a70:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a72:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001a76:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a78:	d047      	beq.n	8001b0a <HAL_GPIO_Init+0x14e>
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a7a:	f023 0703 	bic.w	r7, r3, #3
 8001a7e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001a82:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a86:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a8a:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a8c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001a90:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a94:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a98:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a9c:	d037      	beq.n	8001b0e <HAL_GPIO_Init+0x152>
 8001a9e:	4d21      	ldr	r5, [pc, #132]	; (8001b24 <HAL_GPIO_Init+0x168>)
 8001aa0:	42a8      	cmp	r0, r5
 8001aa2:	d036      	beq.n	8001b12 <HAL_GPIO_Init+0x156>
 8001aa4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aa8:	42a8      	cmp	r0, r5
 8001aaa:	d034      	beq.n	8001b16 <HAL_GPIO_Init+0x15a>
 8001aac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ab0:	42a8      	cmp	r0, r5
 8001ab2:	d032      	beq.n	8001b1a <HAL_GPIO_Init+0x15e>
 8001ab4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ab8:	42a8      	cmp	r0, r5
 8001aba:	bf0c      	ite	eq
 8001abc:	2504      	moveq	r5, #4
 8001abe:	2507      	movne	r5, #7
 8001ac0:	fa05 f50c 	lsl.w	r5, r5, ip
 8001ac4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ac8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8001aca:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001acc:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ace:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001ad2:	bf0c      	ite	eq
 8001ad4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001ad6:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8001ad8:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8001ada:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001adc:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001ae0:	bf0c      	ite	eq
 8001ae2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001ae4:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8001ae6:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8001ae8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aec:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001af0:	bf0c      	ite	eq
 8001af2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001af4:	4315      	orrne	r5, r2
        EXTI->IMR1 = temp;
 8001af6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        temp = EXTI->EMR1;
 8001afa:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afe:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 8001b00:	bf54      	ite	pl
 8001b02:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001b04:	4315      	orrmi	r5, r2
        EXTI->EMR1 = temp;
 8001b06:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    position++;
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	e75c      	b.n	80019c8 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b0e:	2500      	movs	r5, #0
 8001b10:	e7d6      	b.n	8001ac0 <HAL_GPIO_Init+0x104>
 8001b12:	2501      	movs	r5, #1
 8001b14:	e7d4      	b.n	8001ac0 <HAL_GPIO_Init+0x104>
 8001b16:	2502      	movs	r5, #2
 8001b18:	e7d2      	b.n	8001ac0 <HAL_GPIO_Init+0x104>
 8001b1a:	2503      	movs	r5, #3
 8001b1c:	e7d0      	b.n	8001ac0 <HAL_GPIO_Init+0x104>
 8001b1e:	bf00      	nop
 8001b20:	58000800 	.word	0x58000800
 8001b24:	48000400 	.word	0x48000400

08001b28 <HAL_GPIO_DeInit>:
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001b28:	4a3c      	ldr	r2, [pc, #240]	; (8001c1c <HAL_GPIO_DeInit+0xf4>)
{
 8001b2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
 8001b2e:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001b30:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8001b34:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001b38:	f04f 0b03 	mov.w	fp, #3
  while ((GPIO_Pin >> position) != 0x00u)
 8001b3c:	fa31 f403 	lsrs.w	r4, r1, r3
 8001b40:	d101      	bne.n	8001b46 <HAL_GPIO_DeInit+0x1e>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
    }

    position++;
  }
}
 8001b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001b46:	fa0a fc03 	lsl.w	ip, sl, r3
    if (iocurrent != 0x00u)
 8001b4a:	ea1c 0601 	ands.w	r6, ip, r1
 8001b4e:	d05a      	beq.n	8001c06 <HAL_GPIO_DeInit+0xde>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001b50:	f023 0403 	bic.w	r4, r3, #3
 8001b54:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001b58:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8001b5c:	f003 0703 	and.w	r7, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001b60:	68a5      	ldr	r5, [r4, #8]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8001b62:	00bf      	lsls	r7, r7, #2
 8001b64:	fa08 f907 	lsl.w	r9, r8, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001b68:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8001b6c:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001b70:	d04b      	beq.n	8001c0a <HAL_GPIO_DeInit+0xe2>
 8001b72:	4d2b      	ldr	r5, [pc, #172]	; (8001c20 <HAL_GPIO_DeInit+0xf8>)
 8001b74:	42a8      	cmp	r0, r5
 8001b76:	d04a      	beq.n	8001c0e <HAL_GPIO_DeInit+0xe6>
 8001b78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b7c:	42a8      	cmp	r0, r5
 8001b7e:	d048      	beq.n	8001c12 <HAL_GPIO_DeInit+0xea>
 8001b80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b84:	42a8      	cmp	r0, r5
 8001b86:	d046      	beq.n	8001c16 <HAL_GPIO_DeInit+0xee>
 8001b88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b8c:	42a8      	cmp	r0, r5
 8001b8e:	bf0c      	ite	eq
 8001b90:	2504      	moveq	r5, #4
 8001b92:	2507      	movne	r5, #7
 8001b94:	40bd      	lsls	r5, r7
 8001b96:	4575      	cmp	r5, lr
 8001b98:	d117      	bne.n	8001bca <HAL_GPIO_DeInit+0xa2>
        EXTI->IMR1 &= ~(iocurrent);
 8001b9a:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 8001b9e:	ea25 0506 	bic.w	r5, r5, r6
 8001ba2:	f8c2 5080 	str.w	r5, [r2, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001ba6:	f8d2 5084 	ldr.w	r5, [r2, #132]	; 0x84
 8001baa:	ea25 0506 	bic.w	r5, r5, r6
 8001bae:	f8c2 5084 	str.w	r5, [r2, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8001bb2:	6815      	ldr	r5, [r2, #0]
 8001bb4:	ea25 0506 	bic.w	r5, r5, r6
 8001bb8:	6015      	str	r5, [r2, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001bba:	6855      	ldr	r5, [r2, #4]
 8001bbc:	ea25 0506 	bic.w	r5, r5, r6
 8001bc0:	6055      	str	r5, [r2, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001bc2:	68a5      	ldr	r5, [r4, #8]
 8001bc4:	ea25 0509 	bic.w	r5, r5, r9
 8001bc8:	60a5      	str	r5, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001bca:	6805      	ldr	r5, [r0, #0]
 8001bcc:	005c      	lsls	r4, r3, #1
 8001bce:	fa0b f404 	lsl.w	r4, fp, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001bd2:	08de      	lsrs	r6, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001bd4:	4325      	orrs	r5, r4
 8001bd6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8001bda:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001bdc:	f003 0507 	and.w	r5, r3, #7
 8001be0:	6a37      	ldr	r7, [r6, #32]
 8001be2:	00ad      	lsls	r5, r5, #2
 8001be4:	fa08 f505 	lsl.w	r5, r8, r5
 8001be8:	ea27 0505 	bic.w	r5, r7, r5
 8001bec:	6235      	str	r5, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001bee:	68c5      	ldr	r5, [r0, #12]
 8001bf0:	ea25 0504 	bic.w	r5, r5, r4
 8001bf4:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	6845      	ldr	r5, [r0, #4]
 8001bf8:	ea25 050c 	bic.w	r5, r5, ip
 8001bfc:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bfe:	6885      	ldr	r5, [r0, #8]
 8001c00:	ea25 0404 	bic.w	r4, r5, r4
 8001c04:	6084      	str	r4, [r0, #8]
    position++;
 8001c06:	3301      	adds	r3, #1
 8001c08:	e798      	b.n	8001b3c <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001c0a:	2500      	movs	r5, #0
 8001c0c:	e7c2      	b.n	8001b94 <HAL_GPIO_DeInit+0x6c>
 8001c0e:	2501      	movs	r5, #1
 8001c10:	e7c0      	b.n	8001b94 <HAL_GPIO_DeInit+0x6c>
 8001c12:	2502      	movs	r5, #2
 8001c14:	e7be      	b.n	8001b94 <HAL_GPIO_DeInit+0x6c>
 8001c16:	2503      	movs	r5, #3
 8001c18:	e7bc      	b.n	8001b94 <HAL_GPIO_DeInit+0x6c>
 8001c1a:	bf00      	nop
 8001c1c:	58000800 	.word	0x58000800
 8001c20:	48000400 	.word	0x48000400

08001c24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c24:	b10a      	cbz	r2, 8001c2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c26:	6181      	str	r1, [r0, #24]
 8001c28:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c2a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001c2c:	4770      	bx	lr

08001c2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c30:	4604      	mov	r4, r0
{
 8001c32:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d058      	beq.n	8001cea <HAL_PCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c38:	f890 32ad 	ldrb.w	r3, [r0, #685]	; 0x2ad
 8001c3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c40:	b91b      	cbnz	r3, 8001c4a <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c42:	f880 22ac 	strb.w	r2, [r0, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c46:	f7fe fcaf 	bl	80005a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c4a:	2303      	movs	r3, #3

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8001c4c:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c4e:	f884 32ad 	strb.w	r3, [r4, #685]	; 0x2ad
  hpcd->Init.dma_enable = 0U;
 8001c52:	6265      	str	r5, [r4, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c54:	6820      	ldr	r0, [r4, #0]
 8001c56:	f002 ffa8 	bl	8004baa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	6866      	ldr	r6, [r4, #4]
 8001c5e:	2528      	movs	r5, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c60:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c62:	4618      	mov	r0, r3
 8001c64:	b2d9      	uxtb	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c66:	428e      	cmp	r6, r1
 8001c68:	f103 0301 	add.w	r3, r3, #1
 8001c6c:	d823      	bhi.n	8001cb6 <HAL_PCD_Init+0x88>
 8001c6e:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c70:	2528      	movs	r5, #40	; 0x28
 8001c72:	4619      	mov	r1, r3
 8001c74:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c76:	4286      	cmp	r6, r0
 8001c78:	f103 0301 	add.w	r3, r3, #1
 8001c7c:	d828      	bhi.n	8001cd0 <HAL_PCD_Init+0xa2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c7e:	f104 0610 	add.w	r6, r4, #16
 8001c82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c84:	466d      	mov	r5, sp
 8001c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c88:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001c8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c90:	1d23      	adds	r3, r4, #4
 8001c92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c94:	6820      	ldr	r0, [r4, #0]
 8001c96:	f002 ff92 	bl	8004bbe <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c9a:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8001c9c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001c9e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8001ca2:	f884 32ad 	strb.w	r3, [r4, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ca6:	69e3      	ldr	r3, [r4, #28]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d102      	bne.n	8001cb2 <HAL_PCD_Init+0x84>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cac:	4620      	mov	r0, r4
 8001cae:	f000 fe5b 	bl	8002968 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	e01a      	b.n	8001cec <HAL_PCD_Init+0xbe>
    hpcd->IN_ep[i].is_in = 1U;
 8001cb6:	fb05 4201 	mla	r2, r5, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cba:	e9c2 000f 	strd	r0, r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].is_in = 1U;
 8001cbe:	f882 702d 	strb.w	r7, [r2, #45]	; 0x2d
    hpcd->IN_ep[i].num = i;
 8001cc2:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cc6:	8751      	strh	r1, [r2, #58]	; 0x3a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cc8:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ccc:	6450      	str	r0, [r2, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cce:	e7c9      	b.n	8001c64 <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].is_in = 0U;
 8001cd0:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cd4:	e9c2 115f 	strd	r1, r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].is_in = 0U;
 8001cd8:	f882 116d 	strb.w	r1, [r2, #365]	; 0x16d
    hpcd->OUT_ep[i].num = i;
 8001cdc:	f882 016c 	strb.w	r0, [r2, #364]	; 0x16c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ce0:	f882 116f 	strb.w	r1, [r2, #367]	; 0x16f
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ce4:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce8:	e7c4      	b.n	8001c74 <HAL_PCD_Init+0x46>
    return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
}
 8001cec:	b007      	add	sp, #28
 8001cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cf0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cf0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001cf2:	f890 32ac 	ldrb.w	r3, [r0, #684]	; 0x2ac
 8001cf6:	2b01      	cmp	r3, #1
{
 8001cf8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001cfa:	d00c      	beq.n	8001d16 <HAL_PCD_Start+0x26>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f880 32ac 	strb.w	r3, [r0, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 8001d02:	6800      	ldr	r0, [r0, #0]
 8001d04:	f002 ff48 	bl	8004b98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d08:	6820      	ldr	r0, [r4, #0]
 8001d0a:	f003 fa0b 	bl	8005124 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac

  return HAL_OK;
}
 8001d14:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001d16:	2002      	movs	r0, #2
 8001d18:	e7fc      	b.n	8001d14 <HAL_PCD_Start+0x24>

08001d1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d1a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001d1c:	f890 22ac 	ldrb.w	r2, [r0, #684]	; 0x2ac
 8001d20:	2a01      	cmp	r2, #1
{
 8001d22:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001d24:	d00b      	beq.n	8001d3e <HAL_PCD_SetAddress+0x24>
 8001d26:	2201      	movs	r2, #1
 8001d28:	f880 22ac 	strb.w	r2, [r0, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8001d2c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d30:	6800      	ldr	r0, [r0, #0]
 8001d32:	f003 f9f1 	bl	8005118 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac

  return HAL_OK;
}
 8001d3c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001d3e:	2002      	movs	r0, #2
 8001d40:	e7fc      	b.n	8001d3c <HAL_PCD_SetAddress+0x22>
	...

08001d44 <HAL_PCD_IRQHandler>:
{
 8001d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d48:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001d4a:	6800      	ldr	r0, [r0, #0]
 8001d4c:	f003 f9f5 	bl	800513a <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001d50:	f410 4100 	ands.w	r1, r0, #32768	; 0x8000
 8001d54:	f000 8433 	beq.w	80025be <HAL_PCD_IRQHandler+0x87a>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d58:	f8df 8318 	ldr.w	r8, [pc, #792]	; 8002074 <HAL_PCD_IRQHandler+0x330>
 8001d5c:	4fc4      	ldr	r7, [pc, #784]	; (8002070 <HAL_PCD_IRQHandler+0x32c>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d5e:	6820      	ldr	r0, [r4, #0]
 8001d60:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001d64:	041a      	lsls	r2, r3, #16
 8001d66:	d402      	bmi.n	8001d6e <HAL_PCD_IRQHandler+0x2a>
}
 8001d68:	b003      	add	sp, #12
 8001d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8001d6e:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8001d72:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8001d74:	f015 050f 	ands.w	r5, r5, #15
 8001d78:	f040 80be 	bne.w	8001ef8 <HAL_PCD_IRQHandler+0x1b4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d7c:	f011 0110 	ands.w	r1, r1, #16
 8001d80:	d12a      	bne.n	8001dd8 <HAL_PCD_IRQHandler+0x94>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d82:	8803      	ldrh	r3, [r0, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	ea03 0308 	and.w	r3, r3, r8
 8001d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8e:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d90:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001d94:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8001d98:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8001d9c:	fa10 f383 	uxtah	r3, r0, r3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001da0:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001da2:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8001da6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dac:	64a3      	str	r3, [r4, #72]	; 0x48
        ep->xfer_buff += ep->xfer_count;
 8001dae:	4413      	add	r3, r2
 8001db0:	6423      	str	r3, [r4, #64]	; 0x40
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001db2:	f7fe fc4a 	bl	800064a <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001db6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0cf      	beq.n	8001d5e <HAL_PCD_IRQHandler+0x1a>
 8001dbe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001dc0:	2a00      	cmp	r2, #0
 8001dc2:	d1cc      	bne.n	8001d5e <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dc4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001dc8:	6821      	ldr	r1, [r4, #0]
 8001dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dce:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001dd2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 8001dd6:	e7c2      	b.n	8001d5e <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001dd8:	8805      	ldrh	r5, [r0, #0]
 8001dda:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ddc:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8001de0:	d020      	beq.n	8001e24 <HAL_PCD_IRQHandler+0xe0>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001de2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001de6:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
 8001dea:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001dee:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001df2:	f504 712d 	add.w	r1, r4, #692	; 0x2b4
 8001df6:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001dfa:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
 8001dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e02:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e06:	f003 fbc9 	bl	800559c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e0a:	6822      	ldr	r2, [r4, #0]
 8001e0c:	8813      	ldrh	r3, [r2, #0]
 8001e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e12:	051b      	lsls	r3, r3, #20
 8001e14:	0d1b      	lsrs	r3, r3, #20
 8001e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f7fe fc05 	bl	800062c <HAL_PCD_SetupStageCallback>
 8001e22:	e79c      	b.n	8001d5e <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e24:	0419      	lsls	r1, r3, #16
 8001e26:	d59a      	bpl.n	8001d5e <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e28:	8803      	ldrh	r3, [r0, #0]
 8001e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e2e:	051b      	lsls	r3, r3, #20
 8001e30:	0d1b      	lsrs	r3, r3, #20
 8001e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e36:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e38:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001e3c:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
 8001e40:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001e44:	fa11 f383 	uxtah	r3, r1, r3
 8001e48:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e50:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e54:	b18b      	cbz	r3, 8001e7a <HAL_PCD_IRQHandler+0x136>
 8001e56:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 8001e5a:	b171      	cbz	r1, 8001e7a <HAL_PCD_IRQHandler+0x136>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e5c:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
 8001e60:	f003 fb9c 	bl	800559c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001e64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001e68:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e72:	4629      	mov	r1, r5
 8001e74:	4620      	mov	r0, r4
 8001e76:	f7fe fbdf 	bl	8000638 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e7a:	6821      	ldr	r1, [r4, #0]
 8001e7c:	880a      	ldrh	r2, [r1, #0]
 8001e7e:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001e80:	0512      	lsls	r2, r2, #20
 8001e82:	f53f af6c 	bmi.w	8001d5e <HAL_PCD_IRQHandler+0x1a>
 8001e86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001e8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001e8e:	f43f af66 	beq.w	8001d5e <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e92:	f8d4 517c 	ldr.w	r5, [r4, #380]	; 0x17c
 8001e96:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001e9a:	2d3e      	cmp	r5, #62	; 0x3e
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f201 4006 	addw	r0, r1, #1030	; 0x406
 8001ea2:	d908      	bls.n	8001eb6 <HAL_PCD_IRQHandler+0x172>
 8001ea4:	096a      	lsrs	r2, r5, #5
 8001ea6:	06ee      	lsls	r6, r5, #27
 8001ea8:	bf08      	it	eq
 8001eaa:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8001eae:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 8001eb2:	b292      	uxth	r2, r2
 8001eb4:	e00a      	b.n	8001ecc <HAL_PCD_IRQHandler+0x188>
 8001eb6:	b9cd      	cbnz	r5, 8001eec <HAL_PCD_IRQHandler+0x1a8>
 8001eb8:	5ac2      	ldrh	r2, [r0, r3]
 8001eba:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001ebe:	0412      	lsls	r2, r2, #16
 8001ec0:	0c12      	lsrs	r2, r2, #16
 8001ec2:	52c2      	strh	r2, [r0, r3]
 8001ec4:	5ac2      	ldrh	r2, [r0, r3]
 8001ec6:	b292      	uxth	r2, r2
 8001ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ecc:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ece:	880b      	ldrh	r3, [r1, #0]
 8001ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	0c1b      	lsrs	r3, r3, #16
 8001edc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee8:	800b      	strh	r3, [r1, #0]
 8001eea:	e738      	b.n	8001d5e <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001eec:	086a      	lsrs	r2, r5, #1
 8001eee:	07ed      	lsls	r5, r5, #31
 8001ef0:	bf48      	it	mi
 8001ef2:	3201      	addmi	r2, #1
 8001ef4:	0292      	lsls	r2, r2, #10
 8001ef6:	e7dc      	b.n	8001eb2 <HAL_PCD_IRQHandler+0x16e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ef8:	fa0f f985 	sxth.w	r9, r5
 8001efc:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f00:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f02:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f04:	f140 80f6 	bpl.w	80020f4 <HAL_PCD_IRQHandler+0x3b0>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f08:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8001f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f10:	051b      	lsls	r3, r3, #20
 8001f12:	0d1b      	lsrs	r3, r3, #20
 8001f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8001f18:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f1a:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0U)
 8001f1e:	fb01 4105 	mla	r1, r1, r5, r4
 8001f22:	f891 3178 	ldrb.w	r3, [r1, #376]	; 0x178
 8001f26:	b9bb      	cbnz	r3, 8001f58 <HAL_PCD_IRQHandler+0x214>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f28:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f2c:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
 8001f30:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8001f34:	fa1c f383 	uxtah	r3, ip, r3
 8001f38:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8001f3c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8001f40:	f1ba 0f00 	cmp.w	sl, #0
 8001f44:	f000 80ba 	beq.w	80020bc <HAL_PCD_IRQHandler+0x378>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f48:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001f4c:	4653      	mov	r3, sl
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f4e:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 8001f52:	f003 fb23 	bl	800559c <USB_ReadPMA>
 8001f56:	e0b1      	b.n	80020bc <HAL_PCD_IRQHandler+0x378>
          if (ep->type == EP_TYPE_BULK)
 8001f58:	f891 316f 	ldrb.w	r3, [r1, #367]	; 0x16f
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	f891 316c 	ldrb.w	r3, [r1, #364]	; 0x16c
 8001f62:	f040 8089 	bne.w	8002078 <HAL_PCD_IRQHandler+0x334>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f66:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50

    if (ep->xfer_len >= count)
 8001f6a:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f6e:	f416 4b80 	ands.w	fp, r6, #16384	; 0x4000
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f72:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f76:	fa10 fc8c 	uxtah	ip, r0, ip
 8001f7a:	f006 0e40 	and.w	lr, r6, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f7e:	d03b      	beq.n	8001ff8 <HAL_PCD_IRQHandler+0x2b4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f80:	44e2      	add	sl, ip
 8001f82:	f8ba a402 	ldrh.w	sl, [sl, #1026]	; 0x402
 8001f86:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8001f8a:	4592      	cmp	sl, r2
 8001f8c:	d913      	bls.n	8001fb6 <HAL_PCD_IRQHandler+0x272>
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f94:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001f98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fa0:	0412      	lsls	r2, r2, #16
 8001fa2:	0c12      	lsrs	r2, r2, #16
 8001fa4:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001fa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fb0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001fb4:	e005      	b.n	8001fc2 <HAL_PCD_IRQHandler+0x27e>
      ep->xfer_len -= count;
 8001fb6:	eba2 020a 	sub.w	r2, r2, sl
 8001fba:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    if (ep->xfer_len == 0U)
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	d0e8      	beq.n	8001f94 <HAL_PCD_IRQHandler+0x250>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fc2:	f1be 0f00 	cmp.w	lr, #0
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_PCD_IRQHandler+0x2a0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fc8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001fcc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001fd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fd4:	0412      	lsls	r2, r2, #16
 8001fd6:	0c12      	lsrs	r2, r2, #16
 8001fd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fdc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001fe0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8001fe4:	f1ba 0f00 	cmp.w	sl, #0
 8001fe8:	d068      	beq.n	80020bc <HAL_PCD_IRQHandler+0x378>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fea:	2128      	movs	r1, #40	; 0x28
 8001fec:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ff0:	f8b1 2174 	ldrh.w	r2, [r1, #372]	; 0x174
 8001ff4:	4653      	mov	r3, sl
 8001ff6:	e7aa      	b.n	8001f4e <HAL_PCD_IRQHandler+0x20a>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ff8:	44d4      	add	ip, sl
 8001ffa:	f8bc a406 	ldrh.w	sl, [ip, #1030]	; 0x406
 8001ffe:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 8002002:	4592      	cmp	sl, r2
 8002004:	d912      	bls.n	800202c <HAL_PCD_IRQHandler+0x2e8>
 8002006:	f8c1 b184 	str.w	fp, [r1, #388]	; 0x184
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800200a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800200e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002012:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002016:	0412      	lsls	r2, r2, #16
 8002018:	0c12      	lsrs	r2, r2, #16
 800201a:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800201e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002022:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002026:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 800202a:	e005      	b.n	8002038 <HAL_PCD_IRQHandler+0x2f4>
      ep->xfer_len -= count;
 800202c:	eba2 020a 	sub.w	r2, r2, sl
 8002030:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    if (ep->xfer_len == 0U)
 8002034:	2a00      	cmp	r2, #0
 8002036:	d0e8      	beq.n	800200a <HAL_PCD_IRQHandler+0x2c6>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002038:	f1be 0f00 	cmp.w	lr, #0
 800203c:	d10d      	bne.n	800205a <HAL_PCD_IRQHandler+0x316>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800203e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002042:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002046:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800204a:	0412      	lsls	r2, r2, #16
 800204c:	0c12      	lsrs	r2, r2, #16
 800204e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002052:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002056:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 800205a:	f1ba 0f00 	cmp.w	sl, #0
 800205e:	d02d      	beq.n	80020bc <HAL_PCD_IRQHandler+0x378>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002060:	2128      	movs	r1, #40	; 0x28
 8002062:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002066:	f8b1 2176 	ldrh.w	r2, [r1, #374]	; 0x176
 800206a:	4653      	mov	r3, sl
 800206c:	e76f      	b.n	8001f4e <HAL_PCD_IRQHandler+0x20a>
 800206e:	bf00      	nop
 8002070:	ffff8000 	.word	0xffff8000
 8002074:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002078:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800207c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002080:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002084:	0412      	lsls	r2, r2, #16
 8002086:	0c12      	lsrs	r2, r2, #16
 8002088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800208c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002090:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002094:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
 8002098:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800209c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020a0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020a4:	d062      	beq.n	800216c <HAL_PCD_IRQHandler+0x428>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020a6:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 80020aa:	fa1c f383 	uxtah	r3, ip, r3
 80020ae:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 80020b2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80020b6:	f1ba 0f00 	cmp.w	sl, #0
 80020ba:	d199      	bne.n	8001ff0 <HAL_PCD_IRQHandler+0x2ac>
        ep->xfer_count += count;
 80020bc:	2128      	movs	r1, #40	; 0x28
 80020be:	fb01 4305 	mla	r3, r1, r5, r4
 80020c2:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80020c6:	4452      	add	r2, sl
 80020c8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        ep->xfer_buff += count;
 80020cc:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80020d0:	4452      	add	r2, sl
 80020d2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020d6:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80020da:	b11a      	cbz	r2, 80020e4 <HAL_PCD_IRQHandler+0x3a0>
 80020dc:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80020e0:	459a      	cmp	sl, r3
 80020e2:	d24f      	bcs.n	8002184 <HAL_PCD_IRQHandler+0x440>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020e4:	2328      	movs	r3, #40	; 0x28
 80020e6:	fb03 4305 	mla	r3, r3, r5, r4
 80020ea:	4620      	mov	r0, r4
 80020ec:	f893 116c 	ldrb.w	r1, [r3, #364]	; 0x16c
 80020f0:	f7fe faa2 	bl	8000638 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020f4:	0632      	lsls	r2, r6, #24
 80020f6:	f57f ae32 	bpl.w	8001d5e <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80020fa:	6820      	ldr	r0, [r4, #0]
 80020fc:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8002100:	b29b      	uxth	r3, r3
 8002102:	ea03 0308 	and.w	r3, r3, r8
 8002106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210a:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 800210e:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8002112:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 8002116:	f04f 0c28 	mov.w	ip, #40	; 0x28
 800211a:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
 800211e:	2b01      	cmp	r3, #1
 8002120:	d15b      	bne.n	80021da <HAL_PCD_IRQHandler+0x496>
          ep->xfer_len = 0U;
 8002122:	fb0c 4c05 	mla	ip, ip, r5, r4
 8002126:	2500      	movs	r5, #0
          if (ep->doublebuffer != 0U)
 8002128:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
          ep->xfer_len = 0U;
 800212c:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
          if (ep->doublebuffer != 0U)
 8002130:	2b00      	cmp	r3, #0
 8002132:	d03a      	beq.n	80021aa <HAL_PCD_IRQHandler+0x466>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002134:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8002138:	f899 302d 	ldrb.w	r3, [r9, #45]	; 0x2d
 800213c:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
 8002140:	d039      	beq.n	80021b6 <HAL_PCD_IRQHandler+0x472>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002142:	bb3b      	cbnz	r3, 8002194 <HAL_PCD_IRQHandler+0x450>
 8002144:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002148:	f200 4002 	addw	r0, r0, #1026	; 0x402
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800214c:	fa10 f083 	uxtah	r0, r0, r3
 8002150:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8002154:	8803      	ldrh	r3, [r0, #0]
 8002156:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	0c1b      	lsrs	r3, r3, #16
 800215e:	8003      	strh	r3, [r0, #0]
 8002160:	8803      	ldrh	r3, [r0, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002168:	8003      	strh	r3, [r0, #0]
 800216a:	e01e      	b.n	80021aa <HAL_PCD_IRQHandler+0x466>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800216c:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8002170:	fa1c f383 	uxtah	r3, ip, r3
 8002174:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8002178:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 800217c:	f1ba 0f00 	cmp.w	sl, #0
 8002180:	d09c      	beq.n	80020bc <HAL_PCD_IRQHandler+0x378>
 8002182:	e770      	b.n	8002066 <HAL_PCD_IRQHandler+0x322>
        ep = &hpcd->OUT_ep[epindex];
 8002184:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002188:	6820      	ldr	r0, [r4, #0]
 800218a:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
 800218e:	f002 ffe7 	bl	8005160 <USB_EPStartXfer>
 8002192:	e7af      	b.n	80020f4 <HAL_PCD_IRQHandler+0x3b0>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002194:	2b01      	cmp	r3, #1
 8002196:	d108      	bne.n	80021aa <HAL_PCD_IRQHandler+0x466>
 8002198:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800219c:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80021a0:	fa10 f082 	uxtah	r0, r0, r2
 80021a4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80021a8:	8005      	strh	r5, [r0, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021aa:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021ae:	4620      	mov	r0, r4
 80021b0:	f7fe fa4b 	bl	800064a <HAL_PCD_DataInStageCallback>
 80021b4:	e5d3      	b.n	8001d5e <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021b6:	b923      	cbnz	r3, 80021c2 <HAL_PCD_IRQHandler+0x47e>
 80021b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80021bc:	f200 4006 	addw	r0, r0, #1030	; 0x406
 80021c0:	e7c4      	b.n	800214c <HAL_PCD_IRQHandler+0x408>
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d1f1      	bne.n	80021aa <HAL_PCD_IRQHandler+0x466>
 80021c6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80021ca:	f200 4006 	addw	r0, r0, #1030	; 0x406
 80021ce:	fa10 f383 	uxtah	r3, r0, r3
 80021d2:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 80021d6:	8006      	strh	r6, [r0, #0]
 80021d8:	e7e7      	b.n	80021aa <HAL_PCD_IRQHandler+0x466>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021da:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
            if (ep->xfer_len > TxPctSize)
 80021de:	fb0c 4e05 	mla	lr, ip, r5, r4
          if ((wEPVal & USB_EP_KIND) == 0U)
 80021e2:	f416 7a80 	ands.w	sl, r6, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 80021e6:	f8de 3044 	ldr.w	r3, [lr, #68]	; 0x44
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021ea:	460a      	mov	r2, r1
 80021ec:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 80021f0:	d122      	bne.n	8002238 <HAL_PCD_IRQHandler+0x4f4>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021f2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80021f6:	fa1b fb82 	uxtah	fp, fp, r2
 80021fa:	4483      	add	fp, r0
 80021fc:	f8bb 6402 	ldrh.w	r6, [fp, #1026]	; 0x402
            if (ep->xfer_len > TxPctSize)
 8002200:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002204:	429e      	cmp	r6, r3
 8002206:	d302      	bcc.n	800220e <HAL_PCD_IRQHandler+0x4ca>
 8002208:	f8ce a044 	str.w	sl, [lr, #68]	; 0x44
 800220c:	e7cf      	b.n	80021ae <HAL_PCD_IRQHandler+0x46a>
              ep->xfer_len -= TxPctSize;
 800220e:	1b9b      	subs	r3, r3, r6
              ep->xfer_buff += TxPctSize;
 8002210:	f8de 2040 	ldr.w	r2, [lr, #64]	; 0x40
 8002214:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
              ep->xfer_count += TxPctSize;
 8002218:	f8de 3048 	ldr.w	r3, [lr, #72]	; 0x48
        ep = &hpcd->IN_ep[epindex];
 800221c:	fb05 cc0c 	mla	ip, r5, ip, ip
              ep->xfer_buff += TxPctSize;
 8002220:	4432      	add	r2, r6
              ep->xfer_count += TxPctSize;
 8002222:	4433      	add	r3, r6
        ep = &hpcd->IN_ep[epindex];
 8002224:	f10c 0104 	add.w	r1, ip, #4
              ep->xfer_buff += TxPctSize;
 8002228:	f8ce 2040 	str.w	r2, [lr, #64]	; 0x40
              ep->xfer_count += TxPctSize;
 800222c:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002230:	4421      	add	r1, r4
 8002232:	f002 ff95 	bl	8005160 <USB_EPStartXfer>
 8002236:	e592      	b.n	8001d5e <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002238:	f016 0a40 	ands.w	sl, r6, #64	; 0x40
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800223c:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8002240:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002244:	f000 80dc 	beq.w	8002400 <HAL_PCD_IRQHandler+0x6bc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002248:	f200 4e02 	addw	lr, r0, #1026	; 0x402
 800224c:	fa1e fc8c 	uxtah	ip, lr, ip
 8002250:	f04f 0a28 	mov.w	sl, #40	; 0x28
 8002254:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]

    if (ep->xfer_len > TxPctSize)
 8002258:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800225c:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxPctSize;
 800225e:	fb0a 4a05 	mla	sl, sl, r5, r4
 8002262:	bf34      	ite	cc
 8002264:	eba3 030c 	subcc.w	r3, r3, ip
    }
    else
    {
      ep->xfer_len = 0U;
 8002268:	2300      	movcs	r3, #0
 800226a:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800226e:	b2b6      	uxth	r6, r6
 8002270:	2b00      	cmp	r3, #0
 8002272:	d154      	bne.n	800231e <HAL_PCD_IRQHandler+0x5da>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002274:	f899 502d 	ldrb.w	r5, [r9, #45]	; 0x2d
 8002278:	2d00      	cmp	r5, #0
 800227a:	d13f      	bne.n	80022fc <HAL_PCD_IRQHandler+0x5b8>
 800227c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002280:	fa1e fe83 	uxtah	lr, lr, r3
 8002284:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8002288:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800228c:	041b      	lsls	r3, r3, #16
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
 8002294:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229e:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022a2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80022a6:	f200 4006 	addw	r0, r0, #1030	; 0x406
 80022aa:	fa10 f083 	uxtah	r0, r0, r3
 80022ae:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 80022b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 80022be:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c8:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022cc:	4620      	mov	r0, r4
 80022ce:	f7fe f9bc 	bl	800064a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022d2:	2e00      	cmp	r6, #0
 80022d4:	f000 80dd 	beq.w	8002492 <HAL_PCD_IRQHandler+0x74e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022d8:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
 80022dc:	6822      	ldr	r2, [r4, #0]
 80022de:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80022e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80022fa:	e0ca      	b.n	8002492 <HAL_PCD_IRQHandler+0x74e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022fc:	2d01      	cmp	r5, #1
 80022fe:	d1e5      	bne.n	80022cc <HAL_PCD_IRQHandler+0x588>
 8002300:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8002304:	fa1e fe85 	uxtah	lr, lr, r5
 8002308:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800230c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8002310:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8002314:	fa10 f585 	uxtah	r5, r0, r5
 8002318:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
 800231c:	e7d6      	b.n	80022cc <HAL_PCD_IRQHandler+0x588>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800231e:	b16e      	cbz	r6, 800233c <HAL_PCD_IRQHandler+0x5f8>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002320:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232c:	041b      	lsls	r3, r3, #16
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002338:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800233c:	2628      	movs	r6, #40	; 0x28
 800233e:	fb06 4605 	mla	r6, r6, r5, r4
 8002342:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8002346:	2b01      	cmp	r3, #1
 8002348:	f040 80a3 	bne.w	8002492 <HAL_PCD_IRQHandler+0x74e>
        ep->xfer_count += TxPctSize;
 800234c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 800234e:	6c31      	ldr	r1, [r6, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8002350:	f8d6 a04c 	ldr.w	sl, [r6, #76]	; 0x4c
        ep->xfer_count += TxPctSize;
 8002354:	4463      	add	r3, ip
 8002356:	64b3      	str	r3, [r6, #72]	; 0x48
        if (ep->xfer_len_db >= ep->maxpacket)
 8002358:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff += TxPctSize;
 800235a:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 800235c:	459a      	cmp	sl, r3
        ep->xfer_buff += TxPctSize;
 800235e:	6431      	str	r1, [r6, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8002360:	d31a      	bcc.n	8002398 <HAL_PCD_IRQHandler+0x654>
          ep->xfer_len_db -= len;
 8002362:	ebaa 0a03 	sub.w	sl, sl, r3
 8002366:	f8c6 a04c 	str.w	sl, [r6, #76]	; 0x4c
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800236a:	f899 602d 	ldrb.w	r6, [r9, #45]	; 0x2d
 800236e:	fa1f fc83 	uxth.w	ip, r3
 8002372:	2e00      	cmp	r6, #0
 8002374:	d13b      	bne.n	80023ee <HAL_PCD_IRQHandler+0x6aa>
 8002376:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800237a:	2b3e      	cmp	r3, #62	; 0x3e
 800237c:	fa1e fe86 	uxtah	lr, lr, r6
 8002380:	d917      	bls.n	80023b2 <HAL_PCD_IRQHandler+0x66e>
 8002382:	095e      	lsrs	r6, r3, #5
 8002384:	06db      	lsls	r3, r3, #27
 8002386:	bf08      	it	eq
 8002388:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 800238c:	ea47 2686 	orr.w	r6, r7, r6, lsl #10
 8002390:	b2b6      	uxth	r6, r6
 8002392:	f82e 6032 	strh.w	r6, [lr, r2, lsl #3]
 8002396:	e01c      	b.n	80023d2 <HAL_PCD_IRQHandler+0x68e>
        else if (ep->xfer_len_db == 0U)
 8002398:	f1ba 0f00 	cmp.w	sl, #0
 800239c:	d103      	bne.n	80023a6 <HAL_PCD_IRQHandler+0x662>
          ep->xfer_fill_db = 0U;
 800239e:	f886 a050 	strb.w	sl, [r6, #80]	; 0x50
    if (ep->xfer_len > TxPctSize)
 80023a2:	4663      	mov	r3, ip
 80023a4:	e7e1      	b.n	800236a <HAL_PCD_IRQHandler+0x626>
          ep->xfer_fill_db = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80023ac:	64f3      	str	r3, [r6, #76]	; 0x4c
 80023ae:	4653      	mov	r3, sl
 80023b0:	e7db      	b.n	800236a <HAL_PCD_IRQHandler+0x626>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023b2:	b9b3      	cbnz	r3, 80023e2 <HAL_PCD_IRQHandler+0x69e>
 80023b4:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 80023b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	0c1b      	lsrs	r3, r3, #16
 80023c0:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
 80023c4:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ce:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023d2:	2328      	movs	r3, #40	; 0x28
 80023d4:	fb03 4505 	mla	r5, r3, r5, r4
 80023d8:	4663      	mov	r3, ip
 80023da:	8eaa      	ldrh	r2, [r5, #52]	; 0x34

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80023dc:	f002 feb1 	bl	8005142 <USB_WritePMA>
 80023e0:	e057      	b.n	8002492 <HAL_PCD_IRQHandler+0x74e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023e2:	085e      	lsrs	r6, r3, #1
 80023e4:	07db      	lsls	r3, r3, #31
 80023e6:	bf48      	it	mi
 80023e8:	3601      	addmi	r6, #1
 80023ea:	02b6      	lsls	r6, r6, #10
 80023ec:	e7d0      	b.n	8002390 <HAL_PCD_IRQHandler+0x64c>
 80023ee:	2e01      	cmp	r6, #1
 80023f0:	bf02      	ittt	eq
 80023f2:	f8b0 3050 	ldrheq.w	r3, [r0, #80]	; 0x50
 80023f6:	fa1e fe83 	uxtaheq	lr, lr, r3
 80023fa:	f82e c032 	strheq.w	ip, [lr, r2, lsl #3]
 80023fe:	e7e8      	b.n	80023d2 <HAL_PCD_IRQHandler+0x68e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002400:	f200 4e06 	addw	lr, r0, #1030	; 0x406
 8002404:	fa1e fc8c 	uxtah	ip, lr, ip
 8002408:	b2b6      	uxth	r6, r6
 800240a:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]
    if (ep->xfer_len >= TxPctSize)
 800240e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002412:	459c      	cmp	ip, r3
      ep->xfer_len = 0U;
 8002414:	bf88      	it	hi
 8002416:	4653      	movhi	r3, sl
 8002418:	f04f 0a28 	mov.w	sl, #40	; 0x28
 800241c:	fb0a 4a05 	mla	sl, sl, r5, r4
      ep->xfer_len -= TxPctSize;
 8002420:	bf98      	it	ls
 8002422:	eba3 030c 	subls.w	r3, r3, ip
 8002426:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    if (ep->xfer_len == 0U)
 800242a:	2b00      	cmp	r3, #0
 800242c:	d153      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x792>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800242e:	f899 502d 	ldrb.w	r5, [r9, #45]	; 0x2d
 8002432:	2d00      	cmp	r5, #0
 8002434:	d140      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x774>
 8002436:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800243a:	f200 4302 	addw	r3, r0, #1026	; 0x402
 800243e:	fa13 f585 	uxtah	r5, r3, r5
 8002442:	f835 3031 	ldrh.w	r3, [r5, r1, lsl #3]
 8002446:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
 8002452:	f835 3031 	ldrh.w	r3, [r5, r1, lsl #3]
 8002456:	b29b      	uxth	r3, r3
 8002458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245c:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002460:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002464:	fa1e fe83 	uxtah	lr, lr, r3
 8002468:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 800246c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
 8002478:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 800247c:	b29b      	uxth	r3, r3
 800247e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002482:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002486:	4620      	mov	r0, r4
 8002488:	f7fe f8df 	bl	800064a <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800248c:	2e00      	cmp	r6, #0
 800248e:	f43f af23 	beq.w	80022d8 <HAL_PCD_IRQHandler+0x594>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002492:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
 8002496:	6822      	ldr	r2, [r4, #0]
 8002498:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024a6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80024aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80024b6:	e452      	b.n	8001d5e <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024b8:	2d01      	cmp	r5, #1
 80024ba:	d1e4      	bne.n	8002486 <HAL_PCD_IRQHandler+0x742>
 80024bc:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80024c0:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 80024c4:	fa1c f585 	uxtah	r5, ip, r5
 80024c8:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024cc:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 80024d0:	fa1e fe80 	uxtah	lr, lr, r0
 80024d4:	e7d5      	b.n	8002482 <HAL_PCD_IRQHandler+0x73e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024d6:	b96e      	cbnz	r6, 80024f4 <HAL_PCD_IRQHandler+0x7b0>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024d8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80024dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e4:	041b      	lsls	r3, r3, #16
 80024e6:	0c1b      	lsrs	r3, r3, #16
 80024e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f0:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80024f4:	2628      	movs	r6, #40	; 0x28
 80024f6:	fb06 4605 	mla	r6, r6, r5, r4
 80024fa:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d1c7      	bne.n	8002492 <HAL_PCD_IRQHandler+0x74e>
        ep->xfer_count += TxPctSize;
 8002502:	6cb3      	ldr	r3, [r6, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8002504:	6c31      	ldr	r1, [r6, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8002506:	f8d6 a04c 	ldr.w	sl, [r6, #76]	; 0x4c
        ep->xfer_count += TxPctSize;
 800250a:	4463      	add	r3, ip
 800250c:	64b3      	str	r3, [r6, #72]	; 0x48
        if (ep->xfer_len_db >= ep->maxpacket)
 800250e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff += TxPctSize;
 8002510:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8002512:	459a      	cmp	sl, r3
        ep->xfer_buff += TxPctSize;
 8002514:	6431      	str	r1, [r6, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8002516:	d31c      	bcc.n	8002552 <HAL_PCD_IRQHandler+0x80e>
          ep->xfer_len_db -= len;
 8002518:	ebaa 0a03 	sub.w	sl, sl, r3
 800251c:	f8c6 a04c 	str.w	sl, [r6, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002520:	f899 c02d 	ldrb.w	ip, [r9, #45]	; 0x2d
 8002524:	b29e      	uxth	r6, r3
 8002526:	f1bc 0f00 	cmp.w	ip, #0
 800252a:	d13e      	bne.n	80025aa <HAL_PCD_IRQHandler+0x866>
 800252c:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8002530:	2b3e      	cmp	r3, #62	; 0x3e
 8002532:	fa1e fe8c 	uxtah	lr, lr, ip
 8002536:	d919      	bls.n	800256c <HAL_PCD_IRQHandler+0x828>
 8002538:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 800253c:	06db      	lsls	r3, r3, #27
 800253e:	bf08      	it	eq
 8002540:	f10c 3cff 	addeq.w	ip, ip, #4294967295	; 0xffffffff
 8002544:	ea47 2c8c 	orr.w	ip, r7, ip, lsl #10
 8002548:	fa1f fc8c 	uxth.w	ip, ip
 800254c:	f82e c032 	strh.w	ip, [lr, r2, lsl #3]
 8002550:	e01c      	b.n	800258c <HAL_PCD_IRQHandler+0x848>
        else if (ep->xfer_len_db == 0U)
 8002552:	f1ba 0f00 	cmp.w	sl, #0
 8002556:	d103      	bne.n	8002560 <HAL_PCD_IRQHandler+0x81c>
          ep->xfer_fill_db = 0U;
 8002558:	f886 a050 	strb.w	sl, [r6, #80]	; 0x50
    if (ep->xfer_len >= TxPctSize)
 800255c:	4663      	mov	r3, ip
 800255e:	e7df      	b.n	8002520 <HAL_PCD_IRQHandler+0x7dc>
          ep->xfer_len_db = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	64f3      	str	r3, [r6, #76]	; 0x4c
          ep->xfer_fill_db = 0;
 8002564:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8002568:	4653      	mov	r3, sl
 800256a:	e7d9      	b.n	8002520 <HAL_PCD_IRQHandler+0x7dc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800256c:	b9a3      	cbnz	r3, 8002598 <HAL_PCD_IRQHandler+0x854>
 800256e:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 8002572:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
 800257e:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 8002582:	b29b      	uxth	r3, r3
 8002584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002588:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800258c:	2328      	movs	r3, #40	; 0x28
 800258e:	fb03 4505 	mla	r5, r3, r5, r4
 8002592:	4633      	mov	r3, r6
 8002594:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8002596:	e721      	b.n	80023dc <HAL_PCD_IRQHandler+0x698>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002598:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800259c:	07db      	lsls	r3, r3, #31
 800259e:	bf48      	it	mi
 80025a0:	f10c 0c01 	addmi.w	ip, ip, #1
 80025a4:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80025a8:	e7ce      	b.n	8002548 <HAL_PCD_IRQHandler+0x804>
 80025aa:	f1bc 0f01 	cmp.w	ip, #1
 80025ae:	bf02      	ittt	eq
 80025b0:	f8b0 3050 	ldrheq.w	r3, [r0, #80]	; 0x50
 80025b4:	fa1e fe83 	uxtaheq	lr, lr, r3
 80025b8:	f82e 6032 	strheq.w	r6, [lr, r2, lsl #3]
 80025bc:	e7e6      	b.n	800258c <HAL_PCD_IRQHandler+0x848>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80025be:	0543      	lsls	r3, r0, #21
 80025c0:	d513      	bpl.n	80025ea <HAL_PCD_IRQHandler+0x8a6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025c2:	6822      	ldr	r2, [r4, #0]
 80025c4:	9101      	str	r1, [sp, #4]
 80025c6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80025ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 80025d2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80025d8:	f7fe f843 	bl	8000662 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80025dc:	9901      	ldr	r1, [sp, #4]
 80025de:	4620      	mov	r0, r4
}
 80025e0:	b003      	add	sp, #12
 80025e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80025e6:	f7ff bb98 	b.w	8001d1a <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80025ea:	0447      	lsls	r7, r0, #17
 80025ec:	d50a      	bpl.n	8002604 <HAL_PCD_IRQHandler+0x8c0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80025f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	0c1b      	lsrs	r3, r3, #16
 80025fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8002600:	f7ff bbb2 	b.w	8001d68 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002604:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 8002608:	d005      	beq.n	8002616 <HAL_PCD_IRQHandler+0x8d2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800260a:	6822      	ldr	r2, [r4, #0]
 800260c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002610:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002614:	e7f0      	b.n	80025f8 <HAL_PCD_IRQHandler+0x8b4>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002616:	04c6      	lsls	r6, r0, #19
 8002618:	d522      	bpl.n	8002660 <HAL_PCD_IRQHandler+0x91c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800261a:	6822      	ldr	r2, [r4, #0]
 800261c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	0c1b      	lsrs	r3, r3, #16
 8002628:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800262c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002630:	f023 0308 	bic.w	r3, r3, #8
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	0c1b      	lsrs	r3, r3, #16
 8002638:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 800263c:	f894 32e4 	ldrb.w	r3, [r4, #740]	; 0x2e4
 8002640:	2b01      	cmp	r3, #1
 8002642:	d104      	bne.n	800264e <HAL_PCD_IRQHandler+0x90a>
      hpcd->LPM_State = LPM_L0;
 8002644:	f884 12e4 	strb.w	r1, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002648:	4620      	mov	r0, r4
 800264a:	f000 f9a4 	bl	8002996 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 800264e:	4620      	mov	r0, r4
 8002650:	f7fe f824 	bl	800069c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002654:	6822      	ldr	r2, [r4, #0]
 8002656:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800265a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800265e:	e7cb      	b.n	80025f8 <HAL_PCD_IRQHandler+0x8b4>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002660:	0505      	lsls	r5, r0, #20
 8002662:	d51b      	bpl.n	800269c <HAL_PCD_IRQHandler+0x958>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002664:	6822      	ldr	r2, [r4, #0]
 8002666:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800266a:	b29b      	uxth	r3, r3
 800266c:	f043 0308 	orr.w	r3, r3, #8
 8002670:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002674:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800267c:	041b      	lsls	r3, r3, #16
 800267e:	0c1b      	lsrs	r3, r3, #16
 8002680:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002684:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002688:	b29b      	uxth	r3, r3
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      HAL_PCD_SuspendCallback(hpcd);
 8002692:	4620      	mov	r0, r4
 8002694:	f7fd fff2 	bl	800067c <HAL_PCD_SuspendCallback>
 8002698:	f7ff bb66 	b.w	8001d68 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800269c:	0601      	lsls	r1, r0, #24
 800269e:	d52b      	bpl.n	80026f8 <HAL_PCD_IRQHandler+0x9b4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80026a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026aa:	0412      	lsls	r2, r2, #16
 80026ac:	0c12      	lsrs	r2, r2, #16
 80026ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80026b2:	f894 22e4 	ldrb.w	r2, [r4, #740]	; 0x2e4
 80026b6:	2a00      	cmp	r2, #0
 80026b8:	d1eb      	bne.n	8002692 <HAL_PCD_IRQHandler+0x94e>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80026ba:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80026be:	b292      	uxth	r2, r2
 80026c0:	f042 0204 	orr.w	r2, r2, #4
 80026c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026c8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80026cc:	b292      	uxth	r2, r2
 80026ce:	f042 0208 	orr.w	r2, r2, #8
      hpcd->LPM_State = LPM_L1;
 80026d2:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 80026d8:	f884 12e4 	strb.w	r1, [r4, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80026dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80026e0:	f3c3 038d 	ubfx	r3, r3, #2, #14
 80026e4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026e8:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80026ea:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
}
 80026ee:	b003      	add	sp, #12
 80026f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026f4:	f000 b94f 	b.w	8002996 <HAL_PCDEx_LPM_Callback>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80026f8:	0582      	lsls	r2, r0, #22
 80026fa:	d50d      	bpl.n	8002718 <HAL_PCD_IRQHandler+0x9d4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80026fc:	6822      	ldr	r2, [r4, #0]
 80026fe:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002702:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800270e:	4620      	mov	r0, r4
 8002710:	f7fd ffa3 	bl	800065a <HAL_PCD_SOFCallback>
    return;
 8002714:	f7ff bb28 	b.w	8001d68 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002718:	05c3      	lsls	r3, r0, #23
 800271a:	f57f ab25 	bpl.w	8001d68 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800271e:	6822      	ldr	r2, [r4, #0]
 8002720:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002728:	e766      	b.n	80025f8 <HAL_PCD_IRQHandler+0x8b4>
 800272a:	bf00      	nop

0800272c <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 800272c:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	4605      	mov	r5, r0
 8002734:	f04f 0428 	mov.w	r4, #40	; 0x28
 8002738:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800273c:	d020      	beq.n	8002780 <HAL_PCD_EP_Open+0x54>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800273e:	fb00 4104 	mla	r1, r0, r4, r4
    ep->is_in = 1U;
 8002742:	fb00 4404 	mla	r4, r0, r4, r4
 8002746:	442c      	add	r4, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002748:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800274a:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800274c:	4429      	add	r1, r5
    ep->is_in = 1U;
 800274e:	7166      	strb	r6, [r4, #5]
  ep->maxpacket = ep_mps;
 8002750:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8002752:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002754:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8002756:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8002758:	b102      	cbz	r2, 800275c <HAL_PCD_EP_Open+0x30>
    ep->tx_fifo_num = ep->num;
 800275a:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800275c:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800275e:	bf04      	itt	eq
 8002760:	2300      	moveq	r3, #0
 8002762:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8002764:	f895 32ac 	ldrb.w	r3, [r5, #684]	; 0x2ac
 8002768:	2b01      	cmp	r3, #1
 800276a:	d013      	beq.n	8002794 <HAL_PCD_EP_Open+0x68>
 800276c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800276e:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8002770:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002774:	f002 fa38 	bl	8004be8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002778:	2000      	movs	r0, #0
 800277a:	f885 02ac 	strb.w	r0, [r5, #684]	; 0x2ac
}
 800277e:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002780:	fb04 5100 	mla	r1, r4, r0, r5
    ep->is_in = 0U;
 8002784:	fb04 5400 	mla	r4, r4, r0, r5
 8002788:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800278a:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 800278e:	f884 616d 	strb.w	r6, [r4, #365]	; 0x16d
 8002792:	e7dd      	b.n	8002750 <HAL_PCD_EP_Open+0x24>
  __HAL_LOCK(hpcd);
 8002794:	2002      	movs	r0, #2
 8002796:	e7f2      	b.n	800277e <HAL_PCD_EP_Open+0x52>

08002798 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002798:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800279c:	b510      	push	{r4, lr}
 800279e:	f001 0207 	and.w	r2, r1, #7
 80027a2:	4604      	mov	r4, r0
 80027a4:	f04f 0328 	mov.w	r3, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 80027a8:	d017      	beq.n	80027da <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027aa:	fb02 3103 	mla	r1, r2, r3, r3
    ep->is_in = 1U;
 80027ae:	fb02 3303 	mla	r3, r2, r3, r3
 80027b2:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b4:	3104      	adds	r1, #4
 80027b6:	4401      	add	r1, r0
    ep->is_in = 1U;
 80027b8:	2001      	movs	r0, #1
 80027ba:	7158      	strb	r0, [r3, #5]
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027bc:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80027be:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d013      	beq.n	80027ee <HAL_PCD_EP_Close+0x56>
 80027c6:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027c8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80027ca:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027ce:	f002 fb69 	bl	8004ea4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 80027d8:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027da:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 80027de:	fb03 0302 	mla	r3, r3, r2, r0
 80027e2:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e4:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 80027e8:	f883 016d 	strb.w	r0, [r3, #365]	; 0x16d
 80027ec:	e7e6      	b.n	80027bc <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 80027ee:	2002      	movs	r0, #2
 80027f0:	e7f2      	b.n	80027d8 <HAL_PCD_EP_Close+0x40>

080027f2 <HAL_PCD_EP_Receive>:
{
 80027f2:	b570      	push	{r4, r5, r6, lr}
 80027f4:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80027f8:	2628      	movs	r6, #40	; 0x28
 80027fa:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 80027fe:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002800:	f884 116c 	strb.w	r1, [r4, #364]	; 0x16c
  ep->xfer_len = len;
 8002804:	e9c4 2360 	strd	r2, r3, [r4, #384]	; 0x180
  ep->xfer_count = 0U;
 8002808:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
  ep->is_in = 0U;
 800280c:	f884 516d 	strb.w	r5, [r4, #365]	; 0x16d
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002810:	f504 71b6 	add.w	r1, r4, #364	; 0x16c
 8002814:	6800      	ldr	r0, [r0, #0]
 8002816:	f002 fca3 	bl	8005160 <USB_EPStartXfer>
}
 800281a:	4628      	mov	r0, r5
 800281c:	bd70      	pop	{r4, r5, r6, pc}

0800281e <HAL_PCD_EP_Transmit>:
{
 800281e:	b570      	push	{r4, r5, r6, lr}
 8002820:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002824:	2428      	movs	r4, #40	; 0x28
 8002826:	fb04 0501 	mla	r5, r4, r1, r0
  ep->xfer_len = len;
 800282a:	e9c5 2310 	strd	r2, r3, [r5, #64]	; 0x40
  ep->xfer_len_db = len;
 800282e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002830:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002834:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  ep->xfer_fill_db = 1U;
 8002838:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 800283a:	2600      	movs	r6, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800283c:	fb01 4404 	mla	r4, r1, r4, r4
  ep->xfer_fill_db = 1U;
 8002840:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 8002844:	64ae      	str	r6, [r5, #72]	; 0x48
  ep->num = ep_addr & EP_ADDR_MSK;
 8002846:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800284a:	1d21      	adds	r1, r4, #4
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800284c:	4401      	add	r1, r0
  ep->is_in = 1U;
 800284e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002852:	6800      	ldr	r0, [r0, #0]
 8002854:	f002 fc84 	bl	8005160 <USB_EPStartXfer>
}
 8002858:	4630      	mov	r0, r6
 800285a:	bd70      	pop	{r4, r5, r6, pc}

0800285c <HAL_PCD_EP_SetStall>:
{
 800285c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800285e:	6843      	ldr	r3, [r0, #4]
 8002860:	f001 0507 	and.w	r5, r1, #7
 8002864:	429d      	cmp	r5, r3
{
 8002866:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002868:	d826      	bhi.n	80028b8 <HAL_PCD_EP_SetStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 800286a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800286e:	f04f 0228 	mov.w	r2, #40	; 0x28
 8002872:	d018      	beq.n	80028a6 <HAL_PCD_EP_SetStall+0x4a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002874:	fb05 2102 	mla	r1, r5, r2, r2
    ep->is_in = 1U;
 8002878:	fb05 2202 	mla	r2, r5, r2, r2
 800287c:	4422      	add	r2, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800287e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002880:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002882:	4421      	add	r1, r4
    ep->is_in = 1U;
 8002884:	7153      	strb	r3, [r2, #5]
  ep->is_stall = 1U;
 8002886:	2301      	movs	r3, #1
 8002888:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800288a:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800288c:	f894 22ac 	ldrb.w	r2, [r4, #684]	; 0x2ac
 8002890:	429a      	cmp	r2, r3
 8002892:	d013      	beq.n	80028bc <HAL_PCD_EP_SetStall+0x60>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002894:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002896:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800289a:	f002 fbd4 	bl	8005046 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800289e:	2000      	movs	r0, #0
 80028a0:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 80028a4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80028a6:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 80028aa:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 80028ac:	f503 71b6 	add.w	r1, r3, #364	; 0x16c
    ep->is_in = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	f882 316d 	strb.w	r3, [r2, #365]	; 0x16d
 80028b6:	e7e6      	b.n	8002886 <HAL_PCD_EP_SetStall+0x2a>
    return HAL_ERROR;
 80028b8:	2001      	movs	r0, #1
 80028ba:	e7f3      	b.n	80028a4 <HAL_PCD_EP_SetStall+0x48>
  __HAL_LOCK(hpcd);
 80028bc:	2002      	movs	r0, #2
 80028be:	e7f1      	b.n	80028a4 <HAL_PCD_EP_SetStall+0x48>

080028c0 <HAL_PCD_EP_ClrStall>:
{
 80028c0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028c2:	6843      	ldr	r3, [r0, #4]
 80028c4:	f001 020f 	and.w	r2, r1, #15
 80028c8:	429a      	cmp	r2, r3
{
 80028ca:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028cc:	d82a      	bhi.n	8002924 <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 80028ce:	f011 0f80 	tst.w	r1, #128	; 0x80
 80028d2:	f001 0207 	and.w	r2, r1, #7
 80028d6:	f04f 0328 	mov.w	r3, #40	; 0x28
 80028da:	d019      	beq.n	8002910 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028dc:	fb02 3103 	mla	r1, r2, r3, r3
    ep->is_in = 1U;
 80028e0:	fb02 3303 	mla	r3, r2, r3, r3
 80028e4:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e6:	3104      	adds	r1, #4
 80028e8:	4401      	add	r1, r0
    ep->is_in = 1U;
 80028ea:	2001      	movs	r0, #1
 80028ec:	7158      	strb	r0, [r3, #5]
  ep->is_stall = 0U;
 80028ee:	2500      	movs	r5, #0
 80028f0:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80028f4:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d015      	beq.n	8002928 <HAL_PCD_EP_ClrStall+0x68>
 80028fc:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028fe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002900:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002904:	f002 fbbf 	bl	8005086 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002908:	f884 52ac 	strb.w	r5, [r4, #684]	; 0x2ac
  return HAL_OK;
 800290c:	4628      	mov	r0, r5
}
 800290e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002910:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 8002914:	fb03 0302 	mla	r3, r3, r2, r0
 8002918:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800291a:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 800291e:	f883 016d 	strb.w	r0, [r3, #365]	; 0x16d
 8002922:	e7e4      	b.n	80028ee <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 8002924:	2001      	movs	r0, #1
 8002926:	e7f2      	b.n	800290e <HAL_PCD_EP_ClrStall+0x4e>
  __HAL_LOCK(hpcd);
 8002928:	2002      	movs	r0, #2
 800292a:	e7f0      	b.n	800290e <HAL_PCD_EP_ClrStall+0x4e>

0800292c <HAL_PCD_EP_Flush>:
}
 800292c:	2000      	movs	r0, #0
 800292e:	4770      	bx	lr

08002930 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002930:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002934:	bf18      	it	ne
 8002936:	f001 0107 	andne.w	r1, r1, #7
{
 800293a:	b510      	push	{r4, lr}
 800293c:	f04f 0428 	mov.w	r4, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002940:	bf1b      	ittet	ne
 8002942:	fb01 4104 	mlane	r1, r1, r4, r4
 8002946:	3104      	addne	r1, #4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002948:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294c:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800294e:	bf08      	it	eq
 8002950:	f500 70b6 	addeq.w	r0, r0, #364	; 0x16c
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002954:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8002956:	b91a      	cbnz	r2, 8002960 <HAL_PCDEx_PMAConfig+0x30>
    ep->doublebuffer = 0U;
 8002958:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800295a:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800295c:	2000      	movs	r0, #0
 800295e:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8002960:	2201      	movs	r2, #1
 8002962:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002964:	6083      	str	r3, [r0, #8]
 8002966:	e7f9      	b.n	800295c <HAL_PCDEx_PMAConfig+0x2c>

08002968 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8002968:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800296a:	2100      	movs	r1, #0
 800296c:	f880 12e4 	strb.w	r1, [r0, #740]	; 0x2e4
  hpcd->lpm_active = 1U;
 8002970:	2301      	movs	r3, #1
 8002972:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002976:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800297a:	b29b      	uxth	r3, r3
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002984:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8002988:	b29b      	uxth	r3, r3
 800298a:	f043 0302 	orr.w	r3, r3, #2
 800298e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8002992:	4608      	mov	r0, r1
 8002994:	4770      	bx	lr

08002996 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002996:	4770      	bx	lr

08002998 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002998:	4a02      	ldr	r2, [pc, #8]	; (80029a4 <HAL_PWR_EnableBkUpAccess+0xc>)
 800299a:	6813      	ldr	r3, [r2, #0]
 800299c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a0:	6013      	str	r3, [r2, #0]
}
 80029a2:	4770      	bx	lr
 80029a4:	58000400 	.word	0x58000400

080029a8 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80029a8:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80029aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 80029ae:	4608      	mov	r0, r1
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80029b0:	d101      	bne.n	80029b6 <HAL_PWR_EnterSTOPMode+0xe>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80029b2:	f000 b82d 	b.w	8002a10 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80029b6:	f000 b811 	b.w	80029dc <HAL_PWREx_EnterSTOP0Mode>
	...

080029bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029bc:	4b02      	ldr	r3, [pc, #8]	; (80029c8 <HAL_PWREx_GetVoltageRange+0xc>)
 80029be:	6818      	ldr	r0, [r3, #0]
}
 80029c0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	58000400 	.word	0x58000400

080029cc <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80029cc:	4a02      	ldr	r2, [pc, #8]	; (80029d8 <HAL_PWREx_EnableVddUSB+0xc>)
 80029ce:	6853      	ldr	r3, [r2, #4]
 80029d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029d4:	6053      	str	r3, [r2, #4]
}
 80029d6:	4770      	bx	lr
 80029d8:	58000400 	.word	0x58000400

080029dc <HAL_PWREx_EnterSTOP0Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80029dc:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <HAL_PWREx_EnterSTOP0Mode+0x2c>)
 80029de:	6813      	ldr	r3, [r2, #0]
 80029e0:	f023 0307 	bic.w	r3, r3, #7
 80029e4:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_PWREx_EnterSTOP0Mode+0x30>)
 80029e8:	691a      	ldr	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80029ea:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80029ec:	f042 0204 	orr.w	r2, r2, #4
 80029f0:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80029f2:	d105      	bne.n	8002a00 <HAL_PWREx_EnterSTOP0Mode+0x24>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80029f4:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	f022 0204 	bic.w	r2, r2, #4
 80029fc:	611a      	str	r2, [r3, #16]
}
 80029fe:	4770      	bx	lr
    __SEV();
 8002a00:	bf40      	sev
    __WFE();
 8002a02:	bf20      	wfe
    __WFE();
 8002a04:	bf20      	wfe
 8002a06:	e7f6      	b.n	80029f6 <HAL_PWREx_EnterSTOP0Mode+0x1a>
 8002a08:	58000400 	.word	0x58000400
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <HAL_PWREx_EnterSTOP1Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002a10:	4a0b      	ldr	r2, [pc, #44]	; (8002a40 <HAL_PWREx_EnterSTOP1Mode+0x30>)
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	f023 0307 	bic.w	r3, r3, #7
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_PWREx_EnterSTOP1Mode+0x34>)
 8002a20:	691a      	ldr	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002a22:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002a24:	f042 0204 	orr.w	r2, r2, #4
 8002a28:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002a2a:	d105      	bne.n	8002a38 <HAL_PWREx_EnterSTOP1Mode+0x28>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002a2c:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	f022 0204 	bic.w	r2, r2, #4
 8002a34:	611a      	str	r2, [r3, #16]
}
 8002a36:	4770      	bx	lr
    __SEV();
 8002a38:	bf40      	sev
    __WFE();
 8002a3a:	bf20      	wfe
    __WFE();
 8002a3c:	bf20      	wfe
 8002a3e:	e7f6      	b.n	8002a2e <HAL_PWREx_EnterSTOP1Mode+0x1e>
 8002a40:	58000400 	.word	0x58000400
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8002a50:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002a54:	4770      	bx	lr

08002a56 <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5a:	6818      	ldr	r0, [r3, #0]
}
 8002a5c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002a60:	4770      	bx	lr

08002a62 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002a62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a66:	6813      	ldr	r3, [r2, #0]
 8002a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6c:	4318      	orrs	r0, r3
 8002a6e:	6010      	str	r0, [r2, #0]
}
 8002a70:	4770      	bx	lr

08002a72 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a76:	6853      	ldr	r3, [r2, #4]
 8002a78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a7c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002a80:	6050      	str	r0, [r2, #4]
}
 8002a82:	4770      	bx	lr

08002a84 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002a84:	28b0      	cmp	r0, #176	; 0xb0
 8002a86:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002a88:	4a33      	ldr	r2, [pc, #204]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002a8a:	bf98      	it	ls
 8002a8c:	0900      	lsrls	r0, r0, #4
{
 8002a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002a90:	bf8c      	ite	hi
 8002a92:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002a94:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002a98:	4c30      	ldr	r4, [pc, #192]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xd8>)
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8002a9e:	b089      	sub	sp, #36	; 0x24
 8002aa0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002aa4:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002aa8:	466e      	mov	r6, sp
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002ab2:	f7ff ff83 	bl	80029bc <HAL_PWREx_GetVoltageRange>
 8002ab6:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002ab8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002abc:	3410      	adds	r4, #16
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002abe:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002ac2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ac6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002aca:	ac08      	add	r4, sp, #32
 8002acc:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad0:	d020      	beq.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x90>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ad2:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8002ad4:	429d      	cmp	r5, r3
 8002ad6:	d32f      	bcc.n	8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb4>
 8002ad8:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 8002adc:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 8002ae0:	429d      	cmp	r5, r3
 8002ae2:	d92b      	bls.n	8002b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>
 8002ae4:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 8002ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aec:	429d      	cmp	r5, r3
 8002aee:	d927      	bls.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0xbc>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002af0:	2400      	movs	r4, #0
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002af2:	4d1c      	ldr	r5, [pc, #112]	; (8002b64 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 8002af4:	682b      	ldr	r3, [r5, #0]
 8002af6:	f023 0307 	bic.w	r3, r3, #7
 8002afa:	4323      	orrs	r3, r4
 8002afc:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002afe:	f7fe fd49 	bl	8001594 <HAL_GetTick>
 8002b02:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b04:	682b      	ldr	r3, [r5, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	429c      	cmp	r4, r3
 8002b0c:	d11a      	bne.n	8002b44 <RCC_SetFlashLatencyFromMSIRange+0xc0>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002b0e:	2000      	movs	r0, #0
}
 8002b10:	b009      	add	sp, #36	; 0x24
 8002b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 8002b16:	fbb5 f5f3 	udiv	r5, r5, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b1a:	2300      	movs	r3, #0
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b1c:	f856 2b04 	ldr.w	r2, [r6], #4
 8002b20:	4295      	cmp	r5, r2
 8002b22:	d805      	bhi.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0xac>
        latency = FLASH_LATENCY_RANGE[index];
 8002b24:	aa08      	add	r2, sp, #32
 8002b26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002b2a:	f853 4c10 	ldr.w	r4, [r3, #-16]
        break;
 8002b2e:	e7e0      	b.n	8002af2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b30:	3301      	adds	r3, #1
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d1f2      	bne.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x98>
 8002b36:	e7db      	b.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e7f3      	b.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e7f1      	b.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e7ef      	b.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0xa0>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b44:	f7fe fd26 	bl	8001594 <HAL_GetTick>
 8002b48:	1b80      	subs	r0, r0, r6
 8002b4a:	2802      	cmp	r0, #2
 8002b4c:	d9da      	bls.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x80>
      return HAL_TIMEOUT;
 8002b4e:	2003      	movs	r0, #3
 8002b50:	e7de      	b.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8002b52:	bf00      	nop
 8002b54:	08006818 	.word	0x08006818
 8002b58:	08006858 	.word	0x08006858
 8002b5c:	08006918 	.word	0x08006918
 8002b60:	006acfc0 	.word	0x006acfc0
 8002b64:	58004000 	.word	0x58004000
 8002b68:	000f4240 	.word	0x000f4240

08002b6c <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	689a      	ldr	r2, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b72:	f012 020c 	ands.w	r2, r2, #12
 8002b76:	d10a      	bne.n	8002b8e <HAL_RCC_GetSysClockFreq+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002b78:	681b      	ldr	r3, [r3, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002b7a:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b80:	2bb0      	cmp	r3, #176	; 0xb0
 8002b82:	bf28      	it	cs
 8002b84:	23b0      	movcs	r3, #176	; 0xb0
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b8c:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b8e:	2a04      	cmp	r2, #4
 8002b90:	d035      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x92>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b92:	2a08      	cmp	r2, #8
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x3a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b96:	681b      	ldr	r3, [r3, #0]
      sysclockfreq = HSE_VALUE;
 8002b98:	481b      	ldr	r0, [pc, #108]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b9a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ba0:	bf08      	it	eq
 8002ba2:	4618      	moveq	r0, r3
 8002ba4:	4770      	bx	lr
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002bac:	2a02      	cmp	r2, #2
 8002bae:	d024      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x8e>
 8002bb0:	2a03      	cmp	r2, #3
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	d117      	bne.n	8002be6 <HAL_RCC_GetSysClockFreq+0x7a>
          pllinputfreq = HSE_VALUE / 2U;
 8002bb6:	4815      	ldr	r0, [pc, #84]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bb8:	4913      	ldr	r1, [pc, #76]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bba:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002bbe:	bf08      	it	eq
 8002bc0:	4601      	moveq	r1, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc6:	68d8      	ldr	r0, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002bc8:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002bca:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002bcc:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002bd0:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002bd4:	0f5b      	lsrs	r3, r3, #29
 8002bd6:	4348      	muls	r0, r1
 8002bd8:	3201      	adds	r2, #1
 8002bda:	3301      	adds	r3, #1
 8002bdc:	fbb0 f0f2 	udiv	r0, r0, r2
 8002be0:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002be4:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002bea:	2bb0      	cmp	r3, #176	; 0xb0
 8002bec:	bf28      	it	cs
 8002bee:	23b0      	movcs	r3, #176	; 0xb0
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
        break;
 8002bf8:	e7e3      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x56>
    switch (pllsource)
 8002bfa:	4903      	ldr	r1, [pc, #12]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bfc:	e7e1      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x56>
    sysclockfreq = HSI_VALUE;
 8002bfe:	4802      	ldr	r0, [pc, #8]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x9c>)
}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	08006818 	.word	0x08006818
 8002c08:	00f42400 	.word	0x00f42400
 8002c0c:	01e84800 	.word	0x01e84800

08002c10 <HAL_RCC_GetHCLKFreq>:
{
 8002c10:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002c12:	f7ff ffab 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1a:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_RCC_GetHCLKFreq+0x1c>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002c26:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c2a:	bd08      	pop	{r3, pc}
 8002c2c:	08006858 	.word	0x08006858

08002c30 <HAL_RCC_OscConfig>:
{
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 8002c32:	4604      	mov	r4, r0
 8002c34:	b908      	cbnz	r0, 8002c3a <HAL_RCC_OscConfig+0xa>
          return HAL_ERROR;
 8002c36:	2001      	movs	r0, #1
 8002c38:	e0b3      	b.n	8002da2 <HAL_RCC_OscConfig+0x172>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c3a:	6803      	ldr	r3, [r0, #0]
 8002c3c:	069a      	lsls	r2, r3, #26
 8002c3e:	d530      	bpl.n	8002ca2 <HAL_RCC_OscConfig+0x72>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c44:	69c1      	ldr	r1, [r0, #28]
 8002c46:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c48:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c4a:	f013 030c 	ands.w	r3, r3, #12
 8002c4e:	d007      	beq.n	8002c60 <HAL_RCC_OscConfig+0x30>
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	f040 808c 	bne.w	8002d6e <HAL_RCC_OscConfig+0x13e>
 8002c56:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	f040 8087 	bne.w	8002d6e <HAL_RCC_OscConfig+0x13e>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002c60:	2900      	cmp	r1, #0
 8002c62:	d0e8      	beq.n	8002c36 <HAL_RCC_OscConfig+0x6>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c68:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c70:	2bb0      	cmp	r3, #176	; 0xb0
 8002c72:	bf28      	it	cs
 8002c74:	23b0      	movcs	r3, #176	; 0xb0
 8002c76:	4298      	cmp	r0, r3
 8002c78:	d96e      	bls.n	8002d58 <HAL_RCC_OscConfig+0x128>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c7a:	f7ff ff03 	bl	8002a84 <RCC_SetFlashLatencyFromMSIRange>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d1d9      	bne.n	8002c36 <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c84:	f7ff feed 	bl	8002a62 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c88:	6a20      	ldr	r0, [r4, #32]
 8002c8a:	f7ff fef2 	bl	8002a72 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c8e:	f7ff ffbf 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c92:	4bb1      	ldr	r3, [pc, #708]	; (8002f58 <HAL_RCC_OscConfig+0x328>)
 8002c94:	6018      	str	r0, [r3, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c96:	4bb1      	ldr	r3, [pc, #708]	; (8002f5c <HAL_RCC_OscConfig+0x32c>)
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	f7fe fc3d 	bl	8001518 <HAL_InitTick>
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d1c9      	bne.n	8002c36 <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	07db      	lsls	r3, r3, #31
 8002ca6:	d511      	bpl.n	8002ccc <HAL_RCC_OscConfig+0x9c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ca8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cac:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002cae:	68d1      	ldr	r1, [r2, #12]
 8002cb0:	6862      	ldr	r2, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002cb2:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d006      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x98>
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	f040 8083 	bne.w	8002dc6 <HAL_RCC_OscConfig+0x196>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002cc0:	f001 0303 	and.w	r3, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d17e      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x196>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002cc8:	2a00      	cmp	r2, #0
 8002cca:	d0b4      	beq.n	8002c36 <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	0799      	lsls	r1, r3, #30
 8002cd0:	d51b      	bpl.n	8002d0a <HAL_RCC_OscConfig+0xda>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd6:	68e1      	ldr	r1, [r4, #12]
 8002cd8:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002cda:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002cdc:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d007      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xc4>
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	f040 8098 	bne.w	8002e1a <HAL_RCC_OscConfig+0x1ea>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002cea:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	f040 8093 	bne.w	8002e1a <HAL_RCC_OscConfig+0x1ea>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002cf4:	2900      	cmp	r1, #0
 8002cf6:	d09e      	beq.n	8002c36 <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cfc:	6921      	ldr	r1, [r4, #16]
 8002cfe:	6853      	ldr	r3, [r2, #4]
 8002d00:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d04:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002d08:	6053      	str	r3, [r2, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	f013 0f18 	tst.w	r3, #24
 8002d10:	f040 80ae 	bne.w	8002e70 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	075f      	lsls	r7, r3, #29
 8002d18:	f100 8149 	bmi.w	8002fae <HAL_RCC_OscConfig+0x37e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	065a      	lsls	r2, r3, #25
 8002d20:	f140 81ae 	bpl.w	8003080 <HAL_RCC_OscConfig+0x450>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d26:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8195 	beq.w	800305a <HAL_RCC_OscConfig+0x42a>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d30:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002d3c:	f7fe fc2a 	bl	8001594 <HAL_GetTick>
 8002d40:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002d42:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002d46:	079b      	lsls	r3, r3, #30
 8002d48:	f100 819a 	bmi.w	8003080 <HAL_RCC_OscConfig+0x450>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d4c:	f7fe fc22 	bl	8001594 <HAL_GetTick>
 8002d50:	1b83      	subs	r3, r0, r6
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d9f5      	bls.n	8002d42 <HAL_RCC_OscConfig+0x112>
 8002d56:	e023      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d58:	f7ff fe83 	bl	8002a62 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5c:	6a20      	ldr	r0, [r4, #32]
 8002d5e:	f7ff fe88 	bl	8002a72 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d64:	f7ff fe8e 	bl	8002a84 <RCC_SetFlashLatencyFromMSIRange>
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	d090      	beq.n	8002c8e <HAL_RCC_OscConfig+0x5e>
 8002d6c:	e763      	b.n	8002c36 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	b1b1      	cbz	r1, 8002da4 <HAL_RCC_OscConfig+0x174>
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fc0a 	bl	8001594 <HAL_GetTick>
 8002d80:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 8002d82:	f7ff fe68 	bl	8002a56 <LL_RCC_MSI_IsReady>
 8002d86:	b130      	cbz	r0, 8002d96 <HAL_RCC_OscConfig+0x166>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d88:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d8a:	f7ff fe6a 	bl	8002a62 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8e:	6a20      	ldr	r0, [r4, #32]
 8002d90:	f7ff fe6f 	bl	8002a72 <LL_RCC_MSI_SetCalibTrimming>
 8002d94:	e785      	b.n	8002ca2 <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d96:	f7fe fbfd 	bl	8001594 <HAL_GetTick>
 8002d9a:	1b40      	subs	r0, r0, r5
 8002d9c:	2802      	cmp	r0, #2
 8002d9e:	d9f0      	bls.n	8002d82 <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 8002da0:	2003      	movs	r0, #3
}
 8002da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002daa:	f7fe fbf3 	bl	8001594 <HAL_GetTick>
 8002dae:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8002db0:	f7ff fe51 	bl	8002a56 <LL_RCC_MSI_IsReady>
 8002db4:	2800      	cmp	r0, #0
 8002db6:	f43f af74 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dba:	f7fe fbeb 	bl	8001594 <HAL_GetTick>
 8002dbe:	1b40      	subs	r0, r0, r5
 8002dc0:	2802      	cmp	r0, #2
 8002dc2:	d9f5      	bls.n	8002db0 <HAL_RCC_OscConfig+0x180>
 8002dc4:	e7ec      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002dca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002dce:	682b      	ldr	r3, [r5, #0]
 8002dd0:	d111      	bne.n	8002df6 <HAL_RCC_OscConfig+0x1c6>
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fbdc 	bl	8001594 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002ddc:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002de0:	4605      	mov	r5, r0
 8002de2:	6833      	ldr	r3, [r6, #0]
 8002de4:	039f      	lsls	r7, r3, #14
 8002de6:	f53f af71 	bmi.w	8002ccc <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dea:	f7fe fbd3 	bl	8001594 <HAL_GetTick>
 8002dee:	1b43      	subs	r3, r0, r5
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	d9f6      	bls.n	8002de2 <HAL_RCC_OscConfig+0x1b2>
 8002df4:	e7d4      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfa:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dfc:	2a00      	cmp	r2, #0
 8002dfe:	d1eb      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1a8>
        tickstart = HAL_GetTick();
 8002e00:	f7fe fbc8 	bl	8001594 <HAL_GetTick>
 8002e04:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002e06:	682b      	ldr	r3, [r5, #0]
 8002e08:	0398      	lsls	r0, r3, #14
 8002e0a:	f57f af5f 	bpl.w	8002ccc <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0e:	f7fe fbc1 	bl	8001594 <HAL_GetTick>
 8002e12:	1b83      	subs	r3, r0, r6
 8002e14:	2b64      	cmp	r3, #100	; 0x64
 8002e16:	d9f6      	bls.n	8002e06 <HAL_RCC_OscConfig+0x1d6>
 8002e18:	e7c2      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e1a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e1e:	682b      	ldr	r3, [r5, #0]
 8002e20:	b1b1      	cbz	r1, 8002e50 <HAL_RCC_OscConfig+0x220>
 8002e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e28:	f7fe fbb4 	bl	8001594 <HAL_GetTick>
 8002e2c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002e2e:	682b      	ldr	r3, [r5, #0]
 8002e30:	055a      	lsls	r2, r3, #21
 8002e32:	d405      	bmi.n	8002e40 <HAL_RCC_OscConfig+0x210>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e34:	f7fe fbae 	bl	8001594 <HAL_GetTick>
 8002e38:	1b83      	subs	r3, r0, r6
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d9f7      	bls.n	8002e2e <HAL_RCC_OscConfig+0x1fe>
 8002e3e:	e7af      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002e40:	686b      	ldr	r3, [r5, #4]
 8002e42:	6922      	ldr	r2, [r4, #16]
 8002e44:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e4c:	606b      	str	r3, [r5, #4]
}
 8002e4e:	e75c      	b.n	8002d0a <HAL_RCC_OscConfig+0xda>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e56:	f7fe fb9d 	bl	8001594 <HAL_GetTick>
 8002e5a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002e5c:	682b      	ldr	r3, [r5, #0]
 8002e5e:	055b      	lsls	r3, r3, #21
 8002e60:	f57f af53 	bpl.w	8002d0a <HAL_RCC_OscConfig+0xda>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fe fb96 	bl	8001594 <HAL_GetTick>
 8002e68:	1b83      	subs	r3, r0, r6
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d9f6      	bls.n	8002e5c <HAL_RCC_OscConfig+0x22c>
 8002e6e:	e797      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e70:	6962      	ldr	r2, [r4, #20]
 8002e72:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002e76:	2a00      	cmp	r2, #0
 8002e78:	d072      	beq.n	8002f60 <HAL_RCC_OscConfig+0x330>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002e7a:	06de      	lsls	r6, r3, #27
 8002e7c:	d547      	bpl.n	8002f0e <HAL_RCC_OscConfig+0x2de>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002e7e:	f7ff fde3 	bl	8002a48 <LL_RCC_LSI1_IsReady>
 8002e82:	b1a0      	cbz	r0, 8002eae <HAL_RCC_OscConfig+0x27e>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002e84:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002e88:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002e94:	f7fe fb7e 	bl	8001594 <HAL_GetTick>
 8002e98:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002e9a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002e9e:	0718      	lsls	r0, r3, #28
 8002ea0:	d418      	bmi.n	8002ed4 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002ea2:	f7fe fb77 	bl	8001594 <HAL_GetTick>
 8002ea6:	1b83      	subs	r3, r0, r6
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d9f6      	bls.n	8002e9a <HAL_RCC_OscConfig+0x26a>
 8002eac:	e778      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002eae:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8002eba:	f7fe fb6b 	bl	8001594 <HAL_GetTick>
 8002ebe:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002ec0:	f7ff fdc2 	bl	8002a48 <LL_RCC_LSI1_IsReady>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d1dd      	bne.n	8002e84 <HAL_RCC_OscConfig+0x254>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ec8:	f7fe fb64 	bl	8001594 <HAL_GetTick>
 8002ecc:	1b40      	subs	r0, r0, r5
 8002ece:	2802      	cmp	r0, #2
 8002ed0:	d9f6      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x290>
 8002ed2:	e765      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002ed4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002ed8:	69a2      	ldr	r2, [r4, #24]
 8002eda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ede:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ee2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ee6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002eea:	f023 0301 	bic.w	r3, r3, #1
 8002eee:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002ef2:	f7fe fb4f 	bl	8001594 <HAL_GetTick>
 8002ef6:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002ef8:	f7ff fda6 	bl	8002a48 <LL_RCC_LSI1_IsReady>
 8002efc:	2800      	cmp	r0, #0
 8002efe:	f43f af09 	beq.w	8002d14 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f02:	f7fe fb47 	bl	8001594 <HAL_GetTick>
 8002f06:	1b40      	subs	r0, r0, r5
 8002f08:	2802      	cmp	r0, #2
 8002f0a:	d9f5      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x2c8>
 8002f0c:	e748      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002f0e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fb3b 	bl	8001594 <HAL_GetTick>
 8002f1e:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002f20:	f7ff fd92 	bl	8002a48 <LL_RCC_LSI1_IsReady>
 8002f24:	b190      	cbz	r0, 8002f4c <HAL_RCC_OscConfig+0x31c>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f26:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002f2a:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002f2e:	f023 0304 	bic.w	r3, r3, #4
 8002f32:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f36:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002f3a:	0719      	lsls	r1, r3, #28
 8002f3c:	f57f aeea 	bpl.w	8002d14 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002f40:	f7fe fb28 	bl	8001594 <HAL_GetTick>
 8002f44:	1b40      	subs	r0, r0, r5
 8002f46:	2803      	cmp	r0, #3
 8002f48:	d9f5      	bls.n	8002f36 <HAL_RCC_OscConfig+0x306>
 8002f4a:	e729      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f4c:	f7fe fb22 	bl	8001594 <HAL_GetTick>
 8002f50:	1b40      	subs	r0, r0, r5
 8002f52:	2802      	cmp	r0, #2
 8002f54:	d9e4      	bls.n	8002f20 <HAL_RCC_OscConfig+0x2f0>
 8002f56:	e723      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
 8002f58:	200000a4 	.word	0x200000a4
 8002f5c:	200000ac 	.word	0x200000ac
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f60:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002f6c:	f7fe fb12 	bl	8001594 <HAL_GetTick>
 8002f70:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f72:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002f76:	071a      	lsls	r2, r3, #28
 8002f78:	d413      	bmi.n	8002fa2 <HAL_RCC_OscConfig+0x372>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002f7a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002f7e:	f023 0301 	bic.w	r3, r3, #1
 8002f82:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002f86:	f7fe fb05 	bl	8001594 <HAL_GetTick>
 8002f8a:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002f8c:	f7ff fd5c 	bl	8002a48 <LL_RCC_LSI1_IsReady>
 8002f90:	2800      	cmp	r0, #0
 8002f92:	f43f aebf 	beq.w	8002d14 <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f96:	f7fe fafd 	bl	8001594 <HAL_GetTick>
 8002f9a:	1b40      	subs	r0, r0, r5
 8002f9c:	2802      	cmp	r0, #2
 8002f9e:	d9f5      	bls.n	8002f8c <HAL_RCC_OscConfig+0x35c>
 8002fa0:	e6fe      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002fa2:	f7fe faf7 	bl	8001594 <HAL_GetTick>
 8002fa6:	1b83      	subs	r3, r0, r6
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d9e2      	bls.n	8002f72 <HAL_RCC_OscConfig+0x342>
 8002fac:	e6f8      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fae:	4e81      	ldr	r6, [pc, #516]	; (80031b4 <HAL_RCC_OscConfig+0x584>)
 8002fb0:	6833      	ldr	r3, [r6, #0]
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	d51c      	bpl.n	8002ff0 <HAL_RCC_OscConfig+0x3c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb6:	68a3      	ldr	r3, [r4, #8]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002fbe:	d125      	bne.n	800300c <HAL_RCC_OscConfig+0x3dc>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002fc0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002fcc:	f7fe fae2 	bl	8001594 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002fd0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002fd4:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f241 3688 	movw	r6, #5000	; 0x1388
 8002fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fde:	0798      	lsls	r0, r3, #30
 8002fe0:	f53f ae9c 	bmi.w	8002d1c <HAL_RCC_OscConfig+0xec>
 8002fe4:	f7fe fad6 	bl	8001594 <HAL_GetTick>
 8002fe8:	1b43      	subs	r3, r0, r5
 8002fea:	42b3      	cmp	r3, r6
 8002fec:	d9f5      	bls.n	8002fda <HAL_RCC_OscConfig+0x3aa>
 8002fee:	e6d7      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
      HAL_PWR_EnableBkUpAccess();
 8002ff0:	f7ff fcd2 	bl	8002998 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8002ff4:	f7fe face 	bl	8001594 <HAL_GetTick>
 8002ff8:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffa:	6833      	ldr	r3, [r6, #0]
 8002ffc:	05df      	lsls	r7, r3, #23
 8002ffe:	d4da      	bmi.n	8002fb6 <HAL_RCC_OscConfig+0x386>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003000:	f7fe fac8 	bl	8001594 <HAL_GetTick>
 8003004:	1b40      	subs	r0, r0, r5
 8003006:	2802      	cmp	r0, #2
 8003008:	d9f7      	bls.n	8002ffa <HAL_RCC_OscConfig+0x3ca>
 800300a:	e6c9      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800300c:	2b05      	cmp	r3, #5
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x3ee>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003010:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003014:	f043 0304 	orr.w	r3, r3, #4
 8003018:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 800301c:	e7d0      	b.n	8002fc0 <HAL_RCC_OscConfig+0x390>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800301e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800302a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800302e:	f022 0204 	bic.w	r2, r2, #4
 8003032:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1c8      	bne.n	8002fcc <HAL_RCC_OscConfig+0x39c>
      tickstart = HAL_GetTick();
 800303a:	f7fe faab 	bl	8001594 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003042:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003044:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003048:	0799      	lsls	r1, r3, #30
 800304a:	f57f ae67 	bpl.w	8002d1c <HAL_RCC_OscConfig+0xec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fe faa1 	bl	8001594 <HAL_GetTick>
 8003052:	1b83      	subs	r3, r0, r6
 8003054:	42bb      	cmp	r3, r7
 8003056:	d9f5      	bls.n	8003044 <HAL_RCC_OscConfig+0x414>
 8003058:	e6a2      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800305a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003066:	f7fe fa95 	bl	8001594 <HAL_GetTick>
 800306a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800306c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003070:	079f      	lsls	r7, r3, #30
 8003072:	d505      	bpl.n	8003080 <HAL_RCC_OscConfig+0x450>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003074:	f7fe fa8e 	bl	8001594 <HAL_GetTick>
 8003078:	1b83      	subs	r3, r0, r6
 800307a:	2b02      	cmp	r3, #2
 800307c:	d9f6      	bls.n	800306c <HAL_RCC_OscConfig+0x43c>
 800307e:	e68f      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003080:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003082:	b909      	cbnz	r1, 8003088 <HAL_RCC_OscConfig+0x458>
  return HAL_OK;
 8003084:	2000      	movs	r0, #0
 8003086:	e68c      	b.n	8002da2 <HAL_RCC_OscConfig+0x172>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003088:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800308c:	2902      	cmp	r1, #2
 800308e:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003090:	68eb      	ldr	r3, [r5, #12]
 8003092:	f002 020c 	and.w	r2, r2, #12
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003096:	d174      	bne.n	8003182 <HAL_RCC_OscConfig+0x552>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003098:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800309a:	f003 0103 	and.w	r1, r3, #3
 800309e:	4281      	cmp	r1, r0
 80030a0:	d118      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4a4>
 80030a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030a4:	f003 0170 	and.w	r1, r3, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a8:	4281      	cmp	r1, r0
 80030aa:	d113      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4a4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80030ae:	f3c3 2106 	ubfx	r1, r3, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b2:	4281      	cmp	r1, r0
 80030b4:	d10e      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4a4>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80030b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030b8:	f403 1178 	and.w	r1, r3, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80030bc:	4281      	cmp	r1, r0
 80030be:	d109      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4a4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80030c2:	f003 6160 	and.w	r1, r3, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030c6:	4281      	cmp	r1, r0
 80030c8:	d104      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4a4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80030ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80030cc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80030d0:	428b      	cmp	r3, r1
 80030d2:	d03f      	beq.n	8003154 <HAL_RCC_OscConfig+0x524>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d4:	2a0c      	cmp	r2, #12
 80030d6:	f43f adae 	beq.w	8002c36 <HAL_RCC_OscConfig+0x6>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030da:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80030de:	682b      	ldr	r3, [r5, #0]
 80030e0:	015e      	lsls	r6, r3, #5
 80030e2:	f53f ada8 	bmi.w	8002c36 <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80030e6:	682b      	ldr	r3, [r5, #0]
 80030e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ec:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80030ee:	f7fe fa51 	bl	8001594 <HAL_GetTick>
 80030f2:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f4:	682b      	ldr	r3, [r5, #0]
 80030f6:	0198      	lsls	r0, r3, #6
 80030f8:	d426      	bmi.n	8003148 <HAL_RCC_OscConfig+0x518>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fa:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 80030fe:	68e9      	ldr	r1, [r5, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	4a2d      	ldr	r2, [pc, #180]	; (80031b8 <HAL_RCC_OscConfig+0x588>)
 8003104:	400a      	ands	r2, r1
 8003106:	4313      	orrs	r3, r2
 8003108:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800310a:	4313      	orrs	r3, r2
 800310c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800310e:	4313      	orrs	r3, r2
 8003110:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003112:	4313      	orrs	r3, r2
 8003114:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003116:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800311a:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003122:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003124:	68eb      	ldr	r3, [r5, #12]
 8003126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312a:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800312c:	f7fe fa32 	bl	8001594 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003130:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8003134:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003136:	682b      	ldr	r3, [r5, #0]
 8003138:	0199      	lsls	r1, r3, #6
 800313a:	d4a3      	bmi.n	8003084 <HAL_RCC_OscConfig+0x454>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe fa2a 	bl	8001594 <HAL_GetTick>
 8003140:	1b00      	subs	r0, r0, r4
 8003142:	2802      	cmp	r0, #2
 8003144:	d9f7      	bls.n	8003136 <HAL_RCC_OscConfig+0x506>
 8003146:	e62b      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fa24 	bl	8001594 <HAL_GetTick>
 800314c:	1b80      	subs	r0, r0, r6
 800314e:	2802      	cmp	r0, #2
 8003150:	d9d0      	bls.n	80030f4 <HAL_RCC_OscConfig+0x4c4>
 8003152:	e625      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003154:	682b      	ldr	r3, [r5, #0]
 8003156:	019a      	lsls	r2, r3, #6
 8003158:	d494      	bmi.n	8003084 <HAL_RCC_OscConfig+0x454>
 800315a:	682b      	ldr	r3, [r5, #0]
 800315c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003160:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003162:	68eb      	ldr	r3, [r5, #12]
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003168:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 800316a:	f7fe fa13 	bl	8001594 <HAL_GetTick>
 800316e:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	019b      	lsls	r3, r3, #6
 8003174:	d486      	bmi.n	8003084 <HAL_RCC_OscConfig+0x454>
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003176:	f7fe fa0d 	bl	8001594 <HAL_GetTick>
 800317a:	1b00      	subs	r0, r0, r4
 800317c:	2802      	cmp	r0, #2
 800317e:	d9f7      	bls.n	8003170 <HAL_RCC_OscConfig+0x540>
 8003180:	e60e      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003182:	2a0c      	cmp	r2, #12
 8003184:	f43f ad57 	beq.w	8002c36 <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800318e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003190:	f7fe fa00 	bl	8001594 <HAL_GetTick>
 8003194:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003196:	682b      	ldr	r3, [r5, #0]
 8003198:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800319c:	d104      	bne.n	80031a8 <HAL_RCC_OscConfig+0x578>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800319e:	68e9      	ldr	r1, [r5, #12]
 80031a0:	4a06      	ldr	r2, [pc, #24]	; (80031bc <HAL_RCC_OscConfig+0x58c>)
 80031a2:	400a      	ands	r2, r1
 80031a4:	60ea      	str	r2, [r5, #12]
 80031a6:	e76d      	b.n	8003084 <HAL_RCC_OscConfig+0x454>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a8:	f7fe f9f4 	bl	8001594 <HAL_GetTick>
 80031ac:	1b00      	subs	r0, r0, r4
 80031ae:	2802      	cmp	r0, #2
 80031b0:	d9f1      	bls.n	8003196 <HAL_RCC_OscConfig+0x566>
 80031b2:	e5f5      	b.n	8002da0 <HAL_RCC_OscConfig+0x170>
 80031b4:	58000400 	.word	0x58000400
 80031b8:	11c1808c 	.word	0x11c1808c
 80031bc:	eefefffc 	.word	0xeefefffc

080031c0 <HAL_RCC_ClockConfig>:
{
 80031c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80031c6:	4604      	mov	r4, r0
 80031c8:	b910      	cbnz	r0, 80031d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80031ca:	2001      	movs	r0, #1
}
 80031cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4e79      	ldr	r6, [pc, #484]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 80031d2:	6833      	ldr	r3, [r6, #0]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	428b      	cmp	r3, r1
 80031da:	d316      	bcc.n	800320a <HAL_RCC_ClockConfig+0x4a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	079a      	lsls	r2, r3, #30
 80031e0:	d527      	bpl.n	8003232 <HAL_RCC_ClockConfig+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80031e2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80031e6:	68a2      	ldr	r2, [r4, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80031f2:	f7fe f9cf 	bl	8001594 <HAL_GetTick>
 80031f6:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	03db      	lsls	r3, r3, #15
 80031fc:	d419      	bmi.n	8003232 <HAL_RCC_ClockConfig+0x72>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031fe:	f7fe f9c9 	bl	8001594 <HAL_GetTick>
 8003202:	1b83      	subs	r3, r0, r6
 8003204:	2b02      	cmp	r3, #2
 8003206:	d9f7      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x38>
 8003208:	e011      	b.n	800322e <HAL_RCC_ClockConfig+0x6e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	6833      	ldr	r3, [r6, #0]
 800320c:	f023 0307 	bic.w	r3, r3, #7
 8003210:	430b      	orrs	r3, r1
 8003212:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003214:	f7fe f9be 	bl	8001594 <HAL_GetTick>
 8003218:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	6833      	ldr	r3, [r6, #0]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	42ab      	cmp	r3, r5
 8003222:	d0db      	beq.n	80031dc <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003224:	f7fe f9b6 	bl	8001594 <HAL_GetTick>
 8003228:	1bc0      	subs	r0, r0, r7
 800322a:	2802      	cmp	r0, #2
 800322c:	d9f5      	bls.n	800321a <HAL_RCC_ClockConfig+0x5a>
        return HAL_TIMEOUT;
 800322e:	2003      	movs	r0, #3
 8003230:	e7cc      	b.n	80031cc <HAL_RCC_ClockConfig+0xc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	0698      	lsls	r0, r3, #26
 8003236:	d516      	bpl.n	8003266 <HAL_RCC_ClockConfig+0xa6>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003238:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800323c:	6962      	ldr	r2, [r4, #20]
 800323e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tickstart = HAL_GetTick();
 800324c:	f7fe f9a2 	bl	8001594 <HAL_GetTick>
 8003250:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003252:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003256:	0399      	lsls	r1, r3, #14
 8003258:	d405      	bmi.n	8003266 <HAL_RCC_ClockConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800325a:	f7fe f99b 	bl	8001594 <HAL_GetTick>
 800325e:	1b83      	subs	r3, r0, r6
 8003260:	2b02      	cmp	r3, #2
 8003262:	d9f6      	bls.n	8003252 <HAL_RCC_ClockConfig+0x92>
 8003264:	e7e3      	b.n	800322e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	065a      	lsls	r2, r3, #25
 800326a:	d517      	bpl.n	800329c <HAL_RCC_ClockConfig+0xdc>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800326c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8003270:	69a2      	ldr	r2, [r4, #24]
 8003272:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003276:	f023 030f 	bic.w	r3, r3, #15
 800327a:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 800327e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003282:	f7fe f987 	bl	8001594 <HAL_GetTick>
 8003286:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003288:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800328c:	03db      	lsls	r3, r3, #15
 800328e:	d405      	bmi.n	800329c <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003290:	f7fe f980 	bl	8001594 <HAL_GetTick>
 8003294:	1b83      	subs	r3, r0, r6
 8003296:	2b02      	cmp	r3, #2
 8003298:	d9f6      	bls.n	8003288 <HAL_RCC_ClockConfig+0xc8>
 800329a:	e7c8      	b.n	800322e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	075e      	lsls	r6, r3, #29
 80032a0:	d513      	bpl.n	80032ca <HAL_RCC_ClockConfig+0x10a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80032a2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80032a6:	68e2      	ldr	r2, [r4, #12]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80032b2:	f7fe f96f 	bl	8001594 <HAL_GetTick>
 80032b6:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	0398      	lsls	r0, r3, #14
 80032bc:	d405      	bmi.n	80032ca <HAL_RCC_ClockConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032be:	f7fe f969 	bl	8001594 <HAL_GetTick>
 80032c2:	1b83      	subs	r3, r0, r6
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d9f7      	bls.n	80032b8 <HAL_RCC_ClockConfig+0xf8>
 80032c8:	e7b1      	b.n	800322e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	0719      	lsls	r1, r3, #28
 80032ce:	d514      	bpl.n	80032fa <HAL_RCC_ClockConfig+0x13a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80032d0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80032d4:	6922      	ldr	r2, [r4, #16]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80032dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80032e0:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80032e2:	f7fe f957 	bl	8001594 <HAL_GetTick>
 80032e6:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	035a      	lsls	r2, r3, #13
 80032ec:	d405      	bmi.n	80032fa <HAL_RCC_ClockConfig+0x13a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032ee:	f7fe f951 	bl	8001594 <HAL_GetTick>
 80032f2:	1b83      	subs	r3, r0, r6
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d9f7      	bls.n	80032e8 <HAL_RCC_ClockConfig+0x128>
 80032f8:	e799      	b.n	800322e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	07db      	lsls	r3, r3, #31
 80032fe:	d40f      	bmi.n	8003320 <HAL_RCC_ClockConfig+0x160>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4c2d      	ldr	r4, [pc, #180]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	42ab      	cmp	r3, r5
 800330a:	d841      	bhi.n	8003390 <HAL_RCC_ClockConfig+0x1d0>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800330c:	f7ff fc80 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8003310:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <HAL_RCC_ClockConfig+0x1fc>)
 8003312:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 8003314:	f7fe f944 	bl	80015a0 <HAL_GetTickPrio>
}
 8003318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 800331c:	f7fe b8fc 	b.w	8001518 <HAL_InitTick>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003320:	6863      	ldr	r3, [r4, #4]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d120      	bne.n	8003368 <HAL_RCC_ClockConfig+0x1a8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003330:	f43f af4b 	beq.w	80031ca <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003334:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003338:	6862      	ldr	r2, [r4, #4]
 800333a:	68b3      	ldr	r3, [r6, #8]
 800333c:	f023 0303 	bic.w	r3, r3, #3
 8003340:	4313      	orrs	r3, r2
 8003342:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003344:	f7fe f926 	bl	8001594 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800334c:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800334e:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003350:	6862      	ldr	r2, [r4, #4]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800335a:	d0d1      	beq.n	8003300 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335c:	f7fe f91a 	bl	8001594 <HAL_GetTick>
 8003360:	1bc0      	subs	r0, r0, r7
 8003362:	4540      	cmp	r0, r8
 8003364:	d9f3      	bls.n	800334e <HAL_RCC_ClockConfig+0x18e>
 8003366:	e762      	b.n	800322e <HAL_RCC_ClockConfig+0x6e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003368:	2b03      	cmp	r3, #3
 800336a:	d105      	bne.n	8003378 <HAL_RCC_ClockConfig+0x1b8>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003376:	e7db      	b.n	8003330 <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003378:	b923      	cbnz	r3, 8003384 <HAL_RCC_ClockConfig+0x1c4>
      if (LL_RCC_MSI_IsReady() == 0U)
 800337a:	f7ff fb6c 	bl	8002a56 <LL_RCC_MSI_IsReady>
 800337e:	2800      	cmp	r0, #0
 8003380:	d1d8      	bne.n	8003334 <HAL_RCC_ClockConfig+0x174>
 8003382:	e722      	b.n	80031ca <HAL_RCC_ClockConfig+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800338e:	e7cf      	b.n	8003330 <HAL_RCC_ClockConfig+0x170>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	f023 0307 	bic.w	r3, r3, #7
 8003396:	432b      	orrs	r3, r5
 8003398:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800339a:	f7fe f8fb 	bl	8001594 <HAL_GetTick>
 800339e:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	42ab      	cmp	r3, r5
 80033a8:	d0b0      	beq.n	800330c <HAL_RCC_ClockConfig+0x14c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80033aa:	f7fe f8f3 	bl	8001594 <HAL_GetTick>
 80033ae:	1b80      	subs	r0, r0, r6
 80033b0:	2802      	cmp	r0, #2
 80033b2:	d9f5      	bls.n	80033a0 <HAL_RCC_ClockConfig+0x1e0>
 80033b4:	e73b      	b.n	800322e <HAL_RCC_ClockConfig+0x6e>
 80033b6:	bf00      	nop
 80033b8:	58004000 	.word	0x58004000
 80033bc:	200000a4 	.word	0x200000a4

080033c0 <LL_RCC_HSE_IsEnabledDiv2>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80033c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c4:	6818      	ldr	r0, [r3, #0]
}
 80033c6:	f3c0 5000 	ubfx	r0, r0, #20, #1
 80033ca:	4770      	bx	lr

080033cc <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80033cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d0:	6818      	ldr	r0, [r3, #0]
}
 80033d2:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80033d6:	4770      	bx	lr

080033d8 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80033d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033dc:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 80033e0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80033e4:	4770      	bx	lr

080033e6 <LL_RCC_LSI1_IsReady>:
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ea:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 80033ee:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80033f2:	4770      	bx	lr

080033f4 <LL_RCC_LSI2_IsReady>:
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80033f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f8:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 80033fc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003400:	4770      	bx	lr

08003402 <LL_RCC_MSI_GetRange>:
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 800340c:	28b0      	cmp	r0, #176	; 0xb0
 800340e:	bf28      	it	cs
 8003410:	20b0      	movcs	r0, #176	; 0xb0
 8003412:	4770      	bx	lr

08003414 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003418:	0902      	lsrs	r2, r0, #4
 800341a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800341e:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8003422:	0100      	lsls	r0, r0, #4
 8003424:	ea23 0302 	bic.w	r3, r3, r2
 8003428:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 800342c:	4318      	orrs	r0, r3
 800342e:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
}
 8003432:	4770      	bx	lr

08003434 <LL_RCC_PLL_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003438:	6818      	ldr	r0, [r3, #0]
}
 800343a:	f3c0 6040 	ubfx	r0, r0, #25, #1
 800343e:	4770      	bx	lr

08003440 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003444:	6813      	ldr	r3, [r2, #0]
 8003446:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	4770      	bx	lr

0800344e <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800344e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003452:	6813      	ldr	r3, [r2, #0]
 8003454:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003458:	6013      	str	r3, [r2, #0]
}
 800345a:	4770      	bx	lr

0800345c <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800345c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003460:	6818      	ldr	r0, [r3, #0]
}
 8003462:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8003466:	4770      	bx	lr

08003468 <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8003468:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800346a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8003474:	2b02      	cmp	r3, #2
 8003476:	d023      	beq.n	80034c0 <RCC_PLL_GetFreqDomain_Q+0x58>
 8003478:	2b03      	cmp	r3, #3
 800347a:	d019      	beq.n	80034b0 <RCC_PLL_GetFreqDomain_Q+0x48>
      }

      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800347c:	f7ff ffc1 	bl	8003402 <LL_RCC_MSI_GetRange>
 8003480:	4a10      	ldr	r2, [pc, #64]	; (80034c4 <RCC_PLL_GetFreqDomain_Q+0x5c>)
 8003482:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003486:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800348a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800348e:	68c3      	ldr	r3, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003490:	68c1      	ldr	r1, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8003492:	68c0      	ldr	r0, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003494:	f3c3 2306 	ubfx	r3, r3, #8, #7
      break;
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003498:	4353      	muls	r3, r2
 800349a:	f3c0 6042 	ubfx	r0, r0, #25, #3
 800349e:	f3c1 1202 	ubfx	r2, r1, #4, #3
 80034a2:	3201      	adds	r2, #1
 80034a4:	3001      	adds	r0, #1
 80034a6:	fbb3 f3f2 	udiv	r3, r3, r2
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 80034aa:	fbb3 f0f0 	udiv	r0, r3, r0
 80034ae:	bd08      	pop	{r3, pc}
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80034b0:	f7ff ff86 	bl	80033c0 <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 80034b4:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <RCC_PLL_GetFreqDomain_Q+0x60>)
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <RCC_PLL_GetFreqDomain_Q+0x64>)
 80034b8:	2801      	cmp	r0, #1
 80034ba:	bf08      	it	eq
 80034bc:	461a      	moveq	r2, r3
 80034be:	e7e4      	b.n	800348a <RCC_PLL_GetFreqDomain_Q+0x22>
  switch (pllsource)
 80034c0:	4a02      	ldr	r2, [pc, #8]	; (80034cc <RCC_PLL_GetFreqDomain_Q+0x64>)
 80034c2:	e7e2      	b.n	800348a <RCC_PLL_GetFreqDomain_Q+0x22>
 80034c4:	08006818 	.word	0x08006818
 80034c8:	01e84800 	.word	0x01e84800
 80034cc:	00f42400 	.word	0x00f42400

080034d0 <RCC_PLL_GetFreqDomain_P>:
{
 80034d0:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80034d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d023      	beq.n	8003528 <RCC_PLL_GetFreqDomain_P+0x58>
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d019      	beq.n	8003518 <RCC_PLL_GetFreqDomain_P+0x48>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80034e4:	f7ff ff8d 	bl	8003402 <LL_RCC_MSI_GetRange>
 80034e8:	4a10      	ldr	r2, [pc, #64]	; (800352c <RCC_PLL_GetFreqDomain_P+0x5c>)
 80034ea:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80034ee:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80034f2:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80034f6:	68c3      	ldr	r3, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80034f8:	68c1      	ldr	r1, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80034fa:	68c0      	ldr	r0, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80034fc:	f3c3 2306 	ubfx	r3, r3, #8, #7
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003500:	4353      	muls	r3, r2
 8003502:	f3c0 4044 	ubfx	r0, r0, #17, #5
 8003506:	f3c1 1202 	ubfx	r2, r1, #4, #3
 800350a:	3201      	adds	r2, #1
 800350c:	3001      	adds	r0, #1
 800350e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003512:	fbb3 f0f0 	udiv	r0, r3, r0
 8003516:	bd08      	pop	{r3, pc}
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003518:	f7ff ff52 	bl	80033c0 <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <RCC_PLL_GetFreqDomain_P+0x60>)
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <RCC_PLL_GetFreqDomain_P+0x64>)
 8003520:	2801      	cmp	r0, #1
 8003522:	bf08      	it	eq
 8003524:	461a      	moveq	r2, r3
 8003526:	e7e4      	b.n	80034f2 <RCC_PLL_GetFreqDomain_P+0x22>
  switch (pllsource)
 8003528:	4a02      	ldr	r2, [pc, #8]	; (8003534 <RCC_PLL_GetFreqDomain_P+0x64>)
 800352a:	e7e2      	b.n	80034f2 <RCC_PLL_GetFreqDomain_P+0x22>
 800352c:	08006818 	.word	0x08006818
 8003530:	01e84800 	.word	0x01e84800
 8003534:	00f42400 	.word	0x00f42400

08003538 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8003538:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0303 	and.w	r3, r3, #3

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8003544:	2b02      	cmp	r3, #2
 8003546:	d023      	beq.n	8003590 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8003548:	2b03      	cmp	r3, #3
 800354a:	d019      	beq.n	8003580 <RCC_PLLSAI1_GetFreqDomain_Q+0x48>
        pllinputfreq = HSE_VALUE;
      }
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800354c:	f7ff ff59 	bl	8003402 <LL_RCC_MSI_GetRange>
 8003550:	4a10      	ldr	r2, [pc, #64]	; (8003594 <RCC_PLLSAI1_GetFreqDomain_Q+0x5c>)
 8003552:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003556:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 800355a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800355e:	6903      	ldr	r3, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003560:	68c1      	ldr	r1, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8003562:	6900      	ldr	r0, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003564:	f3c3 2306 	ubfx	r3, r3, #8, #7
      break;
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003568:	4353      	muls	r3, r2
 800356a:	f3c0 6042 	ubfx	r0, r0, #25, #3
 800356e:	f3c1 1202 	ubfx	r2, r1, #4, #3
 8003572:	3201      	adds	r2, #1
 8003574:	3001      	adds	r0, #1
 8003576:	fbb3 f3f2 	udiv	r3, r3, r2
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 800357a:	fbb3 f0f0 	udiv	r0, r3, r0
 800357e:	bd08      	pop	{r3, pc}
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003580:	f7ff ff1e 	bl	80033c0 <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 8003584:	4a04      	ldr	r2, [pc, #16]	; (8003598 <RCC_PLLSAI1_GetFreqDomain_Q+0x60>)
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <RCC_PLLSAI1_GetFreqDomain_Q+0x64>)
 8003588:	2801      	cmp	r0, #1
 800358a:	bf08      	it	eq
 800358c:	461a      	moveq	r2, r3
 800358e:	e7e4      	b.n	800355a <RCC_PLLSAI1_GetFreqDomain_Q+0x22>
  switch (pllsource)
 8003590:	4a02      	ldr	r2, [pc, #8]	; (800359c <RCC_PLLSAI1_GetFreqDomain_Q+0x64>)
 8003592:	e7e2      	b.n	800355a <RCC_PLLSAI1_GetFreqDomain_Q+0x22>
 8003594:	08006818 	.word	0x08006818
 8003598:	01e84800 	.word	0x01e84800
 800359c:	00f42400 	.word	0x00f42400

080035a0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035a2:	6805      	ldr	r5, [r0, #0]
 80035a4:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 80035a8:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch (PeriphClkInit->Sai1ClockSelection)
 80035ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80035ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b2:	f000 80d9 	beq.w	8003768 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80035b6:	f200 80c5 	bhi.w	8003744 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80db 	beq.w	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80035c0:	2501      	movs	r5, #1
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	0518      	lsls	r0, r3, #20
 80035c6:	d515      	bpl.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80035c8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80035cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035ce:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 80035d2:	f407 7740 	and.w	r7, r7, #768	; 0x300
 80035d6:	42bb      	cmp	r3, r7
 80035d8:	d00c      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      HAL_PWR_EnableBkUpAccess();
 80035da:	f7ff f9dd 	bl	8002998 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80035de:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80035e2:	2f00      	cmp	r7, #0
 80035e4:	f040 80fb 	bne.w	80037de <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80035e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80035ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	07da      	lsls	r2, r3, #31
 80035f8:	d509      	bpl.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x6e>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80035fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035fe:	69a0      	ldr	r0, [r4, #24]
 8003600:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003604:	f022 0203 	bic.w	r2, r2, #3
 8003608:	4302      	orrs	r2, r0
 800360a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800360e:	079f      	lsls	r7, r3, #30
 8003610:	d509      	bpl.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x86>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003612:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003616:	69e0      	ldr	r0, [r4, #28]
 8003618:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800361c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003620:	4302      	orrs	r2, r0
 8003622:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003626:	06de      	lsls	r6, r3, #27
 8003628:	d50c      	bpl.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800362a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800362c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003630:	0c31      	lsrs	r1, r6, #16
 8003632:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003636:	0409      	lsls	r1, r1, #16
 8003638:	ea22 0201 	bic.w	r2, r2, r1
 800363c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8003640:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003644:	0698      	lsls	r0, r3, #26
 8003646:	d50c      	bpl.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800364a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800364e:	0c31      	lsrs	r1, r6, #16
 8003650:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003654:	0409      	lsls	r1, r1, #16
 8003656:	ea22 0201 	bic.w	r2, r2, r1
 800365a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800365e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003662:	0759      	lsls	r1, r3, #29
 8003664:	d502      	bpl.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003666:	6a20      	ldr	r0, [r4, #32]
 8003668:	f7ff fed4 	bl	8003414 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	071a      	lsls	r2, r3, #28
 8003670:	d502      	bpl.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003672:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003674:	f7ff fece 	bl	8003414 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	05db      	lsls	r3, r3, #23
 800367c:	d511      	bpl.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800367e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003684:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003688:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800368c:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800368e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8003692:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003696:	f040 80ca 	bne.w	800382e <HAL_RCCEx_PeriphCLKConfig+0x28e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800369a:	68d3      	ldr	r3, [r2, #12]
 800369c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a0:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a2:	6826      	ldr	r6, [r4, #0]
 80036a4:	05b7      	lsls	r7, r6, #22
 80036a6:	d51a      	bpl.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80036aa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80036ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b2:	d003      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80036b4:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 80036b8:	f040 80f1 	bne.w	800389e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80036bc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80036c0:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80036c4:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036c6:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80036ca:	bf08      	it	eq
 80036cc:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80036d0:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 80036d4:	bf02      	ittt	eq
 80036d6:	68d3      	ldreq	r3, [r2, #12]
 80036d8:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 80036dc:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036de:	0570      	lsls	r0, r6, #21
 80036e0:	d511      	bpl.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x166>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80036e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036e6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80036e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036ec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80036f0:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80036f2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80036f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80036fa:	f040 80de 	bne.w	80038ba <HAL_RCCEx_PeriphCLKConfig+0x31a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036fe:	68d3      	ldr	r3, [r2, #12]
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003706:	6822      	ldr	r2, [r4, #0]
 8003708:	04d1      	lsls	r1, r2, #19
 800370a:	d509      	bpl.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x180>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800370c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003710:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003712:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8003716:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800371a:	4303      	orrs	r3, r0
 800371c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003720:	0493      	lsls	r3, r2, #18
 8003722:	d50d      	bpl.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003728:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800372a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800372c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003730:	430b      	orrs	r3, r1
 8003732:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003734:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003736:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003738:	f023 0303 	bic.w	r3, r3, #3
 800373c:	430b      	orrs	r3, r1
 800373e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003740:	4628      	mov	r0, r5
 8003742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->Sai1ClockSelection)
 8003744:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003748:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800374c:	f47f af38 	bne.w	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x20>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003754:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003756:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800375a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800375e:	430b      	orrs	r3, r1
 8003760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003764:	2500      	movs	r5, #0
 8003766:	e72c      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x22>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800376c:	68d3      	ldr	r3, [r2, #12]
 800376e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003772:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 8003774:	e7ec      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  __HAL_RCC_PLLSAI1_DISABLE();
 8003776:	f7ff fe6a 	bl	800344e <LL_RCC_PLLSAI1_Disable>
  tickstart = HAL_GetTick();
 800377a:	f7fd ff0b 	bl	8001594 <HAL_GetTick>
 800377e:	4605      	mov	r5, r0
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003780:	f7ff fe6c 	bl	800345c <LL_RCC_PLLSAI1_IsReady>
 8003784:	b9a0      	cbnz	r0, 80037b0 <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378a:	6861      	ldr	r1, [r4, #4]
 800378c:	6913      	ldr	r3, [r2, #16]
 800378e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003792:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003796:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003798:	6913      	ldr	r3, [r2, #16]
 800379a:	68a1      	ldr	r1, [r4, #8]
 800379c:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 80037a4:	f7ff fe4c 	bl	8003440 <LL_RCC_PLLSAI1_Enable>
    tickstart = HAL_GetTick();
 80037a8:	f7fd fef4 	bl	8001594 <HAL_GetTick>
 80037ac:	4605      	mov	r5, r0
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037ae:	e00b      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037b0:	f7fd fef0 	bl	8001594 <HAL_GetTick>
 80037b4:	1b40      	subs	r0, r0, r5
 80037b6:	2802      	cmp	r0, #2
 80037b8:	d9e2      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
{
 80037ba:	2503      	movs	r5, #3
 80037bc:	e701      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x22>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037be:	f7fd fee9 	bl	8001594 <HAL_GetTick>
 80037c2:	1b40      	subs	r0, r0, r5
 80037c4:	2802      	cmp	r0, #2
 80037c6:	d8f8      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037c8:	f7ff fe48 	bl	800345c <LL_RCC_PLLSAI1_IsReady>
 80037cc:	2801      	cmp	r0, #1
 80037ce:	d1f6      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80037d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d4:	6961      	ldr	r1, [r4, #20]
 80037d6:	6913      	ldr	r3, [r2, #16]
 80037d8:	430b      	orrs	r3, r1
 80037da:	6113      	str	r3, [r2, #16]
    if (ret == HAL_OK)
 80037dc:	e7b8      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037de:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80037e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037e6:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037ea:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80037ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037f2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80037f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80037f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fc:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 80037fe:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003802:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003806:	07d9      	lsls	r1, r3, #31
 8003808:	f57f aef4 	bpl.w	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
          tickstart = HAL_GetTick();
 800380c:	f7fd fec2 	bl	8001594 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f241 3788 	movw	r7, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8003814:	4606      	mov	r6, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8003816:	f7ff fddf 	bl	80033d8 <LL_RCC_LSE_IsReady>
 800381a:	2801      	cmp	r0, #1
 800381c:	f43f aeea 	beq.w	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fd feb8 	bl	8001594 <HAL_GetTick>
 8003824:	1b80      	subs	r0, r0, r6
 8003826:	42b8      	cmp	r0, r7
 8003828:	d9f5      	bls.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x276>
              ret = HAL_TIMEOUT;
 800382a:	2503      	movs	r5, #3
 800382c:	e6e2      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800382e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003832:	f47f af36 	bne.w	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  __HAL_RCC_PLLSAI1_DISABLE();
 8003836:	f7ff fe0a 	bl	800344e <LL_RCC_PLLSAI1_Disable>
  tickstart = HAL_GetTick();
 800383a:	f7fd feab 	bl	8001594 <HAL_GetTick>
 800383e:	4606      	mov	r6, r0
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003840:	f7ff fe0c 	bl	800345c <LL_RCC_PLLSAI1_IsReady>
 8003844:	b9a0      	cbnz	r0, 8003870 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800384a:	6861      	ldr	r1, [r4, #4]
 800384c:	6913      	ldr	r3, [r2, #16]
 800384e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003852:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003856:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003858:	6913      	ldr	r3, [r2, #16]
 800385a:	68e1      	ldr	r1, [r4, #12]
 800385c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8003860:	430b      	orrs	r3, r1
 8003862:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 8003864:	f7ff fdec 	bl	8003440 <LL_RCC_PLLSAI1_Enable>
    tickstart = HAL_GetTick();
 8003868:	f7fd fe94 	bl	8001594 <HAL_GetTick>
 800386c:	4606      	mov	r6, r0
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800386e:	e00b      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003870:	f7fd fe90 	bl	8001594 <HAL_GetTick>
 8003874:	1b80      	subs	r0, r0, r6
 8003876:	2802      	cmp	r0, #2
 8003878:	d9e2      	bls.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
              ret = HAL_TIMEOUT;
 800387a:	2503      	movs	r5, #3
 800387c:	e711      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800387e:	f7fd fe89 	bl	8001594 <HAL_GetTick>
 8003882:	1b80      	subs	r0, r0, r6
 8003884:	2802      	cmp	r0, #2
 8003886:	d8f8      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003888:	f7ff fde8 	bl	800345c <LL_RCC_PLLSAI1_IsReady>
 800388c:	2801      	cmp	r0, #1
 800388e:	d1f6      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003894:	6961      	ldr	r1, [r4, #20]
 8003896:	6913      	ldr	r3, [r2, #16]
 8003898:	430b      	orrs	r3, r1
 800389a:	6113      	str	r3, [r2, #16]
      if (ret != HAL_OK)
 800389c:	e701      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800389e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80038a2:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80038a6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80038aa:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038ae:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80038b2:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 80038b6:	4301      	orrs	r1, r0
 80038b8:	e705      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038ba:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80038be:	f47f af22 	bne.w	8003706 <HAL_RCCEx_PeriphCLKConfig+0x166>
  __HAL_RCC_PLLSAI1_DISABLE();
 80038c2:	f7ff fdc4 	bl	800344e <LL_RCC_PLLSAI1_Disable>
  tickstart = HAL_GetTick();
 80038c6:	f7fd fe65 	bl	8001594 <HAL_GetTick>
 80038ca:	4606      	mov	r6, r0
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038cc:	f7ff fdc6 	bl	800345c <LL_RCC_PLLSAI1_IsReady>
 80038d0:	b9a0      	cbnz	r0, 80038fc <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80038d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d6:	6861      	ldr	r1, [r4, #4]
 80038d8:	6913      	ldr	r3, [r2, #16]
 80038da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038e2:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80038e4:	6913      	ldr	r3, [r2, #16]
 80038e6:	6921      	ldr	r1, [r4, #16]
 80038e8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 80038f0:	f7ff fda6 	bl	8003440 <LL_RCC_PLLSAI1_Enable>
    tickstart = HAL_GetTick();
 80038f4:	f7fd fe4e 	bl	8001594 <HAL_GetTick>
 80038f8:	4606      	mov	r6, r0
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038fa:	e00b      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x374>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038fc:	f7fd fe4a 	bl	8001594 <HAL_GetTick>
 8003900:	1b80      	subs	r0, r0, r6
 8003902:	2802      	cmp	r0, #2
 8003904:	d9e2      	bls.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x32c>
              ret = HAL_TIMEOUT;
 8003906:	2503      	movs	r5, #3
 8003908:	e6fd      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x166>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800390a:	f7fd fe43 	bl	8001594 <HAL_GetTick>
 800390e:	1b80      	subs	r0, r0, r6
 8003910:	2802      	cmp	r0, #2
 8003912:	d8f8      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x366>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003914:	f7ff fda2 	bl	800345c <LL_RCC_PLLSAI1_IsReady>
 8003918:	2801      	cmp	r0, #1
 800391a:	d1f6      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800391c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003920:	6961      	ldr	r1, [r4, #20]
 8003922:	6913      	ldr	r3, [r2, #16]
 8003924:	430b      	orrs	r3, r1
 8003926:	6113      	str	r3, [r2, #16]
      if (ret != HAL_OK)
 8003928:	e6ed      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x166>

0800392a <HAL_RCCEx_GetRngCLKSource>:
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 800392a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 8003932:	f010 4040 	ands.w	r0, r0, #3221225472	; 0xc0000000
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8003936:	bf02      	ittt	eq
 8003938:	f8d3 0088 	ldreq.w	r0, [r3, #136]	; 0x88
 800393c:	f000 6040 	andeq.w	r0, r0, #201326592	; 0xc000000
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 8003940:	f040 5080 	orreq.w	r0, r0, #268435456	; 0x10000000
}
 8003944:	4770      	bx	lr

08003946 <HAL_RCCEx_GetPeriphCLKConfig>:
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
{
 800394a:	b508      	push	{r3, lr}
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SMPS;
 800394c:	f643 737f 	movw	r3, #16255	; 0x3f7f
 8003950:	6003      	str	r3, [r0, #0]
 8003952:	690b      	ldr	r3, [r1, #16]
 8003954:	f3c3 2306 	ubfx	r3, r3, #8, #7
  PeriphClkInit->PLLSAI1.PLLN = LL_RCC_PLLSAI1_GetN();
 8003958:	6043      	str	r3, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 800395a:	690b      	ldr	r3, [r1, #16]
 800395c:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
  PeriphClkInit->PLLSAI1.PLLP = LL_RCC_PLLSAI1_GetP();
 8003960:	6083      	str	r3, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8003962:	690b      	ldr	r3, [r1, #16]
 8003964:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
  PeriphClkInit->PLLSAI1.PLLR = LL_RCC_PLLSAI1_GetR();
 8003968:	6103      	str	r3, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 800396a:	690b      	ldr	r3, [r1, #16]
 800396c:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
  PeriphClkInit->PLLSAI1.PLLQ = LL_RCC_PLLSAI1_GetQ();
 8003970:	60c3      	str	r3, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003972:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003976:	f003 0303 	and.w	r3, r3, #3
  PeriphClkInit->Usart1ClockSelection   = __HAL_RCC_GET_USART1_SOURCE();
 800397a:	6183      	str	r3, [r0, #24]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800397c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003980:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
  PeriphClkInit->Lpuart1ClockSelection  = __HAL_RCC_GET_LPUART1_SOURCE();
 8003984:	61c3      	str	r3, [r0, #28]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8003986:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003990:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
  PeriphClkInit->I2c1ClockSelection     = __HAL_RCC_GET_I2C1_SOURCE();
 8003994:	6203      	str	r3, [r0, #32]
 8003996:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800399a:	091b      	lsrs	r3, r3, #4
 800399c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80039a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  PeriphClkInit->I2c3ClockSelection     = __HAL_RCC_GET_I2C3_SOURCE();
 80039a4:	6243      	str	r3, [r0, #36]	; 0x24
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 80039a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80039aa:	0c1b      	lsrs	r3, r3, #16
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
  PeriphClkInit->Lptim1ClockSelection   = __HAL_RCC_GET_LPTIM1_SOURCE();
 80039b4:	6283      	str	r3, [r0, #40]	; 0x28
 80039b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80039ba:	0c1b      	lsrs	r3, r3, #16
 80039bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  PeriphClkInit->Lptim2ClockSelection   = __HAL_RCC_GET_LPTIM2_SOURCE();
 80039c4:	62c3      	str	r3, [r0, #44]	; 0x2c
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 80039c6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80039ca:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
  PeriphClkInit->Sai1ClockSelection     = __HAL_RCC_GET_SAI1_SOURCE();
 80039ce:	6303      	str	r3, [r0, #48]	; 0x30
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80039d0:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 80039d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
  PeriphClkInit->RTCClockSelection      = __HAL_RCC_GET_RTC_SOURCE();
 80039d8:	6403      	str	r3, [r0, #64]	; 0x40
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 80039da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80039de:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
  PeriphClkInit->UsbClockSelection      = __HAL_RCC_GET_USB_SOURCE();
 80039e2:	6343      	str	r3, [r0, #52]	; 0x34
{
 80039e4:	4602      	mov	r2, r0
  PeriphClkInit->RngClockSelection      = HAL_RCCEx_GetRngCLKSource();
 80039e6:	f7ff ffa0 	bl	800392a <HAL_RCCEx_GetRngCLKSource>
 80039ea:	6390      	str	r0, [r2, #56]	; 0x38
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 80039ec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80039f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  PeriphClkInit->AdcClockSelection      = __HAL_RCC_GET_ADC_SOURCE();
 80039f4:	63d3      	str	r3, [r2, #60]	; 0x3c
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 80039f6:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 80039fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  PeriphClkInit->RFWakeUpClockSelection = __HAL_RCC_GET_RFWAKEUP_SOURCE();
 80039fe:	6453      	str	r3, [r2, #68]	; 0x44
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 8003a00:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003a02:	f003 0330 	and.w	r3, r3, #48	; 0x30
  PeriphClkInit->SmpsDivSelection       = __HAL_RCC_GET_SMPS_DIV();
 8003a06:	64d3      	str	r3, [r2, #76]	; 0x4c
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL));
 8003a08:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003a0a:	f003 0303 	and.w	r3, r3, #3
  PeriphClkInit->SmpsClockSelection     = __HAL_RCC_GET_SMPS_SOURCE();
 8003a0e:	6493      	str	r3, [r2, #72]	; 0x48
}
 8003a10:	bd08      	pop	{r3, pc}
	...

08003a14 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8003a14:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 8003a16:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003a1a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8003a1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a20:	d122      	bne.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003a22:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 8003a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2e:	d108      	bne.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      if (LL_RCC_LSE_IsReady() == 1U)
 8003a30:	f7ff fcd2 	bl	80033d8 <LL_RCC_LSE_IsReady>
 8003a34:	2801      	cmp	r0, #1
 8003a36:	d001      	beq.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 8003a38:	2000      	movs	r0, #0
 8003a3a:	e001      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
        frequency = LSE_VALUE;
 8003a3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
 8003a40:	bd10      	pop	{r4, pc}
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 8003a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a46:	d10a      	bne.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8003a48:	f7ff fccd 	bl	80033e6 <LL_RCC_LSI1_IsReady>
 8003a4c:	4602      	mov	r2, r0
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8003a4e:	f7ff fcd1 	bl	80033f4 <LL_RCC_LSI2_IsReady>
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8003a52:	2a01      	cmp	r2, #1
 8003a54:	f040 81a5 	bne.w	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
        frequency = LSI_VALUE;
 8003a58:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8003a5c:	e7f0      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 8003a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a62:	d1e9      	bne.n	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      frequency = HSE_VALUE / 32U;
 8003a64:	48ac      	ldr	r0, [pc, #688]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003a66:	e7eb      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003a68:	2840      	cmp	r0, #64	; 0x40
 8003a6a:	d13c      	bne.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8003a6c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003a70:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 8003a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a78:	f000 811d 	beq.w	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8003a7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a80:	f000 816e 	beq.w	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003a84:	b113      	cbz	r3, 8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8003a86:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8003a8a:	e7d9      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8003a8c:	f7ff fce6 	bl	800345c <LL_RCC_PLLSAI1_IsReady>
 8003a90:	2801      	cmp	r0, #1
 8003a92:	d1d1      	bne.n	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003a94:	68e3      	ldr	r3, [r4, #12]
 8003a96:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d021      	beq.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d017      	beq.n	8003ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003aa2:	f7ff fcae 	bl	8003402 <LL_RCC_MSI_GetRange>
 8003aa6:	4a9d      	ldr	r2, [pc, #628]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003aa8:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003aac:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab4:	6910      	ldr	r0, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003ab6:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8003ab8:	6912      	ldr	r2, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003aba:	f3c0 2006 	ubfx	r0, r0, #8, #7
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003abe:	4358      	muls	r0, r3
 8003ac0:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	fbb0 f0f3 	udiv	r0, r0, r3
 8003aca:	f3c2 4344 	ubfx	r3, r2, #17, #5
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003ace:	3301      	adds	r3, #1
 8003ad0:	e01e      	b.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003ad2:	f7ff fc75 	bl	80033c0 <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 8003ad6:	4a92      	ldr	r2, [pc, #584]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8003ad8:	4b92      	ldr	r3, [pc, #584]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8003ada:	2801      	cmp	r0, #1
 8003adc:	bf18      	it	ne
 8003ade:	4613      	movne	r3, r2
 8003ae0:	e7e6      	b.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  switch (pllsource)
 8003ae2:	4b90      	ldr	r3, [pc, #576]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8003ae4:	e7e4      	b.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8003ae6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003aea:	d134      	bne.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 8003aec:	f7ff ff1d 	bl	800392a <HAL_RCCEx_GetRngCLKSource>
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 8003af0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003af4:	d0a8      	beq.n	8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 8003af6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8003afa:	d099      	beq.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 8003afc:	f1b0 5fc0 	cmp.w	r0, #402653184	; 0x18000000
 8003b00:	d109      	bne.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      if (LL_RCC_PLL_IsReady() == 1U)
 8003b02:	f7ff fc97 	bl	8003434 <LL_RCC_PLL_IsReady>
 8003b06:	2801      	cmp	r0, #1
 8003b08:	d196      	bne.n	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 8003b0a:	f7ff fcad 	bl	8003468 <RCC_PLL_GetFreqDomain_Q>
 8003b0e:	2303      	movs	r3, #3
 8003b10:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b14:	e794      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 8003b16:	f1b0 5fe0 	cmp.w	r0, #469762048	; 0x1c000000
 8003b1a:	d10a      	bne.n	8003b32 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	079c      	lsls	r4, r3, #30
 8003b20:	d58a      	bpl.n	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 8003b22:	f7ff fc6e 	bl	8003402 <LL_RCC_MSI_GetRange>
 8003b26:	4b7d      	ldr	r3, [pc, #500]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003b28:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003b2c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003b30:	e7ed      	b.n	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 8003b32:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
 8003b36:	d108      	bne.n	8003b4a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8003b38:	f7ff fc90 	bl	800345c <LL_RCC_PLLSAI1_IsReady>
 8003b3c:	2801      	cmp	r0, #1
 8003b3e:	f47f af7b 	bne.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
}
 8003b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8003b46:	f7ff bcf7 	b.w	8003538 <RCC_PLLSAI1_GetFreqDomain_Q>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003b4a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003b4e:	0798      	lsls	r0, r3, #30
 8003b50:	f100 810b 	bmi.w	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8003b54:	e770      	b.n	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 8003b56:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003b5a:	d128      	bne.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8003b5c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003b60:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 8003b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b68:	d00c      	beq.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8003b6a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003b6e:	d012      	beq.n	8003b96 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8003b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b74:	d0e0      	beq.n	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003b76:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003b7a:	079a      	lsls	r2, r3, #30
 8003b7c:	f57f af5c 	bpl.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = HSI48_VALUE;
 8003b80:	4869      	ldr	r0, [pc, #420]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8003b82:	e75d      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
        if (LL_RCC_PLL_IsReady() == 1U)
 8003b84:	f7ff fc56 	bl	8003434 <LL_RCC_PLL_IsReady>
 8003b88:	2801      	cmp	r0, #1
 8003b8a:	f47f af55 	bne.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
}
 8003b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          frequency = RCC_PLL_GetFreqDomain_Q();
 8003b92:	f7ff bc69 	b.w	8003468 <RCC_PLL_GetFreqDomain_Q>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	0799      	lsls	r1, r3, #30
 8003b9a:	f57f af4d 	bpl.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b9e:	f7ff fc30 	bl	8003402 <LL_RCC_MSI_GetRange>
 8003ba2:	4b5e      	ldr	r3, [pc, #376]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003ba4:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003ba8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003bac:	e748      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8003bae:	2801      	cmp	r0, #1
 8003bb0:	d123      	bne.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003bb2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003bb6:	f003 0303 	and.w	r3, r3, #3
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	f000 80d0 	beq.w	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	f43f af35 	beq.w	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d103      	bne.n	8003bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
}
 8003bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        frequency = HAL_RCC_GetSysClockFreq();
 8003bce:	f7fe bfcd 	b.w	8002b6c <HAL_RCC_GetSysClockFreq>
        frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8003bd2:	f7fe ffcb 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003bd6:	68a2      	ldr	r2, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003bd8:	68a3      	ldr	r3, [r4, #8]
 8003bda:	4954      	ldr	r1, [pc, #336]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8003bdc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003be0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003be4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003be8:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8003bec:	4a50      	ldr	r2, [pc, #320]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	40d8      	lsrs	r0, r3
        break;
 8003bf8:	e722      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8003bfa:	2802      	cmp	r0, #2
 8003bfc:	d11c      	bne.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003bfe:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003c02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 8003c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c0a:	f000 80a9 	beq.w	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003c0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c12:	f43f af0d 	beq.w	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1a:	d0d6      	beq.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8003c1c:	f7fe ffa6 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003c20:	68a2      	ldr	r2, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003c22:	68a3      	ldr	r3, [r4, #8]
 8003c24:	4941      	ldr	r1, [pc, #260]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8003c26:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003c2a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003c2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c32:	fbb0 f0f2 	udiv	r0, r0, r2
 8003c36:	e7d9      	b.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003c38:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003c3c:	d144      	bne.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8003c3e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003c42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 8003c46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4a:	d034      	beq.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8003c4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c50:	d0bb      	beq.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8003c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c56:	f47f aeef 	bne.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8003c5a:	f7ff fbff 	bl	800345c <LL_RCC_PLLSAI1_IsReady>
 8003c5e:	2801      	cmp	r0, #1
 8003c60:	f47f aeea 	bne.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d01f      	beq.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d015      	beq.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c76:	f7ff fbc4 	bl	8003402 <LL_RCC_MSI_GetRange>
 8003c7a:	4a28      	ldr	r2, [pc, #160]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003c7c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003c80:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c88:	6910      	ldr	r0, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003c8a:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8003c8c:	6912      	ldr	r2, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003c8e:	f3c0 2006 	ubfx	r0, r0, #8, #7
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003c92:	4358      	muls	r0, r3
 8003c94:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c9e:	0f53      	lsrs	r3, r2, #29
 8003ca0:	e715      	b.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003ca2:	f7ff fb8d 	bl	80033c0 <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8003ca8:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8003caa:	2801      	cmp	r0, #1
 8003cac:	bf18      	it	ne
 8003cae:	4613      	movne	r3, r2
 8003cb0:	e7e8      	b.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
  switch (pllsource)
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8003cb4:	e7e6      	b.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
        if (LL_RCC_PLL_IsReady() == 1U)
 8003cb6:	f7ff fbbd 	bl	8003434 <LL_RCC_PLL_IsReady>
 8003cba:	2801      	cmp	r0, #1
 8003cbc:	f47f aebc 	bne.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
}
 8003cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          frequency = RCC_PLL_GetFreqDomain_P();
 8003cc4:	f7ff bc04 	b.w	80034d0 <RCC_PLL_GetFreqDomain_P>
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8003cc8:	2804      	cmp	r0, #4
 8003cca:	d115      	bne.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8003ccc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 8003cd0:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	f43f af74 	beq.w	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8003ce2:	f502 7280 	add.w	r2, r2, #256	; 0x100
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d03a      	beq.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8003cea:	f7fe ff3f 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf2:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	e795      	b.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8003cf8:	2808      	cmp	r0, #8
 8003cfa:	d11f      	bne.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8003cfc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 8003d00:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	f43f af5c 	beq.w	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8003d12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d16:	e7e6      	b.n	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003d18:	000f4240 	.word	0x000f4240
 8003d1c:	08006818 	.word	0x08006818
 8003d20:	01e84800 	.word	0x01e84800
 8003d24:	00f42400 	.word	0x00f42400
 8003d28:	02dc6c00 	.word	0x02dc6c00
 8003d2c:	08006858 	.word	0x08006858
 8003d30:	080068f8 	.word	0x080068f8
 8003d34:	00030100 	.word	0x00030100
 8003d38:	00301000 	.word	0x00301000
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8003d3c:	2810      	cmp	r0, #16
 8003d3e:	d11b      	bne.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8003d40:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 8003d44:	4a4f      	ldr	r2, [pc, #316]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x470>)
 8003d46:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003d4a:	0c1b      	lsrs	r3, r3, #16
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8003d54:	4293      	cmp	r3, r2
 8003d56:	f43f ae77 	beq.w	8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 8003d5a:	4a4b      	ldr	r2, [pc, #300]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x474>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d106      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        if (LL_RCC_HSI_IsReady() == 1U)
 8003d60:	f7ff fb34 	bl	80033cc <LL_RCC_HSI_IsReady>
 8003d64:	2801      	cmp	r0, #1
 8003d66:	f47f ae67 	bne.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = HSI_VALUE;
 8003d6a:	4848      	ldr	r0, [pc, #288]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8003d6c:	e668      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 8003d6e:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8003d72:	f47f af53 	bne.w	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003d76:	e65b      	b.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8003d78:	2820      	cmp	r0, #32
 8003d7a:	d116      	bne.n	8003daa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8003d7c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 8003d80:	4a43      	ldr	r2, [pc, #268]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8003d82:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003d86:	0c1b      	lsrs	r3, r3, #16
 8003d88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003d90:	4293      	cmp	r3, r2
 8003d92:	f43f ae59 	beq.w	8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 8003d96:	4a3f      	ldr	r2, [pc, #252]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d0e1      	beq.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8003d9c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8003da0:	e7e7      	b.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8003da2:	2801      	cmp	r0, #1
 8003da4:	f47f ae48 	bne.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8003da8:	e656      	b.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 8003daa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8003dae:	d110      	bne.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 8003db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 8003dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc0:	f43f ae36 	beq.w	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 8003dc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dc8:	f47f ae36 	bne.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      frequency = HSE_VALUE / 1024U;
 8003dcc:	f647 2012 	movw	r0, #31250	; 0x7a12
  return (frequency);
 8003dd0:	e636      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 8003dd2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003dd6:	f47f ae2f 	bne.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8003dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8003dde:	f3c2 1201 	ubfx	r2, r2, #4, #2
 8003de2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 8003de4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
      if (LL_RCC_HSI_IsReady() == 1U)
 8003dea:	f7ff faef 	bl	80033cc <LL_RCC_HSI_IsReady>
 8003dee:	2801      	cmp	r0, #1
 8003df0:	f47f ae22 	bne.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8003df4:	2318      	movs	r3, #24
 8003df6:	435a      	muls	r2, r3
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003dfa:	4824      	ldr	r0, [pc, #144]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8003dfc:	589b      	ldr	r3, [r3, r2]
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8003dfe:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8003e02:	e01b      	b.n	8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8003e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e08:	d10a      	bne.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003e0a:	680b      	ldr	r3, [r1, #0]
 8003e0c:	039b      	lsls	r3, r3, #14
 8003e0e:	f57f ae13 	bpl.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 8003e12:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003e14:	4821      	ldr	r0, [pc, #132]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003e16:	2118      	movs	r1, #24
 8003e18:	fb01 3202 	mla	r2, r1, r2, r3
 8003e1c:	6953      	ldr	r3, [r2, #20]
 8003e1e:	e7ee      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8003e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e24:	f47f ae08 	bne.w	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      switch (LL_RCC_MSI_GetRange())
 8003e28:	f7ff faeb 	bl	8003402 <LL_RCC_MSI_GetRange>
 8003e2c:	28a0      	cmp	r0, #160	; 0xa0
 8003e2e:	d021      	beq.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8003e30:	d806      	bhi.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8003e32:	2880      	cmp	r0, #128	; 0x80
 8003e34:	d00e      	beq.n	8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8003e36:	2890      	cmp	r0, #144	; 0x90
 8003e38:	d014      	beq.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003e3a:	2000      	movs	r0, #0
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8003e3c:	0840      	lsrs	r0, r0, #1
 8003e3e:	e5ff      	b.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
      switch (LL_RCC_MSI_GetRange())
 8003e40:	28b0      	cmp	r0, #176	; 0xb0
 8003e42:	d1fa      	bne.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x426>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8003e44:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003e46:	2118      	movs	r1, #24
 8003e48:	fb01 3202 	mla	r2, r1, r2, r3
 8003e4c:	4914      	ldr	r1, [pc, #80]	; (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003e4e:	6853      	ldr	r3, [r2, #4]
 8003e50:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8003e52:	e7d4      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 8003e54:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003e56:	2118      	movs	r1, #24
 8003e58:	fb01 3202 	mla	r2, r1, r2, r3
 8003e5c:	4910      	ldr	r1, [pc, #64]	; (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003e5e:	6913      	ldr	r3, [r2, #16]
 8003e60:	6a08      	ldr	r0, [r1, #32]
 8003e62:	e7cc      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003e66:	2118      	movs	r1, #24
 8003e68:	fb01 3202 	mla	r2, r1, r2, r3
 8003e6c:	490c      	ldr	r1, [pc, #48]	; (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003e6e:	68d3      	ldr	r3, [r2, #12]
 8003e70:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8003e72:	e7c4      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003e76:	2118      	movs	r1, #24
 8003e78:	fb01 3202 	mla	r2, r1, r2, r3
 8003e7c:	4908      	ldr	r1, [pc, #32]	; (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003e7e:	6893      	ldr	r3, [r2, #8]
 8003e80:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8003e82:	e7bc      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8003e84:	000c0004 	.word	0x000c0004
 8003e88:	000c0008 	.word	0x000c0008
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	00300010 	.word	0x00300010
 8003e94:	00300020 	.word	0x00300020
 8003e98:	08006898 	.word	0x08006898
 8003e9c:	01e84800 	.word	0x01e84800
 8003ea0:	08006818 	.word	0x08006818

08003ea4 <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
  {
    tmpIT |= SAI_IT_FREQ;
 8003ea4:	2901      	cmp	r1, #1
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003ea6:	6c41      	ldr	r1, [r0, #68]	; 0x44
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003ea8:	6842      	ldr	r2, [r0, #4]
    tmpIT |= SAI_IT_FREQ;
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2309      	moveq	r3, #9
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003eb0:	2908      	cmp	r1, #8
 8003eb2:	d105      	bne.n	8003ec0 <SAI_InterruptFlag+0x1c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003eb4:	f022 0102 	bic.w	r1, r2, #2
 8003eb8:	2901      	cmp	r1, #1
  {
    tmpIT |= SAI_IT_CNRDY;
 8003eba:	bf08      	it	eq
 8003ebc:	f043 0310 	orreq.w	r3, r3, #16
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003ec0:	3a02      	subs	r2, #2
 8003ec2:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8003ec4:	bf94      	ite	ls
 8003ec6:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8003eca:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 8003ece:	4770      	bx	lr

08003ed0 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003ed0:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8003ed2:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	f641 3358 	movw	r3, #7000	; 0x1b58
 8003eda:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8003ede:	680b      	ldr	r3, [r1, #0]
 8003ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003ee4:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8003ee6:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8003ee8:	b93a      	cbnz	r2, 8003efa <SAI_Disable+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003eea:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8003eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef2:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 8003ef6:	2003      	movs	r0, #3
      break;
 8003ef8:	4770      	bx	lr
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8003efa:	680b      	ldr	r3, [r1, #0]
 8003efc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    count--;
 8003f00:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8003f04:	d1f0      	bne.n	8003ee8 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003f06:	4618      	mov	r0, r3

  return status;
}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	200000a4 	.word	0x200000a4

08003f10 <HAL_SAI_MspInit>:
}
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_SAI_Init>:
{
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hsai == NULL)
 8003f16:	4604      	mov	r4, r0
 8003f18:	b910      	cbnz	r0, 8003f20 <HAL_SAI_Init+0xc>
    return HAL_ERROR;
 8003f1a:	2501      	movs	r5, #1
}
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8003f20:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d109      	bne.n	8003f3c <HAL_SAI_Init+0x28>
    if ((hsai->Instance != SAI1_Block_A) ||
 8003f28:	6802      	ldr	r2, [r0, #0]
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	; (80040e0 <HAL_SAI_Init+0x1cc>)
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d1f4      	bne.n	8003f1a <HAL_SAI_Init+0x6>
 8003f30:	6843      	ldr	r3, [r0, #4]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d1f1      	bne.n	8003f1a <HAL_SAI_Init+0x6>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8003f36:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1ee      	bne.n	8003f1a <HAL_SAI_Init+0x6>
  if (hsai->State == HAL_SAI_STATE_RESET)
 8003f3c:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8003f40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f44:	b923      	cbnz	r3, 8003f50 <HAL_SAI_Init+0x3c>
    hsai->Lock = HAL_UNLOCKED;
 8003f46:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f7ff ffe0 	bl	8003f10 <HAL_SAI_MspInit>
  if (SAI_Disable(hsai) != HAL_OK)
 8003f50:	4620      	mov	r0, r4
 8003f52:	f7ff ffbd 	bl	8003ed0 <SAI_Disable>
 8003f56:	4605      	mov	r5, r0
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d1de      	bne.n	8003f1a <HAL_SAI_Init+0x6>
  hsai->State = HAL_SAI_STATE_BUSY;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.Synchro)
 8003f62:	68a3      	ldr	r3, [r4, #8]
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003f64:	2b01      	cmp	r3, #1
  SAI1->GCR = 0;
 8003f66:	4b5f      	ldr	r3, [pc, #380]	; (80040e4 <HAL_SAI_Init+0x1d0>)
 8003f68:	6018      	str	r0, [r3, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003f6a:	6a23      	ldr	r3, [r4, #32]
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003f6c:	bf14      	ite	ne
 8003f6e:	2600      	movne	r6, #0
 8003f70:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003f74:	b323      	cbz	r3, 8003fc0 <HAL_SAI_Init+0xac>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003f76:	2040      	movs	r0, #64	; 0x40
 8003f78:	f7ff fd4c 	bl	8003a14 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8003f7c:	69a3      	ldr	r3, [r4, #24]
 8003f7e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003f80:	6a21      	ldr	r1, [r4, #32]
 8003f82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f86:	f040 809a 	bne.w	80040be <HAL_SAI_Init+0x1aa>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003f8a:	2a04      	cmp	r2, #4
        tmpframelength = hsai->FrameInit.FrameLength;
 8003f8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003f8e:	f000 8094 	beq.w	80040ba <HAL_SAI_Init+0x1a6>
        tmpframelength = 256U;
 8003f92:	2a08      	cmp	r2, #8
 8003f94:	bf08      	it	eq
 8003f96:	f44f 7380 	moveq.w	r3, #256	; 0x100
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8003f9a:	270a      	movs	r7, #10
 8003f9c:	4378      	muls	r0, r7
 8003f9e:	434b      	muls	r3, r1
    hsai->Init.Mckdiv = tmpval / 10U;
 8003fa0:	210a      	movs	r1, #10
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8003fa2:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8003fa6:	fbb0 f3f1 	udiv	r3, r0, r1
    if ((tmpval % 10U) > 8U)
 8003faa:	fb01 0013 	mls	r0, r1, r3, r0
 8003fae:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1U;
 8003fb0:	bf08      	it	eq
 8003fb2:	3301      	addeq	r3, #1
 8003fb4:	6263      	str	r3, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003fb6:	2a04      	cmp	r2, #4
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003fb8:	bf02      	ittt	eq
 8003fba:	6a63      	ldreq	r3, [r4, #36]	; 0x24
 8003fbc:	085b      	lsreq	r3, r3, #1
 8003fbe:	6263      	streq	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003fc0:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8003fc2:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003fc4:	f033 0102 	bics.w	r1, r3, #2
 8003fc8:	f040 8084 	bne.w	80040d4 <HAL_SAI_Init+0x1c0>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003fcc:	2a01      	cmp	r2, #1
 8003fce:	bf18      	it	ne
 8003fd0:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	4844      	ldr	r0, [pc, #272]	; (80040e8 <HAL_SAI_Init+0x1d4>)
 8003fd8:	6817      	ldr	r7, [r2, #0]
 8003fda:	4038      	ands	r0, r7
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003fdc:	6c67      	ldr	r7, [r4, #68]	; 0x44
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003fde:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003fe0:	433b      	orrs	r3, r7
 8003fe2:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8003fe4:	6810      	ldr	r0, [r2, #0]
 8003fe6:	433b      	orrs	r3, r7
 8003fe8:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8003fea:	433b      	orrs	r3, r7
 8003fec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003fee:	433b      	orrs	r3, r7
 8003ff0:	6967      	ldr	r7, [r4, #20]
 8003ff2:	433b      	orrs	r3, r7
 8003ff4:	69a7      	ldr	r7, [r4, #24]
 8003ff6:	433b      	orrs	r3, r7
 8003ff8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003ffa:	433b      	orrs	r3, r7
 8003ffc:	6927      	ldr	r7, [r4, #16]
 8003ffe:	433b      	orrs	r3, r7
 8004000:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004002:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004004:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8004008:	4333      	orrs	r3, r6
 800400a:	430b      	orrs	r3, r1
 800400c:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800400e:	6853      	ldr	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004010:	6b20      	ldr	r0, [r4, #48]	; 0x30
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004012:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004016:	f023 030f 	bic.w	r3, r3, #15
 800401a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800401c:	69e3      	ldr	r3, [r4, #28]
 800401e:	6851      	ldr	r1, [r2, #4]
 8004020:	4303      	orrs	r3, r0
 8004022:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004024:	4303      	orrs	r3, r0
 8004026:	430b      	orrs	r3, r1
 8004028:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800402a:	6891      	ldr	r1, [r2, #8]
 800402c:	4b2f      	ldr	r3, [pc, #188]	; (80040ec <HAL_SAI_Init+0x1d8>)
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800402e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004030:	400b      	ands	r3, r1
 8004032:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004036:	6891      	ldr	r1, [r2, #8]
 8004038:	4303      	orrs	r3, r0
 800403a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800403c:	4303      	orrs	r3, r0
 800403e:	430b      	orrs	r3, r1
 8004040:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004042:	3901      	subs	r1, #1
 8004044:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004046:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004048:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800404a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800404e:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004050:	68d3      	ldr	r3, [r2, #12]
 8004052:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8004056:	f023 030f 	bic.w	r3, r3, #15
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004060:	68d1      	ldr	r1, [r2, #12]
 8004062:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
 8004066:	4303      	orrs	r3, r0
 8004068:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800406a:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800406c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004070:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004072:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004074:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004078:	60d3      	str	r3, [r2, #12]
  if (hsai->Instance == SAI1_Block_A)
 800407a:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_SAI_Init+0x1cc>)
 800407c:	429a      	cmp	r2, r3
 800407e:	d113      	bne.n	80040a8 <HAL_SAI_Init+0x194>
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8004080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004082:	f022 0201 	bic.w	r2, r2, #1
 8004086:	641a      	str	r2, [r3, #64]	; 0x40
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8004088:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800408c:	2a01      	cmp	r2, #1
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800408e:	f1a3 0304 	sub.w	r3, r3, #4
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8004092:	d109      	bne.n	80040a8 <HAL_SAI_Init+0x194>
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8004094:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004096:	1e51      	subs	r1, r2, #1
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004098:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800409a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800409e:	645a      	str	r2, [r3, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80040a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80040a8:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 80040aa:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80040ac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  __HAL_UNLOCK(hsai);
 80040b0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 80040b4:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  return HAL_OK;
 80040b8:	e730      	b.n	8003f1c <HAL_SAI_Init+0x8>
        tmpframelength = 64U;
 80040ba:	2340      	movs	r3, #64	; 0x40
 80040bc:	e76d      	b.n	8003f9a <HAL_SAI_Init+0x86>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80040be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040c4:	bf0c      	ite	eq
 80040c6:	2302      	moveq	r3, #2
 80040c8:	2301      	movne	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80040ca:	270a      	movs	r7, #10
 80040cc:	434b      	muls	r3, r1
 80040ce:	4378      	muls	r0, r7
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	e765      	b.n	8003fa0 <HAL_SAI_Init+0x8c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80040d4:	2a01      	cmp	r2, #1
 80040d6:	bf14      	ite	ne
 80040d8:	2100      	movne	r1, #0
 80040da:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80040de:	e779      	b.n	8003fd4 <HAL_SAI_Init+0xc0>
 80040e0:	40015404 	.word	0x40015404
 80040e4:	40015400 	.word	0x40015400
 80040e8:	f005c010 	.word	0xf005c010
 80040ec:	fff88000 	.word	0xfff88000

080040f0 <HAL_SAI_InitProtocol>:
  switch (protocol)
 80040f0:	2902      	cmp	r1, #2
{
 80040f2:	b430      	push	{r4, r5}
  switch (protocol)
 80040f4:	d905      	bls.n	8004102 <HAL_SAI_InitProtocol+0x12>
 80040f6:	1ecc      	subs	r4, r1, #3
 80040f8:	2c01      	cmp	r4, #1
 80040fa:	d958      	bls.n	80041ae <HAL_SAI_InitProtocol+0xbe>
}
 80040fc:	2001      	movs	r0, #1
 80040fe:	bc30      	pop	{r4, r5}
 8004100:	4770      	bx	lr
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004102:	6845      	ldr	r5, [r0, #4]
  hsai->SlotInit.SlotNumber      = nbslot;
 8004104:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004106:	2400      	movs	r4, #0
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004108:	f035 0502 	bics.w	r5, r5, #2
 800410c:	bf14      	ite	ne
 800410e:	2501      	movne	r5, #1
 8004110:	4625      	moveq	r5, r4
 8004112:	6505      	str	r5, [r0, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004114:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004118:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800411a:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800411c:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 800411e:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004120:	f64f 75ff 	movw	r5, #65535	; 0xffff
  if ((nbslot & 0x1U) != 0U)
 8004124:	f013 0401 	ands.w	r4, r3, #1
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004128:	6745      	str	r5, [r0, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 800412a:	d1e7      	bne.n	80040fc <HAL_SAI_InitProtocol+0xc>
  if (protocol == SAI_I2S_STANDARD)
 800412c:	b999      	cbnz	r1, 8004156 <HAL_SAI_InitProtocol+0x66>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800412e:	6601      	str	r1, [r0, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004130:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004134:	6644      	str	r4, [r0, #100]	; 0x64
  switch (datasize)
 8004136:	2a03      	cmp	r2, #3
 8004138:	d8e0      	bhi.n	80040fc <HAL_SAI_InitProtocol+0xc>
 800413a:	e8df f002 	tbb	[pc, r2]
 800413e:	1002      	.short	0x1002
 8004140:	2d1e      	.short	0x2d1e
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004142:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004144:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004146:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004148:	015a      	lsls	r2, r3, #5
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800414a:	011b      	lsls	r3, r3, #4
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800414c:	6542      	str	r2, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800414e:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004150:	2340      	movs	r3, #64	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004152:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (status == HAL_OK)
 8004154:	e01d      	b.n	8004192 <HAL_SAI_InitProtocol+0xa2>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004156:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800415a:	6605      	str	r5, [r0, #96]	; 0x60
 800415c:	e7ea      	b.n	8004134 <HAL_SAI_InitProtocol+0x44>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800415e:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004160:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004162:	019c      	lsls	r4, r3, #6
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004164:	2902      	cmp	r1, #2
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004166:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800416a:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800416c:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800416e:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004170:	66c2      	str	r2, [r0, #108]	; 0x6c
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004172:	d10e      	bne.n	8004192 <HAL_SAI_InitProtocol+0xa2>
      hsai->SlotInit.FirstBitOffset = 16;
 8004174:	2310      	movs	r3, #16
      hsai->SlotInit.FirstBitOffset = 8;
 8004176:	6683      	str	r3, [r0, #104]	; 0x68
  if (status == HAL_OK)
 8004178:	e00b      	b.n	8004192 <HAL_SAI_InitProtocol+0xa2>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800417a:	22c0      	movs	r2, #192	; 0xc0
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800417c:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800417e:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004180:	019a      	lsls	r2, r3, #6
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004182:	015b      	lsls	r3, r3, #5
 8004184:	6583      	str	r3, [r0, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004186:	2902      	cmp	r1, #2
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004188:	f04f 0380 	mov.w	r3, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800418c:	6542      	str	r2, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800418e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004190:	d00b      	beq.n	80041aa <HAL_SAI_InitProtocol+0xba>
}
 8004192:	bc30      	pop	{r4, r5}
    status = HAL_SAI_Init(hsai);
 8004194:	f7ff bebe 	b.w	8003f14 <HAL_SAI_Init>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004198:	22e0      	movs	r2, #224	; 0xe0
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800419a:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800419c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800419e:	019a      	lsls	r2, r3, #6
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80041a0:	015b      	lsls	r3, r3, #5
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80041a2:	6542      	str	r2, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80041a4:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	e7d3      	b.n	8004152 <HAL_SAI_InitProtocol+0x62>
      hsai->SlotInit.FirstBitOffset = 8;
 80041aa:	2308      	movs	r3, #8
 80041ac:	e7e3      	b.n	8004176 <HAL_SAI_InitProtocol+0x86>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80041ae:	6845      	ldr	r5, [r0, #4]
  hsai->SlotInit.SlotNumber      = nbslot;
 80041b0:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80041b2:	2400      	movs	r4, #0
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80041b4:	f035 0502 	bics.w	r5, r5, #2
 80041b8:	bf14      	ite	ne
 80041ba:	4625      	movne	r5, r4
 80041bc:	2501      	moveq	r5, #1
    hsai->FrameInit.ActiveFrameLength = 13;
 80041be:	2904      	cmp	r1, #4
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80041c0:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80041c2:	64c4      	str	r4, [r0, #76]	; 0x4c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80041c4:	6505      	str	r5, [r0, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80041c6:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80041c8:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 80041cc:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hsai->SlotInit.FirstBitOffset  = 0;
 80041d0:	6684      	str	r4, [r0, #104]	; 0x68
    hsai->FrameInit.ActiveFrameLength = 13;
 80041d2:	bf08      	it	eq
 80041d4:	2101      	moveq	r1, #1
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80041d6:	f64f 74ff 	movw	r4, #65535	; 0xffff
    hsai->FrameInit.ActiveFrameLength = 13;
 80041da:	bf18      	it	ne
 80041dc:	210d      	movne	r1, #13
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80041de:	e9c0 c518 	strd	ip, r5, [r0, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80041e2:	6744      	str	r4, [r0, #116]	; 0x74
  if (protocol == SAI_PCM_SHORT)
 80041e4:	6581      	str	r1, [r0, #88]	; 0x58
  switch (datasize)
 80041e6:	2a03      	cmp	r2, #3
 80041e8:	d888      	bhi.n	80040fc <HAL_SAI_InitProtocol+0xc>
 80041ea:	e8df f002 	tbb	[pc, r2]
 80041ee:	0702      	.short	0x0702
 80041f0:	120d      	.short	0x120d
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041f2:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80041f4:	011b      	lsls	r3, r3, #4
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041f6:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80041f8:	6543      	str	r3, [r0, #84]	; 0x54
 80041fa:	e7a9      	b.n	8004150 <HAL_SAI_InitProtocol+0x60>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041fc:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80041fe:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004200:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004202:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004204:	66c2      	str	r2, [r0, #108]	; 0x6c
  if (status == HAL_OK)
 8004206:	e7c4      	b.n	8004192 <HAL_SAI_InitProtocol+0xa2>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004208:	22c0      	movs	r2, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800420a:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800420c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800420e:	6543      	str	r3, [r0, #84]	; 0x54
 8004210:	e7c9      	b.n	80041a6 <HAL_SAI_InitProtocol+0xb6>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004212:	22e0      	movs	r2, #224	; 0xe0
 8004214:	e7f9      	b.n	800420a <HAL_SAI_InitProtocol+0x11a>
	...

08004218 <HAL_SAI_Receive_DMA>:
{
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4613      	mov	r3, r2
 800421c:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 800421e:	460a      	mov	r2, r1
 8004220:	2900      	cmp	r1, #0
 8004222:	d042      	beq.n	80042aa <HAL_SAI_Receive_DMA+0x92>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d040      	beq.n	80042aa <HAL_SAI_Receive_DMA+0x92>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004228:	f890 1091 	ldrb.w	r1, [r0, #145]	; 0x91
 800422c:	2901      	cmp	r1, #1
 800422e:	b2cd      	uxtb	r5, r1
 8004230:	d13d      	bne.n	80042ae <HAL_SAI_Receive_DMA+0x96>
    __HAL_LOCK(hsai);
 8004232:	f890 1090 	ldrb.w	r1, [r0, #144]	; 0x90
 8004236:	2901      	cmp	r1, #1
 8004238:	d039      	beq.n	80042ae <HAL_SAI_Receive_DMA+0x96>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800423a:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800423c:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
 800423e:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004242:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
    hsai->pBuffPtr = pData;
 8004246:	6782      	str	r2, [r0, #120]	; 0x78
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004248:	f880 1091 	strb.w	r1, [r0, #145]	; 0x91
    hsai->XferSize = Size;
 800424c:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 8004250:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004254:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8004258:	4916      	ldr	r1, [pc, #88]	; (80042b4 <HAL_SAI_Receive_DMA+0x9c>)
 800425a:	6301      	str	r1, [r0, #48]	; 0x30
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800425c:	4916      	ldr	r1, [pc, #88]	; (80042b8 <HAL_SAI_Receive_DMA+0xa0>)
 800425e:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004260:	4916      	ldr	r1, [pc, #88]	; (80042bc <HAL_SAI_Receive_DMA+0xa4>)
    hsai->hdmarx->XferAbortCallback = NULL;
 8004262:	e9c0 160d 	strd	r1, r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004266:	6821      	ldr	r1, [r4, #0]
 8004268:	311c      	adds	r1, #28
 800426a:	f7fd fb1b 	bl	80018a4 <HAL_DMA_Start_IT>
 800426e:	4601      	mov	r1, r0
 8004270:	b118      	cbz	r0, 800427a <HAL_SAI_Receive_DMA+0x62>
      __HAL_UNLOCK(hsai);
 8004272:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
}
 8004276:	4628      	mov	r0, r5
 8004278:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800427a:	4620      	mov	r0, r4
 800427c:	f7ff fe12 	bl	8003ea4 <SAI_InterruptFlag>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	4310      	orrs	r0, r2
 8004286:	6118      	str	r0, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800428e:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	03d2      	lsls	r2, r2, #15
      __HAL_SAI_ENABLE(hsai);
 8004294:	bf58      	it	pl
 8004296:	681a      	ldrpl	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8004298:	f04f 0500 	mov.w	r5, #0
      __HAL_SAI_ENABLE(hsai);
 800429c:	bf5c      	itt	pl
 800429e:	f442 3280 	orrpl.w	r2, r2, #65536	; 0x10000
 80042a2:	601a      	strpl	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80042a4:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    return HAL_OK;
 80042a8:	e7e5      	b.n	8004276 <HAL_SAI_Receive_DMA+0x5e>
    return  HAL_ERROR;
 80042aa:	2501      	movs	r5, #1
 80042ac:	e7e3      	b.n	8004276 <HAL_SAI_Receive_DMA+0x5e>
    return HAL_BUSY;
 80042ae:	2502      	movs	r5, #2
 80042b0:	e7e1      	b.n	8004276 <HAL_SAI_Receive_DMA+0x5e>
 80042b2:	bf00      	nop
 80042b4:	080042f7 	.word	0x080042f7
 80042b8:	080042c1 	.word	0x080042c1
 80042bc:	08004301 	.word	0x08004301

080042c0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80042c0:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80042c2:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d011      	beq.n	80042ee <SAI_DMARxCplt+0x2e>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80042ca:	6825      	ldr	r5, [r4, #0]
 80042cc:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
 80042ce:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80042d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042d4:	602b      	str	r3, [r5, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80042d6:	4620      	mov	r0, r4
    hsai->XferCount = 0;
 80042d8:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80042dc:	f7ff fde2 	bl	8003ea4 <SAI_InterruptFlag>
 80042e0:	692b      	ldr	r3, [r5, #16]
 80042e2:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
 80042e6:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80042e8:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
 80042ea:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80042ee:	4620      	mov	r0, r4
 80042f0:	f7fc ff1e 	bl	8001130 <HAL_SAI_RxCpltCallback>
#endif
}
 80042f4:	bd38      	pop	{r3, r4, r5, pc}

080042f6 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042f6:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80042f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80042fa:	f7fc ff33 	bl	8001164 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80042fe:	bd08      	pop	{r3, pc}

08004300 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004300:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004302:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004304:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004308:	6822      	ldr	r2, [r4, #0]
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800430a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004318:	6013      	str	r3, [r2, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800431a:	4620      	mov	r0, r4
 800431c:	f7ff fdd8 	bl	8003ed0 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004320:	2301      	movs	r3, #1
 8004322:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800432c:	4620      	mov	r0, r4
 800432e:	f7fc fefd 	bl	800112c <HAL_SAI_ErrorCallback>
#endif
}
 8004332:	bd10      	pop	{r4, pc}

08004334 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004338:	461f      	mov	r7, r3
 800433a:	4689      	mov	r9, r1
 800433c:	4690      	mov	r8, r2
 800433e:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004340:	f7fd f928 	bl	8001594 <HAL_GetTick>
 8004344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004346:	443b      	add	r3, r7
 8004348:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 800434a:	f7fd f923 	bl	8001594 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800434e:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8004350:	681e      	ldr	r6, [r3, #0]
 8004352:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8004356:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8004358:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800435a:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800435c:	6822      	ldr	r2, [r4, #0]
 800435e:	6893      	ldr	r3, [r2, #8]
 8004360:	ea39 0303 	bics.w	r3, r9, r3
 8004364:	bf0c      	ite	eq
 8004366:	2301      	moveq	r3, #1
 8004368:	2300      	movne	r3, #0
 800436a:	4543      	cmp	r3, r8
 800436c:	d101      	bne.n	8004372 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800436e:	2000      	movs	r0, #0
 8004370:	e02e      	b.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8004372:	1c7b      	adds	r3, r7, #1
 8004374:	d0f3      	beq.n	800435e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004376:	f7fd f90d 	bl	8001594 <HAL_GetTick>
 800437a:	eba0 000a 	sub.w	r0, r0, sl
 800437e:	42a8      	cmp	r0, r5
 8004380:	d329      	bcc.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800438a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800438c:	6862      	ldr	r2, [r4, #4]
 800438e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004392:	d10a      	bne.n	80043aa <SPI_WaitFlagStateUntilTimeout+0x76>
 8004394:	68a2      	ldr	r2, [r4, #8]
 8004396:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800439a:	d002      	beq.n	80043a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800439c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80043a0:	d103      	bne.n	80043aa <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80043ac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80043b0:	d107      	bne.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043c0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80043c8:	2300      	movs	r3, #0
 80043ca:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 80043ce:	2003      	movs	r0, #3
}
 80043d0:	b002      	add	sp, #8
 80043d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80043d6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80043d8:	2b00      	cmp	r3, #0
      count--;
 80043da:	9b01      	ldr	r3, [sp, #4]
 80043dc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 80043e0:	bf08      	it	eq
 80043e2:	2500      	moveq	r5, #0
      count--;
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	e7b9      	b.n	800435c <SPI_WaitFlagStateUntilTimeout+0x28>
 80043e8:	200000a4 	.word	0x200000a4

080043ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f0:	4699      	mov	r9, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043f2:	2300      	movs	r3, #0
{
 80043f4:	4604      	mov	r4, r0
 80043f6:	4688      	mov	r8, r1
 80043f8:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 80043fa:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043fe:	f7fd f8c9 	bl	8001594 <HAL_GetTick>
 8004402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004404:	444b      	add	r3, r9
 8004406:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8004408:	f7fd f8c4 	bl	8001594 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800440c:	4b2c      	ldr	r3, [pc, #176]	; (80044c0 <SPI_WaitFifoStateUntilTimeout+0xd4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800440e:	f8d4 b000 	ldr.w	fp, [r4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004412:	681e      	ldr	r6, [r3, #0]
 8004414:	2323      	movs	r3, #35	; 0x23
 8004416:	435e      	muls	r6, r3
 8004418:	0d36      	lsrs	r6, r6, #20
 800441a:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 800441c:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800441e:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004420:	6822      	ldr	r2, [r4, #0]
 8004422:	6893      	ldr	r3, [r2, #8]
 8004424:	ea03 0308 	and.w	r3, r3, r8
 8004428:	42bb      	cmp	r3, r7
 800442a:	d101      	bne.n	8004430 <SPI_WaitFifoStateUntilTimeout+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 800442c:	2000      	movs	r0, #0
 800442e:	e03a      	b.n	80044a6 <SPI_WaitFifoStateUntilTimeout+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004430:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 8004434:	d107      	bne.n	8004446 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004436:	b937      	cbnz	r7, 8004446 <SPI_WaitFifoStateUntilTimeout+0x5a>
      tmpreg8 = *ptmpreg8;
 8004438:	f89b 300c 	ldrb.w	r3, [fp, #12]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8004442:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8004446:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800444a:	d0ea      	beq.n	8004422 <SPI_WaitFifoStateUntilTimeout+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800444c:	f7fd f8a2 	bl	8001594 <HAL_GetTick>
 8004450:	eba0 000a 	sub.w	r0, r0, sl
 8004454:	42a8      	cmp	r0, r5
 8004456:	d329      	bcc.n	80044ac <SPI_WaitFifoStateUntilTimeout+0xc0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004460:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004462:	6862      	ldr	r2, [r4, #4]
 8004464:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004468:	d10a      	bne.n	8004480 <SPI_WaitFifoStateUntilTimeout+0x94>
 800446a:	68a2      	ldr	r2, [r4, #8]
 800446c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004470:	d002      	beq.n	8004478 <SPI_WaitFifoStateUntilTimeout+0x8c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004472:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004476:	d103      	bne.n	8004480 <SPI_WaitFifoStateUntilTimeout+0x94>
          __HAL_SPI_DISABLE(hspi);
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004480:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004482:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004486:	d107      	bne.n	8004498 <SPI_WaitFifoStateUntilTimeout+0xac>
          SPI_RESET_CRC(hspi);
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004496:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004498:	2301      	movs	r3, #1
 800449a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800449e:	2300      	movs	r3, #0
 80044a0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 80044a4:	2003      	movs	r0, #3
}
 80044a6:	b003      	add	sp, #12
 80044a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (count == 0U)
 80044ac:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80044ae:	2b00      	cmp	r3, #0
      count--;
 80044b0:	9b01      	ldr	r3, [sp, #4]
 80044b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 80044b6:	bf08      	it	eq
 80044b8:	2500      	moveq	r5, #0
      count--;
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	e7b0      	b.n	8004420 <SPI_WaitFifoStateUntilTimeout+0x34>
 80044be:	bf00      	nop
 80044c0:	200000a4 	.word	0x200000a4

080044c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b530      	push	{r4, r5, lr}
 80044c6:	b085      	sub	sp, #20
 80044c8:	460b      	mov	r3, r1
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044ca:	9200      	str	r2, [sp, #0]
 80044cc:	9103      	str	r1, [sp, #12]
{
 80044ce:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80044d4:	2200      	movs	r2, #0
{
 80044d6:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044d8:	f7ff ff88 	bl	80043ec <SPI_WaitFifoStateUntilTimeout>
 80044dc:	9b03      	ldr	r3, [sp, #12]
 80044de:	4602      	mov	r2, r0
 80044e0:	b128      	cbz	r0, 80044ee <SPI_EndRxTxTransaction+0x2a>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80044e4:	f043 0320 	orr.w	r3, r3, #32
 80044e8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80044ea:	2003      	movs	r0, #3
 80044ec:	e011      	b.n	8004512 <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044ee:	9500      	str	r5, [sp, #0]
 80044f0:	2180      	movs	r1, #128	; 0x80
 80044f2:	4620      	mov	r0, r4
 80044f4:	9303      	str	r3, [sp, #12]
 80044f6:	f7ff ff1d 	bl	8004334 <SPI_WaitFlagStateUntilTimeout>
 80044fa:	9b03      	ldr	r3, [sp, #12]
 80044fc:	4602      	mov	r2, r0
 80044fe:	2800      	cmp	r0, #0
 8004500:	d1ef      	bne.n	80044e2 <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004502:	9500      	str	r5, [sp, #0]
 8004504:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004508:	4620      	mov	r0, r4
 800450a:	f7ff ff6f 	bl	80043ec <SPI_WaitFifoStateUntilTimeout>
 800450e:	2800      	cmp	r0, #0
 8004510:	d1e7      	bne.n	80044e2 <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 8004512:	b005      	add	sp, #20
 8004514:	bd30      	pop	{r4, r5, pc}

08004516 <HAL_SPI_MspInit>:
}
 8004516:	4770      	bx	lr

08004518 <HAL_SPI_Init>:
{
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 800451a:	4604      	mov	r4, r0
 800451c:	2800      	cmp	r0, #0
 800451e:	d079      	beq.n	8004614 <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004520:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004522:	2b00      	cmp	r3, #0
 8004524:	d14f      	bne.n	80045c6 <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004526:	6842      	ldr	r2, [r0, #4]
 8004528:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800452c:	d000      	beq.n	8004530 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800452e:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004530:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004534:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004538:	b923      	cbnz	r3, 8004544 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 800453a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800453e:	4620      	mov	r0, r4
 8004540:	f7ff ffe9 	bl	8004516 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004544:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004546:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004548:	2302      	movs	r3, #2
 800454a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800454e:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004550:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004558:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	d85b      	bhi.n	8004618 <HAL_SPI_Init+0x100>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004560:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004564:	d000      	beq.n	8004568 <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004566:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	68a7      	ldr	r7, [r4, #8]
 800456c:	69a0      	ldr	r0, [r4, #24]
 800456e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004570:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 8004574:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004578:	433b      	orrs	r3, r7
 800457a:	6927      	ldr	r7, [r4, #16]
 800457c:	f007 0702 	and.w	r7, r7, #2
 8004580:	433b      	orrs	r3, r7
 8004582:	6967      	ldr	r7, [r4, #20]
 8004584:	f007 0701 	and.w	r7, r7, #1
 8004588:	433b      	orrs	r3, r7
 800458a:	f400 7700 	and.w	r7, r0, #512	; 0x200
 800458e:	433b      	orrs	r3, r7
 8004590:	69e7      	ldr	r7, [r4, #28]
 8004592:	f007 0738 	and.w	r7, r7, #56	; 0x38
 8004596:	433b      	orrs	r3, r7
 8004598:	6a27      	ldr	r7, [r4, #32]
 800459a:	f007 0780 	and.w	r7, r7, #128	; 0x80
 800459e:	433b      	orrs	r3, r7
 80045a0:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 80045a4:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045a6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045aa:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045ac:	d111      	bne.n	80045d2 <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80045ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045b0:	bb6b      	cbnz	r3, 800460e <HAL_SPI_Init+0xf6>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80045b6:	d90a      	bls.n	80045ce <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80045b8:	2302      	movs	r3, #2
 80045ba:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80045bc:	6813      	ldr	r3, [r2, #0]
 80045be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	e005      	b.n	80045d2 <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045c6:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045cc:	e7b0      	b.n	8004530 <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80045ce:	2301      	movs	r3, #1
 80045d0:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045d4:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	f007 0708 	and.w	r7, r7, #8
 80045de:	433b      	orrs	r3, r7
 80045e0:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80045e4:	0c00      	lsrs	r0, r0, #16
 80045e6:	4319      	orrs	r1, r3
 80045e8:	f000 0004 	and.w	r0, r0, #4
 80045ec:	4301      	orrs	r1, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045ee:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80045f2:	bf08      	it	eq
 80045f4:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045f6:	ea45 0501 	orr.w	r5, r5, r1
 80045fa:	6055      	str	r5, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045fc:	f04f 0000 	mov.w	r0, #0
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004600:	bf08      	it	eq
 8004602:	6113      	streq	r3, [r2, #16]
  hspi->State     = HAL_SPI_STATE_READY;
 8004604:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004606:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004608:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800460c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800460e:	2b02      	cmp	r3, #2
 8004610:	d1df      	bne.n	80045d2 <HAL_SPI_Init+0xba>
 8004612:	e7d3      	b.n	80045bc <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 8004614:	2001      	movs	r0, #1
 8004616:	e7f9      	b.n	800460c <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004618:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800461a:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 800461e:	e7a1      	b.n	8004564 <HAL_SPI_Init+0x4c>

08004620 <HAL_SPI_MspDeInit>:
 8004620:	4770      	bx	lr

08004622 <HAL_SPI_DeInit>:
{
 8004622:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8004624:	4604      	mov	r4, r0
 8004626:	b180      	cbz	r0, 800464a <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8004628:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800462a:	2302      	movs	r3, #2
 800462c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004630:	6813      	ldr	r3, [r2, #0]
 8004632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004636:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8004638:	f7ff fff2 	bl	8004620 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800463c:	2000      	movs	r0, #0
 800463e:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 8004640:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 8004644:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 8004648:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800464a:	2001      	movs	r0, #1
 800464c:	e7fc      	b.n	8004648 <HAL_SPI_DeInit+0x26>

0800464e <HAL_SPI_Transmit>:
{
 800464e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004652:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8004654:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004658:	2b01      	cmp	r3, #1
{
 800465a:	4604      	mov	r4, r0
 800465c:	460d      	mov	r5, r1
 800465e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004660:	f000 80cf 	beq.w	8004802 <HAL_SPI_Transmit+0x1b4>
 8004664:	2301      	movs	r3, #1
 8004666:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800466a:	f7fc ff93 	bl	8001594 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800466e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004672:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004674:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004676:	b2d8      	uxtb	r0, r3
 8004678:	f040 80c1 	bne.w	80047fe <HAL_SPI_Transmit+0x1b0>
  if ((pData == NULL) || (Size == 0U))
 800467c:	2d00      	cmp	r5, #0
 800467e:	d079      	beq.n	8004774 <HAL_SPI_Transmit+0x126>
 8004680:	f1b8 0f00 	cmp.w	r8, #0
 8004684:	d076      	beq.n	8004774 <HAL_SPI_Transmit+0x126>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004686:	2303      	movs	r3, #3
 8004688:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800468c:	2300      	movs	r3, #0
 800468e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8004690:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 8004694:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004698:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800469a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800469e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046a2:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80046a4:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046a6:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 80046ac:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046b0:	d107      	bne.n	80046c2 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 80046b2:	6833      	ldr	r3, [r6, #0]
 80046b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b8:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80046ba:	6833      	ldr	r3, [r6, #0]
 80046bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c0:	6033      	str	r3, [r6, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c8:	d107      	bne.n	80046da <HAL_SPI_Transmit+0x8c>
    SPI_RESET_CRC(hspi);
 80046ca:	6833      	ldr	r3, [r6, #0]
 80046cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	6833      	ldr	r3, [r6, #0]
 80046d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046d8:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046da:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046dc:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046de:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80046e0:	bf5e      	ittt	pl
 80046e2:	6833      	ldrpl	r3, [r6, #0]
 80046e4:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80046e8:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046ea:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ee:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046f0:	d94c      	bls.n	800478c <HAL_SPI_Transmit+0x13e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046f2:	b113      	cbz	r3, 80046fa <HAL_SPI_Transmit+0xac>
 80046f4:	f1b8 0f01 	cmp.w	r8, #1
 80046f8:	d107      	bne.n	800470a <HAL_SPI_Transmit+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046fa:	f835 3b02 	ldrh.w	r3, [r5], #2
 80046fe:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004700:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004702:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004704:	3b01      	subs	r3, #1
 8004706:	b29b      	uxth	r3, r3
 8004708:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800470a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800470c:	b29b      	uxth	r3, r3
 800470e:	b9f3      	cbnz	r3, 800474e <HAL_SPI_Transmit+0x100>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004710:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004716:	d104      	bne.n	8004722 <HAL_SPI_Transmit+0xd4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004718:	6822      	ldr	r2, [r4, #0]
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004720:	6013      	str	r3, [r2, #0]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004722:	464a      	mov	r2, r9
 8004724:	4639      	mov	r1, r7
 8004726:	4620      	mov	r0, r4
 8004728:	f7ff fecc 	bl	80044c4 <SPI_EndRxTxTransaction>
 800472c:	b108      	cbz	r0, 8004732 <HAL_SPI_Transmit+0xe4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800472e:	2320      	movs	r3, #32
 8004730:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004732:	68a3      	ldr	r3, [r4, #8]
 8004734:	b933      	cbnz	r3, 8004744 <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	9201      	str	r2, [sp, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004744:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8004746:	3800      	subs	r0, #0
 8004748:	bf18      	it	ne
 800474a:	2001      	movne	r0, #1
error:
 800474c:	e012      	b.n	8004774 <HAL_SPI_Transmit+0x126>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800474e:	6822      	ldr	r2, [r4, #0]
 8004750:	6893      	ldr	r3, [r2, #8]
 8004752:	079d      	lsls	r5, r3, #30
 8004754:	d505      	bpl.n	8004762 <HAL_SPI_Transmit+0x114>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004756:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004758:	f833 1b02 	ldrh.w	r1, [r3], #2
 800475c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800475e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004760:	e7cf      	b.n	8004702 <HAL_SPI_Transmit+0xb4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004762:	f7fc ff17 	bl	8001594 <HAL_GetTick>
 8004766:	eba0 0009 	sub.w	r0, r0, r9
 800476a:	42b8      	cmp	r0, r7
 800476c:	d30b      	bcc.n	8004786 <HAL_SPI_Transmit+0x138>
 800476e:	1c78      	adds	r0, r7, #1
 8004770:	d0cb      	beq.n	800470a <HAL_SPI_Transmit+0xbc>
          errorcode = HAL_TIMEOUT;
 8004772:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004774:	2301      	movs	r3, #1
 8004776:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800477a:	2300      	movs	r3, #0
 800477c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004780:	b003      	add	sp, #12
 8004782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004786:	2f00      	cmp	r7, #0
 8004788:	d1bf      	bne.n	800470a <HAL_SPI_Transmit+0xbc>
 800478a:	e7f2      	b.n	8004772 <HAL_SPI_Transmit+0x124>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800478c:	b113      	cbz	r3, 8004794 <HAL_SPI_Transmit+0x146>
 800478e:	f1b8 0f01 	cmp.w	r8, #1
 8004792:	d113      	bne.n	80047bc <HAL_SPI_Transmit+0x16e>
      if (hspi->TxXferCount > 1U)
 8004794:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d906      	bls.n	80047aa <HAL_SPI_Transmit+0x15c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800479c:	f835 3b02 	ldrh.w	r3, [r5], #2
 80047a0:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a2:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047a6:	3b02      	subs	r3, #2
 80047a8:	e006      	b.n	80047b8 <HAL_SPI_Transmit+0x16a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047aa:	782b      	ldrb	r3, [r5, #0]
 80047ac:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 80047ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047b0:	3301      	adds	r3, #1
 80047b2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80047b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80047bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0a5      	beq.n	8004710 <HAL_SPI_Transmit+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047c4:	6822      	ldr	r2, [r4, #0]
 80047c6:	6893      	ldr	r3, [r2, #8]
 80047c8:	0799      	lsls	r1, r3, #30
 80047ca:	d50c      	bpl.n	80047e6 <HAL_SPI_Transmit+0x198>
        if (hspi->TxXferCount > 1U)
 80047cc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 80047d0:	b289      	uxth	r1, r1
 80047d2:	2901      	cmp	r1, #1
 80047d4:	d904      	bls.n	80047e0 <HAL_SPI_Transmit+0x192>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047d6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80047da:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80047de:	e7e1      	b.n	80047a4 <HAL_SPI_Transmit+0x156>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80047e4:	e7e3      	b.n	80047ae <HAL_SPI_Transmit+0x160>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047e6:	f7fc fed5 	bl	8001594 <HAL_GetTick>
 80047ea:	eba0 0009 	sub.w	r0, r0, r9
 80047ee:	42b8      	cmp	r0, r7
 80047f0:	d302      	bcc.n	80047f8 <HAL_SPI_Transmit+0x1aa>
 80047f2:	1c7b      	adds	r3, r7, #1
 80047f4:	d0e2      	beq.n	80047bc <HAL_SPI_Transmit+0x16e>
 80047f6:	e7bc      	b.n	8004772 <HAL_SPI_Transmit+0x124>
 80047f8:	2f00      	cmp	r7, #0
 80047fa:	d1df      	bne.n	80047bc <HAL_SPI_Transmit+0x16e>
 80047fc:	e7b9      	b.n	8004772 <HAL_SPI_Transmit+0x124>
    errorcode = HAL_BUSY;
 80047fe:	2002      	movs	r0, #2
 8004800:	e7b8      	b.n	8004774 <HAL_SPI_Transmit+0x126>
  __HAL_LOCK(hspi);
 8004802:	2002      	movs	r0, #2
 8004804:	e7bc      	b.n	8004780 <HAL_SPI_Transmit+0x132>

08004806 <HAL_SPI_TransmitReceive>:
{
 8004806:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800480a:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8004810:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 8004814:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8004818:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 800481a:	2b01      	cmp	r3, #1
{
 800481c:	4604      	mov	r4, r0
 800481e:	460e      	mov	r6, r1
 8004820:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 8004822:	f000 81b4 	beq.w	8004b8e <HAL_SPI_TransmitReceive+0x388>
 8004826:	2301      	movs	r3, #1
 8004828:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800482c:	f7fc feb2 	bl	8001594 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004830:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8004834:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004838:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800483a:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 800483c:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800483e:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8004842:	6868      	ldr	r0, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004844:	d00b      	beq.n	800485e <HAL_SPI_TransmitReceive+0x58>
 8004846:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800484a:	f040 819e 	bne.w	8004b8a <HAL_SPI_TransmitReceive+0x384>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800484e:	68a3      	ldr	r3, [r4, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f040 819a 	bne.w	8004b8a <HAL_SPI_TransmitReceive+0x384>
 8004856:	f1bc 0f04 	cmp.w	ip, #4
 800485a:	f040 8196 	bne.w	8004b8a <HAL_SPI_TransmitReceive+0x384>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800485e:	2e00      	cmp	r6, #0
 8004860:	f000 8176 	beq.w	8004b50 <HAL_SPI_TransmitReceive+0x34a>
 8004864:	f1ba 0f00 	cmp.w	sl, #0
 8004868:	f000 8172 	beq.w	8004b50 <HAL_SPI_TransmitReceive+0x34a>
 800486c:	f1b9 0f00 	cmp.w	r9, #0
 8004870:	f000 816e 	beq.w	8004b50 <HAL_SPI_TransmitReceive+0x34a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004874:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004878:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800487c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800487e:	bf1c      	itt	ne
 8004880:	2305      	movne	r3, #5
 8004882:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004886:	2300      	movs	r3, #0
 8004888:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800488a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800488e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8004890:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8004898:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800489c:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800489e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80048a2:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048a6:	d107      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0xb2>
    SPI_RESET_CRC(hspi);
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048ae:	602b      	str	r3, [r5, #0]
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048b6:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80048b8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048bc:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80048be:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 80048c2:	d802      	bhi.n	80048ca <HAL_SPI_TransmitReceive+0xc4>
 80048c4:	f1b9 0f01 	cmp.w	r9, #1
 80048c8:	d03a      	beq.n	8004940 <HAL_SPI_TransmitReceive+0x13a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048ce:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048d0:	682b      	ldr	r3, [r5, #0]
 80048d2:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80048d4:	bf5e      	ittt	pl
 80048d6:	682b      	ldrpl	r3, [r5, #0]
 80048d8:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80048dc:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048de:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 80048e2:	d97f      	bls.n	80049e4 <HAL_SPI_TransmitReceive+0x1de>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e4:	b112      	cbz	r2, 80048ec <HAL_SPI_TransmitReceive+0xe6>
 80048e6:	f1b9 0f01 	cmp.w	r9, #1
 80048ea:	d107      	bne.n	80048fc <HAL_SPI_TransmitReceive+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ec:	f836 3b02 	ldrh.w	r3, [r6], #2
 80048f0:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 80048f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f4:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80048fc:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004900:	f001 0604 	and.w	r6, r1, #4
 8004904:	f000 0508 	and.w	r5, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004908:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800490a:	b29b      	uxth	r3, r3
 800490c:	b9db      	cbnz	r3, 8004946 <HAL_SPI_TransmitReceive+0x140>
 800490e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004912:	b29b      	uxth	r3, r3
 8004914:	b9bb      	cbnz	r3, 8004946 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004916:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491c:	f040 8101 	bne.w	8004b22 <HAL_SPI_TransmitReceive+0x31c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004920:	2201      	movs	r2, #1
 8004922:	f8cd 8000 	str.w	r8, [sp]
 8004926:	463b      	mov	r3, r7
 8004928:	4611      	mov	r1, r2
 800492a:	4620      	mov	r0, r4
 800492c:	f7ff fd02 	bl	8004334 <SPI_WaitFlagStateUntilTimeout>
 8004930:	2800      	cmp	r0, #0
 8004932:	f000 80ee 	beq.w	8004b12 <HAL_SPI_TransmitReceive+0x30c>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004936:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004938:	f043 0302 	orr.w	r3, r3, #2
 800493c:	6623      	str	r3, [r4, #96]	; 0x60
 800493e:	e02a      	b.n	8004996 <HAL_SPI_TransmitReceive+0x190>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004940:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004944:	e7c3      	b.n	80048ce <HAL_SPI_TransmitReceive+0xc8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	0790      	lsls	r0, r2, #30
 800494c:	d507      	bpl.n	800495e <HAL_SPI_TransmitReceive+0x158>
 800494e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004950:	b292      	uxth	r2, r2
 8004952:	b122      	cbz	r2, 800495e <HAL_SPI_TransmitReceive+0x158>
 8004954:	f1b9 0f00 	cmp.w	r9, #0
 8004958:	d128      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 800495a:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800495e:	6899      	ldr	r1, [r3, #8]
 8004960:	f011 0101 	ands.w	r1, r1, #1
 8004964:	d00f      	beq.n	8004986 <HAL_SPI_TransmitReceive+0x180>
 8004966:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800496a:	b292      	uxth	r2, r2
 800496c:	b15a      	cbz	r2, 8004986 <HAL_SPI_TransmitReceive+0x180>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004972:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004976:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004978:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800497c:	3b01      	subs	r3, #1
 800497e:	b29b      	uxth	r3, r3
 8004980:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8004984:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004986:	f7fc fe05 	bl	8001594 <HAL_GetTick>
 800498a:	eba0 0008 	sub.w	r0, r0, r8
 800498e:	42b8      	cmp	r0, r7
 8004990:	d3ba      	bcc.n	8004908 <HAL_SPI_TransmitReceive+0x102>
 8004992:	1c79      	adds	r1, r7, #1
 8004994:	d0b8      	beq.n	8004908 <HAL_SPI_TransmitReceive+0x102>
          errorcode = HAL_TIMEOUT;
 8004996:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004998:	2301      	movs	r3, #1
 800499a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800499e:	2300      	movs	r3, #0
 80049a0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80049a4:	4628      	mov	r0, r5
 80049a6:	b004      	add	sp, #16
 80049a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80049ae:	f832 1b02 	ldrh.w	r1, [r2], #2
 80049b2:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80049b6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80049b8:	3a01      	subs	r2, #1
 80049ba:	b292      	uxth	r2, r2
 80049bc:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80049be:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80049c0:	b292      	uxth	r2, r2
 80049c2:	2a00      	cmp	r2, #0
 80049c4:	d1c9      	bne.n	800495a <HAL_SPI_TransmitReceive+0x154>
 80049c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80049c8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80049cc:	d1c5      	bne.n	800495a <HAL_SPI_TransmitReceive+0x154>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80049ce:	b926      	cbnz	r6, 80049da <HAL_SPI_TransmitReceive+0x1d4>
 80049d0:	b11d      	cbz	r5, 80049da <HAL_SPI_TransmitReceive+0x1d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d8:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e7ba      	b.n	800495a <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e4:	b112      	cbz	r2, 80049ec <HAL_SPI_TransmitReceive+0x1e6>
 80049e6:	f1b9 0f01 	cmp.w	r9, #1
 80049ea:	d10b      	bne.n	8004a04 <HAL_SPI_TransmitReceive+0x1fe>
      if (hspi->TxXferCount > 1U)
 80049ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d90d      	bls.n	8004a10 <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f4:	f836 3b02 	ldrh.w	r3, [r6], #2
 80049f8:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 80049fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049fc:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049fe:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004a04:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004a06:	f001 0604 	and.w	r6, r1, #4
 8004a0a:	f000 0908 	and.w	r9, r0, #8
 8004a0e:	e03c      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x284>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a10:	7833      	ldrb	r3, [r6, #0]
 8004a12:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 8004a14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a16:	3301      	adds	r3, #1
 8004a18:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004a1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	e7ef      	b.n	8004a00 <HAL_SPI_TransmitReceive+0x1fa>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a20:	6821      	ldr	r1, [r4, #0]
 8004a22:	688b      	ldr	r3, [r1, #8]
 8004a24:	079a      	lsls	r2, r3, #30
 8004a26:	d505      	bpl.n	8004a34 <HAL_SPI_TransmitReceive+0x22e>
 8004a28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	b113      	cbz	r3, 8004a34 <HAL_SPI_TransmitReceive+0x22e>
 8004a2e:	2d00      	cmp	r5, #0
 8004a30:	d135      	bne.n	8004a9e <HAL_SPI_TransmitReceive+0x298>
        txallowed = 0U;
 8004a32:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a34:	6821      	ldr	r1, [r4, #0]
 8004a36:	688b      	ldr	r3, [r1, #8]
 8004a38:	f013 0301 	ands.w	r3, r3, #1
 8004a3c:	d01d      	beq.n	8004a7a <HAL_SPI_TransmitReceive+0x274>
 8004a3e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004a42:	b292      	uxth	r2, r2
 8004a44:	b1ca      	cbz	r2, 8004a7a <HAL_SPI_TransmitReceive+0x274>
        if (hspi->RxXferCount > 1U)
 8004a46:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 8004a4c:	b280      	uxth	r0, r0
 8004a4e:	2801      	cmp	r0, #1
 8004a50:	d950      	bls.n	8004af4 <HAL_SPI_TransmitReceive+0x2ee>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a52:	68c8      	ldr	r0, [r1, #12]
 8004a54:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a58:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a5a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004a5e:	3a02      	subs	r2, #2
 8004a60:	b292      	uxth	r2, r2
 8004a62:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a66:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004a6a:	b292      	uxth	r2, r2
 8004a6c:	2a01      	cmp	r2, #1
 8004a6e:	d803      	bhi.n	8004a78 <HAL_SPI_TransmitReceive+0x272>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a70:	684a      	ldr	r2, [r1, #4]
 8004a72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a76:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 8004a78:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a7a:	f7fc fd8b 	bl	8001594 <HAL_GetTick>
 8004a7e:	eba0 0008 	sub.w	r0, r0, r8
 8004a82:	42b8      	cmp	r0, r7
 8004a84:	d342      	bcc.n	8004b0c <HAL_SPI_TransmitReceive+0x306>
 8004a86:	1c7b      	adds	r3, r7, #1
 8004a88:	d185      	bne.n	8004996 <HAL_SPI_TransmitReceive+0x190>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1c6      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x21a>
 8004a92:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1c1      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x21a>
 8004a9c:	e73b      	b.n	8004916 <HAL_SPI_TransmitReceive+0x110>
        if (hspi->TxXferCount > 1U)
 8004a9e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8004aa2:	b292      	uxth	r2, r2
 8004aa4:	2a01      	cmp	r2, #1
 8004aa6:	d91d      	bls.n	8004ae4 <HAL_SPI_TransmitReceive+0x2de>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa8:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004aac:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aae:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ab0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ab2:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004ab8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1b8      	bne.n	8004a32 <HAL_SPI_TransmitReceive+0x22c>
 8004ac0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac6:	d1b4      	bne.n	8004a32 <HAL_SPI_TransmitReceive+0x22c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004ac8:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004aca:	b936      	cbnz	r6, 8004ada <HAL_SPI_TransmitReceive+0x2d4>
 8004acc:	f1b9 0f00 	cmp.w	r9, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_SPI_TransmitReceive+0x2d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad8:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e7a6      	b.n	8004a32 <HAL_SPI_TransmitReceive+0x22c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 8004ae8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004aea:	3301      	adds	r3, #1
 8004aec:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004aee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004af0:	3b01      	subs	r3, #1
 8004af2:	e7df      	b.n	8004ab4 <HAL_SPI_TransmitReceive+0x2ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004af4:	7b09      	ldrb	r1, [r1, #12]
 8004af6:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8004af8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004afa:	3201      	adds	r2, #1
 8004afc:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8004afe:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004b02:	3a01      	subs	r2, #1
 8004b04:	b292      	uxth	r2, r2
 8004b06:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8004b0a:	e7b5      	b.n	8004a78 <HAL_SPI_TransmitReceive+0x272>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b0c:	2f00      	cmp	r7, #0
 8004b0e:	d1bc      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x284>
 8004b10:	e741      	b.n	8004996 <HAL_SPI_TransmitReceive+0x190>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b12:	68e3      	ldr	r3, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 8004b14:	6825      	ldr	r5, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b16:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b1a:	d11b      	bne.n	8004b54 <HAL_SPI_TransmitReceive+0x34e>
      tmpreg = READ_REG(hspi->Instance->DR);
 8004b1c:	68eb      	ldr	r3, [r5, #12]
 8004b1e:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8004b20:	9b03      	ldr	r3, [sp, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	6895      	ldr	r5, [r2, #8]
 8004b26:	f015 0510 	ands.w	r5, r5, #16
 8004b2a:	d007      	beq.n	8004b3c <HAL_SPI_TransmitReceive+0x336>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004b2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004b2e:	f043 0302 	orr.w	r3, r3, #2
 8004b32:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004b34:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004b38:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8004b3a:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	4639      	mov	r1, r7
 8004b40:	4620      	mov	r0, r4
 8004b42:	f7ff fcbf 	bl	80044c4 <SPI_EndRxTxTransaction>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	f43f af26 	beq.w	8004998 <HAL_SPI_TransmitReceive+0x192>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b4c:	2320      	movs	r3, #32
 8004b4e:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004b50:	2501      	movs	r5, #1
 8004b52:	e721      	b.n	8004998 <HAL_SPI_TransmitReceive+0x192>
      tmpreg8 = *ptmpreg8;
 8004b54:	7b2b      	ldrb	r3, [r5, #12]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 8004b5c:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004b60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d1dd      	bne.n	8004b22 <HAL_SPI_TransmitReceive+0x31c>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004b66:	2201      	movs	r2, #1
 8004b68:	f8cd 8000 	str.w	r8, [sp]
 8004b6c:	463b      	mov	r3, r7
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4620      	mov	r0, r4
 8004b72:	f7ff fbdf 	bl	8004334 <SPI_WaitFlagStateUntilTimeout>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	f47f aedd 	bne.w	8004936 <HAL_SPI_TransmitReceive+0x130>
        tmpreg8 = *ptmpreg8;
 8004b7c:	7b2b      	ldrb	r3, [r5, #12]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8004b84:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004b88:	e7cb      	b.n	8004b22 <HAL_SPI_TransmitReceive+0x31c>
    errorcode = HAL_BUSY;
 8004b8a:	2502      	movs	r5, #2
 8004b8c:	e704      	b.n	8004998 <HAL_SPI_TransmitReceive+0x192>
  __HAL_LOCK(hspi);
 8004b8e:	2502      	movs	r5, #2
 8004b90:	e708      	b.n	80049a4 <HAL_SPI_TransmitReceive+0x19e>

08004b92 <HAL_SPI_GetState>:
  return hspi->State;
 8004b92:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8004b96:	4770      	bx	lr

08004b98 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b98:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b9a:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 8004b9e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ba2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	4770      	bx	lr

08004baa <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004baa:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004bae:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8004bb2:	045b      	lsls	r3, r3, #17
 8004bb4:	0c5b      	lsrs	r3, r3, #17
 8004bb6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8004bba:	2000      	movs	r0, #0
 8004bbc:	4770      	bx	lr

08004bbe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	ac03      	add	r4, sp, #12
 8004bc4:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8004bd8:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 8004bda:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bde:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	4770      	bx	lr
	...

08004be8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004be8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004bea:	780f      	ldrb	r7, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004bec:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004bee:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8004bf2:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8004bf6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004bfa:	0412      	lsls	r2, r2, #16
 8004bfc:	463b      	mov	r3, r7
 8004bfe:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8004c00:	2d03      	cmp	r5, #3
 8004c02:	d851      	bhi.n	8004ca8 <USB_ActivateEndpoint+0xc0>
 8004c04:	e8df f005 	tbb	[pc, r5]
 8004c08:	494b4d02 	.word	0x494b4d02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8004c10:	462c      	mov	r4, r5
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c12:	f248 0c80 	movw	ip, #32896	; 0x8080
 8004c16:	ea42 020c 	orr.w	r2, r2, ip
 8004c1a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c1e:	f830 6023 	ldrh.w	r6, [r0, r3, lsl #2]
 8004c22:	f8df e27c 	ldr.w	lr, [pc, #636]	; 8004ea0 <USB_ActivateEndpoint+0x2b8>
 8004c26:	b2b6      	uxth	r6, r6
 8004c28:	ea06 060e 	and.w	r6, r6, lr
 8004c2c:	433e      	orrs	r6, r7
 8004c2e:	ea4c 0606 	orr.w	r6, ip, r6
 8004c32:	f820 6023 	strh.w	r6, [r0, r3, lsl #2]

  if (ep->doublebuffer == 0U)
 8004c36:	7b0a      	ldrb	r2, [r1, #12]
 8004c38:	eb00 06c7 	add.w	r6, r0, r7, lsl #3
 8004c3c:	2a00      	cmp	r2, #0
 8004c3e:	f040 8081 	bne.w	8004d44 <USB_ActivateEndpoint+0x15c>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c42:	88ca      	ldrh	r2, [r1, #6]
    if (ep->is_in != 0U)
 8004c44:	f891 c001 	ldrb.w	ip, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c48:	0852      	lsrs	r2, r2, #1
 8004c4a:	0052      	lsls	r2, r2, #1
    if (ep->is_in != 0U)
 8004c4c:	f1bc 0f00 	cmp.w	ip, #0
 8004c50:	d02c      	beq.n	8004cac <USB_ActivateEndpoint+0xc4>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c52:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8004c56:	fa16 f681 	uxtah	r6, r6, r1
 8004c5a:	f8a6 2400 	strh.w	r2, [r6, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c5e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c62:	0651      	lsls	r1, r2, #25
 8004c64:	d50a      	bpl.n	8004c7c <USB_ActivateEndpoint+0x94>
 8004c66:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	ea02 020e 	and.w	r2, r2, lr
 8004c70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c74:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004c78:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c7c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c80:	4984      	ldr	r1, [pc, #528]	; (8004e94 <USB_ActivateEndpoint+0x2ac>)
 8004c82:	b292      	uxth	r2, r2
      if (ep->type != EP_TYPE_ISOC)
 8004c84:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c86:	ea02 0201 	and.w	r2, r2, r1
      if (ep->type != EP_TYPE_ISOC)
 8004c8a:	d001      	beq.n	8004c90 <USB_ActivateEndpoint+0xa8>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c8c:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c98:	e0b2      	b.n	8004e00 <USB_ActivateEndpoint+0x218>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c9a:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8004c9e:	2400      	movs	r4, #0
      break;
 8004ca0:	e7b7      	b.n	8004c12 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ca2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 8004ca6:	e7fa      	b.n	8004c9e <USB_ActivateEndpoint+0xb6>
  switch (ep->type)
 8004ca8:	2401      	movs	r4, #1
 8004caa:	e7b2      	b.n	8004c12 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cac:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004cb0:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cb2:	fa16 f585 	uxtah	r5, r6, r5
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004cb6:	293e      	cmp	r1, #62	; 0x3e
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cb8:	f8a5 2404 	strh.w	r2, [r5, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004cbc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004cc0:	fa16 f682 	uxtah	r6, r6, r2
 8004cc4:	d925      	bls.n	8004d12 <USB_ActivateEndpoint+0x12a>
 8004cc6:	094d      	lsrs	r5, r1, #5
 8004cc8:	06ca      	lsls	r2, r1, #27
 8004cca:	4a73      	ldr	r2, [pc, #460]	; (8004e98 <USB_ActivateEndpoint+0x2b0>)
 8004ccc:	bf08      	it	eq
 8004cce:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 8004cd2:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8004cd6:	b292      	uxth	r2, r2
 8004cd8:	f8a6 2406 	strh.w	r2, [r6, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cdc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ce0:	0452      	lsls	r2, r2, #17
 8004ce2:	d50d      	bpl.n	8004d00 <USB_ActivateEndpoint+0x118>
 8004ce4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ce8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004cec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cf0:	0412      	lsls	r2, r2, #16
 8004cf2:	0c12      	lsrs	r2, r2, #16
 8004cf4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004cf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cfc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d00:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d04:	4965      	ldr	r1, [pc, #404]	; (8004e9c <USB_ActivateEndpoint+0x2b4>)
 8004d06:	b292      	uxth	r2, r2
 8004d08:	400a      	ands	r2, r1
      if (ep->num == 0U)
 8004d0a:	b9c7      	cbnz	r7, 8004d3e <USB_ActivateEndpoint+0x156>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d0c:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004d10:	e7be      	b.n	8004c90 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d12:	b971      	cbnz	r1, 8004d32 <USB_ActivateEndpoint+0x14a>
 8004d14:	f8b6 2406 	ldrh.w	r2, [r6, #1030]	; 0x406
 8004d18:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004d1c:	0412      	lsls	r2, r2, #16
 8004d1e:	0c12      	lsrs	r2, r2, #16
 8004d20:	f8a6 2406 	strh.w	r2, [r6, #1030]	; 0x406
 8004d24:	f8b6 2406 	ldrh.w	r2, [r6, #1030]	; 0x406
 8004d28:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004d2c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004d30:	e7d1      	b.n	8004cd6 <USB_ActivateEndpoint+0xee>
 8004d32:	084a      	lsrs	r2, r1, #1
 8004d34:	07c9      	lsls	r1, r1, #31
 8004d36:	bf48      	it	mi
 8004d38:	3201      	addmi	r2, #1
 8004d3a:	0292      	lsls	r2, r2, #10
 8004d3c:	e7cb      	b.n	8004cd6 <USB_ActivateEndpoint+0xee>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004d3e:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8004d42:	e7a5      	b.n	8004c90 <USB_ActivateEndpoint+0xa8>
    if (ep->type == EP_TYPE_BULK)
 8004d44:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d46:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8004d4a:	d15d      	bne.n	8004e08 <USB_ActivateEndpoint+0x220>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d4c:	b292      	uxth	r2, r2
 8004d4e:	ea02 020e 	and.w	r2, r2, lr
 8004d52:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8004d56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004d5a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004d5e:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8004d62:	890a      	ldrh	r2, [r1, #8]
 8004d64:	fa16 f787 	uxtah	r7, r6, r7
 8004d68:	0852      	lsrs	r2, r2, #1
 8004d6a:	0052      	lsls	r2, r2, #1
 8004d6c:	f8a7 2400 	strh.w	r2, [r7, #1024]	; 0x400
 8004d70:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004d74:	fa16 f682 	uxtah	r6, r6, r2
 8004d78:	894a      	ldrh	r2, [r1, #10]
 8004d7a:	0852      	lsrs	r2, r2, #1
 8004d7c:	0052      	lsls	r2, r2, #1
 8004d7e:	f8a6 2404 	strh.w	r2, [r6, #1028]	; 0x404
    if (ep->is_in == 0U)
 8004d82:	784a      	ldrb	r2, [r1, #1]
 8004d84:	2a00      	cmp	r2, #0
 8004d86:	d148      	bne.n	8004e1a <USB_ActivateEndpoint+0x232>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d88:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d8c:	0456      	lsls	r6, r2, #17
 8004d8e:	d50d      	bpl.n	8004dac <USB_ActivateEndpoint+0x1c4>
 8004d90:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d94:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004d98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d9c:	0412      	lsls	r2, r2, #16
 8004d9e:	0c12      	lsrs	r2, r2, #16
 8004da0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004da4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004da8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004db0:	0655      	lsls	r5, r2, #25
 8004db2:	d50d      	bpl.n	8004dd0 <USB_ActivateEndpoint+0x1e8>
 8004db4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004db8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004dbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004dc0:	0412      	lsls	r2, r2, #16
 8004dc2:	0c12      	lsrs	r2, r2, #16
 8004dc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dc8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004dcc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004dd0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004dd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dd8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ddc:	0412      	lsls	r2, r2, #16
 8004dde:	0c12      	lsrs	r2, r2, #16
 8004de0:	f248 0180 	movw	r1, #32896	; 0x8080
 8004de4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004de8:	430a      	orrs	r2, r1
 8004dea:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004df2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfa:	0412      	lsls	r2, r2, #16
 8004dfc:	0c12      	lsrs	r2, r2, #16
 8004dfe:	430a      	orrs	r2, r1
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e00:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8004e04:	4620      	mov	r0, r4
 8004e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004e08:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8004e0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e10:	0412      	lsls	r2, r2, #16
 8004e12:	0c12      	lsrs	r2, r2, #16
 8004e14:	ea4c 0202 	orr.w	r2, ip, r2
 8004e18:	e79f      	b.n	8004d5a <USB_ActivateEndpoint+0x172>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e1e:	0451      	lsls	r1, r2, #17
 8004e20:	d50d      	bpl.n	8004e3e <USB_ActivateEndpoint+0x256>
 8004e22:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e26:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004e2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e2e:	0412      	lsls	r2, r2, #16
 8004e30:	0c12      	lsrs	r2, r2, #16
 8004e32:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e3a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e3e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e42:	0652      	lsls	r2, r2, #25
 8004e44:	d50d      	bpl.n	8004e62 <USB_ActivateEndpoint+0x27a>
 8004e46:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e4a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004e4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e52:	0412      	lsls	r2, r2, #16
 8004e54:	0c12      	lsrs	r2, r2, #16
 8004e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e5a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004e5e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e62:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e66:	490b      	ldr	r1, [pc, #44]	; (8004e94 <USB_ActivateEndpoint+0x2ac>)
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	400a      	ands	r2, r1
      if (ep->type != EP_TYPE_ISOC)
 8004e6c:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e6e:	bf18      	it	ne
 8004e70:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e7c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e80:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e8c:	0412      	lsls	r2, r2, #16
 8004e8e:	0c12      	lsrs	r2, r2, #16
 8004e90:	e6fe      	b.n	8004c90 <USB_ActivateEndpoint+0xa8>
 8004e92:	bf00      	nop
 8004e94:	ffff8fbf 	.word	0xffff8fbf
 8004e98:	ffff8000 	.word	0xffff8000
 8004e9c:	ffffbf8f 	.word	0xffffbf8f
 8004ea0:	ffff8f8f 	.word	0xffff8f8f

08004ea4 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8004ea4:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ea6:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004ea8:	7b09      	ldrb	r1, [r1, #12]
 8004eaa:	bbd9      	cbnz	r1, 8004f24 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8004eac:	b30a      	cbz	r2, 8004ef2 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004eb2:	0651      	lsls	r1, r2, #25
 8004eb4:	d50d      	bpl.n	8004ed2 <USB_DeactivateEndpoint+0x2e>
 8004eb6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004eba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004ebe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ec2:	0412      	lsls	r2, r2, #16
 8004ec4:	0c12      	lsrs	r2, r2, #16
 8004ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eca:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004ece:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ed2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ed6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ede:	0412      	lsls	r2, r2, #16
 8004ee0:	0c12      	lsrs	r2, r2, #16
 8004ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eea:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004eee:	2000      	movs	r0, #0
 8004ef0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ef2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ef6:	0452      	lsls	r2, r2, #17
 8004ef8:	d50d      	bpl.n	8004f16 <USB_DeactivateEndpoint+0x72>
 8004efa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004efe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f06:	0412      	lsls	r2, r2, #16
 8004f08:	0c12      	lsrs	r2, r2, #16
 8004f0a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004f0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f12:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f16:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f22:	e7dc      	b.n	8004ede <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8004f24:	2a00      	cmp	r2, #0
 8004f26:	d148      	bne.n	8004fba <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f28:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f2c:	0451      	lsls	r1, r2, #17
 8004f2e:	d50d      	bpl.n	8004f4c <USB_DeactivateEndpoint+0xa8>
 8004f30:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f34:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f3c:	0412      	lsls	r2, r2, #16
 8004f3e:	0c12      	lsrs	r2, r2, #16
 8004f40:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004f44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f48:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f4c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f50:	0652      	lsls	r2, r2, #25
 8004f52:	d50d      	bpl.n	8004f70 <USB_DeactivateEndpoint+0xcc>
 8004f54:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f58:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f60:	0412      	lsls	r2, r2, #16
 8004f62:	0c12      	lsrs	r2, r2, #16
 8004f64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f68:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004f6c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8004f70:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f74:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f7c:	0412      	lsls	r2, r2, #16
 8004f7e:	0c12      	lsrs	r2, r2, #16
 8004f80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f84:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004f88:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f8c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f98:	0412      	lsls	r2, r2, #16
 8004f9a:	0c12      	lsrs	r2, r2, #16
 8004f9c:	f248 0180 	movw	r1, #32896	; 0x8080
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fa6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004faa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fb2:	0412      	lsls	r2, r2, #16
 8004fb4:	0c12      	lsrs	r2, r2, #16
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	e797      	b.n	8004eea <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004fbe:	0451      	lsls	r1, r2, #17
 8004fc0:	d50d      	bpl.n	8004fde <USB_DeactivateEndpoint+0x13a>
 8004fc2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004fc6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004fca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fce:	0412      	lsls	r2, r2, #16
 8004fd0:	0c12      	lsrs	r2, r2, #16
 8004fd2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004fd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fda:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fde:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004fe2:	0652      	lsls	r2, r2, #25
 8004fe4:	d50d      	bpl.n	8005002 <USB_DeactivateEndpoint+0x15e>
 8004fe6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004fea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004fee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ff2:	0412      	lsls	r2, r2, #16
 8004ff4:	0c12      	lsrs	r2, r2, #16
 8004ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ffa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004ffe:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005002:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005006:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800500a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800500e:	0412      	lsls	r2, r2, #16
 8005010:	0c12      	lsrs	r2, r2, #16
 8005012:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800501a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800501e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005022:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800502a:	0412      	lsls	r2, r2, #16
 800502c:	0c12      	lsrs	r2, r2, #16
 800502e:	f248 0180 	movw	r1, #32896	; 0x8080
 8005032:	430a      	orrs	r2, r1
 8005034:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005038:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800503c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005040:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005044:	e7b5      	b.n	8004fb2 <USB_DeactivateEndpoint+0x10e>

08005046 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005046:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005048:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800504a:	b18b      	cbz	r3, 8005070 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800504c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005058:	041b      	lsls	r3, r3, #16
 800505a:	0c1b      	lsrs	r3, r3, #16
 800505c:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005068:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800506c:	2000      	movs	r0, #0
 800506e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005070:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	0c1b      	lsrs	r3, r3, #16
 8005080:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005084:	e7ec      	b.n	8005060 <USB_EPSetStall+0x1a>

08005086 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005086:	7b0b      	ldrb	r3, [r1, #12]
 8005088:	bb3b      	cbnz	r3, 80050da <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 800508a:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800508c:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800508e:	b333      	cbz	r3, 80050de <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005090:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005094:	065b      	lsls	r3, r3, #25
 8005096:	d50d      	bpl.n	80050b4 <USB_EPClearStall+0x2e>
 8005098:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800509c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	0c1b      	lsrs	r3, r3, #16
 80050a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80050b4:	78cb      	ldrb	r3, [r1, #3]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d00f      	beq.n	80050da <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c6:	041b      	lsls	r3, r3, #16
 80050c8:	0c1b      	lsrs	r3, r3, #16
 80050ca:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80050da:	2000      	movs	r0, #0
 80050dc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050e2:	045b      	lsls	r3, r3, #17
 80050e4:	d50d      	bpl.n	8005102 <USB_EPClearStall+0x7c>
 80050e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005102:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005116:	e7da      	b.n	80050ce <USB_EPClearStall+0x48>

08005118 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005118:	b911      	cbnz	r1, 8005120 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8005120:	2000      	movs	r0, #0
 8005122:	4770      	bx	lr

08005124 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005124:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8005128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005130:	b29b      	uxth	r3, r3
 8005132:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8005136:	2000      	movs	r0, #0
 8005138:	4770      	bx	lr

0800513a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800513a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800513e:	b280      	uxth	r0, r0
 8005140:	4770      	bx	lr

08005142 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005146:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005148:	4410      	add	r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8005150:	1a40      	subs	r0, r0, r1

  for (count = n; count != 0U; count--)
 8005152:	428b      	cmp	r3, r1
 8005154:	d100      	bne.n	8005158 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8005156:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005158:	880a      	ldrh	r2, [r1, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800515a:	5242      	strh	r2, [r0, r1]
    pBuf++;
 800515c:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 800515e:	e7f8      	b.n	8005152 <USB_WritePMA+0x10>

08005160 <USB_EPStartXfer>:
{
 8005160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005164:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8005166:	7849      	ldrb	r1, [r1, #1]
    if (ep->doublebuffer == 0U)
 8005168:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 800516a:	2901      	cmp	r1, #1
{
 800516c:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 800516e:	f040 811f 	bne.w	80053b0 <USB_EPStartXfer+0x250>
    if (ep->xfer_len > ep->maxpacket)
 8005172:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8005176:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005178:	6961      	ldr	r1, [r4, #20]
 800517a:	4566      	cmp	r6, ip
 800517c:	bf28      	it	cs
 800517e:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 8005180:	bb12      	cbnz	r2, 80051c8 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005182:	b2b6      	uxth	r6, r6
 8005184:	88e2      	ldrh	r2, [r4, #6]
 8005186:	4633      	mov	r3, r6
 8005188:	f7ff ffdb 	bl	8005142 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800518c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005190:	7823      	ldrb	r3, [r4, #0]
 8005192:	f205 4102 	addw	r1, r5, #1026	; 0x402
 8005196:	fa11 f282 	uxtah	r2, r1, r2
 800519a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800519e:	8016      	strh	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80051a0:	7822      	ldrb	r2, [r4, #0]
 80051a2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80051a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ae:	041b      	lsls	r3, r3, #16
 80051b0:	0c1b      	lsrs	r3, r3, #16
 80051b2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051be:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80051c2:	2000      	movs	r0, #0
}
 80051c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 80051c8:	78e2      	ldrb	r2, [r4, #3]
        if (ep->xfer_len_db > ep->maxpacket)
 80051ca:	6a23      	ldr	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051cc:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 80051ce:	2a02      	cmp	r2, #2
 80051d0:	f040 80d7 	bne.w	8005382 <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 80051d4:	459c      	cmp	ip, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051d6:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 80051da:	f080 80bb 	bcs.w	8005354 <USB_EPStartXfer+0x1f4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051de:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80051e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80051e6:	0412      	lsls	r2, r2, #16
 80051e8:	0c12      	lsrs	r2, r2, #16
 80051ea:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80051ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051f2:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051f6:	f830 8027 	ldrh.w	r8, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051fa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 80051fe:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005200:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 8005204:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005206:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005208:	d053      	beq.n	80052b2 <USB_EPStartXfer+0x152>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800520a:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 800520e:	fa1c f282 	uxtah	r2, ip, r2
 8005212:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005216:	8962      	ldrh	r2, [r4, #10]
 8005218:	f7ff ff93 	bl	8005142 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800521c:	6a22      	ldr	r2, [r4, #32]
 800521e:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8005220:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005222:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 8005224:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8005226:	bf8c      	ite	hi
 8005228:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800522a:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 800522c:	4431      	add	r1, r6
 800522e:	bf88      	it	hi
 8005230:	4632      	movhi	r2, r6
 8005232:	6223      	str	r3, [r4, #32]
 8005234:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005236:	b293      	uxth	r3, r2
 8005238:	bb70      	cbnz	r0, 8005298 <USB_EPStartXfer+0x138>
 800523a:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 800523e:	7820      	ldrb	r0, [r4, #0]
 8005240:	f205 4702 	addw	r7, r5, #1026	; 0x402
 8005244:	fa17 f686 	uxtah	r6, r7, r6
 8005248:	2a3e      	cmp	r2, #62	; 0x3e
 800524a:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 800524e:	d90e      	bls.n	800526e <USB_EPStartXfer+0x10e>
 8005250:	0950      	lsrs	r0, r2, #5
 8005252:	06d7      	lsls	r7, r2, #27
 8005254:	4aaa      	ldr	r2, [pc, #680]	; (8005500 <USB_EPStartXfer+0x3a0>)
 8005256:	bf08      	it	eq
 8005258:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 800525c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8005260:	b292      	uxth	r2, r2
 8005262:	8032      	strh	r2, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005264:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005266:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005268:	f7ff ff6b 	bl	8005142 <USB_WritePMA>
 800526c:	e798      	b.n	80051a0 <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800526e:	b95a      	cbnz	r2, 8005288 <USB_EPStartXfer+0x128>
 8005270:	8832      	ldrh	r2, [r6, #0]
 8005272:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005276:	0412      	lsls	r2, r2, #16
 8005278:	0c12      	lsrs	r2, r2, #16
 800527a:	8032      	strh	r2, [r6, #0]
 800527c:	8832      	ldrh	r2, [r6, #0]
 800527e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005282:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005286:	e7eb      	b.n	8005260 <USB_EPStartXfer+0x100>
 8005288:	0850      	lsrs	r0, r2, #1
 800528a:	07d2      	lsls	r2, r2, #31
 800528c:	bf48      	it	mi
 800528e:	3001      	addmi	r0, #1
 8005290:	0280      	lsls	r0, r0, #10
 8005292:	b280      	uxth	r0, r0
 8005294:	8030      	strh	r0, [r6, #0]
 8005296:	e7e5      	b.n	8005264 <USB_EPStartXfer+0x104>
 8005298:	2801      	cmp	r0, #1
 800529a:	d1e3      	bne.n	8005264 <USB_EPStartXfer+0x104>
 800529c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80052a0:	7820      	ldrb	r0, [r4, #0]
 80052a2:	f205 4602 	addw	r6, r5, #1026	; 0x402
 80052a6:	fa16 f282 	uxtah	r2, r6, r2
 80052aa:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80052ae:	8013      	strh	r3, [r2, #0]
 80052b0:	e7d8      	b.n	8005264 <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052b2:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 80052b6:	fa1c f282 	uxtah	r2, ip, r2
 80052ba:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052be:	8922      	ldrh	r2, [r4, #8]
 80052c0:	f7ff ff3f 	bl	8005142 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80052c4:	6a22      	ldr	r2, [r4, #32]
 80052c6:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80052c8:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052ca:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 80052cc:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 80052ce:	bf8c      	ite	hi
 80052d0:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 80052d2:	4643      	movls	r3, r8
            ep->xfer_buff += len;
 80052d4:	4431      	add	r1, r6
 80052d6:	bf88      	it	hi
 80052d8:	4632      	movhi	r2, r6
 80052da:	6223      	str	r3, [r4, #32]
 80052dc:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052de:	b293      	uxth	r3, r2
 80052e0:	bb58      	cbnz	r0, 800533a <USB_EPStartXfer+0x1da>
 80052e2:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 80052e6:	7820      	ldrb	r0, [r4, #0]
 80052e8:	f205 4706 	addw	r7, r5, #1030	; 0x406
 80052ec:	fa17 f686 	uxtah	r6, r7, r6
 80052f0:	2a3e      	cmp	r2, #62	; 0x3e
 80052f2:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 80052f6:	d90b      	bls.n	8005310 <USB_EPStartXfer+0x1b0>
 80052f8:	0950      	lsrs	r0, r2, #5
 80052fa:	06d7      	lsls	r7, r2, #27
 80052fc:	4a80      	ldr	r2, [pc, #512]	; (8005500 <USB_EPStartXfer+0x3a0>)
 80052fe:	bf08      	it	eq
 8005300:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8005304:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8005308:	b292      	uxth	r2, r2
 800530a:	8032      	strh	r2, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800530c:	8962      	ldrh	r2, [r4, #10]
 800530e:	e7aa      	b.n	8005266 <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005310:	b95a      	cbnz	r2, 800532a <USB_EPStartXfer+0x1ca>
 8005312:	8832      	ldrh	r2, [r6, #0]
 8005314:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005318:	0412      	lsls	r2, r2, #16
 800531a:	0c12      	lsrs	r2, r2, #16
 800531c:	8032      	strh	r2, [r6, #0]
 800531e:	8832      	ldrh	r2, [r6, #0]
 8005320:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005324:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005328:	e7ee      	b.n	8005308 <USB_EPStartXfer+0x1a8>
 800532a:	0850      	lsrs	r0, r2, #1
 800532c:	07d2      	lsls	r2, r2, #31
 800532e:	bf48      	it	mi
 8005330:	3001      	addmi	r0, #1
 8005332:	0280      	lsls	r0, r0, #10
 8005334:	b280      	uxth	r0, r0
 8005336:	8030      	strh	r0, [r6, #0]
 8005338:	e7e8      	b.n	800530c <USB_EPStartXfer+0x1ac>
 800533a:	2801      	cmp	r0, #1
 800533c:	d1e6      	bne.n	800530c <USB_EPStartXfer+0x1ac>
 800533e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005342:	7820      	ldrb	r0, [r4, #0]
 8005344:	f205 4606 	addw	r6, r5, #1030	; 0x406
 8005348:	fa16 f282 	uxtah	r2, r6, r2
 800534c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005350:	8013      	strh	r3, [r2, #0]
 8005352:	e7db      	b.n	800530c <USB_EPStartXfer+0x1ac>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005354:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8005358:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800535c:	0412      	lsls	r2, r2, #16
 800535e:	0c12      	lsrs	r2, r2, #16
 8005360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005364:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005368:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800536c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005370:	f200 4602 	addw	r6, r0, #1026	; 0x402
 8005374:	fa16 f282 	uxtah	r2, r6, r2
 8005378:	b29b      	uxth	r3, r3
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800537a:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800537e:	8922      	ldrh	r2, [r4, #8]
 8005380:	e772      	b.n	8005268 <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005382:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 8005386:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005388:	f012 0f40 	tst.w	r2, #64	; 0x40
        ep->xfer_len_db -= len;
 800538c:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800538e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005392:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005394:	d007      	beq.n	80053a6 <USB_EPStartXfer+0x246>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005396:	f200 4606 	addw	r6, r0, #1030	; 0x406
 800539a:	fa16 f282 	uxtah	r2, r6, r2
 800539e:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053a2:	8962      	ldrh	r2, [r4, #10]
 80053a4:	e760      	b.n	8005268 <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053a6:	f200 4602 	addw	r6, r0, #1026	; 0x402
 80053aa:	fa16 f282 	uxtah	r2, r6, r2
 80053ae:	e7e4      	b.n	800537a <USB_EPStartXfer+0x21a>
    if (ep->doublebuffer == 0U)
 80053b0:	bb7a      	cbnz	r2, 8005412 <USB_EPStartXfer+0x2b2>
      if (ep->xfer_len > ep->maxpacket)
 80053b2:	69a3      	ldr	r3, [r4, #24]
 80053b4:	6921      	ldr	r1, [r4, #16]
 80053b6:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 80053b8:	bf88      	it	hi
 80053ba:	1a5a      	subhi	r2, r3, r1
 80053bc:	61a2      	str	r2, [r4, #24]
 80053be:	bf88      	it	hi
 80053c0:	460b      	movhi	r3, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80053c2:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80053c6:	7822      	ldrb	r2, [r4, #0]
 80053c8:	f205 4006 	addw	r0, r5, #1030	; 0x406
 80053cc:	fa10 f181 	uxtah	r1, r0, r1
 80053d0:	2b3e      	cmp	r3, #62	; 0x3e
 80053d2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80053d6:	f200 80cb 	bhi.w	8005570 <USB_EPStartXfer+0x410>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 80d1 	bne.w	8005582 <USB_EPStartXfer+0x422>
 80053e0:	880b      	ldrh	r3, [r1, #0]
 80053e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053e6:	041b      	lsls	r3, r3, #16
 80053e8:	0c1b      	lsrs	r3, r3, #16
 80053ea:	800b      	strh	r3, [r1, #0]
 80053ec:	880b      	ldrh	r3, [r1, #0]
 80053ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	800b      	strh	r3, [r1, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053fa:	7822      	ldrb	r2, [r4, #0]
 80053fc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	0c1b      	lsrs	r3, r3, #16
 800540c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005410:	e6d1      	b.n	80051b6 <USB_EPStartXfer+0x56>
      if (ep->type == EP_TYPE_BULK)
 8005412:	78e3      	ldrb	r3, [r4, #3]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d175      	bne.n	8005504 <USB_EPStartXfer+0x3a4>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005418:	2900      	cmp	r1, #0
 800541a:	d14b      	bne.n	80054b4 <USB_EPStartXfer+0x354>
 800541c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8005420:	7823      	ldrb	r3, [r4, #0]
 8005422:	f200 4202 	addw	r2, r0, #1026	; 0x402
 8005426:	fa12 f181 	uxtah	r1, r2, r1
 800542a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800542e:	6923      	ldr	r3, [r4, #16]
 8005430:	2b3e      	cmp	r3, #62	; 0x3e
 8005432:	d922      	bls.n	800547a <USB_EPStartXfer+0x31a>
 8005434:	0958      	lsrs	r0, r3, #5
 8005436:	4a32      	ldr	r2, [pc, #200]	; (8005500 <USB_EPStartXfer+0x3a0>)
 8005438:	06df      	lsls	r7, r3, #27
 800543a:	bf08      	it	eq
 800543c:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8005440:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8005444:	b292      	uxth	r2, r2
 8005446:	800a      	strh	r2, [r1, #0]
 8005448:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800544c:	7822      	ldrb	r2, [r4, #0]
 800544e:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8005452:	fa10 f181 	uxtah	r1, r0, r1
 8005456:	2b3e      	cmp	r3, #62	; 0x3e
 8005458:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800545c:	d820      	bhi.n	80054a0 <USB_EPStartXfer+0x340>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d145      	bne.n	80054ee <USB_EPStartXfer+0x38e>
 8005462:	880b      	ldrh	r3, [r1, #0]
 8005464:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005468:	041b      	lsls	r3, r3, #16
 800546a:	0c1b      	lsrs	r3, r3, #16
 800546c:	800b      	strh	r3, [r1, #0]
 800546e:	880b      	ldrh	r3, [r1, #0]
 8005470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005478:	e01a      	b.n	80054b0 <USB_EPStartXfer+0x350>
 800547a:	b95b      	cbnz	r3, 8005494 <USB_EPStartXfer+0x334>
 800547c:	880a      	ldrh	r2, [r1, #0]
 800547e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005482:	0412      	lsls	r2, r2, #16
 8005484:	0c12      	lsrs	r2, r2, #16
 8005486:	800a      	strh	r2, [r1, #0]
 8005488:	880a      	ldrh	r2, [r1, #0]
 800548a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800548e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005492:	e7d7      	b.n	8005444 <USB_EPStartXfer+0x2e4>
 8005494:	085a      	lsrs	r2, r3, #1
 8005496:	07de      	lsls	r6, r3, #31
 8005498:	bf48      	it	mi
 800549a:	3201      	addmi	r2, #1
 800549c:	0292      	lsls	r2, r2, #10
 800549e:	e7d1      	b.n	8005444 <USB_EPStartXfer+0x2e4>
 80054a0:	095a      	lsrs	r2, r3, #5
 80054a2:	06d8      	lsls	r0, r3, #27
 80054a4:	4b16      	ldr	r3, [pc, #88]	; (8005500 <USB_EPStartXfer+0x3a0>)
 80054a6:	bf08      	it	eq
 80054a8:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80054ac:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	800b      	strh	r3, [r1, #0]
        if (ep->xfer_count != 0U)
 80054b4:	69e3      	ldr	r3, [r4, #28]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d09f      	beq.n	80053fa <USB_EPStartXfer+0x29a>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80054ba:	7822      	ldrb	r2, [r4, #0]
 80054bc:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80054c0:	f244 0340 	movw	r3, #16448	; 0x4040
 80054c4:	ea03 0001 	and.w	r0, r3, r1
 80054c8:	438b      	bics	r3, r1
 80054ca:	d001      	beq.n	80054d0 <USB_EPStartXfer+0x370>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d194      	bne.n	80053fa <USB_EPStartXfer+0x29a>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80054d0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80054d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054e8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80054ec:	e785      	b.n	80053fa <USB_EPStartXfer+0x29a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80054ee:	085a      	lsrs	r2, r3, #1
 80054f0:	07db      	lsls	r3, r3, #31
 80054f2:	bf48      	it	mi
 80054f4:	3201      	addmi	r2, #1
 80054f6:	0292      	lsls	r2, r2, #10
 80054f8:	b292      	uxth	r2, r2
 80054fa:	800a      	strh	r2, [r1, #0]
 80054fc:	e7da      	b.n	80054b4 <USB_EPStartXfer+0x354>
 80054fe:	bf00      	nop
 8005500:	ffff8000 	.word	0xffff8000
      else if (ep->type == EP_TYPE_ISOC)
 8005504:	2b01      	cmp	r3, #1
 8005506:	d144      	bne.n	8005592 <USB_EPStartXfer+0x432>
        if (ep->xfer_len > ep->maxpacket)
 8005508:	69a3      	ldr	r3, [r4, #24]
 800550a:	6922      	ldr	r2, [r4, #16]
 800550c:	4293      	cmp	r3, r2
          ep->xfer_len -= len;
 800550e:	bf8a      	itet	hi
 8005510:	1a98      	subhi	r0, r3, r2
          ep->xfer_len = 0U;
 8005512:	2000      	movls	r0, #0
 8005514:	4613      	movhi	r3, r2
 8005516:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005518:	2900      	cmp	r1, #0
 800551a:	f47f af6e 	bne.w	80053fa <USB_EPStartXfer+0x29a>
 800551e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8005522:	7822      	ldrb	r2, [r4, #0]
 8005524:	f205 4002 	addw	r0, r5, #1026	; 0x402
 8005528:	fa10 f181 	uxtah	r1, r0, r1
 800552c:	2b3e      	cmp	r3, #62	; 0x3e
 800552e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8005532:	d90a      	bls.n	800554a <USB_EPStartXfer+0x3ea>
 8005534:	0958      	lsrs	r0, r3, #5
 8005536:	4a18      	ldr	r2, [pc, #96]	; (8005598 <USB_EPStartXfer+0x438>)
 8005538:	06df      	lsls	r7, r3, #27
 800553a:	bf08      	it	eq
 800553c:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8005540:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8005544:	b292      	uxth	r2, r2
 8005546:	800a      	strh	r2, [r1, #0]
 8005548:	e73b      	b.n	80053c2 <USB_EPStartXfer+0x262>
 800554a:	b95b      	cbnz	r3, 8005564 <USB_EPStartXfer+0x404>
 800554c:	880a      	ldrh	r2, [r1, #0]
 800554e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005552:	0412      	lsls	r2, r2, #16
 8005554:	0c12      	lsrs	r2, r2, #16
 8005556:	800a      	strh	r2, [r1, #0]
 8005558:	880a      	ldrh	r2, [r1, #0]
 800555a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800555e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005562:	e7ef      	b.n	8005544 <USB_EPStartXfer+0x3e4>
 8005564:	085a      	lsrs	r2, r3, #1
 8005566:	07de      	lsls	r6, r3, #31
 8005568:	bf48      	it	mi
 800556a:	3201      	addmi	r2, #1
 800556c:	0292      	lsls	r2, r2, #10
 800556e:	e7e9      	b.n	8005544 <USB_EPStartXfer+0x3e4>
 8005570:	095a      	lsrs	r2, r3, #5
 8005572:	06d8      	lsls	r0, r3, #27
 8005574:	4b08      	ldr	r3, [pc, #32]	; (8005598 <USB_EPStartXfer+0x438>)
 8005576:	bf08      	it	eq
 8005578:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800557c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8005580:	e739      	b.n	80053f6 <USB_EPStartXfer+0x296>
 8005582:	085a      	lsrs	r2, r3, #1
 8005584:	07db      	lsls	r3, r3, #31
 8005586:	bf48      	it	mi
 8005588:	3201      	addmi	r2, #1
 800558a:	0292      	lsls	r2, r2, #10
 800558c:	b292      	uxth	r2, r2
 800558e:	800a      	strh	r2, [r1, #0]
 8005590:	e733      	b.n	80053fa <USB_EPStartXfer+0x29a>
        return HAL_ERROR;
 8005592:	2001      	movs	r0, #1
 8005594:	e616      	b.n	80051c4 <USB_EPStartXfer+0x64>
 8005596:	bf00      	nop
 8005598:	ffff8000 	.word	0xffff8000

0800559c <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800559c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 80055a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055a2:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 80055a4:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 80055a6:	460c      	mov	r4, r1
 80055a8:	462e      	mov	r6, r5
 80055aa:	1a47      	subs	r7, r0, r1
 80055ac:	193a      	adds	r2, r7, r4
 80055ae:	3402      	adds	r4, #2
 80055b0:	b936      	cbnz	r6, 80055c0 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80055b2:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 80055b4:	bf44      	itt	mi
 80055b6:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80055ba:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 80055be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 80055c0:	8812      	ldrh	r2, [r2, #0]
 80055c2:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80055c4:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80055c8:	0a12      	lsrs	r2, r2, #8
 80055ca:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 80055ce:	3e01      	subs	r6, #1
 80055d0:	e7ec      	b.n	80055ac <USB_ReadPMA+0x10>
	...

080055d4 <USBD_AUDIO_GetCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_AUDIO_CfgDesc);
 80055d4:	2376      	movs	r3, #118	; 0x76
 80055d6:	8003      	strh	r3, [r0, #0]
  return USBD_AUDIO_CfgDesc;
}
 80055d8:	4800      	ldr	r0, [pc, #0]	; (80055dc <USBD_AUDIO_GetCfgDesc+0x8>)
 80055da:	4770      	bx	lr
 80055dc:	20001cec 	.word	0x20001cec

080055e0 <USBD_AUDIO_EP0_RxReady>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{  
 80055e0:	b510      	push	{r4, lr}
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 80055e2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 80055e6:	7f23      	ldrb	r3, [r4, #28]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d114      	bne.n	8005616 <USBD_AUDIO_EP0_RxReady+0x36>
  {    
    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 80055ec:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d110      	bne.n	8005616 <USBD_AUDIO_EP0_RxReady+0x36>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->VolumeCtl(VOL_CUR);    
 80055f4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80055f8:	4a08      	ldr	r2, [pc, #32]	; (800561c <USBD_AUDIO_EP0_RxReady+0x3c>)
 80055fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80055fe:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8005602:	f9b2 0076 	ldrsh.w	r0, [r2, #118]	; 0x76
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4798      	blx	r3
      
      haudio->control.cmd = 0;
      haudio->control.len = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      haudio->control.unit = 0;
 8005610:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
      haudio->control.cmd = 0;
 8005614:	83a3      	strh	r3, [r4, #28]
      haudio->control.data[0]=0;
      haudio->control.data[0]=0;
    }
  }    
  return USBD_OK;
}
 8005616:	2000      	movs	r0, #0
 8005618:	bd10      	pop	{r4, pc}
 800561a:	bf00      	nop
 800561c:	20001cec 	.word	0x20001cec

08005620 <USBD_AUDIO_EP0_TxReady>:
*/
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
  /* Only OUT control data are processed */
  return USBD_OK;
}
 8005620:	2000      	movs	r0, #0
 8005622:	4770      	bx	lr

08005624 <USBD_AUDIO_DataOut>:
*/
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev, 
                                    uint8_t epnum)
{  
  return USBD_OK;
}
 8005624:	2000      	movs	r0, #0
 8005626:	4770      	bx	lr

08005628 <USBD_AUDIO_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 8005628:	230a      	movs	r3, #10
 800562a:	8003      	strh	r3, [r0, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
}
 800562c:	4800      	ldr	r0, [pc, #0]	; (8005630 <USBD_AUDIO_GetDeviceQualifierDesc+0x8>)
 800562e:	4770      	bx	lr
 8005630:	200000b0 	.word	0x200000b0

08005634 <USBD_AUDIO_DataIn>:
{
 8005634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  haudio = pdev->pClassData;
 8005638:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  haudio->timeout=0;
 800563c:	2300      	movs	r3, #0
  if (epnum == (AUDIO_IN_EP & 0x7F))
 800563e:	2901      	cmp	r1, #1
  uint16_t IsocInWr_app = haudio->wr_ptr;
 8005640:	8b25      	ldrh	r5, [r4, #24]
  uint16_t true_dim = haudio->buffer_length;
 8005642:	89e7      	ldrh	r7, [r4, #14]
  uint16_t packet_dim = haudio->paketDimension;
 8005644:	f8b4 9012 	ldrh.w	r9, [r4, #18]
  uint16_t channels = haudio->channels;
 8005648:	f894 a004 	ldrb.w	sl, [r4, #4]
  haudio->timeout=0;
 800564c:	81a3      	strh	r3, [r4, #12]
{
 800564e:	4606      	mov	r6, r0
  if (epnum == (AUDIO_IN_EP & 0x7F))
 8005650:	d145      	bne.n	80056de <USBD_AUDIO_DataIn+0xaa>
    if (haudio->state == STATE_USB_IDLE) 
 8005652:	7d23      	ldrb	r3, [r4, #20]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d109      	bne.n	800566c <USBD_AUDIO_DataIn+0x38>
      haudio->state=STATE_USB_REQUESTS_STARTED;
 8005658:	2302      	movs	r3, #2
 800565a:	7523      	strb	r3, [r4, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Record();      
 800565c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8005660:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005664:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	4798      	blx	r3
    if (haudio->state == STATE_USB_BUFFER_WRITE_STARTED)   
 800566c:	7d23      	ldrb	r3, [r4, #20]
 800566e:	2b03      	cmp	r3, #3
  length_usb_pck = packet_dim;  
 8005670:	46c8      	mov	r8, r9
    if (haudio->state == STATE_USB_BUFFER_WRITE_STARTED)   
 8005672:	d13f      	bne.n	80056f4 <USBD_AUDIO_DataIn+0xc0>
      haudio->rd_ptr = haudio->rd_ptr % (true_dim);              
 8005674:	8ae2      	ldrh	r2, [r4, #22]
 8005676:	fbb2 f3f7 	udiv	r3, r2, r7
 800567a:	fb07 2213 	mls	r2, r7, r3, r2
 800567e:	b292      	uxth	r2, r2
      if(IsocInWr_app<haudio->rd_ptr){
 8005680:	42aa      	cmp	r2, r5
        app = ((true_dim) - haudio->rd_ptr) +  IsocInWr_app;
 8005682:	bf88      	it	hi
 8005684:	19ed      	addhi	r5, r5, r7
      if(app >= (packet_dim*haudio->upper_treshold)){       
 8005686:	7ea3      	ldrb	r3, [r4, #26]
      haudio->rd_ptr = haudio->rd_ptr % (true_dim);              
 8005688:	82e2      	strh	r2, [r4, #22]
        app = IsocInWr_app - haudio->rd_ptr;
 800568a:	1aad      	subs	r5, r5, r2
 800568c:	b2ad      	uxth	r5, r5
      if(app >= (packet_dim*haudio->upper_treshold)){       
 800568e:	fb09 f303 	mul.w	r3, r9, r3
 8005692:	429d      	cmp	r5, r3
 8005694:	db26      	blt.n	80056e4 <USBD_AUDIO_DataIn+0xb0>
        length_usb_pck += channels*2;
 8005696:	eb09 084a 	add.w	r8, r9, sl, lsl #1
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 800569a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800569c:	4643      	mov	r3, r8
 800569e:	440a      	add	r2, r1
 80056a0:	4630      	mov	r0, r6
 80056a2:	2181      	movs	r1, #129	; 0x81
 80056a4:	f7fb f8c1 	bl	800082a <USBD_LL_Transmit>
      haudio->rd_ptr += length_usb_pck;      
 80056a8:	8ae3      	ldrh	r3, [r4, #22]
 80056aa:	4443      	add	r3, r8
 80056ac:	82e3      	strh	r3, [r4, #22]
      if(app < haudio->buffer_length/10)
 80056ae:	220a      	movs	r2, #10
 80056b0:	89e3      	ldrh	r3, [r4, #14]
 80056b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80056b6:	42ab      	cmp	r3, r5
 80056b8:	d911      	bls.n	80056de <USBD_AUDIO_DataIn+0xaa>
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Stop();
 80056ba:	f8d6 02d4 	ldr.w	r0, [r6, #724]	; 0x2d4
 80056be:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80056c2:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	4798      	blx	r3
        haudio->state = STATE_USB_IDLE; 
 80056ca:	2301      	movs	r3, #1
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 80056cc:	89e2      	ldrh	r2, [r4, #14]
        haudio->state = STATE_USB_IDLE; 
 80056ce:	7523      	strb	r3, [r4, #20]
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 80056d0:	8a23      	ldrh	r3, [r4, #16]
 80056d2:	6e20      	ldr	r0, [r4, #96]	; 0x60
        haudio->timeout=0;
 80056d4:	2100      	movs	r1, #0
 80056d6:	81a1      	strh	r1, [r4, #12]
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 80056d8:	441a      	add	r2, r3
 80056da:	f000 ff49 	bl	8006570 <memset>
}
 80056de:	2000      	movs	r0, #0
 80056e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }else if(app <= (packet_dim*haudio->lower_treshold)){
 80056e4:	7ee3      	ldrb	r3, [r4, #27]
 80056e6:	fb09 f303 	mul.w	r3, r9, r3
 80056ea:	429d      	cmp	r5, r3
        length_usb_pck -= channels*2;
 80056ec:	bfd8      	it	le
 80056ee:	eba9 084a 	suble.w	r8, r9, sl, lsl #1
 80056f2:	e7d2      	b.n	800569a <USBD_AUDIO_DataIn+0x66>
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 80056f4:	4a03      	ldr	r2, [pc, #12]	; (8005704 <USBD_AUDIO_DataIn+0xd0>)
 80056f6:	464b      	mov	r3, r9
 80056f8:	2181      	movs	r1, #129	; 0x81
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7fb f895 	bl	800082a <USBD_LL_Transmit>
 8005700:	e7ed      	b.n	80056de <USBD_AUDIO_DataIn+0xaa>
 8005702:	bf00      	nop
 8005704:	20001d64 	.word	0x20001d64

08005708 <USBD_AUDIO_DeInit>:
{
 8005708:	b510      	push	{r4, lr}
 800570a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,AUDIO_IN_EP);  
 800570c:	2181      	movs	r1, #129	; 0x81
 800570e:	f7fb f856 	bl	80007be <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8005712:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005716:	b163      	cbz	r3, 8005732 <USBD_AUDIO_DeInit+0x2a>
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0);
 8005718:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
 800571c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8005720:	2000      	movs	r0, #0
 8005722:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	4798      	blx	r3
    haudioInstance.state = STATE_USB_WAITING_FOR_INIT; 
 800572a:	4b03      	ldr	r3, [pc, #12]	; (8005738 <USBD_AUDIO_DeInit+0x30>)
 800572c:	2200      	movs	r2, #0
 800572e:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 8005732:	2000      	movs	r0, #0
 8005734:	bd10      	pop	{r4, pc}
 8005736:	bf00      	nop
 8005738:	20001cec 	.word	0x20001cec

0800573c <USBD_AUDIO_Init>:
{
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(haudioInstance.state!=STATE_USB_WAITING_FOR_INIT)
 800573e:	4c1f      	ldr	r4, [pc, #124]	; (80057bc <USBD_AUDIO_Init+0x80>)
 8005740:	f894 620c 	ldrb.w	r6, [r4, #524]	; 0x20c
{
 8005744:	4605      	mov	r5, r0
  if(haudioInstance.state!=STATE_USB_WAITING_FOR_INIT)
 8005746:	bbbe      	cbnz	r6, 80057b8 <USBD_AUDIO_Init+0x7c>
  pdev->pClassData = &haudioInstance;
 8005748:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
  uint16_t packet_dim = haudio->paketDimension;
 800574c:	f8b4 720a 	ldrh.w	r7, [r4, #522]	; 0x20a
  pdev->pClassData = &haudioInstance;
 8005750:	f8c0 32bc 	str.w	r3, [r0, #700]	; 0x2bc
  uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * haudio->dataAmount / haudio->paketDimension;
 8005754:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->frequency,0,haudio->channels);
 8005758:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
  haudio->rd_ptr = 0;
 800575c:	f8a4 620e 	strh.w	r6, [r4, #526]	; 0x20e
  uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * haudio->dataAmount / haudio->paketDimension;
 8005760:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005764:	fbb3 f3f7 	udiv	r3, r3, r7
  haudio->wr_ptr=wr_rd_offset * packet_dim;
 8005768:	fb13 f307 	smulbb	r3, r3, r7
 800576c:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->frequency,0,haudio->channels);
 8005770:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
  haudio->timeout = 0;
 8005774:	f8a4 6204 	strh.w	r6, [r4, #516]	; 0x204
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->frequency,0,haudio->channels);
 8005778:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800577c:	4631      	mov	r1, r6
 800577e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005782:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4798      	blx	r3
  USBD_LL_OpenEP(pdev,
 800578a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800578e:	2201      	movs	r2, #1
 8005790:	2181      	movs	r1, #129	; 0x81
 8005792:	4628      	mov	r0, r5
 8005794:	f7fb f809 	bl	80007aa <USBD_LL_OpenEP>
  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 8005798:	2181      	movs	r1, #129	; 0x81
 800579a:	4628      	mov	r0, r5
 800579c:	f7fb f816 	bl	80007cc <USBD_LL_FlushEP>
  USBD_LL_Transmit(pdev, AUDIO_IN_EP,
 80057a0:	463b      	mov	r3, r7
 80057a2:	f104 0278 	add.w	r2, r4, #120	; 0x78
 80057a6:	2181      	movs	r1, #129	; 0x81
 80057a8:	4628      	mov	r0, r5
 80057aa:	f7fb f83e 	bl	800082a <USBD_LL_Transmit>
  haudio->state=STATE_USB_IDLE;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f884 320c 	strb.w	r3, [r4, #524]	; 0x20c
}
 80057b4:	4630      	mov	r0, r6
 80057b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL; 
 80057b8:	2603      	movs	r6, #3
 80057ba:	e7fb      	b.n	80057b4 <USBD_AUDIO_Init+0x78>
 80057bc:	20001cec 	.word	0x20001cec

080057c0 <USBD_AUDIO_IsoINIncomplete>:
 80057c0:	2000      	movs	r0, #0
 80057c2:	4770      	bx	lr

080057c4 <USBD_AUDIO_Setup>:
{
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	780c      	ldrb	r4, [r1, #0]
  haudio = pdev->pClassData;
 80057c8:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057cc:	f014 0460 	ands.w	r4, r4, #96	; 0x60
{
 80057d0:	4684      	mov	ip, r0
 80057d2:	460f      	mov	r7, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057d4:	d049      	beq.n	800586a <USBD_AUDIO_Setup+0xa6>
 80057d6:	2c20      	cmp	r4, #32
 80057d8:	d12a      	bne.n	8005830 <USBD_AUDIO_Setup+0x6c>
    switch (req->bRequest)
 80057da:	784d      	ldrb	r5, [r1, #1]
 80057dc:	2d01      	cmp	r5, #1
 80057de:	d019      	beq.n	8005814 <USBD_AUDIO_Setup+0x50>
 80057e0:	f105 037f 	add.w	r3, r5, #127	; 0x7f
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d838      	bhi.n	800585c <USBD_AUDIO_Setup+0x98>
 80057ea:	3d81      	subs	r5, #129	; 0x81
 80057ec:	2d03      	cmp	r5, #3
 80057ee:	d835      	bhi.n	800585c <USBD_AUDIO_Setup+0x98>
 80057f0:	e8df f005 	tbb	[pc, r5]
 80057f4:	2f252002 	.word	0x2f252002
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
  
  (haudio->control.data)[0] = (uint16_t)VOL_CUR & 0xFF;
 80057f8:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <USBD_AUDIO_Setup+0xe4>)
 80057fa:	88ca      	ldrh	r2, [r1, #6]
 80057fc:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8005800:	7773      	strb	r3, [r6, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_CUR & 0xFF00 ) >> 8;
 8005802:	f3c3 2307 	ubfx	r3, r3, #8, #8
  (haudio->control.data)[1] = ((uint16_t)VOL_MIN & 0xFF00 ) >> 8;
 8005806:	77b3      	strb	r3, [r6, #30]
  USBD_CtlSendData (pdev, 
 8005808:	f106 011d 	add.w	r1, r6, #29
 800580c:	4660      	mov	r0, ip
 800580e:	f000 fe26 	bl	800645e <USBD_CtlSendData>
 8005812:	e00d      	b.n	8005830 <USBD_AUDIO_Setup+0x6c>
*/
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{ 
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
  if (req->wLength)
 8005814:	88ca      	ldrh	r2, [r1, #6]
 8005816:	2a00      	cmp	r2, #0
 8005818:	d043      	beq.n	80058a2 <USBD_AUDIO_Setup+0xde>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx (pdev,
 800581a:	4924      	ldr	r1, [pc, #144]	; (80058ac <USBD_AUDIO_Setup+0xe8>)
 800581c:	f000 fe34 	bl	8006488 <USBD_CtlPrepareRx>
                       (uint8_t *)&VOL_CUR,
                       req->wLength);
    
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8005820:	7735      	strb	r5, [r6, #28]
    haudio->control.len = req->wLength;          /* Set the request data length */
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8005828:	88bb      	ldrh	r3, [r7, #4]
 800582a:	0a1b      	lsrs	r3, r3, #8
 800582c:	f886 305e 	strb.w	r3, [r6, #94]	; 0x5e
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005830:	2400      	movs	r4, #0
 8005832:	e018      	b.n	8005866 <USBD_AUDIO_Setup+0xa2>
  (haudio->control.data)[0] = (uint16_t)VOL_MIN & 0xFF;
 8005834:	23e0      	movs	r3, #224	; 0xe0
 8005836:	88ca      	ldrh	r2, [r1, #6]
 8005838:	7773      	strb	r3, [r6, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MIN & 0xFF00 ) >> 8;
 800583a:	23db      	movs	r3, #219	; 0xdb
 800583c:	e7e3      	b.n	8005806 <USBD_AUDIO_Setup+0x42>
  (haudio->control.data)[0] = (uint16_t)VOL_MAX & 0xFF;
 800583e:	2400      	movs	r4, #0
 8005840:	88ca      	ldrh	r2, [r1, #6]
 8005842:	7774      	strb	r4, [r6, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_RES & 0xFF00 ) >> 8;  
 8005844:	77b4      	strb	r4, [r6, #30]
  USBD_CtlSendData (pdev, 
 8005846:	f106 011d 	add.w	r1, r6, #29
 800584a:	4660      	mov	r0, ip
      USBD_CtlSendData (pdev,
 800584c:	f000 fe07 	bl	800645e <USBD_CtlSendData>
      break;
 8005850:	e009      	b.n	8005866 <USBD_AUDIO_Setup+0xa2>
  (haudio->control.data)[0] = (uint16_t)VOL_RES & 0xFF;
 8005852:	2323      	movs	r3, #35	; 0x23
 8005854:	88ca      	ldrh	r2, [r1, #6]
 8005856:	7773      	strb	r3, [r6, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_RES & 0xFF00 ) >> 8;  
 8005858:	2400      	movs	r4, #0
 800585a:	e7f3      	b.n	8005844 <USBD_AUDIO_Setup+0x80>
      USBD_CtlError (pdev, req);
 800585c:	4639      	mov	r1, r7
 800585e:	4660      	mov	r0, ip
 8005860:	f000 fdd6 	bl	8006410 <USBD_CtlError>
      return USBD_FAIL;
 8005864:	2403      	movs	r4, #3
}
 8005866:	4620      	mov	r0, r4
 8005868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 800586a:	784b      	ldrb	r3, [r1, #1]
 800586c:	2b0a      	cmp	r3, #10
 800586e:	d00d      	beq.n	800588c <USBD_AUDIO_Setup+0xc8>
 8005870:	2b0b      	cmp	r3, #11
 8005872:	d00e      	beq.n	8005892 <USBD_AUDIO_Setup+0xce>
 8005874:	2b06      	cmp	r3, #6
 8005876:	d1f6      	bne.n	8005866 <USBD_AUDIO_Setup+0xa2>
      if( (req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8005878:	884b      	ldrh	r3, [r1, #2]
 800587a:	0a1b      	lsrs	r3, r3, #8
 800587c:	2b21      	cmp	r3, #33	; 0x21
 800587e:	d1f2      	bne.n	8005866 <USBD_AUDIO_Setup+0xa2>
        len = MIN(USB_AUDIO_DESC_SIZ , req->wLength);   
 8005880:	88ca      	ldrh	r2, [r1, #6]
        USBD_CtlSendData (pdev, 
 8005882:	490b      	ldr	r1, [pc, #44]	; (80058b0 <USBD_AUDIO_Setup+0xec>)
 8005884:	2a09      	cmp	r2, #9
 8005886:	bf28      	it	cs
 8005888:	2209      	movcs	r2, #9
 800588a:	e7df      	b.n	800584c <USBD_AUDIO_Setup+0x88>
                        (uint8_t *)haudio->alt_setting,
 800588c:	6831      	ldr	r1, [r6, #0]
      USBD_CtlSendData (pdev,
 800588e:	2201      	movs	r2, #1
 8005890:	e7dc      	b.n	800584c <USBD_AUDIO_Setup+0x88>
      if ((uint8_t)(req->wValue) < USBD_MAX_NUM_INTERFACES)
 8005892:	788b      	ldrb	r3, [r1, #2]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d801      	bhi.n	800589c <USBD_AUDIO_Setup+0xd8>
        haudio->alt_setting = (uint8_t)(req->wValue);
 8005898:	6033      	str	r3, [r6, #0]
 800589a:	e7e4      	b.n	8005866 <USBD_AUDIO_Setup+0xa2>
        USBD_CtlError (pdev, req);
 800589c:	f000 fdb8 	bl	8006410 <USBD_CtlError>
 80058a0:	e7e1      	b.n	8005866 <USBD_AUDIO_Setup+0xa2>
  return ret;
 80058a2:	4614      	mov	r4, r2
 80058a4:	e7df      	b.n	8005866 <USBD_AUDIO_Setup+0xa2>
 80058a6:	bf00      	nop
 80058a8:	20001cec 	.word	0x20001cec
 80058ac:	20001d62 	.word	0x20001d62
 80058b0:	20001cfe 	.word	0x20001cfe

080058b4 <USBD_AUDIO_IsoOutIncomplete>:
 80058b4:	2000      	movs	r0, #0
 80058b6:	4770      	bx	lr

080058b8 <USBD_AUDIO_SOF>:
 80058b8:	2000      	movs	r0, #0
 80058ba:	4770      	bx	lr

080058bc <USBD_AUDIO_Data_Transfer>:
*       you can pass 16 PCM samples if the function is called each millisecond, 
*       32 samples if called every 2 milliseconds and so on. 
* @retval status
*/
uint8_t  USBD_AUDIO_Data_Transfer(USBD_HandleTypeDef *pdev, int16_t * audioData, uint16_t PCMSamples)
{
 80058bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
  
  if(haudioInstance.state==STATE_USB_WAITING_FOR_INIT){    
 80058be:	4b38      	ldr	r3, [pc, #224]	; (80059a0 <USBD_AUDIO_Data_Transfer+0xe4>)
 80058c0:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d067      	beq.n	8005998 <USBD_AUDIO_Data_Transfer+0xdc>
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80058c8:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  uint16_t dataAmount = PCMSamples * 2; /*Bytes*/
  uint16_t true_dim = haudio->buffer_length;
  uint16_t current_data_Amount = haudio->dataAmount;
  uint16_t packet_dim = haudio->paketDimension;
  
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 80058cc:	7d2b      	ldrb	r3, [r5, #20]
  uint16_t dataAmount = PCMSamples * 2; /*Bytes*/
 80058ce:	0054      	lsls	r4, r2, #1
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 80058d0:	2b02      	cmp	r3, #2
  uint16_t dataAmount = PCMSamples * 2; /*Bytes*/
 80058d2:	b2a4      	uxth	r4, r4
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 80058d4:	d002      	beq.n	80058dc <USBD_AUDIO_Data_Transfer+0x20>
 80058d6:	8a2a      	ldrh	r2, [r5, #16]
 80058d8:	42a2      	cmp	r2, r4
 80058da:	d02e      	beq.n	800593a <USBD_AUDIO_Data_Transfer+0x7e>
  uint16_t packet_dim = haudio->paketDimension;
 80058dc:	8a6a      	ldrh	r2, [r5, #18]
    
    /*USB parameters definition, based on the amount of data passed*/
    haudio->dataAmount=dataAmount;                  
 80058de:	822c      	strh	r4, [r5, #16]
    uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * dataAmount / packet_dim; 
 80058e0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    haudio->wr_ptr=wr_rd_offset * packet_dim;
    haudio->rd_ptr = 0;
    haudio->upper_treshold = wr_rd_offset + 1;
    haudio->lower_treshold = wr_rd_offset - 1;
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 80058e4:	fbb4 f4f2 	udiv	r4, r4, r2
    uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * dataAmount / packet_dim; 
 80058e8:	fbb3 f3f2 	udiv	r3, r3, r2
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 80058ec:	fb14 f402 	smulbb	r4, r4, r2
    haudio->wr_ptr=wr_rd_offset * packet_dim;
 80058f0:	fb13 f102 	smulbb	r1, r3, r2
 80058f4:	8329      	strh	r1, [r5, #24]
    haudio->upper_treshold = wr_rd_offset + 1;
 80058f6:	b2db      	uxtb	r3, r3
    haudio->rd_ptr = 0;
 80058f8:	2100      	movs	r1, #0
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 80058fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    
    /*Memory allocation for data buffer, depending (also) on data amount passed to the transfer function*/
    if(haudio->buffer != NULL)
 80058fe:	6e28      	ldr	r0, [r5, #96]	; 0x60
    haudio->rd_ptr = 0;
 8005900:	82e9      	strh	r1, [r5, #22]
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 8005902:	0064      	lsls	r4, r4, #1
    haudio->upper_treshold = wr_rd_offset + 1;
 8005904:	1c59      	adds	r1, r3, #1
    haudio->lower_treshold = wr_rd_offset - 1;
 8005906:	3b01      	subs	r3, #1
    haudio->upper_treshold = wr_rd_offset + 1;
 8005908:	76a9      	strb	r1, [r5, #26]
    haudio->lower_treshold = wr_rd_offset - 1;
 800590a:	76eb      	strb	r3, [r5, #27]
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 800590c:	81ec      	strh	r4, [r5, #14]
    if(haudio->buffer != NULL)
 800590e:	b108      	cbz	r0, 8005914 <USBD_AUDIO_Data_Transfer+0x58>
    {
      USBD_free(haudio->buffer);      
 8005910:	f000 fe18 	bl	8006544 <free>
    }
    haudio->buffer = USBD_malloc(haudio->buffer_length + haudio->dataAmount);
 8005914:	89ea      	ldrh	r2, [r5, #14]
 8005916:	8a2b      	ldrh	r3, [r5, #16]
 8005918:	441a      	add	r2, r3
 800591a:	4610      	mov	r0, r2
 800591c:	9201      	str	r2, [sp, #4]
 800591e:	f000 fe09 	bl	8006534 <malloc>
 8005922:	2403      	movs	r4, #3
 8005924:	6628      	str	r0, [r5, #96]	; 0x60
    if(haudio->buffer == NULL)
 8005926:	2800      	cmp	r0, #0
 8005928:	d038      	beq.n	800599c <USBD_AUDIO_Data_Transfer+0xe0>
    {
      return USBD_FAIL;       
    }
    memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 800592a:	9a01      	ldr	r2, [sp, #4]
 800592c:	2100      	movs	r1, #0
 800592e:	f000 fe1f 	bl	8006570 <memset>
    haudio->state=STATE_USB_BUFFER_WRITE_STARTED;
 8005932:	752c      	strb	r4, [r5, #20]
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
    if((haudio->wr_ptr-dataAmount) == 0){
      memcpy((uint8_t *)(((uint8_t *)haudio->buffer)+true_dim),(uint8_t *)haudio->buffer, dataAmount);
    }
  }
  return USBD_OK;  
 8005934:	2000      	movs	r0, #0
}
 8005936:	b002      	add	sp, #8
 8005938:	bd70      	pop	{r4, r5, r6, pc}
  }else if(haudio->state==STATE_USB_BUFFER_WRITE_STARTED){
 800593a:	2b03      	cmp	r3, #3
 800593c:	d1fa      	bne.n	8005934 <USBD_AUDIO_Data_Transfer+0x78>
    if(haudio->timeout++==TIMEOUT_VALUE){
 800593e:	89ab      	ldrh	r3, [r5, #12]
  uint16_t true_dim = haudio->buffer_length;
 8005940:	89ee      	ldrh	r6, [r5, #14]
    if(haudio->timeout++==TIMEOUT_VALUE){
 8005942:	b21a      	sxth	r2, r3
 8005944:	3301      	adds	r3, #1
 8005946:	b21b      	sxth	r3, r3
 8005948:	2ac8      	cmp	r2, #200	; 0xc8
 800594a:	81ab      	strh	r3, [r5, #12]
 800594c:	d10d      	bne.n	800596a <USBD_AUDIO_Data_Transfer+0xae>
      haudio->state=STATE_USB_IDLE;
 800594e:	2301      	movs	r3, #1
 8005950:	752b      	strb	r3, [r5, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Stop();   
 8005952:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8005956:	9101      	str	r1, [sp, #4]
 8005958:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800595c:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	4798      	blx	r3
     haudio->timeout=0;
 8005964:	2300      	movs	r3, #0
 8005966:	9901      	ldr	r1, [sp, #4]
 8005968:	81ab      	strh	r3, [r5, #12]
    memcpy((uint8_t * )&haudio->buffer[haudio->wr_ptr], (uint8_t *)(audioData), dataAmount);    
 800596a:	8b2b      	ldrh	r3, [r5, #24]
 800596c:	6e28      	ldr	r0, [r5, #96]	; 0x60
 800596e:	4622      	mov	r2, r4
 8005970:	4418      	add	r0, r3
 8005972:	f000 fdef 	bl	8006554 <memcpy>
    haudio->wr_ptr += dataAmount;
 8005976:	8b2b      	ldrh	r3, [r5, #24]
 8005978:	4423      	add	r3, r4
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
 800597a:	b29b      	uxth	r3, r3
 800597c:	fbb3 f2f6 	udiv	r2, r3, r6
 8005980:	fb06 3312 	mls	r3, r6, r2, r3
 8005984:	b29b      	uxth	r3, r3
    if((haudio->wr_ptr-dataAmount) == 0){
 8005986:	42a3      	cmp	r3, r4
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
 8005988:	832b      	strh	r3, [r5, #24]
    if((haudio->wr_ptr-dataAmount) == 0){
 800598a:	d1d3      	bne.n	8005934 <USBD_AUDIO_Data_Transfer+0x78>
      memcpy((uint8_t *)(((uint8_t *)haudio->buffer)+true_dim),(uint8_t *)haudio->buffer, dataAmount);
 800598c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800598e:	4622      	mov	r2, r4
 8005990:	1988      	adds	r0, r1, r6
 8005992:	f000 fddf 	bl	8006554 <memcpy>
 8005996:	e7cd      	b.n	8005934 <USBD_AUDIO_Data_Transfer+0x78>
    return USBD_BUSY;    
 8005998:	2001      	movs	r0, #1
 800599a:	e7cc      	b.n	8005936 <USBD_AUDIO_Data_Transfer+0x7a>
      return USBD_FAIL;       
 800599c:	4620      	mov	r0, r4
 800599e:	e7ca      	b.n	8005936 <USBD_AUDIO_Data_Transfer+0x7a>
 80059a0:	20001cec 	.word	0x20001cec

080059a4 <USBD_AUDIO_RegisterInterface>:
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_AUDIO_ItfTypeDef *fops)
{
  if(fops != NULL)
 80059a4:	b109      	cbz	r1, 80059aa <USBD_AUDIO_RegisterInterface+0x6>
  {
    pdev->pUserData[0]= fops;
 80059a6:	f8c0 12c4 	str.w	r1, [r0, #708]	; 0x2c4
  }
  return 0;}
 80059aa:	2000      	movs	r0, #0
 80059ac:	4770      	bx	lr
	...

080059b0 <USBD_AUDIO_Init_Microphone_Descriptor>:
*/
void USBD_AUDIO_Init_Microphone_Descriptor(USBD_HandleTypeDef   *pdev, uint32_t samplingFrequency, uint8_t Channels)
{
  uint16_t index;
  uint8_t AUDIO_CONTROLS;   
  USBD_AUDIO_CfgDesc[0] = 0x09;                                                /* bLength */
 80059b0:	4bca      	ldr	r3, [pc, #808]	; (8005cdc <USBD_AUDIO_Init_Microphone_Descriptor+0x32c>)
 80059b2:	f240 2009 	movw	r0, #521	; 0x209
{
 80059b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USBD_AUDIO_CfgDesc[0] = 0x09;                                                /* bLength */
 80059ba:	8018      	strh	r0, [r3, #0]
  USBD_AUDIO_CfgDesc[1] = 0x02;                                                /* bDescriptorType */
  USBD_AUDIO_CfgDesc[2] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)&0xff);       /* wTotalLength */
 80059bc:	f102 006c 	add.w	r0, r2, #108	; 0x6c
 80059c0:	7098      	strb	r0, [r3, #2]
  USBD_AUDIO_CfgDesc[3] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)>>8);
 80059c2:	1200      	asrs	r0, r0, #8
  USBD_AUDIO_CfgDesc[4] = 0x02;                                                /* bNumInterfaces */
  USBD_AUDIO_CfgDesc[5] = 0x01;                                                /* bConfigurationValue */
  USBD_AUDIO_CfgDesc[6] = 0x00;                                                /* iConfiguration */
  USBD_AUDIO_CfgDesc[7] = 0x80;                                                /* bmAttributes  BUS Powered*/
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 80059c4:	4cc6      	ldr	r4, [pc, #792]	; (8005ce0 <USBD_AUDIO_Init_Microphone_Descriptor+0x330>)
  USBD_AUDIO_CfgDesc[3] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)>>8);
 80059c6:	70d8      	strb	r0, [r3, #3]
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 80059c8:	48c6      	ldr	r0, [pc, #792]	; (8005ce4 <USBD_AUDIO_Init_Microphone_Descriptor+0x334>)
  USBD_AUDIO_CfgDesc[11] = 0x00;                                               /* bInterfaceNumber */
  USBD_AUDIO_CfgDesc[12] = 0x00;                                               /* bAlternateSetting */
  USBD_AUDIO_CfgDesc[13] = 0x00;                                               /* bNumEndpoints */
  USBD_AUDIO_CfgDesc[14] = USB_DEVICE_CLASS_AUDIO;                             /* bInterfaceClass */
  USBD_AUDIO_CfgDesc[15] = AUDIO_SUBCLASS_AUDIOCONTROL;                        /* bInterfaceSubClass */
  USBD_AUDIO_CfgDesc[16] = AUDIO_PROTOCOL_UNDEFINED;                           /* bInterfaceProtocol */
 80059ca:	4dc7      	ldr	r5, [pc, #796]	; (8005ce8 <USBD_AUDIO_Init_Microphone_Descriptor+0x338>)
  USBD_AUDIO_CfgDesc[29] = AUDIO_CONTROL_INPUT_TERMINAL;                       /* bDescriptorSubtype */
  USBD_AUDIO_CfgDesc[30] = 0x01;                                               /* bTerminalID */
  USBD_AUDIO_CfgDesc[31] = 0x01;                                               /* wTerminalType AUDIO_TERMINAL_USB_MICROPHONE   0x0201 */
  USBD_AUDIO_CfgDesc[32] = 0x02;
  USBD_AUDIO_CfgDesc[33] = 0x00;                                               /* bAssocTerminal */
  USBD_AUDIO_CfgDesc[34] = Channels;                                           /* bNrChannels */   
 80059cc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 80059d0:	e9c3 4001 	strd	r4, r0, [r3, #4]
  USBD_AUDIO_CfgDesc[16] = AUDIO_PROTOCOL_UNDEFINED;                           /* bInterfaceProtocol */
 80059d4:	48c5      	ldr	r0, [pc, #788]	; (8005cec <USBD_AUDIO_Init_Microphone_Descriptor+0x33c>)
 80059d6:	e9c3 5003 	strd	r5, r0, [r3, #12]
  USBD_AUDIO_CfgDesc[20] = AUDIO_CONTROL_HEADER;                               /* bDescriptorSubtype */
 80059da:	2001      	movs	r0, #1
 80059dc:	8298      	strh	r0, [r3, #20]
  USBD_AUDIO_CfgDesc[22] = 0x01;
 80059de:	7598      	strb	r0, [r3, #22]
  USBD_AUDIO_CfgDesc[23] = 0x25+Channels;                                      /* wTotalLength = 37+AUDIO_CHANNELS*/
 80059e0:	f102 0025 	add.w	r0, r2, #37	; 0x25
 80059e4:	75d8      	strb	r0, [r3, #23]
  USBD_AUDIO_CfgDesc[24] = 0x00;
 80059e6:	48c2      	ldr	r0, [pc, #776]	; (8005cf0 <USBD_AUDIO_Init_Microphone_Descriptor+0x340>)
 80059e8:	6198      	str	r0, [r3, #24]
  USBD_AUDIO_CfgDesc[28] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 80059ea:	f100 4075 	add.w	r0, r0, #4110417920	; 0xf5000000
 80059ee:	f500 7092 	add.w	r0, r0, #292	; 0x124
 80059f2:	61d8      	str	r0, [r3, #28]
  USBD_AUDIO_CfgDesc[32] = 0x02;
 80059f4:	2002      	movs	r0, #2
  if(Channels != 2)
 80059f6:	4282      	cmp	r2, r0
    USBD_AUDIO_CfgDesc[35] = 0x00;                                             /* wChannelConfig 0x0000  Mono */
    USBD_AUDIO_CfgDesc[36] = 0x00;
  }
  else
  {
    USBD_AUDIO_CfgDesc[35] = 0x03;                                             /* wChannelConfig 0x0003  Stereo */
 80059f8:	bf04      	itt	eq
 80059fa:	2403      	moveq	r4, #3
 80059fc:	f883 4023 	strbeq.w	r4, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
  }   
  USBD_AUDIO_CfgDesc[37] = 0x00;                                               /* iChannelNames */
  USBD_AUDIO_CfgDesc[38] = 0x00;                                               /* iTerminal */   
  /* USB Microphone Audio Feature Unit Descriptor */
  USBD_AUDIO_CfgDesc[39] = 0x07+Channels+1;                                    /* bLength */
 8005a00:	f102 0408 	add.w	r4, r2, #8
 8005a04:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
  USBD_AUDIO_CfgDesc[40] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 8005a08:	4cba      	ldr	r4, [pc, #744]	; (8005cf4 <USBD_AUDIO_Init_Microphone_Descriptor+0x344>)
  USBD_AUDIO_CfgDesc[32] = 0x02;
 8005a0a:	8418      	strh	r0, [r3, #32]
  USBD_AUDIO_CfgDesc[40] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 8005a0c:	629c      	str	r4, [r3, #40]	; 0x28
 8005a0e:	f04f 0000 	mov.w	r0, #0
  USBD_AUDIO_CfgDesc[41] = AUDIO_CONTROL_FEATURE_UNIT;                         /* bDescriptorSubtype */
  USBD_AUDIO_CfgDesc[42] = 0x02;                                               /* bUnitID */
  USBD_AUDIO_CfgDesc[43] = 0x01;                                               /* bSourceID */
  USBD_AUDIO_CfgDesc[44] = 0x01;                                               /* bControlSize */   
 8005a12:	f04f 0401 	mov.w	r4, #1
    USBD_AUDIO_CfgDesc[35] = 0x00;                                             /* wChannelConfig 0x0000  Mono */
 8005a16:	bf18      	it	ne
 8005a18:	f883 0023 	strbne.w	r0, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 8005a1c:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  index = 47;   
  if(Channels == 1)
 8005a20:	42a2      	cmp	r2, r4
  USBD_AUDIO_CfgDesc[37] = 0x00;                                               /* iChannelNames */
 8005a22:	f04f 0000 	mov.w	r0, #0
 8005a26:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
  USBD_AUDIO_CfgDesc[38] = 0x00;                                               /* iTerminal */   
 8005a2a:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
  USBD_AUDIO_CfgDesc[44] = 0x01;                                               /* bControlSize */   
 8005a2e:	f883 402c 	strb.w	r4, [r3, #44]	; 0x2c
  if(Channels == 1)
 8005a32:	f040 8126 	bne.w	8005c82 <USBD_AUDIO_Init_Microphone_Descriptor+0x2d2>
  {
    AUDIO_CONTROLS = (0x02);     
    USBD_AUDIO_CfgDesc[45] = AUDIO_CONTROLS;
 8005a36:	2402      	movs	r4, #2
    USBD_AUDIO_CfgDesc[46] = 0x00;     
 8005a38:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
    USBD_AUDIO_CfgDesc[45] = AUDIO_CONTROLS;
 8005a3c:	f883 402d 	strb.w	r4, [r3, #45]	; 0x2d
  index = 47;   
 8005a40:	202f      	movs	r0, #47	; 0x2f
    index++;
  }   
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
  index++;   
  /*USB Microphone Output Terminal Descriptor */
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 8005a42:	1c45      	adds	r5, r0, #1
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
 8005a44:	2400      	movs	r4, #0
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 8005a46:	2709      	movs	r7, #9
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
 8005a48:	541c      	strb	r4, [r3, r0]
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 8005a4a:	555f      	strb	r7, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8005a4c:	1c85      	adds	r5, r0, #2
 8005a4e:	f04f 0c24 	mov.w	ip, #36	; 0x24
 8005a52:	f803 c005 	strb.w	ip, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_CONTROL_OUTPUT_TERMINAL;                 /* bDescriptorSubtype */
 8005a56:	1cc5      	adds	r5, r0, #3
 8005a58:	f04f 0803 	mov.w	r8, #3
 8005a5c:	f803 8005 	strb.w	r8, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalID */
 8005a60:	1d05      	adds	r5, r0, #4
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wTerminalType AUDIO_TERMINAL_USB_STREAMING 0x0101*/
 8005a62:	1d46      	adds	r6, r0, #5
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalID */
 8005a64:	f803 8005 	strb.w	r8, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wTerminalType AUDIO_TERMINAL_USB_STREAMING 0x0101*/
 8005a68:	2501      	movs	r5, #1
 8005a6a:	559d      	strb	r5, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x01;
 8005a6c:	1d86      	adds	r6, r0, #6
  USBD_AUDIO_CfgDesc[index++] = 0x00;
  USBD_AUDIO_CfgDesc[index++] = 0x02;
 8005a6e:	f100 0e08 	add.w	lr, r0, #8
  USBD_AUDIO_CfgDesc[index++] = 0x01;
 8005a72:	559d      	strb	r5, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x00;
 8005a74:	1dc6      	adds	r6, r0, #7
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Zero Bandwith */
  /* Interface 1, Alternate Setting 0                                             */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 8005a76:	f100 090b 	add.w	r9, r0, #11
  USBD_AUDIO_CfgDesc[index++] = 0x00;
 8005a7a:	559c      	strb	r4, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x02;
 8005a7c:	2602      	movs	r6, #2
 8005a7e:	f803 600e 	strb.w	r6, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 8005a82:	eb00 0e07 	add.w	lr, r0, r7
 8005a86:	f803 400e 	strb.w	r4, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 8005a8a:	f100 0e0a 	add.w	lr, r0, #10
 8005a8e:	f803 700e 	strb.w	r7, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 8005a92:	f04f 0e04 	mov.w	lr, #4
 8005a96:	f803 e009 	strb.w	lr, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 8005a9a:	f100 090c 	add.w	r9, r0, #12
 8005a9e:	f803 5009 	strb.w	r5, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bAlternateSetting */
 8005aa2:	f100 090d 	add.w	r9, r0, #13
 8005aa6:	f803 4009 	strb.w	r4, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bNumEndpoints */
 8005aaa:	f100 090e 	add.w	r9, r0, #14
 8005aae:	f803 4009 	strb.w	r4, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 8005ab2:	f100 090f 	add.w	r9, r0, #15
 8005ab6:	f803 5009 	strb.w	r5, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 8005aba:	f100 0910 	add.w	r9, r0, #16
 8005abe:	f803 6009 	strb.w	r6, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 8005ac2:	f100 0911 	add.w	r9, r0, #17
 8005ac6:	f803 4009 	strb.w	r4, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 8005aca:	f100 0912 	add.w	r9, r0, #18
 8005ace:	f803 4009 	strb.w	r4, [r3, r9]
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Operational */
  /* Interface 1, Alternate Setting 1                                           */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 8005ad2:	f100 0913 	add.w	r9, r0, #19
 8005ad6:	f803 7009 	strb.w	r7, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 8005ada:	f100 0914 	add.w	r9, r0, #20
 8005ade:	f803 e009 	strb.w	lr, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 8005ae2:	f100 0e15 	add.w	lr, r0, #21
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* iInterface */   
  /* USB Microphone Audio Streaming Interface Descriptor */
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_INTERFACE_DESC_SIZE;           /* bLength */
 8005ae6:	f100 091c 	add.w	r9, r0, #28
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 8005aea:	f803 500e 	strb.w	r5, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bAlternateSetting */
 8005aee:	f100 0e16 	add.w	lr, r0, #22
 8005af2:	f803 500e 	strb.w	r5, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bNumEndpoints */
 8005af6:	f100 0e17 	add.w	lr, r0, #23
 8005afa:	f803 500e 	strb.w	r5, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 8005afe:	f100 0e18 	add.w	lr, r0, #24
 8005b02:	f803 500e 	strb.w	r5, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 8005b06:	f100 0e19 	add.w	lr, r0, #25
 8005b0a:	f803 600e 	strb.w	r6, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 8005b0e:	f100 0e1a 	add.w	lr, r0, #26
 8005b12:	f803 400e 	strb.w	r4, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* iInterface */   
 8005b16:	f100 0e1b 	add.w	lr, r0, #27
 8005b1a:	f803 400e 	strb.w	r4, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_INTERFACE_DESC_SIZE;           /* bLength */
 8005b1e:	f04f 0e07 	mov.w	lr, #7
 8005b22:	f803 e009 	strb.w	lr, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8005b26:	f100 091d 	add.w	r9, r0, #29
 8005b2a:	f803 c009 	strb.w	ip, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_GENERAL;                       /* bDescriptorSubtype */
 8005b2e:	f100 091e 	add.w	r9, r0, #30
 8005b32:	f803 5009 	strb.w	r5, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalLink */
 8005b36:	f100 091f 	add.w	r9, r0, #31
 8005b3a:	f803 8009 	strb.w	r8, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bDelay */
 8005b3e:	f100 0820 	add.w	r8, r0, #32
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
  USBD_AUDIO_CfgDesc[index++] = 0x00;                
  /* USB Microphone Audio Type I Format Interface Descriptor */                
  USBD_AUDIO_CfgDesc[index++] = 0x0B;                                          /* bLength */
 8005b42:	f04f 090b 	mov.w	r9, #11
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bDelay */
 8005b46:	f803 5008 	strb.w	r5, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
 8005b4a:	f100 0821 	add.w	r8, r0, #33	; 0x21
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bLockDelayUnits */
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
    
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*2);
  haudioInstance.frequency=samplingFrequency;
 8005b4e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
 8005b52:	f803 5008 	strb.w	r5, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                
 8005b56:	f100 0822 	add.w	r8, r0, #34	; 0x22
 8005b5a:	f803 4008 	strb.w	r4, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = 0x0B;                                          /* bLength */
 8005b5e:	f100 0823 	add.w	r8, r0, #35	; 0x23
 8005b62:	f803 9008 	strb.w	r9, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8005b66:	eb00 080c 	add.w	r8, r0, ip
 8005b6a:	f803 c008 	strb.w	ip, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_FORMAT_TYPE;                   /* bDescriptorSubtype */
 8005b6e:	f100 0c25 	add.w	ip, r0, #37	; 0x25
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)&0xFF;  /* wMaxPacketSize */ 
 8005b72:	f100 0832 	add.w	r8, r0, #50	; 0x32
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_FORMAT_TYPE;                   /* bDescriptorSubtype */
 8005b76:	f803 600c 	strb.w	r6, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_FORMAT_TYPE_I;                           /* bFormatType */
 8005b7a:	f100 0c26 	add.w	ip, r0, #38	; 0x26
 8005b7e:	f803 500c 	strb.w	r5, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = Channels;                                      /* bNrChannels */
 8005b82:	f100 0c27 	add.w	ip, r0, #39	; 0x27
 8005b86:	f803 200c 	strb.w	r2, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 0x02;                                          /* bSubFrameSize */
 8005b8a:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8005b8e:	f803 600c 	strb.w	r6, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 16;                                            /* bBitResolution */
 8005b92:	f100 0629 	add.w	r6, r0, #41	; 0x29
 8005b96:	f04f 0c10 	mov.w	ip, #16
 8005b9a:	f803 c006 	strb.w	ip, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                           /* bSamFreqType */
 8005b9e:	f100 062a 	add.w	r6, r0, #42	; 0x2a
  USBD_AUDIO_CfgDesc[index++] = (samplingFrequency>>8)&0xff;
 8005ba2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                           /* bSamFreqType */
 8005ba6:	559d      	strb	r5, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency&0xff;                        /* tSamFreq 8000 = 0x1F40 */
 8005ba8:	f100 062b 	add.w	r6, r0, #43	; 0x2b
 8005bac:	5599      	strb	r1, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = (samplingFrequency>>8)&0xff;
 8005bae:	f100 062c 	add.w	r6, r0, #44	; 0x2c
 8005bb2:	f803 c006 	strb.w	ip, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency>>16;   
 8005bb6:	f100 062d 	add.w	r6, r0, #45	; 0x2d
 8005bba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005bbe:	f803 c006 	strb.w	ip, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] =  AUDIO_STANDARD_ENDPOINT_DESC_SIZE;            /* bLength */
 8005bc2:	f100 062e 	add.w	r6, r0, #46	; 0x2e
  USBD_AUDIO_CfgDesc[index++] = AUDIO_IN_EP;                                   /* bEndpointAddress 1 in endpoint*/
 8005bc6:	f04f 0c81 	mov.w	ip, #129	; 0x81
  USBD_AUDIO_CfgDesc[index++] =  AUDIO_STANDARD_ENDPOINT_DESC_SIZE;            /* bLength */
 8005bca:	559f      	strb	r7, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bDescriptorType */
 8005bcc:	f100 072f 	add.w	r7, r0, #47	; 0x2f
 8005bd0:	2605      	movs	r6, #5
 8005bd2:	55de      	strb	r6, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_IN_EP;                                   /* bEndpointAddress 1 in endpoint*/
 8005bd4:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8005bd8:	f803 c007 	strb.w	ip, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bmAttributes */
 8005bdc:	f100 0731 	add.w	r7, r0, #49	; 0x31
 8005be0:	55de      	strb	r6, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)&0xFF;  /* wMaxPacketSize */ 
 8005be2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005be6:	fbb1 f6f6 	udiv	r6, r1, r6
 8005bea:	1cb7      	adds	r7, r6, #2
 8005bec:	fb17 fc02 	smulbb	ip, r7, r2
 8005bf0:	fa0c fc05 	lsl.w	ip, ip, r5
 8005bf4:	f803 c008 	strb.w	ip, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)>>8; 
 8005bf8:	4357      	muls	r7, r2
 8005bfa:	f100 0c33 	add.w	ip, r0, #51	; 0x33
 8005bfe:	f3c7 17d7 	ubfx	r7, r7, #7, #24
 8005c02:	f803 700c 	strb.w	r7, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterval */
 8005c06:	f100 0734 	add.w	r7, r0, #52	; 0x34
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_DESCRIPTOR_TYPE;                /* bDescriptorType */
 8005c0a:	f04f 0c25 	mov.w	ip, #37	; 0x25
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterval */
 8005c0e:	55dd      	strb	r5, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bRefresh */
 8005c10:	f100 0735 	add.w	r7, r0, #53	; 0x35
 8005c14:	55dc      	strb	r4, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bSynchAddress */   
 8005c16:	f100 0736 	add.w	r7, r0, #54	; 0x36
 8005c1a:	55dc      	strb	r4, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_ENDPOINT_DESC_SIZE;            /* bLength */
 8005c1c:	f100 0737 	add.w	r7, r0, #55	; 0x37
 8005c20:	f803 e007 	strb.w	lr, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_DESCRIPTOR_TYPE;                /* bDescriptorType */
 8005c24:	f100 0738 	add.w	r7, r0, #56	; 0x38
 8005c28:	f803 c007 	strb.w	ip, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_GENERAL;                        /* bDescriptor */
 8005c2c:	f100 0739 	add.w	r7, r0, #57	; 0x39
 8005c30:	55dd      	strb	r5, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bmAttributes */
 8005c32:	f100 053a 	add.w	r5, r0, #58	; 0x3a
 8005c36:	555c      	strb	r4, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bLockDelayUnits */
 8005c38:	f100 053b 	add.w	r5, r0, #59	; 0x3b
 8005c3c:	555c      	strb	r4, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
 8005c3e:	f100 053c 	add.w	r5, r0, #60	; 0x3c
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
 8005c42:	303d      	adds	r0, #61	; 0x3d
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
 8005c44:	555c      	strb	r4, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
 8005c46:	541c      	strb	r4, [r3, r0]
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*2);
 8005c48:	fb16 f002 	smulbb	r0, r6, r2
 8005c4c:	b280      	uxth	r0, r0
 8005c4e:	0045      	lsls	r5, r0, #1
  haudioInstance.buffer_length = haudioInstance.paketDimension * AUDIO_IN_PACKET_NUM;
 8005c50:	1941      	adds	r1, r0, r5
 8005c52:	0088      	lsls	r0, r1, #2
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*2);
 8005c54:	f8a3 520a 	strh.w	r5, [r3, #522]	; 0x20a
  haudioInstance.buffer_length = haudioInstance.paketDimension * AUDIO_IN_PACKET_NUM;
 8005c58:	f8a3 0206 	strh.w	r0, [r3, #518]	; 0x206
  haudioInstance.channels=Channels;  
 8005c5c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  haudioInstance.upper_treshold = 5;
 8005c60:	f240 2205 	movw	r2, #517	; 0x205
  haudioInstance.lower_treshold = 2;
  haudioInstance.state = STATE_USB_WAITING_FOR_INIT;
  haudioInstance.wr_ptr = 3 * haudioInstance.paketDimension;
 8005c64:	0049      	lsls	r1, r1, #1
  haudioInstance.upper_treshold = 5;
 8005c66:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
  haudioInstance.state = STATE_USB_WAITING_FOR_INIT;
 8005c6a:	f883 420c 	strb.w	r4, [r3, #524]	; 0x20c
  haudioInstance.wr_ptr = 3 * haudioInstance.paketDimension;
 8005c6e:	f8a3 1210 	strh.w	r1, [r3, #528]	; 0x210
  haudioInstance.rd_ptr = 0;  
 8005c72:	f8a3 420e 	strh.w	r4, [r3, #526]	; 0x20e
  haudioInstance.dataAmount=0;
 8005c76:	f8a3 4208 	strh.w	r4, [r3, #520]	; 0x208
  haudioInstance.buffer = 0;
 8005c7a:	f8c3 4258 	str.w	r4, [r3, #600]	; 0x258
}
 8005c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    USBD_AUDIO_CfgDesc[45] = 0x00;
 8005c82:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
  if(Channels > 2)
 8005c86:	2a02      	cmp	r2, #2
    USBD_AUDIO_CfgDesc[46] = AUDIO_CONTROLS;
 8005c88:	f240 2002 	movw	r0, #514	; 0x202
 8005c8c:	85d8      	strh	r0, [r3, #46]	; 0x2e
  if(Channels > 2)
 8005c8e:	d918      	bls.n	8005cc2 <USBD_AUDIO_Init_Microphone_Descriptor+0x312>
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8005c90:	2002      	movs	r0, #2
  if(Channels > 3)
 8005c92:	2a03      	cmp	r2, #3
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8005c94:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
  if(Channels > 3)
 8005c98:	d015      	beq.n	8005cc6 <USBD_AUDIO_Init_Microphone_Descriptor+0x316>
  if(Channels > 4)
 8005c9a:	2a04      	cmp	r2, #4
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8005c9c:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
  if(Channels > 4)
 8005ca0:	d013      	beq.n	8005cca <USBD_AUDIO_Init_Microphone_Descriptor+0x31a>
  if(Channels > 5)
 8005ca2:	2a05      	cmp	r2, #5
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8005ca4:	f883 0032 	strb.w	r0, [r3, #50]	; 0x32
  if(Channels > 5)
 8005ca8:	d011      	beq.n	8005cce <USBD_AUDIO_Init_Microphone_Descriptor+0x31e>
  if(Channels > 6)
 8005caa:	2a06      	cmp	r2, #6
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8005cac:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33
  if(Channels > 6)
 8005cb0:	d00f      	beq.n	8005cd2 <USBD_AUDIO_Init_Microphone_Descriptor+0x322>
  if(Channels > 7)
 8005cb2:	2a07      	cmp	r2, #7
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8005cb4:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
  if(Channels > 7)
 8005cb8:	d00d      	beq.n	8005cd6 <USBD_AUDIO_Init_Microphone_Descriptor+0x326>
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8005cba:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
    index++;
 8005cbe:	2036      	movs	r0, #54	; 0x36
 8005cc0:	e6bf      	b.n	8005a42 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8005cc2:	2030      	movs	r0, #48	; 0x30
 8005cc4:	e6bd      	b.n	8005a42 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8005cc6:	2031      	movs	r0, #49	; 0x31
 8005cc8:	e6bb      	b.n	8005a42 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8005cca:	2032      	movs	r0, #50	; 0x32
 8005ccc:	e6b9      	b.n	8005a42 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8005cce:	2033      	movs	r0, #51	; 0x33
 8005cd0:	e6b7      	b.n	8005a42 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8005cd2:	2034      	movs	r0, #52	; 0x34
 8005cd4:	e6b5      	b.n	8005a42 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8005cd6:	2035      	movs	r0, #53	; 0x35
 8005cd8:	e6b3      	b.n	8005a42 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
 8005cda:	bf00      	nop
 8005cdc:	20001cec 	.word	0x20001cec
 8005ce0:	80000102 	.word	0x80000102
 8005ce4:	00040932 	.word	0x00040932
 8005ce8:	01010000 	.word	0x01010000
 8005cec:	24090000 	.word	0x24090000
 8005cf0:	0c010100 	.word	0x0c010100
 8005cf4:	01020624 	.word	0x01020624

08005cf8 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005cf8:	b178      	cbz	r0, 8005d1a <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005d00:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d04:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d08:	b109      	cbz	r1, 8005d0e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005d0a:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8005d14:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d16:	f7fa bd0f 	b.w	8000738 <USBD_LL_Init>

  return ret;
}
 8005d1a:	2003      	movs	r0, #3
 8005d1c:	4770      	bx	lr

08005d1e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d1e:	b513      	push	{r0, r1, r4, lr}
  uint16_t len = 0U;
 8005d20:	2300      	movs	r3, #0
{
 8005d22:	4604      	mov	r4, r0
  uint16_t len = 0U;
 8005d24:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8005d28:	b181      	cbz	r1, 8005d4c <USBD_RegisterClass+0x2e>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005d2a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass[0] = pclass;
 8005d2c:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005d30:	b123      	cbz	r3, 8005d3c <USBD_RegisterClass+0x1e>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005d32:	f10d 0006 	add.w	r0, sp, #6
 8005d36:	4798      	blx	r3
 8005d38:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005d3c:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
 8005d40:	3301      	adds	r3, #1
 8005d42:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 8005d46:	2000      	movs	r0, #0
}
 8005d48:	b002      	add	sp, #8
 8005d4a:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005d4c:	2003      	movs	r0, #3
 8005d4e:	e7fb      	b.n	8005d48 <USBD_RegisterClass+0x2a>

08005d50 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d50:	f7fa bd24 	b.w	800079c <USBD_LL_Start>

08005d54 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d54:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005d58:	b10b      	cbz	r3, 8005d5e <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	4770      	bx	lr

08005d62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d62:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005d64:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8005d6c:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005d6e:	bf18      	it	ne
 8005d70:	2003      	movne	r0, #3
 8005d72:	bd08      	pop	{r3, pc}

08005d74 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d78:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f000 fb3c 	bl	80063fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d82:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005d84:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8005d88:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8005d8c:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8005d90:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8005d94:	f001 031f 	and.w	r3, r1, #31
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d008      	beq.n	8005dae <USBD_LL_SetupStage+0x3a>
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d00c      	beq.n	8005dba <USBD_LL_SetupStage+0x46>
 8005da0:	b98b      	cbnz	r3, 8005dc6 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005da2:	4629      	mov	r1, r5
 8005da4:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8005da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005daa:	f000 b903 	b.w	8005fb4 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005dae:	4629      	mov	r1, r5
 8005db0:	4620      	mov	r0, r4
}
 8005db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005db6:	f000 ba53 	b.w	8006260 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dba:	4629      	mov	r1, r5
 8005dbc:	4620      	mov	r0, r4
}
 8005dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dc2:	f000 ba7c 	b.w	80062be <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 8005dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dd0:	f7fa bd03 	b.w	80007da <USBD_LL_StallEP>

08005dd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8005dda:	bb09      	cbnz	r1, 8005e20 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ddc:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d10c      	bne.n	8005dfe <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8005de4:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d90a      	bls.n	8005e02 <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 8005dec:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005dee:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8005df0:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005df4:	bf28      	it	cs
 8005df6:	461a      	movcs	r2, r3
 8005df8:	4631      	mov	r1, r6
 8005dfa:	f000 fb52 	bl	80064a2 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 8005dfe:	2000      	movs	r0, #0
 8005e00:	bd70      	pop	{r4, r5, r6, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e02:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d106      	bne.n	8005e18 <USBD_LL_DataOutStage+0x44>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e0a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	b113      	cbz	r3, 8005e18 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 8005e12:	f8c0 12d4 	str.w	r1, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e16:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 fb4a 	bl	80064b2 <USBD_CtlSendStatus>
 8005e1e:	e7ee      	b.n	8005dfe <USBD_LL_DataOutStage+0x2a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e20:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d1ea      	bne.n	8005dfe <USBD_LL_DataOutStage+0x2a>
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e28:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0e5      	beq.n	8005dfe <USBD_LL_DataOutStage+0x2a>
          pdev->classId = idx;
 8005e32:	2200      	movs	r2, #0
}
 8005e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8005e38:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e3c:	4718      	bx	r3

08005e3e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e40:	4604      	mov	r4, r0
 8005e42:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005e44:	2900      	cmp	r1, #0
 8005e46:	d141      	bne.n	8005ecc <USBD_LL_DataInStage+0x8e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e48:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005e4c:	2a02      	cmp	r2, #2
 8005e4e:	d10f      	bne.n	8005e70 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e50:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 8005e54:	4295      	cmp	r5, r2
 8005e56:	d914      	bls.n	8005e82 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8005e58:	1aaa      	subs	r2, r5, r2
 8005e5a:	9101      	str	r1, [sp, #4]
 8005e5c:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e5e:	4631      	mov	r1, r6
 8005e60:	f000 fb0a 	bl	8006478 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e64:	9b01      	ldr	r3, [sp, #4]
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e66:	461a      	mov	r2, r3
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f7fa fce4 	bl	8000838 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005e70:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005e74:	b113      	cbz	r3, 8005e7c <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	b002      	add	sp, #8
 8005e80:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8005e82:	d10e      	bne.n	8005ea2 <USBD_LL_DataInStage+0x64>
            (pep->total_length >= pep->maxpacket) &&
 8005e84:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e86:	4295      	cmp	r5, r2
 8005e88:	d80b      	bhi.n	8005ea2 <USBD_LL_DataInStage+0x64>
            (pep->total_length >= pep->maxpacket) &&
 8005e8a:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8005e8e:	42aa      	cmp	r2, r5
 8005e90:	d207      	bcs.n	8005ea2 <USBD_LL_DataInStage+0x64>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e92:	460a      	mov	r2, r1
 8005e94:	9101      	str	r1, [sp, #4]
 8005e96:	f000 faef 	bl	8006478 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e9a:	9b01      	ldr	r3, [sp, #4]
 8005e9c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8005ea0:	e7e1      	b.n	8005e66 <USBD_LL_DataInStage+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea2:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d108      	bne.n	8005ebc <USBD_LL_DataInStage+0x7e>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005eaa:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	b123      	cbz	r3, 8005ebc <USBD_LL_DataInStage+0x7e>
              pdev->classId = 0U;
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005eb8:	4620      	mov	r0, r4
 8005eba:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ebc:	2180      	movs	r1, #128	; 0x80
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f7fa fc8b 	bl	80007da <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f000 faff 	bl	80064c8 <USBD_CtlReceiveStatus>
 8005eca:	e7d1      	b.n	8005e70 <USBD_LL_DataInStage+0x32>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ecc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d1d3      	bne.n	8005e7c <USBD_LL_DataInStage+0x3e>
        if (pdev->pClass[idx]->DataIn != NULL)
 8005ed4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0ce      	beq.n	8005e7c <USBD_LL_DataInStage+0x3e>
          pdev->classId = idx;
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
}
 8005ee4:	b002      	add	sp, #8
 8005ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005eea:	4718      	bx	r3

08005eec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005ef4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ef8:	2100      	movs	r1, #0
{
 8005efa:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 8005efc:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f00:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f02:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005f06:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 8005f0a:	b9b3      	cbnz	r3, 8005f3a <USBD_LL_Reset+0x4e>
  USBD_StatusTypeDef ret = USBD_OK;
 8005f0c:	2600      	movs	r6, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f0e:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f10:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f12:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f14:	2701      	movs	r7, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f16:	2340      	movs	r3, #64	; 0x40
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f7fa fc46 	bl	80007aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f1e:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f22:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f26:	462b      	mov	r3, r5
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2180      	movs	r1, #128	; 0x80
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f7fa fc3c 	bl	80007aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f32:	84a7      	strh	r7, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f34:	6225      	str	r5, [r4, #32]

  return ret;
}
 8005f36:	4630      	mov	r0, r6
 8005f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pdev->pClass[0]->DeInit != NULL)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0e5      	beq.n	8005f0c <USBD_LL_Reset+0x20>
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005f40:	4798      	blx	r3
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d0e2      	beq.n	8005f0c <USBD_LL_Reset+0x20>
        ret = USBD_FAIL;
 8005f46:	2603      	movs	r6, #3
 8005f48:	e7e1      	b.n	8005f0e <USBD_LL_Reset+0x22>

08005f4a <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005f4a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	4770      	bx	lr

08005f50 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8005f50:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f5a:	2304      	movs	r3, #4
 8005f5c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8005f60:	2000      	movs	r0, #0
 8005f62:	4770      	bx	lr

08005f64 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f64:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f68:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f6a:	bf02      	ittt	eq
 8005f6c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8005f70:	b2db      	uxtbeq	r3, r3
 8005f72:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8005f76:	2000      	movs	r0, #0
 8005f78:	4770      	bx	lr

08005f7a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f7a:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005f80:	2a03      	cmp	r2, #3
 8005f82:	d105      	bne.n	8005f90 <USBD_LL_SOF+0x16>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005f84:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005f88:	b113      	cbz	r3, 8005f90 <USBD_LL_SOF+0x16>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	b103      	cbz	r3, 8005f90 <USBD_LL_SOF+0x16>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005f8e:	4798      	blx	r3
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8005f90:	2000      	movs	r0, #0
 8005f92:	bd08      	pop	{r3, pc}

08005f94 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8005f94:	2000      	movs	r0, #0
 8005f96:	4770      	bx	lr

08005f98 <USBD_CoreFindEP>:
 8005f98:	2000      	movs	r0, #0
 8005f9a:	4770      	bx	lr

08005f9c <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8005f9c:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f9e:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8005fa0:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fa2:	f7fa fc1a 	bl	80007da <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	2100      	movs	r1, #0
}
 8005faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8005fae:	f7fa bc14 	b.w	80007da <USBD_LL_StallEP>
	...

08005fb4 <USBD_StdDevReq>:
{
 8005fb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005fb8:	780d      	ldrb	r5, [r1, #0]
 8005fba:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fbe:	2d20      	cmp	r5, #32
{
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fc4:	d014      	beq.n	8005ff0 <USBD_StdDevReq+0x3c>
 8005fc6:	2d40      	cmp	r5, #64	; 0x40
 8005fc8:	d012      	beq.n	8005ff0 <USBD_StdDevReq+0x3c>
 8005fca:	2d00      	cmp	r5, #0
 8005fcc:	f040 810a 	bne.w	80061e4 <USBD_StdDevReq+0x230>
      switch (req->bRequest)
 8005fd0:	784f      	ldrb	r7, [r1, #1]
 8005fd2:	2f09      	cmp	r7, #9
 8005fd4:	f200 8106 	bhi.w	80061e4 <USBD_StdDevReq+0x230>
 8005fd8:	e8df f017 	tbh	[pc, r7, lsl #1]
 8005fdc:	0134010b 	.word	0x0134010b
 8005fe0:	01230104 	.word	0x01230104
 8005fe4:	00860104 	.word	0x00860104
 8005fe8:	01040016 	.word	0x01040016
 8005fec:	00a200f3 	.word	0x00a200f3
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005ff0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8005ff4:	33ae      	adds	r3, #174	; 0xae
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	4620      	mov	r0, r4
}
 8006000:	b002      	add	sp, #8
 8006002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006006:	4718      	bx	r3
  uint16_t len = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800600e:	884b      	ldrh	r3, [r1, #2]
 8006010:	0a1a      	lsrs	r2, r3, #8
 8006012:	3a01      	subs	r2, #1
 8006014:	2a06      	cmp	r2, #6
 8006016:	d837      	bhi.n	8006088 <USBD_StdDevReq+0xd4>
 8006018:	e8df f002 	tbb	[pc, r2]
 800601c:	36291c04 	.word	0x36291c04
 8006020:	5136      	.short	0x5136
 8006022:	5b          	.byte	0x5b
 8006023:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006024:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006028:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800602a:	7c20      	ldrb	r0, [r4, #16]
 800602c:	f10d 0106 	add.w	r1, sp, #6
 8006030:	4798      	blx	r3
  if (req->wLength != 0U)
 8006032:	88f2      	ldrh	r2, [r6, #6]
 8006034:	2a00      	cmp	r2, #0
 8006036:	f000 8101 	beq.w	800623c <USBD_StdDevReq+0x288>
    if (len != 0U)
 800603a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800603e:	b31b      	cbz	r3, 8006088 <USBD_StdDevReq+0xd4>
      len = MIN(len, req->wLength);
 8006040:	429a      	cmp	r2, r3
 8006042:	bf28      	it	cs
 8006044:	461a      	movcs	r2, r3
 8006046:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800604a:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800604c:	4620      	mov	r0, r4
 800604e:	f000 fa06 	bl	800645e <USBD_CtlSendData>
        break;
 8006052:	e01c      	b.n	800608e <USBD_StdDevReq+0xda>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006054:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006056:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800605a:	b932      	cbnz	r2, 800606a <USBD_StdDevReq+0xb6>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800605e:	f10d 0006 	add.w	r0, sp, #6
 8006062:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006064:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006066:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006068:	e7e3      	b.n	8006032 <USBD_StdDevReq+0x7e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	e7f7      	b.n	800605e <USBD_StdDevReq+0xaa>
      switch ((uint8_t)(req->wValue))
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b05      	cmp	r3, #5
 8006072:	d809      	bhi.n	8006088 <USBD_StdDevReq+0xd4>
 8006074:	e8df f003 	tbb	[pc, r3]
 8006078:	17130f03 	.word	0x17130f03
 800607c:	1f1b      	.short	0x1f1b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800607e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006082:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1d0      	bne.n	800602a <USBD_StdDevReq+0x76>
      USBD_CtlError(pdev, req);
 8006088:	4620      	mov	r0, r4
 800608a:	f7ff ff87 	bl	8005f9c <USBD_CtlError.constprop.0>
}
 800608e:	4628      	mov	r0, r5
 8006090:	b002      	add	sp, #8
 8006092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006096:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	e7f2      	b.n	8006084 <USBD_StdDevReq+0xd0>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800609e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	e7ee      	b.n	8006084 <USBD_StdDevReq+0xd0>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80060a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	e7ea      	b.n	8006084 <USBD_StdDevReq+0xd0>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80060ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	e7e6      	b.n	8006084 <USBD_StdDevReq+0xd0>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80060b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	e7e2      	b.n	8006084 <USBD_StdDevReq+0xd0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060be:	7c03      	ldrb	r3, [r0, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e1      	bne.n	8006088 <USBD_StdDevReq+0xd4>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80060c4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80060c8:	f10d 0006 	add.w	r0, sp, #6
 80060cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ce:	4798      	blx	r3
  if (err != 0U)
 80060d0:	e7af      	b.n	8006032 <USBD_StdDevReq+0x7e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060d2:	7c03      	ldrb	r3, [r0, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1d7      	bne.n	8006088 <USBD_StdDevReq+0xd4>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80060d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80060dc:	f10d 0006 	add.w	r0, sp, #6
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060e4:	2307      	movs	r3, #7
 80060e6:	e7be      	b.n	8006066 <USBD_StdDevReq+0xb2>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80060e8:	888b      	ldrh	r3, [r1, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1cc      	bne.n	8006088 <USBD_StdDevReq+0xd4>
 80060ee:	88cb      	ldrh	r3, [r1, #6]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1c9      	bne.n	8006088 <USBD_StdDevReq+0xd4>
 80060f4:	884e      	ldrh	r6, [r1, #2]
 80060f6:	2e7f      	cmp	r6, #127	; 0x7f
 80060f8:	d8c6      	bhi.n	8006088 <USBD_StdDevReq+0xd4>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d0c2      	beq.n	8006088 <USBD_StdDevReq+0xd4>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006102:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8006104:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006108:	f7fa fb88 	bl	800081c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800610c:	4620      	mov	r0, r4
 800610e:	f000 f9d0 	bl	80064b2 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006112:	b11e      	cbz	r6, 800611c <USBD_StdDevReq+0x168>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006114:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006116:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800611a:	e7b8      	b.n	800608e <USBD_StdDevReq+0xda>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800611c:	2301      	movs	r3, #1
 800611e:	e7fa      	b.n	8006116 <USBD_StdDevReq+0x162>
  cfgidx = (uint8_t)(req->wValue);
 8006120:	788e      	ldrb	r6, [r1, #2]
 8006122:	4f4e      	ldr	r7, [pc, #312]	; (800625c <USBD_StdDevReq+0x2a8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006124:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8006126:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006128:	d903      	bls.n	8006132 <USBD_StdDevReq+0x17e>
    USBD_CtlError(pdev, req);
 800612a:	f7ff ff37 	bl	8005f9c <USBD_CtlError.constprop.0>
      ret = USBD_FAIL;
 800612e:	2503      	movs	r5, #3
      break;
 8006130:	e7ad      	b.n	800608e <USBD_StdDevReq+0xda>
  switch (pdev->dev_state)
 8006132:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006136:	2b02      	cmp	r3, #2
 8006138:	fa5f f883 	uxtb.w	r8, r3
 800613c:	d009      	beq.n	8006152 <USBD_StdDevReq+0x19e>
 800613e:	f1b8 0f03 	cmp.w	r8, #3
 8006142:	d018      	beq.n	8006176 <USBD_StdDevReq+0x1c2>
      USBD_CtlError(pdev, req);
 8006144:	f7ff ff2a 	bl	8005f9c <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006148:	7839      	ldrb	r1, [r7, #0]
 800614a:	4620      	mov	r0, r4
 800614c:	f7ff fe09 	bl	8005d62 <USBD_ClrClassConfig>
 8006150:	e7ed      	b.n	800612e <USBD_StdDevReq+0x17a>
      if (cfgidx != 0U)
 8006152:	2e00      	cmp	r6, #0
 8006154:	d072      	beq.n	800623c <USBD_StdDevReq+0x288>
        pdev->dev_config = cfgidx;
 8006156:	2101      	movs	r1, #1
 8006158:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800615a:	f7ff fdfb 	bl	8005d54 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800615e:	4605      	mov	r5, r0
 8006160:	4620      	mov	r0, r4
 8006162:	b125      	cbz	r5, 800616e <USBD_StdDevReq+0x1ba>
          USBD_CtlError(pdev, req);
 8006164:	f7ff ff1a 	bl	8005f9c <USBD_CtlError.constprop.0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006168:	f884 829c 	strb.w	r8, [r4, #668]	; 0x29c
 800616c:	e78f      	b.n	800608e <USBD_StdDevReq+0xda>
          (void)USBD_CtlSendStatus(pdev);
 800616e:	f000 f9a0 	bl	80064b2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006172:	2303      	movs	r3, #3
 8006174:	e7cf      	b.n	8006116 <USBD_StdDevReq+0x162>
      if (cfgidx == 0U)
 8006176:	b95e      	cbnz	r6, 8006190 <USBD_StdDevReq+0x1dc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006178:	2302      	movs	r3, #2
 800617a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800617e:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006180:	4631      	mov	r1, r6
 8006182:	f7ff fdee 	bl	8005d62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006186:	4620      	mov	r0, r4
 8006188:	f000 f993 	bl	80064b2 <USBD_CtlSendStatus>
 800618c:	4635      	mov	r5, r6
 800618e:	e77e      	b.n	800608e <USBD_StdDevReq+0xda>
      else if (cfgidx != pdev->dev_config)
 8006190:	6841      	ldr	r1, [r0, #4]
 8006192:	2901      	cmp	r1, #1
 8006194:	d052      	beq.n	800623c <USBD_StdDevReq+0x288>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006196:	b2c9      	uxtb	r1, r1
 8006198:	f7ff fde3 	bl	8005d62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800619c:	7839      	ldrb	r1, [r7, #0]
 800619e:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80061a0:	4620      	mov	r0, r4
 80061a2:	f7ff fdd7 	bl	8005d54 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80061a6:	4606      	mov	r6, r0
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d047      	beq.n	800623c <USBD_StdDevReq+0x288>
          USBD_CtlError(pdev, req);
 80061ac:	4620      	mov	r0, r4
 80061ae:	f7ff fef5 	bl	8005f9c <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061b2:	7921      	ldrb	r1, [r4, #4]
 80061b4:	4620      	mov	r0, r4
 80061b6:	f7ff fdd4 	bl	8005d62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80061ba:	2302      	movs	r3, #2
 80061bc:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80061c0:	e7e4      	b.n	800618c <USBD_StdDevReq+0x1d8>
  if (req->wLength != 1U)
 80061c2:	88ca      	ldrh	r2, [r1, #6]
 80061c4:	2a01      	cmp	r2, #1
 80061c6:	f47f af5f 	bne.w	8006088 <USBD_StdDevReq+0xd4>
    switch (pdev->dev_state)
 80061ca:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 80061ce:	2902      	cmp	r1, #2
 80061d0:	b2cb      	uxtb	r3, r1
 80061d2:	d805      	bhi.n	80061e0 <USBD_StdDevReq+0x22c>
 80061d4:	b133      	cbz	r3, 80061e4 <USBD_StdDevReq+0x230>
        pdev->dev_default_config = 0U;
 80061d6:	4601      	mov	r1, r0
 80061d8:	2300      	movs	r3, #0
 80061da:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80061de:	e735      	b.n	800604c <USBD_StdDevReq+0x98>
    switch (pdev->dev_state)
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d004      	beq.n	80061ee <USBD_StdDevReq+0x23a>
        USBD_CtlError(pdev, req);
 80061e4:	4620      	mov	r0, r4
 80061e6:	f7ff fed9 	bl	8005f9c <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 80061ea:	2500      	movs	r5, #0
        break;
 80061ec:	e74f      	b.n	800608e <USBD_StdDevReq+0xda>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80061ee:	1d01      	adds	r1, r0, #4
 80061f0:	e72c      	b.n	800604c <USBD_StdDevReq+0x98>
  switch (pdev->dev_state)
 80061f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80061f6:	3b01      	subs	r3, #1
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d8f3      	bhi.n	80061e4 <USBD_StdDevReq+0x230>
      if (req->wLength != 0x2U)
 80061fc:	88cb      	ldrh	r3, [r1, #6]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	f47f af42 	bne.w	8006088 <USBD_StdDevReq+0xd4>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006204:	2301      	movs	r3, #1
 8006206:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8006208:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800620c:	b10b      	cbz	r3, 8006212 <USBD_StdDevReq+0x25e>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800620e:	2303      	movs	r3, #3
 8006210:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006212:	2202      	movs	r2, #2
 8006214:	f104 010c 	add.w	r1, r4, #12
 8006218:	4620      	mov	r0, r4
 800621a:	f000 f920 	bl	800645e <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800621e:	463d      	mov	r5, r7
      break;
 8006220:	e735      	b.n	800608e <USBD_StdDevReq+0xda>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006222:	884b      	ldrh	r3, [r1, #2]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d102      	bne.n	800622e <USBD_StdDevReq+0x27a>
        pdev->dev_remote_wakeup = 0U;
 8006228:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800622c:	e006      	b.n	800623c <USBD_StdDevReq+0x288>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800622e:	2b02      	cmp	r3, #2
 8006230:	f47f af2a 	bne.w	8006088 <USBD_StdDevReq+0xd4>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006234:	888b      	ldrh	r3, [r1, #4]
 8006236:	0a1b      	lsrs	r3, r3, #8
 8006238:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
        (void)USBD_CtlSendStatus(pdev);
 800623c:	4620      	mov	r0, r4
 800623e:	f000 f938 	bl	80064b2 <USBD_CtlSendStatus>
 8006242:	e724      	b.n	800608e <USBD_StdDevReq+0xda>
  switch (pdev->dev_state)
 8006244:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006248:	3b01      	subs	r3, #1
 800624a:	2b02      	cmp	r3, #2
 800624c:	d8ca      	bhi.n	80061e4 <USBD_StdDevReq+0x230>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800624e:	884b      	ldrh	r3, [r1, #2]
 8006250:	2b01      	cmp	r3, #1
 8006252:	f47f af1c 	bne.w	800608e <USBD_StdDevReq+0xda>
        pdev->dev_remote_wakeup = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	e7e6      	b.n	8006228 <USBD_StdDevReq+0x274>
 800625a:	bf00      	nop
 800625c:	20001f48 	.word	0x20001f48

08006260 <USBD_StdItfReq>:
{
 8006260:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006262:	780b      	ldrb	r3, [r1, #0]
 8006264:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006268:	2a40      	cmp	r2, #64	; 0x40
{
 800626a:	4604      	mov	r4, r0
 800626c:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800626e:	d001      	beq.n	8006274 <USBD_StdItfReq+0x14>
 8006270:	065b      	lsls	r3, r3, #25
 8006272:	d41f      	bmi.n	80062b4 <USBD_StdItfReq+0x54>
      switch (pdev->dev_state)
 8006274:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006278:	3b01      	subs	r3, #1
 800627a:	2b02      	cmp	r3, #2
 800627c:	d81a      	bhi.n	80062b4 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800627e:	7931      	ldrb	r1, [r6, #4]
 8006280:	2902      	cmp	r1, #2
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006282:	4620      	mov	r0, r4
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006284:	d817      	bhi.n	80062b6 <USBD_StdItfReq+0x56>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006286:	f7ff fe85 	bl	8005f94 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800628a:	b988      	cbnz	r0, 80062b0 <USBD_StdItfReq+0x50>
              if (pdev->pClass[idx]->Setup != NULL)
 800628c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	b16b      	cbz	r3, 80062b0 <USBD_StdItfReq+0x50>
                pdev->classId = idx;
 8006294:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006298:	4631      	mov	r1, r6
 800629a:	4620      	mov	r0, r4
 800629c:	4798      	blx	r3
 800629e:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062a0:	88f3      	ldrh	r3, [r6, #6]
 80062a2:	b91b      	cbnz	r3, 80062ac <USBD_StdItfReq+0x4c>
 80062a4:	b915      	cbnz	r5, 80062ac <USBD_StdItfReq+0x4c>
              (void)USBD_CtlSendStatus(pdev);
 80062a6:	4620      	mov	r0, r4
 80062a8:	f000 f903 	bl	80064b2 <USBD_CtlSendStatus>
}
 80062ac:	4628      	mov	r0, r5
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
              ret = USBD_FAIL;
 80062b0:	2503      	movs	r5, #3
 80062b2:	e7f5      	b.n	80062a0 <USBD_StdItfReq+0x40>
          USBD_CtlError(pdev, req);
 80062b4:	4620      	mov	r0, r4
 80062b6:	f7ff fe71 	bl	8005f9c <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 80062ba:	2500      	movs	r5, #0
          break;
 80062bc:	e7f6      	b.n	80062ac <USBD_StdItfReq+0x4c>

080062be <USBD_StdEPReq>:
{
 80062be:	b570      	push	{r4, r5, r6, lr}
 80062c0:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 80062c2:	888a      	ldrh	r2, [r1, #4]
 80062c4:	790e      	ldrb	r6, [r1, #4]
 80062c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ca:	2b20      	cmp	r3, #32
{
 80062cc:	4604      	mov	r4, r0
 80062ce:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062d0:	d053      	beq.n	800637a <USBD_StdEPReq+0xbc>
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d051      	beq.n	800637a <USBD_StdEPReq+0xbc>
 80062d6:	bb63      	cbnz	r3, 8006332 <USBD_StdEPReq+0x74>
      switch (req->bRequest)
 80062d8:	784b      	ldrb	r3, [r1, #1]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d03b      	beq.n	8006356 <USBD_StdEPReq+0x98>
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d020      	beq.n	8006324 <USBD_StdEPReq+0x66>
 80062e2:	bb33      	cbnz	r3, 8006332 <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 80062e4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	b2d9      	uxtb	r1, r3
 80062ec:	d061      	beq.n	80063b2 <USBD_StdEPReq+0xf4>
 80062ee:	2903      	cmp	r1, #3
 80062f0:	d11f      	bne.n	8006332 <USBD_StdEPReq+0x74>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80062f2:	f006 030f 	and.w	r3, r6, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80062f6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80062fa:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80062fe:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8006302:	d065      	beq.n	80063d0 <USBD_StdEPReq+0x112>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006304:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006306:	b1a3      	cbz	r3, 8006332 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006308:	f006 057f 	and.w	r5, r6, #127	; 0x7f
 800630c:	3501      	adds	r5, #1
 800630e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006312:	eb00 0585 	add.w	r5, r0, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006316:	f016 037f 	ands.w	r3, r6, #127	; 0x7f
 800631a:	d165      	bne.n	80063e8 <USBD_StdEPReq+0x12a>
                pep->status = 0x0001U;
 800631c:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800631e:	2202      	movs	r2, #2
 8006320:	4629      	mov	r1, r5
 8006322:	e051      	b.n	80063c8 <USBD_StdEPReq+0x10a>
          switch (pdev->dev_state)
 8006324:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006328:	2b02      	cmp	r3, #2
 800632a:	b2da      	uxtb	r2, r3
 800632c:	d037      	beq.n	800639e <USBD_StdEPReq+0xe0>
 800632e:	2a03      	cmp	r2, #3
 8006330:	d003      	beq.n	800633a <USBD_StdEPReq+0x7c>
              USBD_CtlError(pdev, req);
 8006332:	4620      	mov	r0, r4
 8006334:	f7ff fe32 	bl	8005f9c <USBD_CtlError.constprop.0>
              break;
 8006338:	e00b      	b.n	8006352 <USBD_StdEPReq+0x94>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800633a:	884b      	ldrh	r3, [r1, #2]
 800633c:	b933      	cbnz	r3, 800634c <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800633e:	0671      	lsls	r1, r6, #25
 8006340:	d004      	beq.n	800634c <USBD_StdEPReq+0x8e>
 8006342:	88eb      	ldrh	r3, [r5, #6]
 8006344:	b913      	cbnz	r3, 800634c <USBD_StdEPReq+0x8e>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006346:	4631      	mov	r1, r6
 8006348:	f7fa fa47 	bl	80007da <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 800634c:	4620      	mov	r0, r4
 800634e:	f000 f8b0 	bl	80064b2 <USBD_CtlSendStatus>
}
 8006352:	2000      	movs	r0, #0
 8006354:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8006356:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800635a:	2b02      	cmp	r3, #2
 800635c:	b2da      	uxtb	r2, r3
 800635e:	d01e      	beq.n	800639e <USBD_StdEPReq+0xe0>
 8006360:	2a03      	cmp	r2, #3
 8006362:	d1e6      	bne.n	8006332 <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006364:	884b      	ldrh	r3, [r1, #2]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1f3      	bne.n	8006352 <USBD_StdEPReq+0x94>
                if ((ep_addr & 0x7FU) != 0x00U)
 800636a:	0673      	lsls	r3, r6, #25
 800636c:	d002      	beq.n	8006374 <USBD_StdEPReq+0xb6>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800636e:	4631      	mov	r1, r6
 8006370:	f7fa fa3a 	bl	80007e8 <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 8006374:	4620      	mov	r0, r4
 8006376:	f000 f89c 	bl	80064b2 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800637a:	4631      	mov	r1, r6
 800637c:	4620      	mov	r0, r4
 800637e:	f7ff fe0b 	bl	8005f98 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006382:	2800      	cmp	r0, #0
 8006384:	d1e5      	bne.n	8006352 <USBD_StdEPReq+0x94>
                  if (pdev->pClass[idx]->Setup != NULL)
 8006386:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
                  pdev->classId = idx;
 800638a:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0de      	beq.n	8006352 <USBD_StdEPReq+0x94>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006394:	4629      	mov	r1, r5
 8006396:	4620      	mov	r0, r4
}
 8006398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800639c:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800639e:	0672      	lsls	r2, r6, #25
 80063a0:	d0c7      	beq.n	8006332 <USBD_StdEPReq+0x74>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063a2:	4631      	mov	r1, r6
 80063a4:	f7fa fa19 	bl	80007da <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063a8:	2180      	movs	r1, #128	; 0x80
 80063aa:	4620      	mov	r0, r4
 80063ac:	f7fa fa15 	bl	80007da <USBD_LL_StallEP>
 80063b0:	e7cf      	b.n	8006352 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063b2:	0671      	lsls	r1, r6, #25
 80063b4:	d1bd      	bne.n	8006332 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063b6:	0613      	lsls	r3, r2, #24
 80063b8:	bf4c      	ite	mi
 80063ba:	f100 0114 	addmi.w	r1, r0, #20
 80063be:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063c6:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 f848 	bl	800645e <USBD_CtlSendData>
              break;
 80063ce:	e7c0      	b.n	8006352 <USBD_StdEPReq+0x94>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063d0:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0ac      	beq.n	8006332 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063d8:	f006 057f 	and.w	r5, r6, #127	; 0x7f
 80063dc:	2314      	movs	r3, #20
 80063de:	fb03 0505 	mla	r5, r3, r5, r0
 80063e2:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80063e6:	e796      	b.n	8006316 <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80063e8:	4631      	mov	r1, r6
 80063ea:	4620      	mov	r0, r4
 80063ec:	f7fa fa03 	bl	80007f6 <USBD_LL_IsStallEP>
 80063f0:	b108      	cbz	r0, 80063f6 <USBD_StdEPReq+0x138>
                pep->status = 0x0001U;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e792      	b.n	800631c <USBD_StdEPReq+0x5e>
                pep->status = 0x0000U;
 80063f6:	6028      	str	r0, [r5, #0]
 80063f8:	e791      	b.n	800631e <USBD_StdEPReq+0x60>

080063fa <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80063fa:	780b      	ldrb	r3, [r1, #0]
 80063fc:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80063fe:	784b      	ldrb	r3, [r1, #1]
 8006400:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8006402:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8006404:	8043      	strh	r3, [r0, #2]
 8006406:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 8006408:	8083      	strh	r3, [r0, #4]
 800640a:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800640c:	80c3      	strh	r3, [r0, #6]
}
 800640e:	4770      	bx	lr

08006410 <USBD_CtlError>:
{
 8006410:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006412:	2180      	movs	r1, #128	; 0x80
{
 8006414:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006416:	f7fa f9e0 	bl	80007da <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800641a:	4620      	mov	r0, r4
 800641c:	2100      	movs	r1, #0
}
 800641e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8006422:	f7fa b9da 	b.w	80007da <USBD_LL_StallEP>

08006426 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006426:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8006428:	b188      	cbz	r0, 800644e <USBD_GetString+0x28>
 800642a:	2400      	movs	r4, #0
 800642c:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800642e:	4623      	mov	r3, r4
 8006430:	3401      	adds	r4, #1
 8006432:	5d05      	ldrb	r5, [r0, r4]
 8006434:	2d00      	cmp	r5, #0
 8006436:	d1fa      	bne.n	800642e <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006438:	b2db      	uxtb	r3, r3
 800643a:	3301      	adds	r3, #1
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8006440:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006442:	2303      	movs	r3, #3
 8006444:	704b      	strb	r3, [r1, #1]
  idx++;
 8006446:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8006448:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800644c:	b902      	cbnz	r2, 8006450 <USBD_GetString+0x2a>
}
 800644e:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 8006450:	54ca      	strb	r2, [r1, r3]
    idx++;
 8006452:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8006454:	b2d2      	uxtb	r2, r2
    idx++;
 8006456:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8006458:	548d      	strb	r5, [r1, r2]
    idx++;
 800645a:	b2db      	uxtb	r3, r3
 800645c:	e7f4      	b.n	8006448 <USBD_GetString+0x22>

0800645e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800645e:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006460:	2402      	movs	r4, #2
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006462:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length = len;
 8006464:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006468:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800646c:	460a      	mov	r2, r1
 800646e:	2100      	movs	r1, #0
 8006470:	f7fa f9db 	bl	800082a <USBD_LL_Transmit>

  return USBD_OK;
}
 8006474:	2000      	movs	r0, #0
 8006476:	bd10      	pop	{r4, pc}

08006478 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006478:	b508      	push	{r3, lr}
 800647a:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800647c:	460a      	mov	r2, r1
 800647e:	2100      	movs	r1, #0
 8006480:	f7fa f9d3 	bl	800082a <USBD_LL_Transmit>

  return USBD_OK;
}
 8006484:	2000      	movs	r0, #0
 8006486:	bd08      	pop	{r3, pc}

08006488 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006488:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800648a:	2403      	movs	r4, #3
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800648c:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length = len;
 800648e:	e9c0 2256 	strd	r2, r2, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006492:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006496:	460a      	mov	r2, r1
 8006498:	2100      	movs	r1, #0
 800649a:	f7fa f9cd 	bl	8000838 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800649e:	2000      	movs	r0, #0
 80064a0:	bd10      	pop	{r4, pc}

080064a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80064a2:	b508      	push	{r3, lr}
 80064a4:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80064a6:	460a      	mov	r2, r1
 80064a8:	2100      	movs	r1, #0
 80064aa:	f7fa f9c5 	bl	8000838 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80064ae:	2000      	movs	r0, #0
 80064b0:	bd08      	pop	{r3, pc}

080064b2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80064b2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80064b4:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064b6:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80064b8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064bc:	4619      	mov	r1, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	f7fa f9b3 	bl	800082a <USBD_LL_Transmit>

  return USBD_OK;
}
 80064c4:	2000      	movs	r0, #0
 80064c6:	bd08      	pop	{r3, pc}

080064c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064c8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064ca:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064cc:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064ce:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064d2:	4619      	mov	r1, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	f7fa f9af 	bl	8000838 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80064da:	2000      	movs	r0, #0
 80064dc:	bd08      	pop	{r3, pc}
	...

080064e0 <__errno>:
 80064e0:	4b01      	ldr	r3, [pc, #4]	; (80064e8 <__errno+0x8>)
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	200000f4 	.word	0x200000f4

080064ec <__libc_init_array>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	4d0d      	ldr	r5, [pc, #52]	; (8006524 <__libc_init_array+0x38>)
 80064f0:	4c0d      	ldr	r4, [pc, #52]	; (8006528 <__libc_init_array+0x3c>)
 80064f2:	1b64      	subs	r4, r4, r5
 80064f4:	10a4      	asrs	r4, r4, #2
 80064f6:	2600      	movs	r6, #0
 80064f8:	42a6      	cmp	r6, r4
 80064fa:	d109      	bne.n	8006510 <__libc_init_array+0x24>
 80064fc:	4d0b      	ldr	r5, [pc, #44]	; (800652c <__libc_init_array+0x40>)
 80064fe:	4c0c      	ldr	r4, [pc, #48]	; (8006530 <__libc_init_array+0x44>)
 8006500:	f000 f93c 	bl	800677c <_init>
 8006504:	1b64      	subs	r4, r4, r5
 8006506:	10a4      	asrs	r4, r4, #2
 8006508:	2600      	movs	r6, #0
 800650a:	42a6      	cmp	r6, r4
 800650c:	d105      	bne.n	800651a <__libc_init_array+0x2e>
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	f855 3b04 	ldr.w	r3, [r5], #4
 8006514:	4798      	blx	r3
 8006516:	3601      	adds	r6, #1
 8006518:	e7ee      	b.n	80064f8 <__libc_init_array+0xc>
 800651a:	f855 3b04 	ldr.w	r3, [r5], #4
 800651e:	4798      	blx	r3
 8006520:	3601      	adds	r6, #1
 8006522:	e7f2      	b.n	800650a <__libc_init_array+0x1e>
 8006524:	080069c4 	.word	0x080069c4
 8006528:	080069c4 	.word	0x080069c4
 800652c:	080069c4 	.word	0x080069c4
 8006530:	080069c8 	.word	0x080069c8

08006534 <malloc>:
 8006534:	4b02      	ldr	r3, [pc, #8]	; (8006540 <malloc+0xc>)
 8006536:	4601      	mov	r1, r0
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	f000 b88d 	b.w	8006658 <_malloc_r>
 800653e:	bf00      	nop
 8006540:	200000f4 	.word	0x200000f4

08006544 <free>:
 8006544:	4b02      	ldr	r3, [pc, #8]	; (8006550 <free+0xc>)
 8006546:	4601      	mov	r1, r0
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	f000 b819 	b.w	8006580 <_free_r>
 800654e:	bf00      	nop
 8006550:	200000f4 	.word	0x200000f4

08006554 <memcpy>:
 8006554:	440a      	add	r2, r1
 8006556:	4291      	cmp	r1, r2
 8006558:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800655c:	d100      	bne.n	8006560 <memcpy+0xc>
 800655e:	4770      	bx	lr
 8006560:	b510      	push	{r4, lr}
 8006562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800656a:	4291      	cmp	r1, r2
 800656c:	d1f9      	bne.n	8006562 <memcpy+0xe>
 800656e:	bd10      	pop	{r4, pc}

08006570 <memset>:
 8006570:	4402      	add	r2, r0
 8006572:	4603      	mov	r3, r0
 8006574:	4293      	cmp	r3, r2
 8006576:	d100      	bne.n	800657a <memset+0xa>
 8006578:	4770      	bx	lr
 800657a:	f803 1b01 	strb.w	r1, [r3], #1
 800657e:	e7f9      	b.n	8006574 <memset+0x4>

08006580 <_free_r>:
 8006580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006582:	2900      	cmp	r1, #0
 8006584:	d044      	beq.n	8006610 <_free_r+0x90>
 8006586:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800658a:	9001      	str	r0, [sp, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f1a1 0404 	sub.w	r4, r1, #4
 8006592:	bfb8      	it	lt
 8006594:	18e4      	addlt	r4, r4, r3
 8006596:	f000 f8e3 	bl	8006760 <__malloc_lock>
 800659a:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <_free_r+0x94>)
 800659c:	9801      	ldr	r0, [sp, #4]
 800659e:	6813      	ldr	r3, [r2, #0]
 80065a0:	b933      	cbnz	r3, 80065b0 <_free_r+0x30>
 80065a2:	6063      	str	r3, [r4, #4]
 80065a4:	6014      	str	r4, [r2, #0]
 80065a6:	b003      	add	sp, #12
 80065a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065ac:	f000 b8de 	b.w	800676c <__malloc_unlock>
 80065b0:	42a3      	cmp	r3, r4
 80065b2:	d908      	bls.n	80065c6 <_free_r+0x46>
 80065b4:	6825      	ldr	r5, [r4, #0]
 80065b6:	1961      	adds	r1, r4, r5
 80065b8:	428b      	cmp	r3, r1
 80065ba:	bf01      	itttt	eq
 80065bc:	6819      	ldreq	r1, [r3, #0]
 80065be:	685b      	ldreq	r3, [r3, #4]
 80065c0:	1949      	addeq	r1, r1, r5
 80065c2:	6021      	streq	r1, [r4, #0]
 80065c4:	e7ed      	b.n	80065a2 <_free_r+0x22>
 80065c6:	461a      	mov	r2, r3
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	b10b      	cbz	r3, 80065d0 <_free_r+0x50>
 80065cc:	42a3      	cmp	r3, r4
 80065ce:	d9fa      	bls.n	80065c6 <_free_r+0x46>
 80065d0:	6811      	ldr	r1, [r2, #0]
 80065d2:	1855      	adds	r5, r2, r1
 80065d4:	42a5      	cmp	r5, r4
 80065d6:	d10b      	bne.n	80065f0 <_free_r+0x70>
 80065d8:	6824      	ldr	r4, [r4, #0]
 80065da:	4421      	add	r1, r4
 80065dc:	1854      	adds	r4, r2, r1
 80065de:	42a3      	cmp	r3, r4
 80065e0:	6011      	str	r1, [r2, #0]
 80065e2:	d1e0      	bne.n	80065a6 <_free_r+0x26>
 80065e4:	681c      	ldr	r4, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	6053      	str	r3, [r2, #4]
 80065ea:	4421      	add	r1, r4
 80065ec:	6011      	str	r1, [r2, #0]
 80065ee:	e7da      	b.n	80065a6 <_free_r+0x26>
 80065f0:	d902      	bls.n	80065f8 <_free_r+0x78>
 80065f2:	230c      	movs	r3, #12
 80065f4:	6003      	str	r3, [r0, #0]
 80065f6:	e7d6      	b.n	80065a6 <_free_r+0x26>
 80065f8:	6825      	ldr	r5, [r4, #0]
 80065fa:	1961      	adds	r1, r4, r5
 80065fc:	428b      	cmp	r3, r1
 80065fe:	bf04      	itt	eq
 8006600:	6819      	ldreq	r1, [r3, #0]
 8006602:	685b      	ldreq	r3, [r3, #4]
 8006604:	6063      	str	r3, [r4, #4]
 8006606:	bf04      	itt	eq
 8006608:	1949      	addeq	r1, r1, r5
 800660a:	6021      	streq	r1, [r4, #0]
 800660c:	6054      	str	r4, [r2, #4]
 800660e:	e7ca      	b.n	80065a6 <_free_r+0x26>
 8006610:	b003      	add	sp, #12
 8006612:	bd30      	pop	{r4, r5, pc}
 8006614:	20001f4c 	.word	0x20001f4c

08006618 <sbrk_aligned>:
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	4e0e      	ldr	r6, [pc, #56]	; (8006654 <sbrk_aligned+0x3c>)
 800661c:	460c      	mov	r4, r1
 800661e:	6831      	ldr	r1, [r6, #0]
 8006620:	4605      	mov	r5, r0
 8006622:	b911      	cbnz	r1, 800662a <sbrk_aligned+0x12>
 8006624:	f000 f88c 	bl	8006740 <_sbrk_r>
 8006628:	6030      	str	r0, [r6, #0]
 800662a:	4621      	mov	r1, r4
 800662c:	4628      	mov	r0, r5
 800662e:	f000 f887 	bl	8006740 <_sbrk_r>
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	d00a      	beq.n	800664c <sbrk_aligned+0x34>
 8006636:	1cc4      	adds	r4, r0, #3
 8006638:	f024 0403 	bic.w	r4, r4, #3
 800663c:	42a0      	cmp	r0, r4
 800663e:	d007      	beq.n	8006650 <sbrk_aligned+0x38>
 8006640:	1a21      	subs	r1, r4, r0
 8006642:	4628      	mov	r0, r5
 8006644:	f000 f87c 	bl	8006740 <_sbrk_r>
 8006648:	3001      	adds	r0, #1
 800664a:	d101      	bne.n	8006650 <sbrk_aligned+0x38>
 800664c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006650:	4620      	mov	r0, r4
 8006652:	bd70      	pop	{r4, r5, r6, pc}
 8006654:	20001f50 	.word	0x20001f50

08006658 <_malloc_r>:
 8006658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800665c:	1ccd      	adds	r5, r1, #3
 800665e:	f025 0503 	bic.w	r5, r5, #3
 8006662:	3508      	adds	r5, #8
 8006664:	2d0c      	cmp	r5, #12
 8006666:	bf38      	it	cc
 8006668:	250c      	movcc	r5, #12
 800666a:	2d00      	cmp	r5, #0
 800666c:	4607      	mov	r7, r0
 800666e:	db01      	blt.n	8006674 <_malloc_r+0x1c>
 8006670:	42a9      	cmp	r1, r5
 8006672:	d905      	bls.n	8006680 <_malloc_r+0x28>
 8006674:	230c      	movs	r3, #12
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	2600      	movs	r6, #0
 800667a:	4630      	mov	r0, r6
 800667c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006680:	4e2e      	ldr	r6, [pc, #184]	; (800673c <_malloc_r+0xe4>)
 8006682:	f000 f86d 	bl	8006760 <__malloc_lock>
 8006686:	6833      	ldr	r3, [r6, #0]
 8006688:	461c      	mov	r4, r3
 800668a:	bb34      	cbnz	r4, 80066da <_malloc_r+0x82>
 800668c:	4629      	mov	r1, r5
 800668e:	4638      	mov	r0, r7
 8006690:	f7ff ffc2 	bl	8006618 <sbrk_aligned>
 8006694:	1c43      	adds	r3, r0, #1
 8006696:	4604      	mov	r4, r0
 8006698:	d14d      	bne.n	8006736 <_malloc_r+0xde>
 800669a:	6834      	ldr	r4, [r6, #0]
 800669c:	4626      	mov	r6, r4
 800669e:	2e00      	cmp	r6, #0
 80066a0:	d140      	bne.n	8006724 <_malloc_r+0xcc>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	4631      	mov	r1, r6
 80066a6:	4638      	mov	r0, r7
 80066a8:	eb04 0803 	add.w	r8, r4, r3
 80066ac:	f000 f848 	bl	8006740 <_sbrk_r>
 80066b0:	4580      	cmp	r8, r0
 80066b2:	d13a      	bne.n	800672a <_malloc_r+0xd2>
 80066b4:	6821      	ldr	r1, [r4, #0]
 80066b6:	3503      	adds	r5, #3
 80066b8:	1a6d      	subs	r5, r5, r1
 80066ba:	f025 0503 	bic.w	r5, r5, #3
 80066be:	3508      	adds	r5, #8
 80066c0:	2d0c      	cmp	r5, #12
 80066c2:	bf38      	it	cc
 80066c4:	250c      	movcc	r5, #12
 80066c6:	4629      	mov	r1, r5
 80066c8:	4638      	mov	r0, r7
 80066ca:	f7ff ffa5 	bl	8006618 <sbrk_aligned>
 80066ce:	3001      	adds	r0, #1
 80066d0:	d02b      	beq.n	800672a <_malloc_r+0xd2>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	442b      	add	r3, r5
 80066d6:	6023      	str	r3, [r4, #0]
 80066d8:	e00e      	b.n	80066f8 <_malloc_r+0xa0>
 80066da:	6822      	ldr	r2, [r4, #0]
 80066dc:	1b52      	subs	r2, r2, r5
 80066de:	d41e      	bmi.n	800671e <_malloc_r+0xc6>
 80066e0:	2a0b      	cmp	r2, #11
 80066e2:	d916      	bls.n	8006712 <_malloc_r+0xba>
 80066e4:	1961      	adds	r1, r4, r5
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	6025      	str	r5, [r4, #0]
 80066ea:	bf18      	it	ne
 80066ec:	6059      	strne	r1, [r3, #4]
 80066ee:	6863      	ldr	r3, [r4, #4]
 80066f0:	bf08      	it	eq
 80066f2:	6031      	streq	r1, [r6, #0]
 80066f4:	5162      	str	r2, [r4, r5]
 80066f6:	604b      	str	r3, [r1, #4]
 80066f8:	4638      	mov	r0, r7
 80066fa:	f104 060b 	add.w	r6, r4, #11
 80066fe:	f000 f835 	bl	800676c <__malloc_unlock>
 8006702:	f026 0607 	bic.w	r6, r6, #7
 8006706:	1d23      	adds	r3, r4, #4
 8006708:	1af2      	subs	r2, r6, r3
 800670a:	d0b6      	beq.n	800667a <_malloc_r+0x22>
 800670c:	1b9b      	subs	r3, r3, r6
 800670e:	50a3      	str	r3, [r4, r2]
 8006710:	e7b3      	b.n	800667a <_malloc_r+0x22>
 8006712:	6862      	ldr	r2, [r4, #4]
 8006714:	42a3      	cmp	r3, r4
 8006716:	bf0c      	ite	eq
 8006718:	6032      	streq	r2, [r6, #0]
 800671a:	605a      	strne	r2, [r3, #4]
 800671c:	e7ec      	b.n	80066f8 <_malloc_r+0xa0>
 800671e:	4623      	mov	r3, r4
 8006720:	6864      	ldr	r4, [r4, #4]
 8006722:	e7b2      	b.n	800668a <_malloc_r+0x32>
 8006724:	4634      	mov	r4, r6
 8006726:	6876      	ldr	r6, [r6, #4]
 8006728:	e7b9      	b.n	800669e <_malloc_r+0x46>
 800672a:	230c      	movs	r3, #12
 800672c:	603b      	str	r3, [r7, #0]
 800672e:	4638      	mov	r0, r7
 8006730:	f000 f81c 	bl	800676c <__malloc_unlock>
 8006734:	e7a1      	b.n	800667a <_malloc_r+0x22>
 8006736:	6025      	str	r5, [r4, #0]
 8006738:	e7de      	b.n	80066f8 <_malloc_r+0xa0>
 800673a:	bf00      	nop
 800673c:	20001f4c 	.word	0x20001f4c

08006740 <_sbrk_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4d06      	ldr	r5, [pc, #24]	; (800675c <_sbrk_r+0x1c>)
 8006744:	2300      	movs	r3, #0
 8006746:	4604      	mov	r4, r0
 8006748:	4608      	mov	r0, r1
 800674a:	602b      	str	r3, [r5, #0]
 800674c:	f7f9 fd40 	bl	80001d0 <_sbrk>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_sbrk_r+0x1a>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_sbrk_r+0x1a>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	20001f54 	.word	0x20001f54

08006760 <__malloc_lock>:
 8006760:	4801      	ldr	r0, [pc, #4]	; (8006768 <__malloc_lock+0x8>)
 8006762:	f000 b809 	b.w	8006778 <__retarget_lock_acquire_recursive>
 8006766:	bf00      	nop
 8006768:	20001f58 	.word	0x20001f58

0800676c <__malloc_unlock>:
 800676c:	4801      	ldr	r0, [pc, #4]	; (8006774 <__malloc_unlock+0x8>)
 800676e:	f000 b804 	b.w	800677a <__retarget_lock_release_recursive>
 8006772:	bf00      	nop
 8006774:	20001f58 	.word	0x20001f58

08006778 <__retarget_lock_acquire_recursive>:
 8006778:	4770      	bx	lr

0800677a <__retarget_lock_release_recursive>:
 800677a:	4770      	bx	lr

0800677c <_init>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	bf00      	nop
 8006780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006782:	bc08      	pop	{r3}
 8006784:	469e      	mov	lr, r3
 8006786:	4770      	bx	lr

08006788 <_fini>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	bf00      	nop
 800678c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678e:	bc08      	pop	{r3}
 8006790:	469e      	mov	lr, r3
 8006792:	4770      	bx	lr
