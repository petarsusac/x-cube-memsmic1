
STM32WB55-MEMSMIC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007888  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  080079c4  080079c4  000179c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000110c  20000004  08007d14  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002144  20001110  08008e20  00021110  2**2
                  ALLOC
  7 ._user_heap_stack 00001404  20003254  08008e20  00023254  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00021110  2**0
                  CONTENTS, READONLY
  9 .debug_line   000226ac  00000000  00000000  00021140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0001df9e  00000000  00000000  000437ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005073  00000000  00000000  0006178a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001098  00000000  00000000  00066800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0011c7fe  00000000  00000000  00067898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000023a8  00000000  00000000  00184098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000e02e  00000000  00000000  00186440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e0fa  00000000  00000000  0019446e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000140  00000000  00000000  001c2568  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002e28  00000000  00000000  001c26a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20001110 	.word	0x20001110
 8000158:	00000000 	.word	0x00000000
 800015c:	080079ac 	.word	0x080079ac

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20001114 	.word	0x20001114
 8000178:	080079ac 	.word	0x080079ac

0800017c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800017c:	480d      	ldr	r0, [pc, #52]	; (80001b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000180:	480d      	ldr	r0, [pc, #52]	; (80001b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000182:	490e      	ldr	r1, [pc, #56]	; (80001bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000184:	4a0e      	ldr	r2, [pc, #56]	; (80001c0 <LoopForever+0xe>)
  movs r3, #0
 8000186:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000188:	e002      	b.n	8000190 <LoopCopyDataInit>

0800018a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018e:	3304      	adds	r3, #4

08000190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000194:	d3f9      	bcc.n	800018a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000196:	4a0b      	ldr	r2, [pc, #44]	; (80001c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000198:	4c0b      	ldr	r4, [pc, #44]	; (80001c8 <LoopForever+0x16>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800019c:	e001      	b.n	80001a2 <LoopFillZerobss>

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a0:	3204      	adds	r2, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001a6:	f000 fe03 	bl	8000db0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80001aa:	f006 fec1 	bl	8006f30 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80001ae:	f000 f8db 	bl	8000368 <main>

080001b2 <LoopForever>:

LoopForever:
  b LoopForever
 80001b2:	e7fe      	b.n	80001b2 <LoopForever>
  ldr   r0, =_estack
 80001b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80001b8:	20000004 	.word	0x20000004
  ldr r1, =_edata
 80001bc:	20001110 	.word	0x20001110
  ldr r2, =_sidata
 80001c0:	08007d14 	.word	0x08007d14
  ldr r2, =_sbss
 80001c4:	20001110 	.word	0x20001110
  ldr r4, =_ebss
 80001c8:	20003254 	.word	0x20003254

080001cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001cc:	e7fe      	b.n	80001cc <ADC1_IRQHandler>
	...

080001d0 <_sbrk>:
{
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;

  if (heap_end == 0)
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <_sbrk+0x2c>)
 80001d2:	6811      	ldr	r1, [r2, #0]
{
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4603      	mov	r3, r0
  if (heap_end == 0)
 80001d8:	b909      	cbnz	r1, 80001de <_sbrk+0xe>
  {
    heap_end = &end;
 80001da:	4909      	ldr	r1, [pc, #36]	; (8000200 <_sbrk+0x30>)
 80001dc:	6011      	str	r1, [r2, #0]
  }

  prev_heap_end = heap_end;
 80001de:	6810      	ldr	r0, [r2, #0]
  if (heap_end + incr > stack_ptr)
 80001e0:	4669      	mov	r1, sp
 80001e2:	4403      	add	r3, r0
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d906      	bls.n	80001f6 <_sbrk+0x26>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 80001e8:	f006 fe9c 	bl	8006f24 <__errno>
 80001ec:	230c      	movs	r3, #12
 80001ee:	6003      	str	r3, [r0, #0]
    return (caddr_t) -1;
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }

  heap_end += incr;

  return (caddr_t) prev_heap_end;
}
 80001f4:	bd08      	pop	{r3, pc}
  heap_end += incr;
 80001f6:	6013      	str	r3, [r2, #0]
  return (caddr_t) prev_heap_end;
 80001f8:	e7fc      	b.n	80001f4 <_sbrk+0x24>
 80001fa:	bf00      	nop
 80001fc:	2000112c 	.word	0x2000112c
 8000200:	20003258 	.word	0x20003258

08000204 <AudioProcess>:
  * @param  none
  * @retval None
  */
void AudioProcess(void)
{
  if (CCA02M2_AUDIO_IN_PDMToPCM(CCA02M2_AUDIO_INSTANCE, (uint16_t *)PDM_Buffer, (uint16_t *)PCM_Buffer) != BSP_ERROR_NONE)
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <AudioProcess+0x20>)
{
 8000206:	b508      	push	{r3, lr}
  if (CCA02M2_AUDIO_IN_PDMToPCM(CCA02M2_AUDIO_INSTANCE, (uint16_t *)PDM_Buffer, (uint16_t *)PCM_Buffer) != BSP_ERROR_NONE)
 8000208:	f502 71c0 	add.w	r1, r2, #384	; 0x180
 800020c:	2000      	movs	r0, #0
 800020e:	f000 fca1 	bl	8000b54 <CCA02M2_AUDIO_IN_PDMToPCM>
 8000212:	b100      	cbz	r0, 8000216 <AudioProcess+0x12>
}


void Error_Handler(void)
{
  while (1);
 8000214:	e7fe      	b.n	8000214 <AudioProcess+0x10>
}
 8000216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Send_Audio_to_USB((int16_t *)PCM_Buffer, (AUDIO_IN_SAMPLING_FREQUENCY / 1000)*AUDIO_IN_CHANNELS * N_MS_PER_INTERRUPT);
 800021a:	4802      	ldr	r0, [pc, #8]	; (8000224 <AudioProcess+0x20>)
 800021c:	2160      	movs	r1, #96	; 0x60
 800021e:	f000 b915 	b.w	800044c <Send_Audio_to_USB>
 8000222:	bf00      	nop
 8000224:	20001134 	.word	0x20001134

08000228 <CCA02M2_AUDIO_IN_TransferComplete_CallBack>:
  AudioProcess();
 8000228:	f7ff bfec 	b.w	8000204 <AudioProcess>

0800022c <CCA02M2_AUDIO_IN_HalfTransfer_CallBack>:
 800022c:	f7ff bfea 	b.w	8000204 <AudioProcess>

08000230 <Init_Acquisition_Peripherals>:
{
 8000230:	b508      	push	{r3, lr}
  MicParams.BitsPerSample = BitRes;
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <Init_Acquisition_Peripherals+0x2c>)
 8000234:	f8c3 2788 	str.w	r2, [r3, #1928]	; 0x788
  MicParams.Device = AUDIO_IN_DIGITAL_MIC;
 8000238:	22f0      	movs	r2, #240	; 0xf0
  MicParams.ChannelsNbr = ChnlNbrIn;
 800023a:	f8c3 178c 	str.w	r1, [r3, #1932]	; 0x78c
  MicParams.Device = AUDIO_IN_DIGITAL_MIC;
 800023e:	f8c3 2780 	str.w	r2, [r3, #1920]	; 0x780
  MicParams.SampleRate = AudioFreq;
 8000242:	f8c3 0784 	str.w	r0, [r3, #1924]	; 0x784
  MicParams.Volume = AUDIO_VOLUME_INPUT;
 8000246:	2240      	movs	r2, #64	; 0x40
  if (CCA02M2_AUDIO_IN_Init(CCA02M2_AUDIO_INSTANCE, &MicParams) != BSP_ERROR_NONE)
 8000248:	f503 61f0 	add.w	r1, r3, #1920	; 0x780
 800024c:	2000      	movs	r0, #0
  MicParams.Volume = AUDIO_VOLUME_INPUT;
 800024e:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
  if (CCA02M2_AUDIO_IN_Init(CCA02M2_AUDIO_INSTANCE, &MicParams) != BSP_ERROR_NONE)
 8000252:	f000 fb3d 	bl	80008d0 <CCA02M2_AUDIO_IN_Init>
 8000256:	b100      	cbz	r0, 800025a <Init_Acquisition_Peripherals+0x2a>
  while (1);
 8000258:	e7fe      	b.n	8000258 <Init_Acquisition_Peripherals+0x28>
}
 800025a:	bd08      	pop	{r3, pc}
 800025c:	20001134 	.word	0x20001134

08000260 <Start_Acquisition>:
{
 8000260:	b508      	push	{r3, lr}
  if (CCA02M2_AUDIO_IN_Record(CCA02M2_AUDIO_INSTANCE, (uint8_t *) PDM_Buffer, AUDIO_IN_BUFFER_SIZE) != BSP_ERROR_NONE)
 8000262:	4904      	ldr	r1, [pc, #16]	; (8000274 <Start_Acquisition+0x14>)
 8000264:	2260      	movs	r2, #96	; 0x60
 8000266:	2000      	movs	r0, #0
 8000268:	f000 fcc8 	bl	8000bfc <CCA02M2_AUDIO_IN_Record>
 800026c:	b100      	cbz	r0, 8000270 <Start_Acquisition+0x10>
  while (1);
 800026e:	e7fe      	b.n	800026e <Start_Acquisition+0xe>
}
 8000270:	bd08      	pop	{r3, pc}
 8000272:	bf00      	nop
 8000274:	200012b4 	.word	0x200012b4

08000278 <SystemClock_Config>:
  * @brief  System Clock Configuration
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027c:	2420      	movs	r4, #32
{
 800027e:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000280:	4622      	mov	r2, r4
 8000282:	2100      	movs	r1, #0
 8000284:	a80a      	add	r0, sp, #40	; 0x28
 8000286:	f006 fe95 	bl	8006fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028a:	221c      	movs	r2, #28
 800028c:	2100      	movs	r1, #0
 800028e:	a801      	add	r0, sp, #4
 8000290:	f006 fe90 	bl	8006fb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000294:	2100      	movs	r1, #0
 8000296:	2250      	movs	r2, #80	; 0x50
 8000298:	a81a      	add	r0, sp, #104	; 0x68
 800029a:	f006 fe8b 	bl	8006fb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800029e:	4a31      	ldr	r2, [pc, #196]	; (8000364 <SystemClock_Config+0xec>)
 80002a0:	6813      	ldr	r3, [r2, #0]
 80002a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80002a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002aa:	6013      	str	r3, [r2, #0]
 80002ac:	6813      	ldr	r3, [r2, #0]
 80002ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSI
                                     | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80002ba:	2343      	movs	r3, #67	; 0x43
 80002bc:	e9cd 3708 	strd	r3, r7, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2340      	movs	r3, #64	; 0x40
 80002cc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV8;
 80002ce:	2370      	movs	r3, #112	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 32;
 80002d0:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d4:	2503      	movs	r5, #3
 80002d6:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002dc:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
 80002e0:	f04f 5800 	mov.w	r8, #536870912	; 0x20000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e4:	eb0d 0004 	add.w	r0, sp, r4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002e8:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ea:	e9cd 6513 	strd	r6, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ee:	e9cd 9818 	strd	r9, r8, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f002 f89b 	bl	800242c <HAL_RCC_OscConfig>
  {
//    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 80002f6:	236f      	movs	r3, #111	; 0x6f
                                | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80002fa:	4629      	mov	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fc:	e9cd 3501 	strd	r3, r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000300:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000302:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000304:	e9cd 3406 	strd	r3, r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000308:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030c:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800030e:	f002 fb55 	bl	80029bc <HAL_RCC_ClockConfig>
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS | RCC_PERIPHCLK_SAI1
                                             | RCC_PERIPHCLK_USB;

  PeriphClkInitStruct.PLLSAI1.PLLN = 86;
 8000312:	f44f 5005 	mov.w	r0, #8512	; 0x2140
 8000316:	2356      	movs	r3, #86	; 0x56
 8000318:	e9cd 031a 	strd	r0, r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV7;
 800031c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000320:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000322:	e9cd 391c 	strd	r3, r9, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000326:	e9cd 871e 	strd	r8, r7, [sp, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800032a:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800032e:	e9cd 642c 	strd	r6, r4, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000332:	f002 fd33 	bl	8002d9c <HAL_RCCEx_PeriphCLKConfig>
  {
//    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000336:	f002 f869 	bl	800240c <HAL_RCC_GetHCLKFreq>
 800033a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000342:	f000 fe07 	bl	8000f54 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000346:	2004      	movs	r0, #4
 8000348:	f000 fe18 	bl	8000f7c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800034c:	4622      	mov	r2, r4
 800034e:	4621      	mov	r1, r4
 8000350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000354:	f000 fdbe 	bl	8000ed4 <HAL_NVIC_SetPriority>
  HAL_PWREx_EnableVddUSB();
 8000358:	f001 ff36 	bl	80021c8 <HAL_PWREx_EnableVddUSB>
}
 800035c:	b02f      	add	sp, #188	; 0xbc
 800035e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000362:	bf00      	nop
 8000364:	58000400 	.word	0x58000400

08000368 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000368:	b508      	push	{r3, lr}
  /* STM32F4xx HAL library initialization:
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 800036a:	f000 fd79 	bl	8000e60 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800036e:	f7ff ff83 	bl	8000278 <SystemClock_Config>
  /* Initialize USB descriptor basing on channels number and sampling frequency */
  USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS);
 8000372:	480f      	ldr	r0, [pc, #60]	; (80003b0 <main+0x48>)
 8000374:	2202      	movs	r2, #2
 8000376:	f64b 3180 	movw	r1, #48000	; 0xbb80
 800037a:	f004 fa5b 	bl	8004834 <USBD_AUDIO_Init_Microphone_Descriptor>
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
 800037e:	2200      	movs	r2, #0
 8000380:	490c      	ldr	r1, [pc, #48]	; (80003b4 <main+0x4c>)
 8000382:	480b      	ldr	r0, [pc, #44]	; (80003b0 <main+0x48>)
 8000384:	f004 fbfe 	bl	8004b84 <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
 8000388:	490b      	ldr	r1, [pc, #44]	; (80003b8 <main+0x50>)
 800038a:	4809      	ldr	r0, [pc, #36]	; (80003b0 <main+0x48>)
 800038c:	f004 fc0d 	bl	8004baa <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO Class */
  USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
 8000390:	490a      	ldr	r1, [pc, #40]	; (80003bc <main+0x54>)
 8000392:	4807      	ldr	r0, [pc, #28]	; (80003b0 <main+0x48>)
 8000394:	f004 fa48 	bl	8004828 <USBD_AUDIO_RegisterInterface>
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8000398:	4805      	ldr	r0, [pc, #20]	; (80003b0 <main+0x48>)
 800039a:	f004 fc1f 	bl	8004bdc <USBD_Start>

  /* Start audio acquisition and streaming */
#ifdef DISABLE_USB_DRIVEN_ACQUISITION
  Init_Acquisition_Peripherals(AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS, AUDIO_IN_BIT_DEPTH);
 800039e:	2218      	movs	r2, #24
 80003a0:	2102      	movs	r1, #2
 80003a2:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80003a6:	f7ff ff43 	bl	8000230 <Init_Acquisition_Peripherals>
  Start_Acquisition();
 80003aa:	f7ff ff59 	bl	8000260 <Start_Acquisition>
#endif

  while (1)
 80003ae:	e7fe      	b.n	80003ae <main+0x46>
 80003b0:	200018c8 	.word	0x200018c8
 80003b4:	20000040 	.word	0x20000040
 80003b8:	20000074 	.word	0x20000074
 80003bc:	20000004 	.word	0x20000004

080003c0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80003c0:	4770      	bx	lr

080003c2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <HardFault_Handler>

080003c4 <SVC_Handler>:
 80003c4:	4770      	bx	lr

080003c6 <DebugMon_Handler>:
 80003c6:	4770      	bx	lr

080003c8 <PendSV_Handler>:
 80003c8:	4770      	bx	lr

080003ca <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80003ca:	f000 bd59 	b.w	8000e80 <HAL_IncTick>
	...

080003d0 <USB_LP_IRQHandler>:
  * @param  None
  * @retval None
  */
void USB_LP_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd);
 80003d0:	4801      	ldr	r0, [pc, #4]	; (80003d8 <USB_LP_IRQHandler+0x8>)
 80003d2:	f001 b8b5 	b.w	8001540 <HAL_PCD_IRQHandler>
 80003d6:	bf00      	nop
 80003d8:	20001ba8 	.word	0x20001ba8

080003dc <DMA1_Channel1_IRQHandler>:
  * @retval None
  */

void DMA1_Channel1_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInSai.hdmarx);
 80003dc:	4b02      	ldr	r3, [pc, #8]	; (80003e8 <DMA1_Channel1_IRQHandler+0xc>)
 80003de:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80003e2:	f000 bf23 	b.w	800122c <HAL_DMA_IRQHandler>
 80003e6:	bf00      	nop
 80003e8:	200022a0 	.word	0x200022a0

080003ec <Audio_Init>:
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return CCA02M2_AUDIO_IN_Init(CCA02M2_AUDIO_INSTANCE, &MicParams);
#else
  return BSP_ERROR_NONE;
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 80003ec:	2000      	movs	r0, #0
 80003ee:	4770      	bx	lr

080003f0 <Audio_DeInit>:
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_DeInit(uint32_t options)
{
  return BSP_ERROR_NONE;
}
 80003f0:	2000      	movs	r0, #0
 80003f2:	4770      	bx	lr

080003f4 <Audio_Record>:
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return CCA02M2_AUDIO_IN_Record(CCA02M2_AUDIO_INSTANCE, (uint8_t *) PDM_Buffer, 0);
#else
  return BSP_ERROR_NONE;
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 80003f4:	2000      	movs	r0, #0
 80003f6:	4770      	bx	lr

080003f8 <Audio_MuteCtl>:
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_MuteCtl(uint8_t cmd)
{
  return BSP_ERROR_NONE;
}
 80003f8:	2000      	movs	r0, #0
 80003fa:	4770      	bx	lr

080003fc <Audio_VolumeCtl>:
{
 80003fc:	b538      	push	{r3, r4, r5, lr}
 80003fe:	4c0e      	ldr	r4, [pc, #56]	; (8000438 <Audio_VolumeCtl+0x3c>)
  uint32_t j = 0;
 8000400:	2100      	movs	r1, #0
  while (j < 64 && abs(Volume - vol_table[j]) > abs(Volume - vol_table[j + 1]))
 8000402:	f9b4 2000 	ldrsh.w	r2, [r4]
 8000406:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 800040a:	1a82      	subs	r2, r0, r2
 800040c:	1ac3      	subs	r3, r0, r3
 800040e:	2a00      	cmp	r2, #0
 8000410:	bfb8      	it	lt
 8000412:	4252      	neglt	r2, r2
 8000414:	2b00      	cmp	r3, #0
 8000416:	bfb8      	it	lt
 8000418:	425b      	neglt	r3, r3
 800041a:	429a      	cmp	r2, r3
 800041c:	460d      	mov	r5, r1
 800041e:	f101 0101 	add.w	r1, r1, #1
 8000422:	dc01      	bgt.n	8000428 <Audio_VolumeCtl+0x2c>
 8000424:	4629      	mov	r1, r5
 8000426:	e001      	b.n	800042c <Audio_VolumeCtl+0x30>
 8000428:	2940      	cmp	r1, #64	; 0x40
 800042a:	d1ea      	bne.n	8000402 <Audio_VolumeCtl+0x6>
  return CCA02M2_AUDIO_IN_SetVolume(mic_instance, j);
 800042c:	2000      	movs	r0, #0
 800042e:	f000 fc07 	bl	8000c40 <CCA02M2_AUDIO_IN_SetVolume>
}
 8000432:	b240      	sxtb	r0, r0
 8000434:	bd38      	pop	{r3, r4, r5, pc}
 8000436:	bf00      	nop
 8000438:	080079c4 	.word	0x080079c4

0800043c <Audio_CommandMgr>:
 800043c:	2000      	movs	r0, #0
 800043e:	4770      	bx	lr

08000440 <Audio_Stop>:
 8000440:	2000      	movs	r0, #0
 8000442:	4770      	bx	lr

08000444 <Audio_Pause>:
 8000444:	2000      	movs	r0, #0
 8000446:	4770      	bx	lr

08000448 <Audio_Resume>:
 8000448:	2000      	movs	r0, #0
 800044a:	4770      	bx	lr

0800044c <Send_Audio_to_USB>:
  *       the function. E.g.: assuming a Sampling frequency of 16 KHz and 1 channel,
  *       you can pass 16 PCM samples if the function is called each millisecond,
  *       32 samples if called every 2 milliseconds and so on.
  */
void Send_Audio_to_USB(int16_t *audioData, uint16_t PCMSamples)
{
 800044c:	460a      	mov	r2, r1
  USBD_AUDIO_Data_Transfer(&hUSBDDevice, (int16_t *)audioData, PCMSamples);
 800044e:	4601      	mov	r1, r0
 8000450:	4801      	ldr	r0, [pc, #4]	; (8000458 <Send_Audio_to_USB+0xc>)
 8000452:	f004 b973 	b.w	800473c <USBD_AUDIO_Data_Transfer>
 8000456:	bf00      	nop
 8000458:	200018c8 	.word	0x200018c8

0800045c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800045c:	b570      	push	{r4, r5, r6, lr}
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800045e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8000462:	b088      	sub	sp, #32
 8000464:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800046c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000474:	9b02      	ldr	r3, [sp, #8]
  /* Enable the GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000476:	2500      	movs	r5, #0
 8000478:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800047c:	e9cd 3503 	strd	r3, r5, [sp, #12]
{
 8000480:	4606      	mov	r6, r0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000482:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	a903      	add	r1, sp, #12
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800048a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048e:	f000 ff17 	bl	80012c0 <HAL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000494:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000498:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800049a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800049c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80004a0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80004a2:	9b01      	ldr	r3, [sp, #4]
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_CRS_IRQn);

#else

  if (hpcd->Init.low_power_enable == 1)
 80004a4:	69b3      	ldr	r3, [r6, #24]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d10e      	bne.n	80004c8 <HAL_PCD_MspInit+0x6c>
  {
    /* Enable EXTI Line 18 for USB wakeup */
    __HAL_USB_WAKEUP_EXTI_ENABLE_IT();
 80004aa:	4a0c      	ldr	r2, [pc, #48]	; (80004dc <HAL_PCD_MspInit+0x80>)
 80004ac:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    /* USB Default Wakeup Interrupt */
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80004b8:	2014      	movs	r0, #20
 80004ba:	f000 fd3d 	bl	8000f38 <HAL_NVIC_EnableIRQ>

    /* Enable USB Wake-up interrupt */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80004be:	462a      	mov	r2, r5
 80004c0:	4629      	mov	r1, r5
 80004c2:	2014      	movs	r0, #20
 80004c4:	f000 fd06 	bl	8000ed4 <HAL_NVIC_SetPriority>
  }

  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_LP_IRQn, 0x00, 0);
 80004c8:	2200      	movs	r2, #0
 80004ca:	4611      	mov	r1, r2
 80004cc:	2014      	movs	r0, #20
 80004ce:	f000 fd01 	bl	8000ed4 <HAL_NVIC_SetPriority>

  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80004d2:	2014      	movs	r0, #20
 80004d4:	f000 fd30 	bl	8000f38 <HAL_NVIC_EnableIRQ>
#endif
}
 80004d8:	b008      	add	sp, #32
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	58000800 	.word	0x58000800

080004e0 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *) hpcd->Setup);
 80004e0:	f500 712d 	add.w	r1, r0, #692	; 0x2b4
 80004e4:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 80004e8:	f004 bb8a 	b.w	8004c00 <USBD_LL_SetupStage>

080004ec <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80004ec:	2328      	movs	r3, #40	; 0x28
 80004ee:	fb03 0301 	mla	r3, r3, r1, r0
 80004f2:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 80004f6:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80004fa:	f004 bbb1 	b.w	8004c60 <USBD_LL_DataOutStage>

080004fe <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80004fe:	2328      	movs	r3, #40	; 0x28
 8000500:	fb03 0301 	mla	r3, r3, r1, r0
 8000504:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 8000508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800050a:	f004 bbde 	b.w	8004cca <USBD_LL_DataInStage>

0800050e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 800050e:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 8000512:	f004 bc78 	b.w	8004e06 <USBD_LL_SOF>

08000516 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8000516:	b510      	push	{r4, lr}
 8000518:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800051a:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 800051e:	f004 fc2b 	bl	8004d78 <USBD_LL_Reset>

  /* Set USB Current Speed */
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8000522:	f8d4 02f4 	ldr.w	r0, [r4, #756]	; 0x2f4
 8000526:	2101      	movs	r1, #1
}
 8000528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800052c:	f004 bc53 	b.w	8004dd6 <USBD_LL_SetSpeed>

08000530 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8000530:	b510      	push	{r4, lr}
 8000532:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend(hpcd->pData);
 8000534:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 8000538:	f004 fc50 	bl	8004ddc <USBD_LL_Suspend>

  /* Enter in STOP mode */
  if (hpcd->Init.low_power_enable)
 800053c:	69a3      	ldr	r3, [r4, #24]
 800053e:	b12b      	cbz	r3, 800054c <HAL_PCD_SuspendCallback+0x1c>
  {
    HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
  }
}
 8000540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000544:	2101      	movs	r1, #1
 8000546:	2000      	movs	r0, #0
 8000548:	f001 be2c 	b.w	80021a4 <HAL_PWR_EnterSTOPMode>
}
 800054c:	bd10      	pop	{r4, pc}
	...

08000550 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8000550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hpcd->Init.low_power_enable) && (remotewakeupon == 0))
 8000554:	6983      	ldr	r3, [r0, #24]
 8000556:	4f24      	ldr	r7, [pc, #144]	; (80005e8 <HAL_PCD_ResumeCallback+0x98>)
{
 8000558:	b09a      	sub	sp, #104	; 0x68
 800055a:	4606      	mov	r6, r0
  if ((hpcd->Init.low_power_enable) && (remotewakeupon == 0))
 800055c:	2b00      	cmp	r3, #0
 800055e:	d03a      	beq.n	80005d6 <HAL_PCD_ResumeCallback+0x86>
 8000560:	683c      	ldr	r4, [r7, #0]
 8000562:	2c00      	cmp	r4, #0
 8000564:	d137      	bne.n	80005d6 <HAL_PCD_ResumeCallback+0x86>
static void SystemClockConfig_STOP(void)
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE |
 8000566:	2324      	movs	r3, #36	; 0x24
 8000568:	9308      	str	r3, [sp, #32]
                                     RCC_OSCILLATORTYPE_MSI;

  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800056a:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056c:	2228      	movs	r2, #40	; 0x28
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800056e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000570:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000574:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000578:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800057e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	f04f 0802 	mov.w	r8, #2
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000586:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000588:	e9cd 1318 	strd	r1, r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800058c:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000590:	e9cd 8513 	strd	r8, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000594:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000596:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000598:	f001 ff48 	bl	800242c <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2303      	movs	r3, #3
 800059e:	200f      	movs	r0, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80005a0:	4641      	mov	r1, r8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	e9cd 0301 	strd	r0, r3, [sp, #4]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80005a6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80005ae:	f002 fa05 	bl	80029bc <HAL_RCC_ClockConfig>


  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80005b2:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80005b4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80005b6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b8:	e9cd 5412 	strd	r5, r4, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80005bc:	f001 ff36 	bl	800242c <HAL_RCC_OscConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80005c0:	f001 ff24 	bl	800240c <HAL_RCC_GetHCLKFreq>
 80005c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80005cc:	f000 fcc2 	bl	8000f54 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80005d0:	2004      	movs	r0, #4
 80005d2:	f000 fcd3 	bl	8000f7c <HAL_SYSTICK_CLKSourceConfig>
  USBD_LL_Resume(hpcd->pData);
 80005d6:	f8d6 02f4 	ldr.w	r0, [r6, #756]	; 0x2f4
 80005da:	f004 fc09 	bl	8004df0 <USBD_LL_Resume>
  remotewakeupon = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
}
 80005e2:	b01a      	add	sp, #104	; 0x68
 80005e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005e8:	20001ba4 	.word	0x20001ba4

080005ec <USBD_LL_Init>:
{
 80005ec:	b538      	push	{r3, r4, r5, lr}
 80005ee:	4604      	mov	r4, r0
  hpcd.Init.dev_endpoints = 4;
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <USBD_LL_Init+0x58>)
  hpcd.Instance = USB;
 80005f2:	4815      	ldr	r0, [pc, #84]	; (8000648 <USBD_LL_Init+0x5c>)
  hpcd.Init.dev_endpoints = 4;
 80005f4:	2204      	movs	r2, #4
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005f6:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 4;
 80005f8:	e9c0 3201 	strd	r3, r2, [r0, #4]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005fc:	2202      	movs	r2, #2
 80005fe:	e9c0 5204 	strd	r5, r2, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8000602:	60c2      	str	r2, [r0, #12]
  hpcd.Init.low_power_enable = 0;
 8000604:	61c5      	str	r5, [r0, #28]
  hpcd.pData = pdev;
 8000606:	f8c0 42f8 	str.w	r4, [r0, #760]	; 0x2f8
  pdev->pData = &hpcd;
 800060a:	3004      	adds	r0, #4
 800060c:	f8c4 02c8 	str.w	r0, [r4, #712]	; 0x2c8
  HAL_PCD_Init(&hpcd);
 8000610:	f000 ff0c 	bl	800142c <HAL_PCD_Init>
  HAL_PCDEx_PMAConfig(pdev->pData, 0x00, PCD_SNG_BUF, 0x40);
 8000614:	462a      	mov	r2, r5
 8000616:	4629      	mov	r1, r5
 8000618:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 800061c:	2340      	movs	r3, #64	; 0x40
 800061e:	f001 fd85 	bl	800212c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData, 0x80, PCD_SNG_BUF, 0x80);
 8000622:	2380      	movs	r3, #128	; 0x80
 8000624:	462a      	mov	r2, r5
 8000626:	4619      	mov	r1, r3
 8000628:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 800062c:	f001 fd7e 	bl	800212c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData, 0x81, PCD_DBL_BUF, 0x00C00120);
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <USBD_LL_Init+0x60>)
 8000632:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8000636:	2201      	movs	r2, #1
 8000638:	2181      	movs	r1, #129	; 0x81
 800063a:	f001 fd77 	bl	800212c <HAL_PCDEx_PMAConfig>
}
 800063e:	4628      	mov	r0, r5
 8000640:	bd38      	pop	{r3, r4, r5, pc}
 8000642:	bf00      	nop
 8000644:	40006800 	.word	0x40006800
 8000648:	20001ba4 	.word	0x20001ba4
 800064c:	00c00120 	.word	0x00c00120

08000650 <USBD_LL_Start>:
{
 8000650:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8000652:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8000656:	f000 ff4a 	bl	80014ee <HAL_PCD_Start>
}
 800065a:	2000      	movs	r0, #0
 800065c:	bd08      	pop	{r3, pc}

0800065e <USBD_LL_OpenEP>:
{
 800065e:	b510      	push	{r4, lr}
 8000660:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000662:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8000666:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000668:	4623      	mov	r3, r4
 800066a:	f001 fc5d 	bl	8001f28 <HAL_PCD_EP_Open>
}
 800066e:	2000      	movs	r0, #0
 8000670:	bd10      	pop	{r4, pc}

08000672 <USBD_LL_CloseEP>:
{
 8000672:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000674:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8000678:	f001 fc8c 	bl	8001f94 <HAL_PCD_EP_Close>
}
 800067c:	2000      	movs	r0, #0
 800067e:	bd08      	pop	{r3, pc}

08000680 <USBD_LL_FlushEP>:
{
 8000680:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8000682:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8000686:	f001 fd4f 	bl	8002128 <HAL_PCD_EP_Flush>
}
 800068a:	2000      	movs	r0, #0
 800068c:	bd08      	pop	{r3, pc}

0800068e <USBD_LL_StallEP>:
{
 800068e:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000690:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8000694:	f001 fce0 	bl	8002058 <HAL_PCD_EP_SetStall>
}
 8000698:	2000      	movs	r0, #0
 800069a:	bd08      	pop	{r3, pc}

0800069c <USBD_LL_ClearStallEP>:
{
 800069c:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800069e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80006a2:	f001 fd0b 	bl	80020bc <HAL_PCD_EP_ClrStall>
}
 80006a6:	2000      	movs	r0, #0
 80006a8:	bd08      	pop	{r3, pc}

080006aa <USBD_LL_IsStallEP>:
  if ((ep_addr & 0x80) == 0x80)
 80006aa:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80006ae:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if ((ep_addr & 0x80) == 0x80)
 80006b2:	f04f 0228 	mov.w	r2, #40	; 0x28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80006b6:	bf1d      	ittte	ne
 80006b8:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80006bc:	fb01 2102 	mlane	r1, r1, r2, r2
 80006c0:	185b      	addne	r3, r3, r1
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80006c2:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80006c6:	bf14      	ite	ne
 80006c8:	7998      	ldrbne	r0, [r3, #6]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80006ca:	f891 016e 	ldrbeq.w	r0, [r1, #366]	; 0x16e
}
 80006ce:	4770      	bx	lr

080006d0 <USBD_LL_SetUSBAddress>:
{
 80006d0:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80006d2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80006d6:	f000 ff1f 	bl	8001518 <HAL_PCD_SetAddress>
}
 80006da:	2000      	movs	r0, #0
 80006dc:	bd08      	pop	{r3, pc}

080006de <USBD_LL_Transmit>:
{
 80006de:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80006e0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80006e4:	f001 fc99 	bl	800201a <HAL_PCD_EP_Transmit>
}
 80006e8:	2000      	movs	r0, #0
 80006ea:	bd08      	pop	{r3, pc}

080006ec <USBD_LL_PrepareReceive>:
{
 80006ec:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80006ee:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80006f2:	f001 fc7c 	bl	8001fee <HAL_PCD_EP_Receive>
}
 80006f6:	2000      	movs	r0, #0
 80006f8:	bd08      	pop	{r3, pc}
	...

080006fc <USBD_AUDIO_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 80006fc:	2312      	movs	r3, #18
  return hUSBDDeviceDesc;
}
 80006fe:	4801      	ldr	r0, [pc, #4]	; (8000704 <USBD_AUDIO_DeviceDescriptor+0x8>)
  *length = sizeof(hUSBDDeviceDesc);
 8000700:	800b      	strh	r3, [r1, #0]
}
 8000702:	4770      	bx	lr
 8000704:	20000028 	.word	0x20000028

08000708 <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8000708:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800070a:	4801      	ldr	r0, [pc, #4]	; (8000710 <USBD_AUDIO_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800070c:	800b      	strh	r3, [r1, #0]
}
 800070e:	4770      	bx	lr
 8000710:	2000003c 	.word	0x2000003c

08000714 <USBD_AUDIO_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000714:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000716:	4c04      	ldr	r4, [pc, #16]	; (8000728 <USBD_AUDIO_ManufacturerStrDescriptor+0x14>)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <USBD_AUDIO_ManufacturerStrDescriptor+0x18>)
{
 800071a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800071c:	4621      	mov	r1, r4
 800071e:	f004 fdc8 	bl	80052b2 <USBD_GetString>
  return USBD_StrDesc;
}
 8000722:	4620      	mov	r0, r4
 8000724:	bd10      	pop	{r4, pc}
 8000726:	bf00      	nop
 8000728:	20001eb4 	.word	0x20001eb4
 800072c:	08007c68 	.word	0x08007c68

08000730 <USBD_AUDIO_ProductStrDescriptor>:
{
 8000730:	460a      	mov	r2, r1
 8000732:	b508      	push	{r3, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8000734:	4904      	ldr	r1, [pc, #16]	; (8000748 <USBD_AUDIO_ProductStrDescriptor+0x18>)
  if (speed == 0)
 8000736:	b920      	cbnz	r0, 8000742 <USBD_AUDIO_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <USBD_AUDIO_ProductStrDescriptor+0x1c>)
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800073a:	f004 fdba 	bl	80052b2 <USBD_GetString>
}
 800073e:	4802      	ldr	r0, [pc, #8]	; (8000748 <USBD_AUDIO_ProductStrDescriptor+0x18>)
 8000740:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <USBD_AUDIO_ProductStrDescriptor+0x20>)
 8000744:	e7f9      	b.n	800073a <USBD_AUDIO_ProductStrDescriptor+0xa>
 8000746:	bf00      	nop
 8000748:	20001eb4 	.word	0x20001eb4
 800074c:	08007c7b 	.word	0x08007c7b
 8000750:	08007c9c 	.word	0x08007c9c

08000754 <USBD_AUDIO_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000754:	460a      	mov	r2, r1
 8000756:	b508      	push	{r3, lr}
  if (speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 8000758:	4904      	ldr	r1, [pc, #16]	; (800076c <USBD_AUDIO_SerialStrDescriptor+0x18>)
  if (speed == USBD_SPEED_HIGH)
 800075a:	b920      	cbnz	r0, 8000766 <USBD_AUDIO_SerialStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <USBD_AUDIO_SerialStrDescriptor+0x1c>)
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 800075e:	f004 fda8 	bl	80052b2 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8000762:	4802      	ldr	r0, [pc, #8]	; (800076c <USBD_AUDIO_SerialStrDescriptor+0x18>)
 8000764:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 8000766:	4803      	ldr	r0, [pc, #12]	; (8000774 <USBD_AUDIO_SerialStrDescriptor+0x20>)
 8000768:	e7f9      	b.n	800075e <USBD_AUDIO_SerialStrDescriptor+0xa>
 800076a:	bf00      	nop
 800076c:	20001eb4 	.word	0x20001eb4
 8000770:	08007cbd 	.word	0x08007cbd
 8000774:	08007cca 	.word	0x08007cca

08000778 <USBD_AUDIO_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000778:	b510      	push	{r4, lr}
  if (speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800077a:	4c04      	ldr	r4, [pc, #16]	; (800078c <USBD_AUDIO_ConfigStrDescriptor+0x14>)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <USBD_AUDIO_ConfigStrDescriptor+0x18>)
{
 800077e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8000780:	4621      	mov	r1, r4
 8000782:	f004 fd96 	bl	80052b2 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8000786:	4620      	mov	r0, r4
 8000788:	bd10      	pop	{r4, pc}
 800078a:	bf00      	nop
 800078c:	20001eb4 	.word	0x20001eb4
 8000790:	08007cd7 	.word	0x08007cd7

08000794 <USBD_AUDIO_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000794:	b510      	push	{r4, lr}
  if (speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8000796:	4c04      	ldr	r4, [pc, #16]	; (80007a8 <USBD_AUDIO_InterfaceStrDescriptor+0x14>)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <USBD_AUDIO_InterfaceStrDescriptor+0x18>)
{
 800079a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800079c:	4621      	mov	r1, r4
 800079e:	f004 fd88 	bl	80052b2 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80007a2:	4620      	mov	r0, r4
 80007a4:	bd10      	pop	{r4, pc}
 80007a6:	bf00      	nop
 80007a8:	20001eb4 	.word	0x20001eb4
 80007ac:	08007ce4 	.word	0x08007ce4

080007b0 <LL_AHB1_GRP1_EnableClock>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80007b4:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007b8:	4302      	orrs	r2, r0
 80007ba:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007be:	4018      	ands	r0, r3
 80007c0:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80007c2:	9b01      	ldr	r3, [sp, #4]
}
 80007c4:	b002      	add	sp, #8
 80007c6:	4770      	bx	lr

080007c8 <MX_SAI_ClockConfig>:
* @note   This API is called by CCA02M2_AUDIO_IN_Init() 
*         Being __weak it can be overwritten by the application     
* @retval HAL_OK if no problem during execution, HAL_ERROR otherwise
*/
__weak HAL_StatusTypeDef MX_SAI_ClockConfig(SAI_HandleTypeDef *hSai, uint32_t PDM_rate)
{ 
 80007c8:	b510      	push	{r4, lr}
 80007ca:	b094      	sub	sp, #80	; 0x50
  UNUSED(hSai);
  
  HAL_StatusTypeDef ret = HAL_OK;
  /*SAI PLL Configuration*/
  RCC_PeriphCLKInitTypeDef rccclkinit;
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit); 
 80007cc:	4668      	mov	r0, sp
{ 
 80007ce:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit); 
 80007d0:	f002 fcb7 	bl	8003142 <HAL_RCCEx_GetPeriphCLKConfig>
 80007d4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80007d8:	fbb4 f3f1 	udiv	r3, r4, r1
 80007dc:	fb01 4413 	mls	r4, r1, r3, r4
  
  if ((PDM_rate % 1280U) == 0U)
 80007e0:	b974      	cbnz	r4, 8000800 <MX_SAI_ClockConfig+0x38>
  {
    rccclkinit.PLLSAI1.PLLN = 82;
 80007e2:	2352      	movs	r3, #82	; 0x52
 80007e4:	9301      	str	r3, [sp, #4]
    rccclkinit.PLLSAI1.PLLP = RCC_PLLP_DIV8;
 80007e6:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  }
  else
  {
    rccclkinit.PLLSAI1.PLLN = 86;   
    rccclkinit.PLLSAI1.PLLP = RCC_PLLP_DIV7;  
 80007ea:	9302      	str	r3, [sp, #8]
  }    
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
  
  if(HAL_RCCEx_PeriphCLKConfig(&rccclkinit) != HAL_OK)
 80007ec:	4668      	mov	r0, sp
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80007ee:	2340      	movs	r3, #64	; 0x40
 80007f0:	9300      	str	r3, [sp, #0]
  if(HAL_RCCEx_PeriphCLKConfig(&rccclkinit) != HAL_OK)
 80007f2:	f002 fad3 	bl	8002d9c <HAL_RCCEx_PeriphCLKConfig>
  {
    ret = HAL_ERROR;
  }  
  return ret;
}
 80007f6:	3800      	subs	r0, #0
 80007f8:	bf18      	it	ne
 80007fa:	2001      	movne	r0, #1
 80007fc:	b014      	add	sp, #80	; 0x50
 80007fe:	bd10      	pop	{r4, pc}
    rccclkinit.PLLSAI1.PLLN = 86;   
 8000800:	2356      	movs	r3, #86	; 0x56
 8000802:	9301      	str	r3, [sp, #4]
    rccclkinit.PLLSAI1.PLLP = RCC_PLLP_DIV7;  
 8000804:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000808:	e7ef      	b.n	80007ea <MX_SAI_ClockConfig+0x22>
	...

0800080c <CCA02M2_AUDIO_IN_PDMToPCM_Init>:
* @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
* @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
* @retval BSP status
*/
__weak int32_t CCA02M2_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{  
 800080c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000810:	4690      	mov	r8, r2
 8000812:	4699      	mov	r9, r3
  if(Instance != 0U)
 8000814:	4607      	mov	r7, r0
 8000816:	2800      	cmp	r0, #0
 8000818:	d153      	bne.n	80008c2 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xb6>
    static int16_t aState_ARM[4][DECIMATOR_STATE_LENGTH];
    static int16_t aCoeffs[] = { -1406, 1634, -1943, 2386, -3080, 4325, -7223, 21690, 21690, -7223, 4325, -3080, 2386, -1943, 1634, -1406, };
#endif
    
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 800081a:	4c2b      	ldr	r4, [pc, #172]	; (80008c8 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xbc>)
      }
      else
      {
        PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
      }
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 800081c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80008cc <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xc0>
    __HAL_RCC_CRC_CLK_ENABLE();
 8000820:	f44f 5080 	mov.w	r0, #4096	; 0x1000
      PDM_FilterHandler[index].out_ptr_channels = (uint16_t)ChnlNbrOut;
      PDM_FilterHandler[index].in_ptr_channels  = (uint16_t)ChnlNbrIn;
      
      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = (uint16_t) ((AudioFreq/1000U) * N_MS_PER_INTERRUPT);
 8000824:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    __HAL_RCC_CRC_CLK_ENABLE();
 8000828:	f7ff ffc2 	bl	80007b0 <LL_AHB1_GRP1_EnableClock>
      PDM_FilterConfig[index].output_samples_number = (uint16_t) ((AudioFreq/1000U) * N_MS_PER_INTERRUPT);
 800082c:	fbb1 f1f6 	udiv	r1, r1, r6
 8000830:	f504 75d0 	add.w	r5, r4, #416	; 0x1a0
 8000834:	b28e      	uxth	r6, r1
      PDM_FilterConfig[index].mic_gain = 24;
      
      switch (AudioInCtx[0].DecimationFactor)
 8000836:	f5a4 7a96 	sub.w	sl, r4, #300	; 0x12c
    for(index = 0; index < ChnlNbrIn; index++)
 800083a:	45b8      	cmp	r8, r7
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	d027      	beq.n	8000892 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x86>
      if (ChnlNbrIn == 1U)
 8000842:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000846:	4253      	negs	r3, r2
 8000848:	4153      	adcs	r3, r2
 800084a:	8063      	strh	r3, [r4, #2]
      PDM_FilterConfig[index].mic_gain = 24;
 800084c:	2318      	movs	r3, #24
 800084e:	80ab      	strh	r3, [r5, #4]
      switch (AudioInCtx[0].DecimationFactor)
 8000850:	f8da 3060 	ldr.w	r3, [sl, #96]	; 0x60
      volatile uint32_t error = 0;
 8000854:	9001      	str	r0, [sp, #4]
      switch (AudioInCtx[0].DecimationFactor)
 8000856:	2b40      	cmp	r3, #64	; 0x40
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8000858:	8020      	strh	r0, [r4, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 800085a:	f8c4 b004 	str.w	fp, [r4, #4]
      PDM_FilterHandler[index].out_ptr_channels = (uint16_t)ChnlNbrOut;
 800085e:	f8a4 900a 	strh.w	r9, [r4, #10]
      PDM_FilterHandler[index].in_ptr_channels  = (uint16_t)ChnlNbrIn;
 8000862:	f8a4 8008 	strh.w	r8, [r4, #8]
      PDM_FilterConfig[index].output_samples_number = (uint16_t) ((AudioFreq/1000U) * N_MS_PER_INTERRUPT);
 8000866:	806e      	strh	r6, [r5, #2]
      switch (AudioInCtx[0].DecimationFactor)
 8000868:	d016      	beq.n	8000898 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x8c>
 800086a:	2b60      	cmp	r3, #96	; 0x60
 800086c:	d017      	beq.n	800089e <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x92>
      default:
        break;
      }  

#if (ENABLE_HIGH_PERFORMANCE_MODE == 1U)
      switch(AudioInCtx[0].BitsPerSample)
 800086e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8000872:	2b18      	cmp	r3, #24
 8000874:	d015      	beq.n	80008a2 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x96>
 8000876:	2b20      	cmp	r3, #32
 8000878:	d015      	beq.n	80008a6 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x9a>
 800087a:	2b10      	cmp	r3, #16
 800087c:	d101      	bne.n	8000882 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x76>
      {
      case AUDIO_RESOLUTION_16b:
        PDM_FilterConfig[index].bit_depth = PDM_FILTER_BITDEPTH_16;
 800087e:	2300      	movs	r3, #0
        break;
      case AUDIO_RESOLUTION_24b:
        PDM_FilterConfig[index].bit_depth = PDM_FILTER_BITDEPTH_24;
        break;
      case AUDIO_RESOLUTION_32b:
        PDM_FilterConfig[index].bit_depth = PDM_FILTER_BITDEPTH_24IN32;
 8000880:	80eb      	strh	r3, [r5, #6]
      default:
        break;        
      }
#endif
      
      error = PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8000882:	4620      	mov	r0, r4
 8000884:	f005 ffea 	bl	800685c <PDM_Filter_Init>
 8000888:	9001      	str	r0, [sp, #4]
      if (error!=0U)
 800088a:	9b01      	ldr	r3, [sp, #4]
 800088c:	b16b      	cbz	r3, 80008aa <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x9e>
      {
        return  BSP_ERROR_NO_INIT;
 800088e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      }
    }    
#endif
  } 
  return BSP_ERROR_NONE;
}
 8000892:	b003      	add	sp, #12
 8000894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64_HI_PERF;
 8000898:	2309      	movs	r3, #9
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_96_HI_PERF;
 800089a:	802b      	strh	r3, [r5, #0]
        break;
 800089c:	e7e7      	b.n	800086e <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x62>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_96_HI_PERF;
 800089e:	230a      	movs	r3, #10
 80008a0:	e7fb      	b.n	800089a <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x8e>
        PDM_FilterConfig[index].bit_depth = PDM_FILTER_BITDEPTH_24;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e7ec      	b.n	8000880 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x74>
        PDM_FilterConfig[index].bit_depth = PDM_FILTER_BITDEPTH_24IN32;
 80008a6:	2302      	movs	r3, #2
 80008a8:	e7ea      	b.n	8000880 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x74>
      error = PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 80008aa:	4629      	mov	r1, r5
 80008ac:	4620      	mov	r0, r4
 80008ae:	f006 f8df 	bl	8006a70 <PDM_Filter_setConfig>
 80008b2:	9001      	str	r0, [sp, #4]
      if (error!=0U)
 80008b4:	9b01      	ldr	r3, [sp, #4]
 80008b6:	3468      	adds	r4, #104	; 0x68
 80008b8:	3508      	adds	r5, #8
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1e7      	bne.n	800088e <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x82>
    for(index = 0; index < ChnlNbrIn; index++)
 80008be:	3701      	adds	r7, #1
 80008c0:	e7bb      	b.n	800083a <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x2e>
    return  BSP_ERROR_WRONG_PARAM;
 80008c2:	f06f 0001 	mvn.w	r0, #1
 80008c6:	e7e4      	b.n	8000892 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x86>
 80008c8:	200020e0 	.word	0x200020e0
 80008cc:	7e809d48 	.word	0x7e809d48

080008d0 <CCA02M2_AUDIO_IN_Init>:
{  
 80008d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80008d4:	2802      	cmp	r0, #2
{  
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	4606      	mov	r6, r0
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80008da:	d902      	bls.n	80008e2 <CCA02M2_AUDIO_IN_Init+0x12>
      switch (AudioInit->SampleRate)
 80008dc:	f06f 0001 	mvn.w	r0, #1
 80008e0:	e119      	b.n	8000b16 <CCA02M2_AUDIO_IN_Init+0x246>
    AudioInCtx[Instance].Device          = AudioInit->Device;
 80008e2:	4c97      	ldr	r4, [pc, #604]	; (8000b40 <CCA02M2_AUDIO_IN_Init+0x270>)
 80008e4:	680b      	ldr	r3, [r1, #0]
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 80008e6:	688d      	ldr	r5, [r1, #8]
    AudioInCtx[Instance].Device          = AudioInit->Device;
 80008e8:	2264      	movs	r2, #100	; 0x64
 80008ea:	fb02 4200 	mla	r2, r2, r0, r4
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;  
 80008ee:	68c8      	ldr	r0, [r1, #12]
    AudioInCtx[Instance].Device          = AudioInit->Device;
 80008f0:	6053      	str	r3, [r2, #4]
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate; 
 80008f2:	684b      	ldr	r3, [r1, #4]
    AudioInCtx[Instance].Volume          = AudioInit->Volume;
 80008f4:	6909      	ldr	r1, [r1, #16]
 80008f6:	6211      	str	r1, [r2, #32]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 80008f8:	2100      	movs	r1, #0
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;  
 80008fa:	6110      	str	r0, [r2, #16]
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate; 
 80008fc:	6093      	str	r3, [r2, #8]
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 80008fe:	60d5      	str	r5, [r2, #12]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 8000900:	6251      	str	r1, [r2, #36]	; 0x24
    if(Instance == 0U)
 8000902:	2e00      	cmp	r6, #0
 8000904:	f040 8110 	bne.w	8000b28 <CCA02M2_AUDIO_IN_Init+0x258>
      switch (AudioInit->SampleRate)
 8000908:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800090c:	f000 8106 	beq.w	8000b1c <CCA02M2_AUDIO_IN_Init+0x24c>
 8000910:	d809      	bhi.n	8000926 <CCA02M2_AUDIO_IN_Init+0x56>
 8000912:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000916:	f000 8104 	beq.w	8000b22 <CCA02M2_AUDIO_IN_Init+0x252>
 800091a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800091e:	d1dd      	bne.n	80008dc <CCA02M2_AUDIO_IN_Init+0xc>
        PDM_Clock_Freq = PDM_FREQ_16K;
 8000920:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000924:	e005      	b.n	8000932 <CCA02M2_AUDIO_IN_Init+0x62>
      switch (AudioInit->SampleRate)
 8000926:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800092a:	4293      	cmp	r3, r2
 800092c:	d1d6      	bne.n	80008dc <CCA02M2_AUDIO_IN_Init+0xc>
        PDM_Clock_Freq = 3072;
 800092e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
      AudioInCtx[Instance].DecimationFactor = (PDM_Clock_Freq * 1000U)/AudioInit->SampleRate;
 8000932:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
      if (AudioInCtx[Instance].ChannelsNbr == 1U)
 8000936:	2801      	cmp	r0, #1
      if(MX_SAI_ClockConfig(&hAudioInSai, PDM_Clock_Freq) != HAL_OK)
 8000938:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8000b4c <CCA02M2_AUDIO_IN_Init+0x27c>
      AudioInCtx[Instance].DecimationFactor = (PDM_Clock_Freq * 1000U)/AudioInit->SampleRate;
 800093c:	fb01 f505 	mul.w	r5, r1, r5
 8000940:	fbb5 f3f3 	udiv	r3, r5, r3
 8000944:	6623      	str	r3, [r4, #96]	; 0x60
      AudioInCtx[Instance].Size = (PDM_Clock_Freq/8U) * 2U * N_MS_PER_INTERRUPT;
 8000946:	ea4f 03d1 	mov.w	r3, r1, lsr #3
 800094a:	bf14      	ite	ne
 800094c:	005b      	lslne	r3, r3, #1
        AudioInCtx[Instance].Size *= 2U;
 800094e:	009b      	lsleq	r3, r3, #2
 8000950:	61e3      	str	r3, [r4, #28]
      if(MX_SAI_ClockConfig(&hAudioInSai, PDM_Clock_Freq) != HAL_OK)
 8000952:	4640      	mov	r0, r8
      __HAL_SAI_RESET_HANDLE_STATE(&hAudioInSai);
 8000954:	2300      	movs	r3, #0
 8000956:	f884 337d 	strb.w	r3, [r4, #893]	; 0x37d
      if(MX_SAI_ClockConfig(&hAudioInSai, PDM_Clock_Freq) != HAL_OK)
 800095a:	f7ff ff35 	bl	80007c8 <MX_SAI_ClockConfig>
 800095e:	2800      	cmp	r0, #0
 8000960:	f040 80e5 	bne.w	8000b2e <CCA02M2_AUDIO_IN_Init+0x25e>
      if(HAL_SAI_GetState(&hAudioInSai) == HAL_SAI_STATE_RESET)
 8000964:	4640      	mov	r0, r8
 8000966:	f003 f850 	bl	8003a0a <HAL_SAI_GetState>
 800096a:	4607      	mov	r7, r0
 800096c:	2800      	cmp	r0, #0
 800096e:	d171      	bne.n	8000a54 <CCA02M2_AUDIO_IN_Init+0x184>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
   AUDIO_IN_SAI_SCK_GPIO_CLK_ENABLE();
   AUDIO_IN_SAI_SD_GPIO_CLK_ENABLE();  
   
   /* SAI pins configuration: SCK and SD pins ------------------------------*/
   GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
   GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000974:	2002      	movs	r0, #2
 8000976:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000978:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800097c:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800097e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000980:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8000984:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000986:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800098a:	f042 0201 	orr.w	r2, r2, #1
 800098e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000992:	f002 0201 	and.w	r2, r2, #1
 8000996:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000998:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800099a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800099c:	f042 0201 	orr.w	r2, r2, #1
 80009a0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80009aa:	9b00      	ldr	r3, [sp, #0]
 80009ac:	2301      	movs	r3, #1
 80009ae:	e9cd 0304 	strd	r0, r3, [sp, #16]
   GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	f04f 0903 	mov.w	r9, #3
   
   GPIO_InitStruct.Pin       = AUDIO_IN_SAI_SCK_PIN;
 80009b6:	f44f 7b80 	mov.w	fp, #256	; 0x100
   GPIO_InitStruct.Alternate = AUDIO_IN_SAI_SCK_AF;
   HAL_GPIO_Init(AUDIO_IN_SAI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80009ba:	a903      	add	r1, sp, #12
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
   
   GPIO_InitStruct.Pin       = AUDIO_IN_SAI_SD_PIN ;
 80009c0:	f44f 6a80 	mov.w	sl, #1024	; 0x400
   GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	f8cd 9018 	str.w	r9, [sp, #24]
   GPIO_InitStruct.Pin       = AUDIO_IN_SAI_SCK_PIN;
 80009c8:	f8cd b00c 	str.w	fp, [sp, #12]
   GPIO_InitStruct.Alternate = AUDIO_IN_SAI_SCK_AF;
 80009cc:	f8cd 901c 	str.w	r9, [sp, #28]
   HAL_GPIO_Init(AUDIO_IN_SAI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80009d0:	f000 fc76 	bl	80012c0 <HAL_GPIO_Init>
   GPIO_InitStruct.Alternate = AUDIO_IN_SAI_SD_AF;
   HAL_GPIO_Init(AUDIO_IN_SAI_SD_GPIO_PORT, &GPIO_InitStruct);
 80009d4:	a903      	add	r1, sp, #12
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
   GPIO_InitStruct.Pin       = AUDIO_IN_SAI_SD_PIN ;
 80009da:	f8cd a00c 	str.w	sl, [sp, #12]
   GPIO_InitStruct.Alternate = AUDIO_IN_SAI_SD_AF;
 80009de:	f8cd 901c 	str.w	r9, [sp, #28]
   HAL_GPIO_Init(AUDIO_IN_SAI_SD_GPIO_PORT, &GPIO_InitStruct);
 80009e2:	f000 fc6d 	bl	80012c0 <HAL_GPIO_Init>
   
   GPIO_InitStruct.Pin     = AUDIO_IN_SAI_SD2_PIN ;
 80009e6:	f44f 7200 	mov.w	r2, #512	; 0x200
   GPIO_InitStruct.Alternate = AUDIO_IN_SAI_SD2_AF;
   HAL_GPIO_Init(AUDIO_IN_SAI_SD_GPIO_PORT, &GPIO_InitStruct);
 80009ea:	a903      	add	r1, sp, #12
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
   GPIO_InitStruct.Pin     = AUDIO_IN_SAI_SD2_PIN ;
 80009f0:	9203      	str	r2, [sp, #12]
   GPIO_InitStruct.Alternate = AUDIO_IN_SAI_SD2_AF;
 80009f2:	f8cd 901c 	str.w	r9, [sp, #28]
   HAL_GPIO_Init(AUDIO_IN_SAI_SD_GPIO_PORT, &GPIO_InitStruct);
 80009f6:	f000 fc63 	bl	80012c0 <HAL_GPIO_Init>
   
   /* Enable the DMA clock */
   /* DMA controller clock enable */
   __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009fa:	2004      	movs	r0, #4
 80009fc:	f7ff fed8 	bl	80007b0 <LL_AHB1_GRP1_EnableClock>
   __HAL_RCC_DMA1_CLK_ENABLE();  
 8000a00:	2301      	movs	r3, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fed4 	bl	80007b0 <LL_AHB1_GRP1_EnableClock>
   
   /* Configure the hSaiDma handle parameters */
   hSaiDma.Instance = DMA1_Channel1; /*tODO DEFINES */
   hSaiDma.Init.Request             = DMA_REQUEST_SAI1_A;
 8000a08:	f8df c144 	ldr.w	ip, [pc, #324]	; 8000b50 <CCA02M2_AUDIO_IN_Init+0x280>
   hSaiDma.Init.Direction           = DMA_PERIPH_TO_MEMORY;
   hSaiDma.Init.PeriphInc           = DMA_PINC_DISABLE;
   hSaiDma.Init.MemInc              = DMA_MINC_ENABLE;
   hSaiDma.Init.PeriphDataAlignment = AUDIO_IN_SAI_DMAx_PERIPH_DATA_SIZE;
   hSaiDma.Init.MemDataAlignment    = AUDIO_IN_SAI_DMAx_MEM_DATA_SIZE;
 8000a0c:	f8c4 a39c 	str.w	sl, [r4, #924]	; 0x39c
   hSaiDma.Init.Request             = DMA_REQUEST_SAI1_A;
 8000a10:	2312      	movs	r3, #18
 8000a12:	e9c4 c3e1 	strd	ip, r3, [r4, #900]	; 0x384
   hSaiDma.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000a16:	e9c4 77e3 	strd	r7, r7, [r4, #908]	; 0x38c
   hSaiDma.Init.MemInc              = DMA_MINC_ENABLE;
 8000a1a:	2380      	movs	r3, #128	; 0x80
   hSaiDma.Init.Mode                = DMA_CIRCULAR;
   hSaiDma.Init.Priority            = DMA_PRIORITY_HIGH;
   
   /* Associate the DMA handle */
   __HAL_LINKDMA(hsai, hdmarx, hSaiDma);    
 8000a1c:	f108 0798 	add.w	r7, r8, #152	; 0x98
   hSaiDma.Init.Priority            = DMA_PRIORITY_HIGH;
 8000a20:	f04f 0e20 	mov.w	lr, #32
   hSaiDma.Init.PeriphDataAlignment = AUDIO_IN_SAI_DMAx_PERIPH_DATA_SIZE;
 8000a24:	e9c4 3be5 	strd	r3, fp, [r4, #916]	; 0x394
   /* Deinitialize the Stream for new transfer */
   (void)HAL_DMA_DeInit(&hSaiDma);    
 8000a28:	4638      	mov	r0, r7
   hSaiDma.Init.Priority            = DMA_PRIORITY_HIGH;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	e9c4 e3e8 	strd	lr, r3, [r4, #928]	; 0x3a0
   __HAL_LINKDMA(hsai, hdmarx, hSaiDma);    
 8000a32:	f8c4 7370 	str.w	r7, [r4, #880]	; 0x370
 8000a36:	f8c4 83ac 	str.w	r8, [r4, #940]	; 0x3ac
   (void)HAL_DMA_DeInit(&hSaiDma);    
 8000a3a:	f000 fb5d 	bl	80010f8 <HAL_DMA_DeInit>
   /* Configure the DMA Stream */
   (void)HAL_DMA_Init(&hSaiDma);
 8000a3e:	4638      	mov	r0, r7
 8000a40:	f000 fae6 	bl	8001010 <HAL_DMA_Init>
   
   /* I2S DMA IRQ Channel configuration */
   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, CCA02M2_AUDIO_IN_IT_PRIORITY, CCA02M2_AUDIO_IN_IT_PRIORITY);
 8000a44:	2205      	movs	r2, #5
 8000a46:	200b      	movs	r0, #11
 8000a48:	4611      	mov	r1, r2
 8000a4a:	f000 fa43 	bl	8000ed4 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a4e:	200b      	movs	r0, #11
 8000a50:	f000 fa72 	bl	8000f38 <HAL_NVIC_EnableIRQ>
      __HAL_SAI_DISABLE(&hAudioInSai);
 8000a54:	4a3b      	ldr	r2, [pc, #236]	; (8000b44 <CCA02M2_AUDIO_IN_Init+0x274>)
      hAudioInSai.Instance = AUDIO_IN_SAI_INSTANCE;
 8000a56:	4b3c      	ldr	r3, [pc, #240]	; (8000b48 <CCA02M2_AUDIO_IN_Init+0x278>)
 8000a58:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
      __HAL_SAI_DISABLE(&hAudioInSai);
 8000a5c:	6853      	ldr	r3, [r2, #4]
      if (HAL_SAI_Init(&hAudioInSai) != HAL_OK)
 8000a5e:	483b      	ldr	r0, [pc, #236]	; (8000b4c <CCA02M2_AUDIO_IN_Init+0x27c>)
      __HAL_SAI_DISABLE(&hAudioInSai);
 8000a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a64:	6053      	str	r3, [r2, #4]
      hAudioInSai.Init.DataSize = SAI_DATASIZE_16;   
 8000a66:	2180      	movs	r1, #128	; 0x80
      hAudioInSai.Init.Protocol = SAI_FREE_PROTOCOL;
 8000a68:	2300      	movs	r3, #0
      hAudioInSai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000a6a:	e9c4 13cd 	strd	r1, r3, [r4, #820]	; 0x334
      hAudioInSai.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a6e:	e9c4 33c6 	strd	r3, r3, [r4, #792]	; 0x318
      hAudioInSai.Init.Protocol = SAI_FREE_PROTOCOL;
 8000a72:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
      hAudioInSai.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000a76:	f8c4 333c 	str.w	r3, [r4, #828]	; 0x33c
      hAudioInSai.Init.Synchro = SAI_ASYNCHRONOUS;
 8000a7a:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
      hAudioInSai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000a7e:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
      hAudioInSai.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000a82:	f8c4 3314 	str.w	r3, [r4, #788]	; 0x314
      hAudioInSai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;    
 8000a86:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
      hAudioInSai.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a8a:	f8c4 32f8 	str.w	r3, [r4, #760]	; 0x2f8
      hAudioInSai.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8000a8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a92:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
      hAudioInSai.FrameInit.FrameLength = 16;
 8000a96:	2310      	movs	r3, #16
 8000a98:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
      if ( AudioInCtx[Instance].ChannelsNbr <= 2U)
 8000a9c:	6923      	ldr	r3, [r4, #16]
 8000a9e:	2b02      	cmp	r3, #2
      hAudioInSai.Init.AudioMode = SAI_MODEMASTER_RX;
 8000aa0:	f04f 0201 	mov.w	r2, #1
        hAudioInSai.Init.PdmInit.MicPairsNbr = 2;
 8000aa4:	bf88      	it	hi
 8000aa6:	2302      	movhi	r3, #2
        hAudioInSai.Init.AudioFrequency = ((PDM_Clock_Freq * 1000U) / hAudioInSai.FrameInit.FrameLength ) * 2U;           
 8000aa8:	ea4f 1515 	mov.w	r5, r5, lsr #4
      hAudioInSai.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8000aac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
        hAudioInSai.Init.AudioFrequency = ((PDM_Clock_Freq * 1000U) / hAudioInSai.FrameInit.FrameLength ) * 2U;           
 8000ab0:	bf95      	itete	ls
 8000ab2:	4095      	lslls	r5, r2
        hAudioInSai.Init.AudioFrequency = ((PDM_Clock_Freq * 1000U) / hAudioInSai.FrameInit.FrameLength ) * 4U;       
 8000ab4:	409d      	lslhi	r5, r3
        hAudioInSai.Init.PdmInit.MicPairsNbr = 1;
 8000ab6:	f8c4 2328 	strls.w	r2, [r4, #808]	; 0x328
        hAudioInSai.Init.PdmInit.MicPairsNbr = 2;
 8000aba:	f8c4 3328 	strhi.w	r3, [r4, #808]	; 0x328
      hAudioInSai.Init.AudioMode = SAI_MODEMASTER_RX;
 8000abe:	f8c4 22f0 	str.w	r2, [r4, #752]	; 0x2f0
      hAudioInSai.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ac2:	2300      	movs	r3, #0
      hAudioInSai.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8000ac4:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
      hAudioInSai.Init.PdmInit.Activation = ENABLE;
 8000ac8:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
      hAudioInSai.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000acc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
      hAudioInSai.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	e9c4 23d1 	strd	r2, r3, [r4, #836]	; 0x344
      hAudioInSai.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ad6:	e9c4 13d3 	strd	r1, r3, [r4, #844]	; 0x34c
      hAudioInSai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ada:	e9c4 33d5 	strd	r3, r3, [r4, #852]	; 0x354
      hAudioInSai.SlotInit.SlotActive = 0x00000003;
 8000ade:	2303      	movs	r3, #3
        hAudioInSai.Init.AudioFrequency = ((PDM_Clock_Freq * 1000U) / hAudioInSai.FrameInit.FrameLength ) * 4U;       
 8000ae0:	f8c4 530c 	str.w	r5, [r4, #780]	; 0x30c
      hAudioInSai.SlotInit.SlotNumber = 1; 
 8000ae4:	f8c4 235c 	str.w	r2, [r4, #860]	; 0x35c
      hAudioInSai.SlotInit.SlotActive = 0x00000003;
 8000ae8:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
      if (HAL_SAI_Init(&hAudioInSai) != HAL_OK)
 8000aec:	f002 fe10 	bl	8003710 <HAL_SAI_Init>
 8000af0:	bb00      	cbnz	r0, 8000b34 <CCA02M2_AUDIO_IN_Init+0x264>
      __HAL_SAI_ENABLE(&hAudioInSai);
 8000af2:	f8d4 22ec 	ldr.w	r2, [r4, #748]	; 0x2ec
      if (CCA02M2_AUDIO_IN_PDMToPCM_Init(Instance, AudioInCtx[0].SampleRate, AudioInCtx[0].ChannelsNbr, AudioInCtx[0].ChannelsNbr)!= BSP_ERROR_NONE)
 8000af6:	68a1      	ldr	r1, [r4, #8]
      __HAL_SAI_ENABLE(&hAudioInSai);
 8000af8:	6813      	ldr	r3, [r2, #0]
 8000afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000afe:	6013      	str	r3, [r2, #0]
      if (CCA02M2_AUDIO_IN_PDMToPCM_Init(Instance, AudioInCtx[0].SampleRate, AudioInCtx[0].ChannelsNbr, AudioInCtx[0].ChannelsNbr)!= BSP_ERROR_NONE)
 8000b00:	6923      	ldr	r3, [r4, #16]
 8000b02:	461a      	mov	r2, r3
 8000b04:	f7ff fe82 	bl	800080c <CCA02M2_AUDIO_IN_PDMToPCM_Init>
 8000b08:	b9b8      	cbnz	r0, 8000b3a <CCA02M2_AUDIO_IN_Init+0x26a>
    AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP; 
 8000b0a:	2064      	movs	r0, #100	; 0x64
 8000b0c:	fb00 4406 	mla	r4, r0, r6, r4
 8000b10:	2302      	movs	r3, #2
 8000b12:	6263      	str	r3, [r4, #36]	; 0x24
  return BSP_ERROR_NONE;
 8000b14:	2000      	movs	r0, #0
}
 8000b16:	b009      	add	sp, #36	; 0x24
 8000b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PDM_Clock_Freq = 2048;
 8000b1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b20:	e707      	b.n	8000932 <CCA02M2_AUDIO_IN_Init+0x62>
      switch (AudioInit->SampleRate)
 8000b22:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000b26:	e704      	b.n	8000932 <CCA02M2_AUDIO_IN_Init+0x62>
    else if(Instance == 1U)
 8000b28:	2e01      	cmp	r6, #1
 8000b2a:	d1ee      	bne.n	8000b0a <CCA02M2_AUDIO_IN_Init+0x23a>
 8000b2c:	e6d6      	b.n	80008dc <CCA02M2_AUDIO_IN_Init+0xc>
        return  BSP_ERROR_CLOCK_FAILURE;
 8000b2e:	f06f 0008 	mvn.w	r0, #8
 8000b32:	e7f0      	b.n	8000b16 <CCA02M2_AUDIO_IN_Init+0x246>
        return  BSP_ERROR_PERIPH_FAILURE;
 8000b34:	f06f 0003 	mvn.w	r0, #3
 8000b38:	e7ed      	b.n	8000b16 <CCA02M2_AUDIO_IN_Init+0x246>
        return  BSP_ERROR_NO_INIT;
 8000b3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b3e:	e7ea      	b.n	8000b16 <CCA02M2_AUDIO_IN_Init+0x246>
 8000b40:	20001fb4 	.word	0x20001fb4
 8000b44:	40015400 	.word	0x40015400
 8000b48:	40015404 	.word	0x40015404
 8000b4c:	200022a0 	.word	0x200022a0
 8000b50:	40020008 	.word	0x40020008

08000b54 <CCA02M2_AUDIO_IN_PDMToPCM>:
{    
 8000b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b58:	4617      	mov	r7, r2
 8000b5a:	b08d      	sub	sp, #52	; 0x34
  if(Instance != 0U)
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d147      	bne.n	8000bf2 <CCA02M2_AUDIO_IN_PDMToPCM+0x9e>
 8000b62:	4e25      	ldr	r6, [pc, #148]	; (8000bf8 <CCA02M2_AUDIO_IN_PDMToPCM+0xa4>)
 8000b64:	460d      	mov	r5, r1
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8000b66:	f5a6 7896 	sub.w	r8, r6, #300	; 0x12c
        (void)arm_fir_decimate_q15 (&ARM_Decimator_State[index], (q15_t *)&(PDM_Filter_Out), (q15_t*)&(Decimate_Out), DECIMATOR_BLOCK_SIZE);
 8000b6a:	f506 792e 	add.w	r9, r6, #696	; 0x2b8
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8000b6e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	d803      	bhi.n	8000b7e <CCA02M2_AUDIO_IN_PDMToPCM+0x2a>
  return BSP_ERROR_NONE;
 8000b76:	2000      	movs	r0, #0
}
 8000b78:	b00d      	add	sp, #52	; 0x34
 8000b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (AudioInCtx[Instance].SampleRate == 8000U)
 8000b7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000b82:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b86:	d120      	bne.n	8000bca <CCA02M2_AUDIO_IN_PDMToPCM+0x76>
        (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], PDM_Filter_Out, &PDM_FilterHandler[index]);
 8000b88:	4632      	mov	r2, r6
 8000b8a:	a904      	add	r1, sp, #16
 8000b8c:	4628      	mov	r0, r5
 8000b8e:	f006 f843 	bl	8006c18 <PDM_Filter>
        (void)arm_fir_decimate_q15 (&ARM_Decimator_State[index], (q15_t *)&(PDM_Filter_Out), (q15_t*)&(Decimate_Out), DECIMATOR_BLOCK_SIZE);
 8000b92:	2310      	movs	r3, #16
 8000b94:	200c      	movs	r0, #12
 8000b96:	eb0d 0103 	add.w	r1, sp, r3
 8000b9a:	466a      	mov	r2, sp
 8000b9c:	fb00 9004 	mla	r0, r0, r4, r9
 8000ba0:	f006 f854 	bl	8006c4c <arm_fir_decimate_q15>
        for (ii=0; ii<(8U*N_MS_PER_INTERRUPT); ii++)
 8000ba4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8000ba8:	466b      	mov	r3, sp
 8000baa:	0050      	lsls	r0, r2, #1
 8000bac:	eb07 0144 	add.w	r1, r7, r4, lsl #1
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	3201      	adds	r2, #1
          PCMBuf[(ii * AudioInCtx[Instance].ChannelsNbr) + index] = Decimate_Out[ii];
 8000bb4:	f833 cb02 	ldrh.w	ip, [r3], #2
 8000bb8:	f8a1 c000 	strh.w	ip, [r1]
        for (ii=0; ii<(8U*N_MS_PER_INTERRUPT); ii++)
 8000bbc:	2a08      	cmp	r2, #8
 8000bbe:	4401      	add	r1, r0
 8000bc0:	d1f7      	bne.n	8000bb2 <CCA02M2_AUDIO_IN_PDMToPCM+0x5e>
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8000bc2:	3401      	adds	r4, #1
 8000bc4:	3501      	adds	r5, #1
 8000bc6:	3668      	adds	r6, #104	; 0x68
 8000bc8:	e7d1      	b.n	8000b6e <CCA02M2_AUDIO_IN_PDMToPCM+0x1a>
        switch(AudioInCtx[Instance].BitsPerSample)
 8000bca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000bce:	2b18      	cmp	r3, #24
 8000bd0:	d007      	beq.n	8000be2 <CCA02M2_AUDIO_IN_PDMToPCM+0x8e>
 8000bd2:	2b20      	cmp	r3, #32
 8000bd4:	d001      	beq.n	8000bda <CCA02M2_AUDIO_IN_PDMToPCM+0x86>
 8000bd6:	2b10      	cmp	r3, #16
 8000bd8:	d1f3      	bne.n	8000bc2 <CCA02M2_AUDIO_IN_PDMToPCM+0x6e>
          (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint32_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);          
 8000bda:	4632      	mov	r2, r6
 8000bdc:	eb07 0144 	add.w	r1, r7, r4, lsl #1
 8000be0:	e003      	b.n	8000bea <CCA02M2_AUDIO_IN_PDMToPCM+0x96>
          (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], &((uint8_t*)(PCMBuf))[3U*index], &PDM_FilterHandler[index]);          
 8000be2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8000be6:	4632      	mov	r2, r6
 8000be8:	4439      	add	r1, r7
          (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint32_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);          
 8000bea:	4628      	mov	r0, r5
 8000bec:	f006 f814 	bl	8006c18 <PDM_Filter>
          break;
 8000bf0:	e7e7      	b.n	8000bc2 <CCA02M2_AUDIO_IN_PDMToPCM+0x6e>
    return  BSP_ERROR_WRONG_PARAM;
 8000bf2:	f06f 0001 	mvn.w	r0, #1
 8000bf6:	e7bf      	b.n	8000b78 <CCA02M2_AUDIO_IN_PDMToPCM+0x24>
 8000bf8:	200020e0 	.word	0x200020e0

08000bfc <CCA02M2_AUDIO_IN_Record>:
  if(Instance >= (AUDIO_IN_INSTANCES_NBR - 1U) )
 8000bfc:	2801      	cmp	r0, #1
{  
 8000bfe:	b510      	push	{r4, lr}
  if(Instance >= (AUDIO_IN_INSTANCES_NBR - 1U) )
 8000c00:	d902      	bls.n	8000c08 <CCA02M2_AUDIO_IN_Record+0xc>
    return BSP_ERROR_WRONG_PARAM;
 8000c02:	f06f 0001 	mvn.w	r0, #1
}
 8000c06:	bd10      	pop	{r4, pc}
    AudioInCtx[Instance].pBuff = (uint16_t*)pBuf;
 8000c08:	4c0c      	ldr	r4, [pc, #48]	; (8000c3c <CCA02M2_AUDIO_IN_Record+0x40>)
 8000c0a:	2364      	movs	r3, #100	; 0x64
 8000c0c:	fb03 4300 	mla	r3, r3, r0, r4
 8000c10:	6159      	str	r1, [r3, #20]
    if(Instance == 0U)
 8000c12:	2800      	cmp	r0, #0
 8000c14:	d1f5      	bne.n	8000c02 <CCA02M2_AUDIO_IN_Record+0x6>
      if(HAL_SAI_Receive_DMA(&hAudioInSai, (uint8_t *)SAI_InternalBuffer, (uint16_t)(AudioInCtx[Instance].Size/2U * AudioInCtx[Instance].ChannelsNbr)) != HAL_OK)
 8000c16:	69e2      	ldr	r2, [r4, #28]
 8000c18:	6923      	ldr	r3, [r4, #16]
 8000c1a:	0852      	lsrs	r2, r2, #1
 8000c1c:	fb12 f203 	smulbb	r2, r2, r3
 8000c20:	b292      	uxth	r2, r2
 8000c22:	f204 4114 	addw	r1, r4, #1044	; 0x414
 8000c26:	f504 703b 	add.w	r0, r4, #748	; 0x2ec
 8000c2a:	f002 fe5f 	bl	80038ec <HAL_SAI_Receive_DMA>
 8000c2e:	b910      	cbnz	r0, 8000c36 <CCA02M2_AUDIO_IN_Record+0x3a>
      AudioInCtx[Instance].State = AUDIO_IN_STATE_RECORDING;           
 8000c30:	2301      	movs	r3, #1
 8000c32:	6263      	str	r3, [r4, #36]	; 0x24
  return BSP_ERROR_NONE;
 8000c34:	e7e7      	b.n	8000c06 <CCA02M2_AUDIO_IN_Record+0xa>
        return BSP_ERROR_PERIPH_FAILURE;
 8000c36:	f06f 0003 	mvn.w	r0, #3
 8000c3a:	e7e4      	b.n	8000c06 <CCA02M2_AUDIO_IN_Record+0xa>
 8000c3c:	20001fb4 	.word	0x20001fb4

08000c40 <CCA02M2_AUDIO_IN_SetVolume>:
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8000c40:	2802      	cmp	r0, #2
{
 8000c42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c46:	4604      	mov	r4, r0
 8000c48:	460f      	mov	r7, r1
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8000c4a:	d822      	bhi.n	8000c92 <CCA02M2_AUDIO_IN_SetVolume+0x52>
  else if (Instance == 0U)
 8000c4c:	4d12      	ldr	r5, [pc, #72]	; (8000c98 <CCA02M2_AUDIO_IN_SetVolume+0x58>)
 8000c4e:	b9d8      	cbnz	r0, 8000c88 <CCA02M2_AUDIO_IN_SetVolume+0x48>
      if (PDM_FilterConfig[index].mic_gain != VolumeGain[Volume])
 8000c50:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8000c9c <CCA02M2_AUDIO_IN_SetVolume+0x5c>
 8000c54:	f505 7633 	add.w	r6, r5, #716	; 0x2cc
 8000c58:	f505 7896 	add.w	r8, r5, #300	; 0x12c
    for (index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8000c5c:	692b      	ldr	r3, [r5, #16]
 8000c5e:	42a3      	cmp	r3, r4
 8000c60:	d802      	bhi.n	8000c68 <CCA02M2_AUDIO_IN_SetVolume+0x28>
  return BSP_ERROR_NONE;  
 8000c62:	2000      	movs	r0, #0
}
 8000c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (PDM_FilterConfig[index].mic_gain != VolumeGain[Volume])
 8000c68:	f939 3017 	ldrsh.w	r3, [r9, r7, lsl #1]
 8000c6c:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d004      	beq.n	8000c7e <CCA02M2_AUDIO_IN_SetVolume+0x3e>
        PDM_FilterConfig[index].mic_gain = VolumeGain[Volume];
 8000c74:	80b3      	strh	r3, [r6, #4]
        (void)PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8000c76:	4631      	mov	r1, r6
 8000c78:	4640      	mov	r0, r8
 8000c7a:	f005 fef9 	bl	8006a70 <PDM_Filter_setConfig>
    for (index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8000c7e:	3401      	adds	r4, #1
 8000c80:	3608      	adds	r6, #8
 8000c82:	f108 0868 	add.w	r8, r8, #104	; 0x68
 8000c86:	e7e9      	b.n	8000c5c <CCA02M2_AUDIO_IN_SetVolume+0x1c>
    AudioInCtx[Instance].Volume = Volume;
 8000c88:	2064      	movs	r0, #100	; 0x64
 8000c8a:	fb00 5404 	mla	r4, r0, r4, r5
 8000c8e:	6221      	str	r1, [r4, #32]
 8000c90:	e7e7      	b.n	8000c62 <CCA02M2_AUDIO_IN_SetVolume+0x22>
    return BSP_ERROR_WRONG_PARAM;
 8000c92:	f06f 0001 	mvn.w	r0, #1
 8000c96:	e7e5      	b.n	8000c64 <CCA02M2_AUDIO_IN_SetVolume+0x24>
 8000c98:	20001fb4 	.word	0x20001fb4
 8000c9c:	08007a46 	.word	0x08007a46

08000ca0 <HAL_SAI_RxCpltCallback>:
  switch(AudioInCtx[0].ChannelsNbr)
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <HAL_SAI_RxCpltCallback+0x8c>)
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	2a02      	cmp	r2, #2
{
 8000ca6:	b510      	push	{r4, lr}
  switch(AudioInCtx[0].ChannelsNbr)
 8000ca8:	d022      	beq.n	8000cf0 <HAL_SAI_RxCpltCallback+0x50>
 8000caa:	2a04      	cmp	r2, #4
 8000cac:	d02e      	beq.n	8000d0c <HAL_SAI_RxCpltCallback+0x6c>
 8000cae:	2a01      	cmp	r2, #1
 8000cb0:	d110      	bne.n	8000cd4 <HAL_SAI_RxCpltCallback+0x34>
      uint8_t * DataTempSAI = &(((uint8_t *)SAI_InternalBuffer)[AudioInCtx[0].Size/2U]) ;
 8000cb2:	69da      	ldr	r2, [r3, #28]
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]);
 8000cb4:	f203 4414 	addw	r4, r3, #1044	; 0x414
      for(index = 0; index < (AudioInCtx[0].Size/4U) ; index++)
 8000cb8:	2000      	movs	r0, #0
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]);
 8000cba:	eb04 0452 	add.w	r4, r4, r2, lsr #1
      for(index = 0; index < (AudioInCtx[0].Size/4U) ; index++)
 8000cbe:	69d9      	ldr	r1, [r3, #28]
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]);
 8000cc0:	695a      	ldr	r2, [r3, #20]
      for(index = 0; index < (AudioInCtx[0].Size/4U) ; index++)
 8000cc2:	ebb0 0f91 	cmp.w	r0, r1, lsr #2
 8000cc6:	d309      	bcc.n	8000cdc <HAL_SAI_RxCpltCallback+0x3c>
      for(index = 0; index < (AudioInCtx[0].Size/8U) ; index++)
 8000cc8:	08c9      	lsrs	r1, r1, #3
 8000cca:	4613      	mov	r3, r2
 8000ccc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d108      	bne.n	8000ce6 <HAL_SAI_RxCpltCallback+0x46>
  CCA02M2_AUDIO_IN_TransferComplete_CallBack(0);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff faa7 	bl	8000228 <CCA02M2_AUDIO_IN_TransferComplete_CallBack>
}
 8000cda:	bd10      	pop	{r4, pc}
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]);
 8000cdc:	f814 1010 	ldrb.w	r1, [r4, r0, lsl #1]
 8000ce0:	5411      	strb	r1, [r2, r0]
      for(index = 0; index < (AudioInCtx[0].Size/4U) ; index++)
 8000ce2:	3001      	adds	r0, #1
 8000ce4:	e7eb      	b.n	8000cbe <HAL_SAI_RxCpltCallback+0x1e>
        ((uint16_t *)(AudioInCtx[0].pBuff))[index] = HTONS(((uint16_t *)(AudioInCtx[0].pBuff))[index]);
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	ba52      	rev16	r2, r2
 8000cea:	f823 2b02 	strh.w	r2, [r3], #2
      for(index = 0; index < (AudioInCtx[0].Size/8U) ; index++)
 8000cee:	e7ef      	b.n	8000cd0 <HAL_SAI_RxCpltCallback+0x30>
      for(index = 0; index < (AudioInCtx[0].Size) ; index++)
 8000cf0:	69da      	ldr	r2, [r3, #28]
 8000cf2:	f203 4114 	addw	r1, r3, #1044	; 0x414
 8000cf6:	4411      	add	r1, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	69d8      	ldr	r0, [r3, #28]
 8000cfc:	4290      	cmp	r0, r2
 8000cfe:	d9e9      	bls.n	8000cd4 <HAL_SAI_RxCpltCallback+0x34>
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[index]);
 8000d00:	6958      	ldr	r0, [r3, #20]
 8000d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d06:	5484      	strb	r4, [r0, r2]
      for(index = 0; index < (AudioInCtx[0].Size) ; index++)
 8000d08:	3201      	adds	r2, #1
 8000d0a:	e7f6      	b.n	8000cfa <HAL_SAI_RxCpltCallback+0x5a>
      uint8_t * DataTempSAI = &(((uint8_t *)SAI_InternalBuffer)[AudioInCtx[0].Size  * 2U]) ;
 8000d0c:	69da      	ldr	r2, [r3, #28]
 8000d0e:	f203 4114 	addw	r1, r3, #1044	; 0x414
 8000d12:	eb01 0142 	add.w	r1, r1, r2, lsl #1
      for(index = 0; index < (AudioInCtx[0].Size * 2U) ; index++)
 8000d16:	2200      	movs	r2, #0
 8000d18:	69d8      	ldr	r0, [r3, #28]
 8000d1a:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
 8000d1e:	d2d9      	bcs.n	8000cd4 <HAL_SAI_RxCpltCallback+0x34>
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[index]);
 8000d20:	6958      	ldr	r0, [r3, #20]
 8000d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d26:	5484      	strb	r4, [r0, r2]
      for(index = 0; index < (AudioInCtx[0].Size * 2U) ; index++)
 8000d28:	3201      	adds	r2, #1
 8000d2a:	e7f5      	b.n	8000d18 <HAL_SAI_RxCpltCallback+0x78>
 8000d2c:	20001fb4 	.word	0x20001fb4

08000d30 <HAL_SAI_RxHalfCpltCallback>:
  switch(AudioInCtx[0].ChannelsNbr)
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <HAL_SAI_RxHalfCpltCallback+0x7c>)
 8000d32:	691a      	ldr	r2, [r3, #16]
 8000d34:	2a02      	cmp	r2, #2
{
 8000d36:	b510      	push	{r4, lr}
  switch(AudioInCtx[0].ChannelsNbr)
 8000d38:	d014      	beq.n	8000d64 <HAL_SAI_RxHalfCpltCallback+0x34>
 8000d3a:	2a04      	cmp	r2, #4
 8000d3c:	d005      	beq.n	8000d4a <HAL_SAI_RxHalfCpltCallback+0x1a>
 8000d3e:	2a01      	cmp	r2, #1
 8000d40:	d12b      	bne.n	8000d9a <HAL_SAI_RxHalfCpltCallback+0x6a>
 8000d42:	2000      	movs	r0, #0
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]); 
 8000d44:	f203 4414 	addw	r4, r3, #1044	; 0x414
 8000d48:	e01c      	b.n	8000d84 <HAL_SAI_RxHalfCpltCallback+0x54>
 8000d4a:	f203 4114 	addw	r1, r3, #1044	; 0x414
      for(index = 0; index < (AudioInCtx[0].Size * 2U); index++)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	69d8      	ldr	r0, [r3, #28]
 8000d52:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
 8000d56:	d220      	bcs.n	8000d9a <HAL_SAI_RxHalfCpltCallback+0x6a>
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[index]); 
 8000d58:	6958      	ldr	r0, [r3, #20]
 8000d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d5e:	5484      	strb	r4, [r0, r2]
      for(index = 0; index < (AudioInCtx[0].Size * 2U); index++)
 8000d60:	3201      	adds	r2, #1
 8000d62:	e7f5      	b.n	8000d50 <HAL_SAI_RxHalfCpltCallback+0x20>
 8000d64:	f203 4114 	addw	r1, r3, #1044	; 0x414
      for(index = 0; index < (AudioInCtx[0].Size); index++)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	69d8      	ldr	r0, [r3, #28]
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d914      	bls.n	8000d9a <HAL_SAI_RxHalfCpltCallback+0x6a>
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[index]); 
 8000d70:	6958      	ldr	r0, [r3, #20]
 8000d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d76:	5484      	strb	r4, [r0, r2]
      for(index = 0; index < (AudioInCtx[0].Size); index++)
 8000d78:	3201      	adds	r2, #1
 8000d7a:	e7f6      	b.n	8000d6a <HAL_SAI_RxHalfCpltCallback+0x3a>
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]); 
 8000d7c:	f814 1010 	ldrb.w	r1, [r4, r0, lsl #1]
 8000d80:	5411      	strb	r1, [r2, r0]
      for(index = 0; index < (AudioInCtx[0].Size/4U) ; index++)
 8000d82:	3001      	adds	r0, #1
 8000d84:	69d9      	ldr	r1, [r3, #28]
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]); 
 8000d86:	695a      	ldr	r2, [r3, #20]
      for(index = 0; index < (AudioInCtx[0].Size/4U) ; index++)
 8000d88:	ebb0 0f91 	cmp.w	r0, r1, lsr #2
 8000d8c:	d3f6      	bcc.n	8000d7c <HAL_SAI_RxHalfCpltCallback+0x4c>
      for(index = 0; index < (AudioInCtx[0].Size/8U) ; index++)
 8000d8e:	08c9      	lsrs	r1, r1, #3
 8000d90:	4613      	mov	r3, r2
 8000d92:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d103      	bne.n	8000da2 <HAL_SAI_RxHalfCpltCallback+0x72>
  CCA02M2_AUDIO_IN_HalfTransfer_CallBack(0);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff fa46 	bl	800022c <CCA02M2_AUDIO_IN_HalfTransfer_CallBack>
}
 8000da0:	bd10      	pop	{r4, pc}
        ((uint16_t *)(AudioInCtx[0].pBuff))[index] = HTONS(((uint16_t *)(AudioInCtx[0].pBuff))[index]);
 8000da2:	881a      	ldrh	r2, [r3, #0]
 8000da4:	ba52      	rev16	r2, r2
 8000da6:	f823 2b02 	strh.w	r2, [r3], #2
      for(index = 0; index < (AudioInCtx[0].Size/8U) ; index++)
 8000daa:	e7f4      	b.n	8000d96 <HAL_SAI_RxHalfCpltCallback+0x66>
 8000dac:	20001fb4 	.word	0x20001fb4

08000db0 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <SystemInit+0x60>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000db6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000dba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000dc6:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	f042 0201 	orr.w	r2, r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8000dd2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000dd6:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8000dde:	4462      	add	r2, ip
 8000de0:	4002      	ands	r2, r0
 8000de2:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000de4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000de8:	f022 0205 	bic.w	r2, r2, #5
 8000dec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000df0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000df4:	f022 0201 	bic.w	r2, r2, #1
 8000df8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000dfc:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x64>)
 8000dfe:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000e00:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e08:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e0a:	6199      	str	r1, [r3, #24]
}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	22041000 	.word	0x22041000

08000e18 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{   
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000e18:	4770      	bx	lr
	...

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 8000e1e:	4e0f      	ldr	r6, [pc, #60]	; (8000e5c <HAL_InitTick+0x40>)
 8000e20:	7833      	ldrb	r3, [r6, #0]
{
 8000e22:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000e24:	b90b      	cbnz	r3, 8000e2a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e26:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000e28:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e2a:	f001 faef 	bl	800240c <HAL_RCC_GetHCLKFreq>
 8000e2e:	7832      	ldrb	r2, [r6, #0]
 8000e30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e38:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e3c:	f000 f88a 	bl	8000f54 <HAL_SYSTICK_Config>
 8000e40:	4604      	mov	r4, r0
 8000e42:	2800      	cmp	r0, #0
 8000e44:	d1ef      	bne.n	8000e26 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	2d0f      	cmp	r5, #15
 8000e48:	d8ed      	bhi.n	8000e26 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	4629      	mov	r1, r5
 8000e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e52:	f000 f83f 	bl	8000ed4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e56:	6075      	str	r5, [r6, #4]
 8000e58:	4620      	mov	r0, r4
 8000e5a:	e7e5      	b.n	8000e28 <HAL_InitTick+0xc>
 8000e5c:	20000060 	.word	0x20000060

08000e60 <HAL_Init>:
{
 8000e60:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e62:	2003      	movs	r0, #3
 8000e64:	f000 f824 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e68:	200f      	movs	r0, #15
 8000e6a:	f7ff ffd7 	bl	8000e1c <HAL_InitTick>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	b918      	cbnz	r0, 8000e7a <HAL_Init+0x1a>
    HAL_MspInit();
 8000e72:	f7ff ffd1 	bl	8000e18 <HAL_MspInit>
}
 8000e76:	4620      	mov	r0, r4
 8000e78:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000e7a:	2401      	movs	r4, #1
 8000e7c:	e7fb      	b.n	8000e76 <HAL_Init+0x16>
	...

08000e80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000e80:	4a03      	ldr	r2, [pc, #12]	; (8000e90 <HAL_IncTick+0x10>)
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <HAL_IncTick+0x14>)
 8000e84:	6811      	ldr	r1, [r2, #0]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	440b      	add	r3, r1
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20002fe0 	.word	0x20002fe0
 8000e94:	20000060 	.word	0x20000060

08000e98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e98:	4b01      	ldr	r3, [pc, #4]	; (8000ea0 <HAL_GetTick+0x8>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20002fe0 	.word	0x20002fe0

08000ea4 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8000ea4:	4b01      	ldr	r3, [pc, #4]	; (8000eac <HAL_GetTickPrio+0x8>)
 8000ea6:	6858      	ldr	r0, [r3, #4]
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000060 	.word	0x20000060

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000eb2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ecc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed6:	b530      	push	{r4, r5, lr}
 8000ed8:	68dc      	ldr	r4, [r3, #12]
 8000eda:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ede:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	2d04      	cmp	r5, #4
 8000ee6:	bf28      	it	cs
 8000ee8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef0:	bf8c      	ite	hi
 8000ef2:	3c03      	subhi	r4, #3
 8000ef4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef6:	fa03 f505 	lsl.w	r5, r3, r5
 8000efa:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efe:	40a3      	lsls	r3, r4
 8000f00:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000f06:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	bfac      	ite	ge
 8000f0e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	4a08      	ldrlt	r2, [pc, #32]	; (8000f34 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	bfb8      	it	lt
 8000f1a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	bfaa      	itet	ge
 8000f22:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f2c:	bd30      	pop	{r4, r5, pc}
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00
 8000f34:	e000ed14 	.word	0xe000ed14

08000f38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f38:	2800      	cmp	r0, #0
 8000f3a:	db08      	blt.n	8000f4e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	0942      	lsrs	r2, r0, #5
 8000f40:	f000 001f 	and.w	r0, r0, #31
 8000f44:	fa03 f000 	lsl.w	r0, r3, r0
 8000f48:	4b01      	ldr	r3, [pc, #4]	; (8000f50 <HAL_NVIC_EnableIRQ+0x18>)
 8000f4a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	3801      	subs	r0, #1
 8000f56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f5a:	d20b      	bcs.n	8000f74 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	21f0      	movs	r1, #240	; 0xf0
 8000f66:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f70:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f72:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f74:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000f80:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	bf0c      	ite	eq
 8000f86:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f8a:	f022 0204 	bicne.w	r2, r2, #4
 8000f8e:	611a      	str	r2, [r3, #16]
  }
}
 8000f90:	4770      	bx	lr

08000f92 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f92:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f94:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 8000f98:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000f9a:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8000f9c:	b114      	cbz	r4, 8000fa4 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f9e:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 8000fa2:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000fa4:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
 8000fa8:	f004 061c 	and.w	r6, r4, #28
 8000fac:	2401      	movs	r4, #1
 8000fae:	40b4      	lsls	r4, r6
 8000fb0:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fb2:	6804      	ldr	r4, [r0, #0]
 8000fb4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fb6:	6883      	ldr	r3, [r0, #8]
 8000fb8:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fba:	bf0b      	itete	eq
 8000fbc:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000fbe:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000fc0:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000fc2:	60e2      	strne	r2, [r4, #12]
  }
}
 8000fc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000fc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000fc8:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8000fca:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000fcc:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000fce:	4293      	cmp	r3, r2
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000fd0:	bf88      	it	hi
 8000fd2:	4a0d      	ldrhi	r2, [pc, #52]	; (8001008 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000fd4:	f021 0103 	bic.w	r1, r1, #3
 8000fd8:	bf9a      	itte	ls
 8000fda:	f101 4280 	addls.w	r2, r1, #1073741824	; 0x40000000
 8000fde:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000fe2:	1852      	addhi	r2, r2, r1
 8000fe4:	6482      	str	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000fe6:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8000fea:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000fec:	3b08      	subs	r3, #8
 8000fee:	2214      	movs	r2, #20
 8000ff0:	fbb3 f3f2 	udiv	r3, r3, r2

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f003 031f 	and.w	r3, r3, #31
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40020407 	.word	0x40020407
 8001008:	4002081c 	.word	0x4002081c
 800100c:	40020880 	.word	0x40020880

08001010 <HAL_DMA_Init>:
{
 8001010:	b510      	push	{r4, lr}
  if (hdma == NULL)
 8001012:	2800      	cmp	r0, #0
 8001014:	d05f      	beq.n	80010d6 <HAL_DMA_Init+0xc6>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001016:	6801      	ldr	r1, [r0, #0]
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <HAL_DMA_Init+0xcc>)
 800101a:	4299      	cmp	r1, r3
 800101c:	f04f 0414 	mov.w	r4, #20
 8001020:	d84c      	bhi.n	80010bc <HAL_DMA_Init+0xac>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001022:	4a2f      	ldr	r2, [pc, #188]	; (80010e0 <HAL_DMA_Init+0xd0>)
 8001024:	440a      	add	r2, r1
 8001026:	fbb2 f2f4 	udiv	r2, r2, r4
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800102e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001032:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001034:	2302      	movs	r3, #2
 8001036:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800103a:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
 800103e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001040:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 8001042:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001044:	4323      	orrs	r3, r4
 8001046:	6944      	ldr	r4, [r0, #20]
 8001048:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800104a:	6984      	ldr	r4, [r0, #24]
 800104c:	4323      	orrs	r3, r4
 800104e:	69c4      	ldr	r4, [r0, #28]
 8001050:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001052:	6a04      	ldr	r4, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001054:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001058:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800105c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800105e:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001060:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001062:	f7ff ffb1 	bl	8000fc8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001066:	6883      	ldr	r3, [r0, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001068:	6c81      	ldr	r1, [r0, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800106a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800106e:	bf04      	itt	eq
 8001070:	2300      	moveq	r3, #0
 8001072:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001074:	6842      	ldr	r2, [r0, #4]
 8001076:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800107a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800107c:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001080:	3a01      	subs	r2, #1
 8001082:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001084:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001086:	d821      	bhi.n	80010cc <HAL_DMA_Init+0xbc>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_DMA_Init+0xd4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800108a:	4917      	ldr	r1, [pc, #92]	; (80010e8 <HAL_DMA_Init+0xd8>)
 800108c:	6581      	str	r1, [r0, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800108e:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001090:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001092:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001094:	2101      	movs	r1, #1
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800109e:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80010a0:	6542      	str	r2, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80010a2:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80010a4:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <HAL_DMA_Init+0xdc>)
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010aa:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80010ac:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ae:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80010b0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80010b4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 80010b8:	4618      	mov	r0, r3
}
 80010ba:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_DMA_Init+0xe0>)
 80010be:	440b      	add	r3, r1
 80010c0:	fbb3 f3f4 	udiv	r3, r3, r4
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_DMA_Init+0xe4>)
 80010ca:	e7b2      	b.n	8001032 <HAL_DMA_Init+0x22>
    hdma->DMAmuxRequestGen = 0U;
 80010cc:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80010ce:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80010d2:	65c3      	str	r3, [r0, #92]	; 0x5c
 80010d4:	e7e9      	b.n	80010aa <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 80010d6:	2001      	movs	r0, #1
 80010d8:	e7ef      	b.n	80010ba <HAL_DMA_Init+0xaa>
 80010da:	bf00      	nop
 80010dc:	40020407 	.word	0x40020407
 80010e0:	bffdfff8 	.word	0xbffdfff8
 80010e4:	1000823f 	.word	0x1000823f
 80010e8:	40020940 	.word	0x40020940
 80010ec:	40020900 	.word	0x40020900
 80010f0:	bffdfbf8 	.word	0xbffdfbf8
 80010f4:	40020400 	.word	0x40020400

080010f8 <HAL_DMA_DeInit>:
{
 80010f8:	b538      	push	{r3, r4, r5, lr}
  if (NULL == hdma)
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d045      	beq.n	800118a <HAL_DMA_DeInit+0x92>
  __HAL_DMA_DISABLE(hdma);
 80010fe:	6801      	ldr	r1, [r0, #0]
 8001100:	680b      	ldr	r3, [r1, #0]
 8001102:	f023 0301 	bic.w	r3, r3, #1
 8001106:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_DMA_DeInit+0x98>)
 800110a:	4299      	cmp	r1, r3
 800110c:	f04f 0414 	mov.w	r4, #20
 8001110:	d833      	bhi.n	800117a <HAL_DMA_DeInit+0x82>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001112:	4a20      	ldr	r2, [pc, #128]	; (8001194 <HAL_DMA_DeInit+0x9c>)
 8001114:	440a      	add	r2, r1
 8001116:	fbb2 f2f4 	udiv	r2, r2, r4
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800111e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001122:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001124:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 8001128:	2401      	movs	r4, #1
 800112a:	f003 031c 	and.w	r3, r3, #28
 800112e:	fa04 f303 	lsl.w	r3, r4, r3
  hdma->Instance->CCR  = 0U;
 8001132:	2500      	movs	r5, #0
 8001134:	600d      	str	r5, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001136:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001138:	f7ff ff46 	bl	8000fc8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800113c:	6c83      	ldr	r3, [r0, #72]	; 0x48
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800113e:	6841      	ldr	r1, [r0, #4]
  hdma->DMAmuxChannel->CCR = 0U;
 8001140:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001142:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 8001146:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001148:	1e4a      	subs	r2, r1, #1
 800114a:	2a03      	cmp	r2, #3
 800114c:	d806      	bhi.n	800115c <HAL_DMA_DeInit+0x64>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_DMA_DeInit+0xa0>)
 8001150:	440b      	add	r3, r1
 8001152:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001154:	4094      	lsls	r4, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001156:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_DMA_DeInit+0xa4>)
 800115a:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->DMAmuxRequestGen = 0U;
 800115c:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800115e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->DMAmuxRequestGenStatus = 0U;
 8001160:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  hdma->XferHalfCpltCallback = NULL;
 8001164:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hdma->XferAbortCallback = NULL;
 8001168:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800116c:	65c3      	str	r3, [r0, #92]	; 0x5c
  hdma->State = HAL_DMA_STATE_RESET;
 800116e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001172:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  return HAL_OK;
 8001176:	4618      	mov	r0, r3
}
 8001178:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_DMA_DeInit+0xa8>)
 800117c:	440b      	add	r3, r1
 800117e:	fbb3 f3f4 	udiv	r3, r3, r4
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <HAL_DMA_DeInit+0xac>)
 8001188:	e7cb      	b.n	8001122 <HAL_DMA_DeInit+0x2a>
    return HAL_ERROR;
 800118a:	2001      	movs	r0, #1
 800118c:	e7f4      	b.n	8001178 <HAL_DMA_DeInit+0x80>
 800118e:	bf00      	nop
 8001190:	40020407 	.word	0x40020407
 8001194:	bffdfff8 	.word	0xbffdfff8
 8001198:	1000823f 	.word	0x1000823f
 800119c:	40020900 	.word	0x40020900
 80011a0:	bffdfbf8 	.word	0xbffdfbf8
 80011a4:	40020400 	.word	0x40020400

080011a8 <HAL_DMA_Start_IT>:
{
 80011a8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80011aa:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 80011ae:	2d01      	cmp	r5, #1
{
 80011b0:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80011b2:	d039      	beq.n	8001228 <HAL_DMA_Start_IT+0x80>
 80011b4:	2501      	movs	r5, #1
 80011b6:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80011ba:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 80011be:	2d01      	cmp	r5, #1
 80011c0:	f04f 0600 	mov.w	r6, #0
 80011c4:	f04f 0502 	mov.w	r5, #2
 80011c8:	d12c      	bne.n	8001224 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80011ca:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ce:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80011d0:	6806      	ldr	r6, [r0, #0]
 80011d2:	6835      	ldr	r5, [r6, #0]
 80011d4:	f025 0501 	bic.w	r5, r5, #1
 80011d8:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011da:	f7ff feda 	bl	8000f92 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80011de:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80011e0:	6803      	ldr	r3, [r0, #0]
 80011e2:	b1ba      	cbz	r2, 8001214 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011ea:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80011ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80011ee:	6811      	ldr	r1, [r2, #0]
 80011f0:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80011f2:	bf42      	ittt	mi
 80011f4:	6811      	ldrmi	r1, [r2, #0]
 80011f6:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 80011fa:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80011fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80011fe:	b11a      	cbz	r2, 8001208 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001200:	6811      	ldr	r1, [r2, #0]
 8001202:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001206:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	f042 0201 	orr.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001210:	2000      	movs	r0, #0
}
 8001212:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f022 0204 	bic.w	r2, r2, #4
 800121a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	f042 020a 	orr.w	r2, r2, #10
 8001222:	e7e2      	b.n	80011ea <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8001224:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001228:	2002      	movs	r0, #2
 800122a:	e7f2      	b.n	8001212 <HAL_DMA_Start_IT+0x6a>

0800122c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800122c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800122e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001230:	6803      	ldr	r3, [r0, #0]
{
 8001232:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001234:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001238:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800123a:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800123c:	2404      	movs	r4, #4
 800123e:	4094      	lsls	r4, r2
 8001240:	4234      	tst	r4, r6
 8001242:	d00e      	beq.n	8001262 <HAL_DMA_IRQHandler+0x36>
 8001244:	f015 0f04 	tst.w	r5, #4
 8001248:	d00b      	beq.n	8001262 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800124e:	bf5e      	ittt	pl
 8001250:	681a      	ldrpl	r2, [r3, #0]
 8001252:	f022 0204 	bicpl.w	r2, r2, #4
 8001256:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001258:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800125a:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800125c:	b373      	cbz	r3, 80012bc <HAL_DMA_IRQHandler+0x90>
}
 800125e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001260:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001262:	2402      	movs	r4, #2
 8001264:	4094      	lsls	r4, r2
 8001266:	4234      	tst	r4, r6
 8001268:	d012      	beq.n	8001290 <HAL_DMA_IRQHandler+0x64>
 800126a:	f015 0f02 	tst.w	r5, #2
 800126e:	d00f      	beq.n	8001290 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	0695      	lsls	r5, r2, #26
 8001274:	d406      	bmi.n	8001284 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	f022 020a 	bic.w	r2, r2, #10
 800127c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800127e:	2301      	movs	r3, #1
 8001280:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001284:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001286:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001288:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800128c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800128e:	e7e5      	b.n	800125c <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001290:	2408      	movs	r4, #8
 8001292:	4094      	lsls	r4, r2
 8001294:	4234      	tst	r4, r6
 8001296:	d011      	beq.n	80012bc <HAL_DMA_IRQHandler+0x90>
 8001298:	072c      	lsls	r4, r5, #28
 800129a:	d50f      	bpl.n	80012bc <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800129c:	681c      	ldr	r4, [r3, #0]
 800129e:	f024 040e 	bic.w	r4, r4, #14
 80012a2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012a4:	2301      	movs	r3, #1
 80012a6:	fa03 f202 	lsl.w	r2, r3, r2
 80012aa:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012ac:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80012ae:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80012b2:	2300      	movs	r3, #0
 80012b4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80012b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80012ba:	e7cf      	b.n	800125c <HAL_DMA_IRQHandler+0x30>
}
 80012bc:	bc70      	pop	{r4, r5, r6}
 80012be:	4770      	bx	lr

080012c0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c4:	4c57      	ldr	r4, [pc, #348]	; (8001424 <HAL_GPIO_Init+0x164>)
  uint32_t position = 0x00u;
 80012c6:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012c8:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012cc:	680a      	ldr	r2, [r1, #0]
 80012ce:	fa32 f503 	lsrs.w	r5, r2, r3
 80012d2:	d101      	bne.n	80012d8 <HAL_GPIO_Init+0x18>
      }
    }

    position++;
  }
}
 80012d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d8:	2501      	movs	r5, #1
 80012da:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80012de:	ea18 0202 	ands.w	r2, r8, r2
 80012e2:	f000 8094 	beq.w	800140e <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e6:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012e8:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ea:	f006 0503 	and.w	r5, r6, #3
 80012ee:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012f2:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f6:	1e6f      	subs	r7, r5, #1
 80012f8:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012fa:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012fe:	d832      	bhi.n	8001366 <HAL_GPIO_Init+0xa6>
        temp = GPIOx->OSPEEDR;
 8001300:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001302:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001306:	68cf      	ldr	r7, [r1, #12]
 8001308:	fa07 f70e 	lsl.w	r7, r7, lr
 800130c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001310:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001312:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001314:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001318:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800131c:	409f      	lsls	r7, r3
 800131e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001322:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001324:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001326:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132a:	688f      	ldr	r7, [r1, #8]
 800132c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001330:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001334:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8001336:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001338:	d117      	bne.n	800136a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3u];
 800133a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800133e:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001342:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001346:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800134a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800134e:	fa09 fb0a 	lsl.w	fp, r9, sl
 8001352:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001356:	690f      	ldr	r7, [r1, #16]
 8001358:	fa07 f70a 	lsl.w	r7, r7, sl
 800135c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8001360:	f8c8 7020 	str.w	r7, [r8, #32]
 8001364:	e001      	b.n	800136a <HAL_GPIO_Init+0xaa>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001366:	2d03      	cmp	r5, #3
 8001368:	d1dc      	bne.n	8001324 <HAL_GPIO_Init+0x64>
      temp = GPIOx->MODER;
 800136a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800136c:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001370:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001374:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001376:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 800137a:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800137c:	d047      	beq.n	800140e <HAL_GPIO_Init+0x14e>
        temp = SYSCFG->EXTICR[position >> 2u];
 800137e:	f023 0703 	bic.w	r7, r3, #3
 8001382:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001386:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800138a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800138e:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001390:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001394:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001398:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800139c:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013a0:	d037      	beq.n	8001412 <HAL_GPIO_Init+0x152>
 80013a2:	4d21      	ldr	r5, [pc, #132]	; (8001428 <HAL_GPIO_Init+0x168>)
 80013a4:	42a8      	cmp	r0, r5
 80013a6:	d036      	beq.n	8001416 <HAL_GPIO_Init+0x156>
 80013a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013ac:	42a8      	cmp	r0, r5
 80013ae:	d034      	beq.n	800141a <HAL_GPIO_Init+0x15a>
 80013b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013b4:	42a8      	cmp	r0, r5
 80013b6:	d032      	beq.n	800141e <HAL_GPIO_Init+0x15e>
 80013b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013bc:	42a8      	cmp	r0, r5
 80013be:	bf0c      	ite	eq
 80013c0:	2504      	moveq	r5, #4
 80013c2:	2507      	movne	r5, #7
 80013c4:	fa05 f50c 	lsl.w	r5, r5, ip
 80013c8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013cc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 80013ce:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80013d0:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d2:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80013d6:	bf0c      	ite	eq
 80013d8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80013da:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 80013dc:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80013de:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013e0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 80013e4:	bf0c      	ite	eq
 80013e6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80013e8:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 80013ea:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 80013ec:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f0:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 80013f4:	bf0c      	ite	eq
 80013f6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80013f8:	4315      	orrne	r5, r2
        EXTI->IMR1 = temp;
 80013fa:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        temp = EXTI->EMR1;
 80013fe:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001402:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 8001404:	bf54      	ite	pl
 8001406:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001408:	4315      	orrmi	r5, r2
        EXTI->EMR1 = temp;
 800140a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    position++;
 800140e:	3301      	adds	r3, #1
 8001410:	e75c      	b.n	80012cc <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001412:	2500      	movs	r5, #0
 8001414:	e7d6      	b.n	80013c4 <HAL_GPIO_Init+0x104>
 8001416:	2501      	movs	r5, #1
 8001418:	e7d4      	b.n	80013c4 <HAL_GPIO_Init+0x104>
 800141a:	2502      	movs	r5, #2
 800141c:	e7d2      	b.n	80013c4 <HAL_GPIO_Init+0x104>
 800141e:	2503      	movs	r5, #3
 8001420:	e7d0      	b.n	80013c4 <HAL_GPIO_Init+0x104>
 8001422:	bf00      	nop
 8001424:	58000800 	.word	0x58000800
 8001428:	48000400 	.word	0x48000400

0800142c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800142e:	4604      	mov	r4, r0
{
 8001430:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001432:	2800      	cmp	r0, #0
 8001434:	d058      	beq.n	80014e8 <HAL_PCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001436:	f890 32ad 	ldrb.w	r3, [r0, #685]	; 0x2ad
 800143a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800143e:	b91b      	cbnz	r3, 8001448 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001440:	f880 22ac 	strb.w	r2, [r0, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001444:	f7ff f80a 	bl	800045c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001448:	2303      	movs	r3, #3

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 800144a:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_BUSY;
 800144c:	f884 32ad 	strb.w	r3, [r4, #685]	; 0x2ad
  hpcd->Init.dma_enable = 0U;
 8001450:	6265      	str	r5, [r4, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001452:	6820      	ldr	r0, [r4, #0]
 8001454:	f002 fae5 	bl	8003a22 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001458:	462b      	mov	r3, r5
 800145a:	6866      	ldr	r6, [r4, #4]
 800145c:	2528      	movs	r5, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800145e:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001460:	4618      	mov	r0, r3
 8001462:	b2d9      	uxtb	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001464:	428e      	cmp	r6, r1
 8001466:	f103 0301 	add.w	r3, r3, #1
 800146a:	d823      	bhi.n	80014b4 <HAL_PCD_Init+0x88>
 800146c:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800146e:	2528      	movs	r5, #40	; 0x28
 8001470:	4619      	mov	r1, r3
 8001472:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001474:	4286      	cmp	r6, r0
 8001476:	f103 0301 	add.w	r3, r3, #1
 800147a:	d828      	bhi.n	80014ce <HAL_PCD_Init+0xa2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800147c:	f104 0610 	add.w	r6, r4, #16
 8001480:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001482:	466d      	mov	r5, sp
 8001484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001486:	e896 0003 	ldmia.w	r6, {r0, r1}
 800148a:	e885 0003 	stmia.w	r5, {r0, r1}
 800148e:	1d23      	adds	r3, r4, #4
 8001490:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001492:	6820      	ldr	r0, [r4, #0]
 8001494:	f002 facf 	bl	8003a36 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001498:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 800149a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800149c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80014a0:	f884 32ad 	strb.w	r3, [r4, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014a4:	69e3      	ldr	r3, [r4, #28]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d102      	bne.n	80014b0 <HAL_PCD_Init+0x84>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014aa:	4620      	mov	r0, r4
 80014ac:	f000 fe5a 	bl	8002164 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80014b0:	4628      	mov	r0, r5
 80014b2:	e01a      	b.n	80014ea <HAL_PCD_Init+0xbe>
    hpcd->IN_ep[i].is_in = 1U;
 80014b4:	fb05 4201 	mla	r2, r5, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014b8:	e9c2 000f 	strd	r0, r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].is_in = 1U;
 80014bc:	f882 702d 	strb.w	r7, [r2, #45]	; 0x2d
    hpcd->IN_ep[i].num = i;
 80014c0:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014c4:	8751      	strh	r1, [r2, #58]	; 0x3a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014c6:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
    hpcd->IN_ep[i].xfer_len = 0U;
 80014ca:	6450      	str	r0, [r2, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014cc:	e7c9      	b.n	8001462 <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].is_in = 0U;
 80014ce:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014d2:	e9c2 115f 	strd	r1, r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].is_in = 0U;
 80014d6:	f882 116d 	strb.w	r1, [r2, #365]	; 0x16d
    hpcd->OUT_ep[i].num = i;
 80014da:	f882 016c 	strb.w	r0, [r2, #364]	; 0x16c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014de:	f882 116f 	strb.w	r1, [r2, #367]	; 0x16f
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014e2:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e6:	e7c4      	b.n	8001472 <HAL_PCD_Init+0x46>
    return HAL_ERROR;
 80014e8:	2001      	movs	r0, #1
}
 80014ea:	b007      	add	sp, #28
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014ee:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80014f0:	f890 32ac 	ldrb.w	r3, [r0, #684]	; 0x2ac
 80014f4:	2b01      	cmp	r3, #1
{
 80014f6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80014f8:	d00c      	beq.n	8001514 <HAL_PCD_Start+0x26>
 80014fa:	2301      	movs	r3, #1
 80014fc:	f880 32ac 	strb.w	r3, [r0, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 8001500:	6800      	ldr	r0, [r0, #0]
 8001502:	f002 fa85 	bl	8003a10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001506:	6820      	ldr	r0, [r4, #0]
 8001508:	f002 fd48 	bl	8003f9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800150c:	2000      	movs	r0, #0
 800150e:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac

  return HAL_OK;
}
 8001512:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001514:	2002      	movs	r0, #2
 8001516:	e7fc      	b.n	8001512 <HAL_PCD_Start+0x24>

08001518 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001518:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800151a:	f890 22ac 	ldrb.w	r2, [r0, #684]	; 0x2ac
 800151e:	2a01      	cmp	r2, #1
{
 8001520:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001522:	d00b      	beq.n	800153c <HAL_PCD_SetAddress+0x24>
 8001524:	2201      	movs	r2, #1
 8001526:	f880 22ac 	strb.w	r2, [r0, #684]	; 0x2ac
  hpcd->USB_Address = address;
 800152a:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800152e:	6800      	ldr	r0, [r0, #0]
 8001530:	f002 fd2e 	bl	8003f90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001534:	2000      	movs	r0, #0
 8001536:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac

  return HAL_OK;
}
 800153a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800153c:	2002      	movs	r0, #2
 800153e:	e7fc      	b.n	800153a <HAL_PCD_SetAddress+0x22>

08001540 <HAL_PCD_IRQHandler>:
{
 8001540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001544:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001546:	6800      	ldr	r0, [r0, #0]
 8001548:	f002 fd33 	bl	8003fb2 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800154c:	f410 4100 	ands.w	r1, r0, #32768	; 0x8000
 8001550:	f000 8433 	beq.w	8001dba <HAL_PCD_IRQHandler+0x87a>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001554:	f8df 8318 	ldr.w	r8, [pc, #792]	; 8001870 <HAL_PCD_IRQHandler+0x330>
 8001558:	4fc4      	ldr	r7, [pc, #784]	; (800186c <HAL_PCD_IRQHandler+0x32c>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800155a:	6820      	ldr	r0, [r4, #0]
 800155c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	d402      	bmi.n	800156a <HAL_PCD_IRQHandler+0x2a>
}
 8001564:	b003      	add	sp, #12
 8001566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 800156a:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 800156e:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8001570:	f015 050f 	ands.w	r5, r5, #15
 8001574:	f040 80be 	bne.w	80016f4 <HAL_PCD_IRQHandler+0x1b4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001578:	f011 0110 	ands.w	r1, r1, #16
 800157c:	d12a      	bne.n	80015d4 <HAL_PCD_IRQHandler+0x94>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800157e:	8803      	ldrh	r3, [r0, #0]
 8001580:	b29b      	uxth	r3, r3
 8001582:	ea03 0308 	and.w	r3, r3, r8
 8001586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800158a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800158c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001590:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8001594:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8001598:	fa10 f383 	uxtah	r3, r0, r3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800159c:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800159e:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 80015a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015a8:	64a3      	str	r3, [r4, #72]	; 0x48
        ep->xfer_buff += ep->xfer_count;
 80015aa:	4413      	add	r3, r2
 80015ac:	6423      	str	r3, [r4, #64]	; 0x40
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015ae:	f7fe ffa6 	bl	80004fe <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0cf      	beq.n	800155a <HAL_PCD_IRQHandler+0x1a>
 80015ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d1cc      	bne.n	800155a <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80015c4:	6821      	ldr	r1, [r4, #0]
 80015c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ca:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80015ce:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 80015d2:	e7c2      	b.n	800155a <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80015d4:	8805      	ldrh	r5, [r0, #0]
 80015d6:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80015d8:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 80015dc:	d020      	beq.n	8001620 <HAL_PCD_IRQHandler+0xe0>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015de:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015e2:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
 80015e6:	f200 4106 	addw	r1, r0, #1030	; 0x406
 80015ea:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015ee:	f504 712d 	add.w	r1, r4, #692	; 0x2b4
 80015f2:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 80015f6:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
 80015fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015fe:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001602:	f002 ff07 	bl	8004414 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001606:	6822      	ldr	r2, [r4, #0]
 8001608:	8813      	ldrh	r3, [r2, #0]
 800160a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800160e:	051b      	lsls	r3, r3, #20
 8001610:	0d1b      	lsrs	r3, r3, #20
 8001612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001616:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001618:	4620      	mov	r0, r4
 800161a:	f7fe ff61 	bl	80004e0 <HAL_PCD_SetupStageCallback>
 800161e:	e79c      	b.n	800155a <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001620:	0419      	lsls	r1, r3, #16
 8001622:	d59a      	bpl.n	800155a <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001624:	8803      	ldrh	r3, [r0, #0]
 8001626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800162a:	051b      	lsls	r3, r3, #20
 800162c:	0d1b      	lsrs	r3, r3, #20
 800162e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001632:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001634:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001638:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
 800163c:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001640:	fa11 f383 	uxtah	r3, r1, r3
 8001644:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800164c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001650:	b18b      	cbz	r3, 8001676 <HAL_PCD_IRQHandler+0x136>
 8001652:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 8001656:	b171      	cbz	r1, 8001676 <HAL_PCD_IRQHandler+0x136>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001658:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
 800165c:	f002 feda 	bl	8004414 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001660:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001664:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8001668:	4413      	add	r3, r2
 800166a:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800166e:	4629      	mov	r1, r5
 8001670:	4620      	mov	r0, r4
 8001672:	f7fe ff3b 	bl	80004ec <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001676:	6821      	ldr	r1, [r4, #0]
 8001678:	880a      	ldrh	r2, [r1, #0]
 800167a:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800167c:	0512      	lsls	r2, r2, #20
 800167e:	f53f af6c 	bmi.w	800155a <HAL_PCD_IRQHandler+0x1a>
 8001682:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001686:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800168a:	f43f af66 	beq.w	800155a <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800168e:	f8d4 517c 	ldr.w	r5, [r4, #380]	; 0x17c
 8001692:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001696:	2d3e      	cmp	r5, #62	; 0x3e
 8001698:	b29b      	uxth	r3, r3
 800169a:	f201 4006 	addw	r0, r1, #1030	; 0x406
 800169e:	d908      	bls.n	80016b2 <HAL_PCD_IRQHandler+0x172>
 80016a0:	096a      	lsrs	r2, r5, #5
 80016a2:	06ee      	lsls	r6, r5, #27
 80016a4:	bf08      	it	eq
 80016a6:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80016aa:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 80016ae:	b292      	uxth	r2, r2
 80016b0:	e00a      	b.n	80016c8 <HAL_PCD_IRQHandler+0x188>
 80016b2:	b9cd      	cbnz	r5, 80016e8 <HAL_PCD_IRQHandler+0x1a8>
 80016b4:	5ac2      	ldrh	r2, [r0, r3]
 80016b6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80016ba:	0412      	lsls	r2, r2, #16
 80016bc:	0c12      	lsrs	r2, r2, #16
 80016be:	52c2      	strh	r2, [r0, r3]
 80016c0:	5ac2      	ldrh	r2, [r0, r3]
 80016c2:	b292      	uxth	r2, r2
 80016c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016c8:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016ca:	880b      	ldrh	r3, [r1, #0]
 80016cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	0c1b      	lsrs	r3, r3, #16
 80016d8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80016dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	800b      	strh	r3, [r1, #0]
 80016e6:	e738      	b.n	800155a <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016e8:	086a      	lsrs	r2, r5, #1
 80016ea:	07ed      	lsls	r5, r5, #31
 80016ec:	bf48      	it	mi
 80016ee:	3201      	addmi	r2, #1
 80016f0:	0292      	lsls	r2, r2, #10
 80016f2:	e7dc      	b.n	80016ae <HAL_PCD_IRQHandler+0x16e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80016f4:	fa0f f985 	sxth.w	r9, r5
 80016f8:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016fc:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80016fe:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001700:	f140 80f6 	bpl.w	80018f0 <HAL_PCD_IRQHandler+0x3b0>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001704:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8001708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800170c:	051b      	lsls	r3, r3, #20
 800170e:	0d1b      	lsrs	r3, r3, #20
 8001710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8001714:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001716:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0U)
 800171a:	fb01 4105 	mla	r1, r1, r5, r4
 800171e:	f891 3178 	ldrb.w	r3, [r1, #376]	; 0x178
 8001722:	b9bb      	cbnz	r3, 8001754 <HAL_PCD_IRQHandler+0x214>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001724:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001728:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
 800172c:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8001730:	fa1c f383 	uxtah	r3, ip, r3
 8001734:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8001738:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 800173c:	f1ba 0f00 	cmp.w	sl, #0
 8001740:	f000 80ba 	beq.w	80018b8 <HAL_PCD_IRQHandler+0x378>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001744:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001748:	4653      	mov	r3, sl
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800174a:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 800174e:	f002 fe61 	bl	8004414 <USB_ReadPMA>
 8001752:	e0b1      	b.n	80018b8 <HAL_PCD_IRQHandler+0x378>
          if (ep->type == EP_TYPE_BULK)
 8001754:	f891 316f 	ldrb.w	r3, [r1, #367]	; 0x16f
 8001758:	2b02      	cmp	r3, #2
 800175a:	f891 316c 	ldrb.w	r3, [r1, #364]	; 0x16c
 800175e:	f040 8089 	bne.w	8001874 <HAL_PCD_IRQHandler+0x334>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001762:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50

    if (ep->xfer_len >= count)
 8001766:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800176a:	f416 4b80 	ands.w	fp, r6, #16384	; 0x4000
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800176e:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001772:	fa10 fc8c 	uxtah	ip, r0, ip
 8001776:	f006 0e40 	and.w	lr, r6, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800177a:	d03b      	beq.n	80017f4 <HAL_PCD_IRQHandler+0x2b4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800177c:	44e2      	add	sl, ip
 800177e:	f8ba a402 	ldrh.w	sl, [sl, #1026]	; 0x402
 8001782:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8001786:	4592      	cmp	sl, r2
 8001788:	d913      	bls.n	80017b2 <HAL_PCD_IRQHandler+0x272>
 800178a:	2200      	movs	r2, #0
 800178c:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001790:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001798:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800179c:	0412      	lsls	r2, r2, #16
 800179e:	0c12      	lsrs	r2, r2, #16
 80017a0:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80017a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017ac:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80017b0:	e005      	b.n	80017be <HAL_PCD_IRQHandler+0x27e>
      ep->xfer_len -= count;
 80017b2:	eba2 020a 	sub.w	r2, r2, sl
 80017b6:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    if (ep->xfer_len == 0U)
 80017ba:	2a00      	cmp	r2, #0
 80017bc:	d0e8      	beq.n	8001790 <HAL_PCD_IRQHandler+0x250>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017be:	f1be 0f00 	cmp.w	lr, #0
 80017c2:	d00d      	beq.n	80017e0 <HAL_PCD_IRQHandler+0x2a0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80017c4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017c8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80017cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017d0:	0412      	lsls	r2, r2, #16
 80017d2:	0c12      	lsrs	r2, r2, #16
 80017d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017d8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80017dc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80017e0:	f1ba 0f00 	cmp.w	sl, #0
 80017e4:	d068      	beq.n	80018b8 <HAL_PCD_IRQHandler+0x378>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017e6:	2128      	movs	r1, #40	; 0x28
 80017e8:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017ec:	f8b1 2174 	ldrh.w	r2, [r1, #372]	; 0x174
 80017f0:	4653      	mov	r3, sl
 80017f2:	e7aa      	b.n	800174a <HAL_PCD_IRQHandler+0x20a>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017f4:	44d4      	add	ip, sl
 80017f6:	f8bc a406 	ldrh.w	sl, [ip, #1030]	; 0x406
 80017fa:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 80017fe:	4592      	cmp	sl, r2
 8001800:	d912      	bls.n	8001828 <HAL_PCD_IRQHandler+0x2e8>
 8001802:	f8c1 b184 	str.w	fp, [r1, #388]	; 0x184
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001806:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800180a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800180e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001812:	0412      	lsls	r2, r2, #16
 8001814:	0c12      	lsrs	r2, r2, #16
 8001816:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800181a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800181e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001822:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001826:	e005      	b.n	8001834 <HAL_PCD_IRQHandler+0x2f4>
      ep->xfer_len -= count;
 8001828:	eba2 020a 	sub.w	r2, r2, sl
 800182c:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    if (ep->xfer_len == 0U)
 8001830:	2a00      	cmp	r2, #0
 8001832:	d0e8      	beq.n	8001806 <HAL_PCD_IRQHandler+0x2c6>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001834:	f1be 0f00 	cmp.w	lr, #0
 8001838:	d10d      	bne.n	8001856 <HAL_PCD_IRQHandler+0x316>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800183a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800183e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001842:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001846:	0412      	lsls	r2, r2, #16
 8001848:	0c12      	lsrs	r2, r2, #16
 800184a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800184e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001852:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8001856:	f1ba 0f00 	cmp.w	sl, #0
 800185a:	d02d      	beq.n	80018b8 <HAL_PCD_IRQHandler+0x378>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800185c:	2128      	movs	r1, #40	; 0x28
 800185e:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001862:	f8b1 2176 	ldrh.w	r2, [r1, #374]	; 0x176
 8001866:	4653      	mov	r3, sl
 8001868:	e76f      	b.n	800174a <HAL_PCD_IRQHandler+0x20a>
 800186a:	bf00      	nop
 800186c:	ffff8000 	.word	0xffff8000
 8001870:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001874:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001878:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800187c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001880:	0412      	lsls	r2, r2, #16
 8001882:	0c12      	lsrs	r2, r2, #16
 8001884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001888:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800188c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001890:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
 8001894:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001898:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800189c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018a0:	d062      	beq.n	8001968 <HAL_PCD_IRQHandler+0x428>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018a2:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 80018a6:	fa1c f383 	uxtah	r3, ip, r3
 80018aa:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 80018ae:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80018b2:	f1ba 0f00 	cmp.w	sl, #0
 80018b6:	d199      	bne.n	80017ec <HAL_PCD_IRQHandler+0x2ac>
        ep->xfer_count += count;
 80018b8:	2128      	movs	r1, #40	; 0x28
 80018ba:	fb01 4305 	mla	r3, r1, r5, r4
 80018be:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80018c2:	4452      	add	r2, sl
 80018c4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        ep->xfer_buff += count;
 80018c8:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80018cc:	4452      	add	r2, sl
 80018ce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018d2:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80018d6:	b11a      	cbz	r2, 80018e0 <HAL_PCD_IRQHandler+0x3a0>
 80018d8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80018dc:	459a      	cmp	sl, r3
 80018de:	d24f      	bcs.n	8001980 <HAL_PCD_IRQHandler+0x440>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80018e0:	2328      	movs	r3, #40	; 0x28
 80018e2:	fb03 4305 	mla	r3, r3, r5, r4
 80018e6:	4620      	mov	r0, r4
 80018e8:	f893 116c 	ldrb.w	r1, [r3, #364]	; 0x16c
 80018ec:	f7fe fdfe 	bl	80004ec <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80018f0:	0632      	lsls	r2, r6, #24
 80018f2:	f57f ae32 	bpl.w	800155a <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018f6:	6820      	ldr	r0, [r4, #0]
 80018f8:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	ea03 0308 	and.w	r3, r3, r8
 8001902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001906:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 800190a:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800190e:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 8001912:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8001916:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
 800191a:	2b01      	cmp	r3, #1
 800191c:	d15b      	bne.n	80019d6 <HAL_PCD_IRQHandler+0x496>
          ep->xfer_len = 0U;
 800191e:	fb0c 4c05 	mla	ip, ip, r5, r4
 8001922:	2500      	movs	r5, #0
          if (ep->doublebuffer != 0U)
 8001924:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
          ep->xfer_len = 0U;
 8001928:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
          if (ep->doublebuffer != 0U)
 800192c:	2b00      	cmp	r3, #0
 800192e:	d03a      	beq.n	80019a6 <HAL_PCD_IRQHandler+0x466>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001930:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8001934:	f899 302d 	ldrb.w	r3, [r9, #45]	; 0x2d
 8001938:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
 800193c:	d039      	beq.n	80019b2 <HAL_PCD_IRQHandler+0x472>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800193e:	bb3b      	cbnz	r3, 8001990 <HAL_PCD_IRQHandler+0x450>
 8001940:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001944:	f200 4002 	addw	r0, r0, #1026	; 0x402
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001948:	fa10 f083 	uxtah	r0, r0, r3
 800194c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8001950:	8803      	ldrh	r3, [r0, #0]
 8001952:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001956:	041b      	lsls	r3, r3, #16
 8001958:	0c1b      	lsrs	r3, r3, #16
 800195a:	8003      	strh	r3, [r0, #0]
 800195c:	8803      	ldrh	r3, [r0, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001964:	8003      	strh	r3, [r0, #0]
 8001966:	e01e      	b.n	80019a6 <HAL_PCD_IRQHandler+0x466>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001968:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 800196c:	fa1c f383 	uxtah	r3, ip, r3
 8001970:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8001974:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001978:	f1ba 0f00 	cmp.w	sl, #0
 800197c:	d09c      	beq.n	80018b8 <HAL_PCD_IRQHandler+0x378>
 800197e:	e770      	b.n	8001862 <HAL_PCD_IRQHandler+0x322>
        ep = &hpcd->OUT_ep[epindex];
 8001980:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001984:	6820      	ldr	r0, [r4, #0]
 8001986:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
 800198a:	f002 fb25 	bl	8003fd8 <USB_EPStartXfer>
 800198e:	e7af      	b.n	80018f0 <HAL_PCD_IRQHandler+0x3b0>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001990:	2b01      	cmp	r3, #1
 8001992:	d108      	bne.n	80019a6 <HAL_PCD_IRQHandler+0x466>
 8001994:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001998:	f200 4002 	addw	r0, r0, #1026	; 0x402
 800199c:	fa10 f082 	uxtah	r0, r0, r2
 80019a0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80019a4:	8005      	strh	r5, [r0, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019a6:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019aa:	4620      	mov	r0, r4
 80019ac:	f7fe fda7 	bl	80004fe <HAL_PCD_DataInStageCallback>
 80019b0:	e5d3      	b.n	800155a <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019b2:	b923      	cbnz	r3, 80019be <HAL_PCD_IRQHandler+0x47e>
 80019b4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019b8:	f200 4006 	addw	r0, r0, #1030	; 0x406
 80019bc:	e7c4      	b.n	8001948 <HAL_PCD_IRQHandler+0x408>
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d1f1      	bne.n	80019a6 <HAL_PCD_IRQHandler+0x466>
 80019c2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019c6:	f200 4006 	addw	r0, r0, #1030	; 0x406
 80019ca:	fa10 f383 	uxtah	r3, r0, r3
 80019ce:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 80019d2:	8006      	strh	r6, [r0, #0]
 80019d4:	e7e7      	b.n	80019a6 <HAL_PCD_IRQHandler+0x466>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019d6:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
            if (ep->xfer_len > TxPctSize)
 80019da:	fb0c 4e05 	mla	lr, ip, r5, r4
          if ((wEPVal & USB_EP_KIND) == 0U)
 80019de:	f416 7a80 	ands.w	sl, r6, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 80019e2:	f8de 3044 	ldr.w	r3, [lr, #68]	; 0x44
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019e6:	460a      	mov	r2, r1
 80019e8:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 80019ec:	d122      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x4f4>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019ee:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80019f2:	fa1b fb82 	uxtah	fp, fp, r2
 80019f6:	4483      	add	fp, r0
 80019f8:	f8bb 6402 	ldrh.w	r6, [fp, #1026]	; 0x402
            if (ep->xfer_len > TxPctSize)
 80019fc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8001a00:	429e      	cmp	r6, r3
 8001a02:	d302      	bcc.n	8001a0a <HAL_PCD_IRQHandler+0x4ca>
 8001a04:	f8ce a044 	str.w	sl, [lr, #68]	; 0x44
 8001a08:	e7cf      	b.n	80019aa <HAL_PCD_IRQHandler+0x46a>
              ep->xfer_len -= TxPctSize;
 8001a0a:	1b9b      	subs	r3, r3, r6
              ep->xfer_buff += TxPctSize;
 8001a0c:	f8de 2040 	ldr.w	r2, [lr, #64]	; 0x40
 8001a10:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
              ep->xfer_count += TxPctSize;
 8001a14:	f8de 3048 	ldr.w	r3, [lr, #72]	; 0x48
        ep = &hpcd->IN_ep[epindex];
 8001a18:	fb05 cc0c 	mla	ip, r5, ip, ip
              ep->xfer_buff += TxPctSize;
 8001a1c:	4432      	add	r2, r6
              ep->xfer_count += TxPctSize;
 8001a1e:	4433      	add	r3, r6
        ep = &hpcd->IN_ep[epindex];
 8001a20:	f10c 0104 	add.w	r1, ip, #4
              ep->xfer_buff += TxPctSize;
 8001a24:	f8ce 2040 	str.w	r2, [lr, #64]	; 0x40
              ep->xfer_count += TxPctSize;
 8001a28:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a2c:	4421      	add	r1, r4
 8001a2e:	f002 fad3 	bl	8003fd8 <USB_EPStartXfer>
 8001a32:	e592      	b.n	800155a <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a34:	f016 0a40 	ands.w	sl, r6, #64	; 0x40
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a38:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8001a3c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a40:	f000 80dc 	beq.w	8001bfc <HAL_PCD_IRQHandler+0x6bc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a44:	f200 4e02 	addw	lr, r0, #1026	; 0x402
 8001a48:	fa1e fc8c 	uxtah	ip, lr, ip
 8001a4c:	f04f 0a28 	mov.w	sl, #40	; 0x28
 8001a50:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]

    if (ep->xfer_len > TxPctSize)
 8001a54:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001a58:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxPctSize;
 8001a5a:	fb0a 4a05 	mla	sl, sl, r5, r4
 8001a5e:	bf34      	ite	cc
 8001a60:	eba3 030c 	subcc.w	r3, r3, ip
    }
    else
    {
      ep->xfer_len = 0U;
 8001a64:	2300      	movcs	r3, #0
 8001a66:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001a6a:	b2b6      	uxth	r6, r6
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d154      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x5da>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a70:	f899 502d 	ldrb.w	r5, [r9, #45]	; 0x2d
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d13f      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x5b8>
 8001a78:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a7c:	fa1e fe83 	uxtah	lr, lr, r3
 8001a80:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8001a84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a88:	041b      	lsls	r3, r3, #16
 8001a8a:	0c1b      	lsrs	r3, r3, #16
 8001a8c:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
 8001a90:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a9a:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a9e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001aa2:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8001aa6:	fa10 f083 	uxtah	r0, r0, r3
 8001aaa:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8001aae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 8001aba:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac4:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7fe fd18 	bl	80004fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ace:	2e00      	cmp	r6, #0
 8001ad0:	f000 80dd 	beq.w	8001c8e <HAL_PCD_IRQHandler+0x74e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ad4:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
 8001ad8:	6822      	ldr	r2, [r4, #0]
 8001ada:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae6:	041b      	lsls	r3, r3, #16
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001af6:	e0ca      	b.n	8001c8e <HAL_PCD_IRQHandler+0x74e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001af8:	2d01      	cmp	r5, #1
 8001afa:	d1e5      	bne.n	8001ac8 <HAL_PCD_IRQHandler+0x588>
 8001afc:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8001b00:	fa1e fe85 	uxtah	lr, lr, r5
 8001b04:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b08:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8001b0c:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8001b10:	fa10 f585 	uxtah	r5, r0, r5
 8001b14:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
 8001b18:	e7d6      	b.n	8001ac8 <HAL_PCD_IRQHandler+0x588>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b1a:	b16e      	cbz	r6, 8001b38 <HAL_PCD_IRQHandler+0x5f8>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b1c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	0c1b      	lsrs	r3, r3, #16
 8001b2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001b38:	2628      	movs	r6, #40	; 0x28
 8001b3a:	fb06 4605 	mla	r6, r6, r5, r4
 8001b3e:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	f040 80a3 	bne.w	8001c8e <HAL_PCD_IRQHandler+0x74e>
        ep->xfer_count += TxPctSize;
 8001b48:	6cb3      	ldr	r3, [r6, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8001b4a:	6c31      	ldr	r1, [r6, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b4c:	f8d6 a04c 	ldr.w	sl, [r6, #76]	; 0x4c
        ep->xfer_count += TxPctSize;
 8001b50:	4463      	add	r3, ip
 8001b52:	64b3      	str	r3, [r6, #72]	; 0x48
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b54:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff += TxPctSize;
 8001b56:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b58:	459a      	cmp	sl, r3
        ep->xfer_buff += TxPctSize;
 8001b5a:	6431      	str	r1, [r6, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b5c:	d31a      	bcc.n	8001b94 <HAL_PCD_IRQHandler+0x654>
          ep->xfer_len_db -= len;
 8001b5e:	ebaa 0a03 	sub.w	sl, sl, r3
 8001b62:	f8c6 a04c 	str.w	sl, [r6, #76]	; 0x4c
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b66:	f899 602d 	ldrb.w	r6, [r9, #45]	; 0x2d
 8001b6a:	fa1f fc83 	uxth.w	ip, r3
 8001b6e:	2e00      	cmp	r6, #0
 8001b70:	d13b      	bne.n	8001bea <HAL_PCD_IRQHandler+0x6aa>
 8001b72:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001b76:	2b3e      	cmp	r3, #62	; 0x3e
 8001b78:	fa1e fe86 	uxtah	lr, lr, r6
 8001b7c:	d917      	bls.n	8001bae <HAL_PCD_IRQHandler+0x66e>
 8001b7e:	095e      	lsrs	r6, r3, #5
 8001b80:	06db      	lsls	r3, r3, #27
 8001b82:	bf08      	it	eq
 8001b84:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8001b88:	ea47 2686 	orr.w	r6, r7, r6, lsl #10
 8001b8c:	b2b6      	uxth	r6, r6
 8001b8e:	f82e 6032 	strh.w	r6, [lr, r2, lsl #3]
 8001b92:	e01c      	b.n	8001bce <HAL_PCD_IRQHandler+0x68e>
        else if (ep->xfer_len_db == 0U)
 8001b94:	f1ba 0f00 	cmp.w	sl, #0
 8001b98:	d103      	bne.n	8001ba2 <HAL_PCD_IRQHandler+0x662>
          ep->xfer_fill_db = 0U;
 8001b9a:	f886 a050 	strb.w	sl, [r6, #80]	; 0x50
    if (ep->xfer_len > TxPctSize)
 8001b9e:	4663      	mov	r3, ip
 8001ba0:	e7e1      	b.n	8001b66 <HAL_PCD_IRQHandler+0x626>
          ep->xfer_fill_db = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001ba8:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001baa:	4653      	mov	r3, sl
 8001bac:	e7db      	b.n	8001b66 <HAL_PCD_IRQHandler+0x626>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001bae:	b9b3      	cbnz	r3, 8001bde <HAL_PCD_IRQHandler+0x69e>
 8001bb0:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 8001bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001bb8:	041b      	lsls	r3, r3, #16
 8001bba:	0c1b      	lsrs	r3, r3, #16
 8001bbc:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
 8001bc0:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bca:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001bce:	2328      	movs	r3, #40	; 0x28
 8001bd0:	fb03 4505 	mla	r5, r3, r5, r4
 8001bd4:	4663      	mov	r3, ip
 8001bd6:	8eaa      	ldrh	r2, [r5, #52]	; 0x34

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001bd8:	f002 f9ef 	bl	8003fba <USB_WritePMA>
 8001bdc:	e057      	b.n	8001c8e <HAL_PCD_IRQHandler+0x74e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001bde:	085e      	lsrs	r6, r3, #1
 8001be0:	07db      	lsls	r3, r3, #31
 8001be2:	bf48      	it	mi
 8001be4:	3601      	addmi	r6, #1
 8001be6:	02b6      	lsls	r6, r6, #10
 8001be8:	e7d0      	b.n	8001b8c <HAL_PCD_IRQHandler+0x64c>
 8001bea:	2e01      	cmp	r6, #1
 8001bec:	bf02      	ittt	eq
 8001bee:	f8b0 3050 	ldrheq.w	r3, [r0, #80]	; 0x50
 8001bf2:	fa1e fe83 	uxtaheq	lr, lr, r3
 8001bf6:	f82e c032 	strheq.w	ip, [lr, r2, lsl #3]
 8001bfa:	e7e8      	b.n	8001bce <HAL_PCD_IRQHandler+0x68e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bfc:	f200 4e06 	addw	lr, r0, #1030	; 0x406
 8001c00:	fa1e fc8c 	uxtah	ip, lr, ip
 8001c04:	b2b6      	uxth	r6, r6
 8001c06:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]
    if (ep->xfer_len >= TxPctSize)
 8001c0a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001c0e:	459c      	cmp	ip, r3
      ep->xfer_len = 0U;
 8001c10:	bf88      	it	hi
 8001c12:	4653      	movhi	r3, sl
 8001c14:	f04f 0a28 	mov.w	sl, #40	; 0x28
 8001c18:	fb0a 4a05 	mla	sl, sl, r5, r4
      ep->xfer_len -= TxPctSize;
 8001c1c:	bf98      	it	ls
 8001c1e:	eba3 030c 	subls.w	r3, r3, ip
 8001c22:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    if (ep->xfer_len == 0U)
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d153      	bne.n	8001cd2 <HAL_PCD_IRQHandler+0x792>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c2a:	f899 502d 	ldrb.w	r5, [r9, #45]	; 0x2d
 8001c2e:	2d00      	cmp	r5, #0
 8001c30:	d140      	bne.n	8001cb4 <HAL_PCD_IRQHandler+0x774>
 8001c32:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8001c36:	f200 4302 	addw	r3, r0, #1026	; 0x402
 8001c3a:	fa13 f585 	uxtah	r5, r3, r5
 8001c3e:	f835 3031 	ldrh.w	r3, [r5, r1, lsl #3]
 8001c42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c46:	041b      	lsls	r3, r3, #16
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
 8001c4e:	f835 3031 	ldrh.w	r3, [r5, r1, lsl #3]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c58:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c5c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001c60:	fa1e fe83 	uxtah	lr, lr, r3
 8001c64:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8001c68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
 8001c74:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c7e:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c82:	4620      	mov	r0, r4
 8001c84:	f7fe fc3b 	bl	80004fe <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001c88:	2e00      	cmp	r6, #0
 8001c8a:	f43f af23 	beq.w	8001ad4 <HAL_PCD_IRQHandler+0x594>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001c8e:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
 8001c92:	6822      	ldr	r2, [r4, #0]
 8001c94:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ca2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cae:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001cb2:	e452      	b.n	800155a <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cb4:	2d01      	cmp	r5, #1
 8001cb6:	d1e4      	bne.n	8001c82 <HAL_PCD_IRQHandler+0x742>
 8001cb8:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8001cbc:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8001cc0:	fa1c f585 	uxtah	r5, ip, r5
 8001cc4:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cc8:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8001ccc:	fa1e fe80 	uxtah	lr, lr, r0
 8001cd0:	e7d5      	b.n	8001c7e <HAL_PCD_IRQHandler+0x73e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001cd2:	b96e      	cbnz	r6, 8001cf0 <HAL_PCD_IRQHandler+0x7b0>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001cd4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	0c1b      	lsrs	r3, r3, #16
 8001ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cec:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001cf0:	2628      	movs	r6, #40	; 0x28
 8001cf2:	fb06 4605 	mla	r6, r6, r5, r4
 8001cf6:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d1c7      	bne.n	8001c8e <HAL_PCD_IRQHandler+0x74e>
        ep->xfer_count += TxPctSize;
 8001cfe:	6cb3      	ldr	r3, [r6, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8001d00:	6c31      	ldr	r1, [r6, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d02:	f8d6 a04c 	ldr.w	sl, [r6, #76]	; 0x4c
        ep->xfer_count += TxPctSize;
 8001d06:	4463      	add	r3, ip
 8001d08:	64b3      	str	r3, [r6, #72]	; 0x48
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d0a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff += TxPctSize;
 8001d0c:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d0e:	459a      	cmp	sl, r3
        ep->xfer_buff += TxPctSize;
 8001d10:	6431      	str	r1, [r6, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d12:	d31c      	bcc.n	8001d4e <HAL_PCD_IRQHandler+0x80e>
          ep->xfer_len_db -= len;
 8001d14:	ebaa 0a03 	sub.w	sl, sl, r3
 8001d18:	f8c6 a04c 	str.w	sl, [r6, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d1c:	f899 c02d 	ldrb.w	ip, [r9, #45]	; 0x2d
 8001d20:	b29e      	uxth	r6, r3
 8001d22:	f1bc 0f00 	cmp.w	ip, #0
 8001d26:	d13e      	bne.n	8001da6 <HAL_PCD_IRQHandler+0x866>
 8001d28:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8001d2c:	2b3e      	cmp	r3, #62	; 0x3e
 8001d2e:	fa1e fe8c 	uxtah	lr, lr, ip
 8001d32:	d919      	bls.n	8001d68 <HAL_PCD_IRQHandler+0x828>
 8001d34:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8001d38:	06db      	lsls	r3, r3, #27
 8001d3a:	bf08      	it	eq
 8001d3c:	f10c 3cff 	addeq.w	ip, ip, #4294967295	; 0xffffffff
 8001d40:	ea47 2c8c 	orr.w	ip, r7, ip, lsl #10
 8001d44:	fa1f fc8c 	uxth.w	ip, ip
 8001d48:	f82e c032 	strh.w	ip, [lr, r2, lsl #3]
 8001d4c:	e01c      	b.n	8001d88 <HAL_PCD_IRQHandler+0x848>
        else if (ep->xfer_len_db == 0U)
 8001d4e:	f1ba 0f00 	cmp.w	sl, #0
 8001d52:	d103      	bne.n	8001d5c <HAL_PCD_IRQHandler+0x81c>
          ep->xfer_fill_db = 0U;
 8001d54:	f886 a050 	strb.w	sl, [r6, #80]	; 0x50
    if (ep->xfer_len >= TxPctSize)
 8001d58:	4663      	mov	r3, ip
 8001d5a:	e7df      	b.n	8001d1c <HAL_PCD_IRQHandler+0x7dc>
          ep->xfer_len_db = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	64f3      	str	r3, [r6, #76]	; 0x4c
          ep->xfer_fill_db = 0;
 8001d60:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8001d64:	4653      	mov	r3, sl
 8001d66:	e7d9      	b.n	8001d1c <HAL_PCD_IRQHandler+0x7dc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d68:	b9a3      	cbnz	r3, 8001d94 <HAL_PCD_IRQHandler+0x854>
 8001d6a:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 8001d6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	0c1b      	lsrs	r3, r3, #16
 8001d76:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
 8001d7a:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d84:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001d88:	2328      	movs	r3, #40	; 0x28
 8001d8a:	fb03 4505 	mla	r5, r3, r5, r4
 8001d8e:	4633      	mov	r3, r6
 8001d90:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8001d92:	e721      	b.n	8001bd8 <HAL_PCD_IRQHandler+0x698>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d94:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8001d98:	07db      	lsls	r3, r3, #31
 8001d9a:	bf48      	it	mi
 8001d9c:	f10c 0c01 	addmi.w	ip, ip, #1
 8001da0:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8001da4:	e7ce      	b.n	8001d44 <HAL_PCD_IRQHandler+0x804>
 8001da6:	f1bc 0f01 	cmp.w	ip, #1
 8001daa:	bf02      	ittt	eq
 8001dac:	f8b0 3050 	ldrheq.w	r3, [r0, #80]	; 0x50
 8001db0:	fa1e fe83 	uxtaheq	lr, lr, r3
 8001db4:	f82e 6032 	strheq.w	r6, [lr, r2, lsl #3]
 8001db8:	e7e6      	b.n	8001d88 <HAL_PCD_IRQHandler+0x848>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001dba:	0543      	lsls	r3, r0, #21
 8001dbc:	d513      	bpl.n	8001de6 <HAL_PCD_IRQHandler+0x8a6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dbe:	6822      	ldr	r2, [r4, #0]
 8001dc0:	9101      	str	r1, [sp, #4]
 8001dc2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001dc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001dca:	041b      	lsls	r3, r3, #16
 8001dcc:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8001dce:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dd0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001dd4:	f7fe fb9f 	bl	8000516 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dd8:	9901      	ldr	r1, [sp, #4]
 8001dda:	4620      	mov	r0, r4
}
 8001ddc:	b003      	add	sp, #12
 8001dde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001de2:	f7ff bb99 	b.w	8001518 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001de6:	0447      	lsls	r7, r0, #17
 8001de8:	d50a      	bpl.n	8001e00 <HAL_PCD_IRQHandler+0x8c0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001dea:	6822      	ldr	r2, [r4, #0]
 8001dec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001df4:	041b      	lsls	r3, r3, #16
 8001df6:	0c1b      	lsrs	r3, r3, #16
 8001df8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8001dfc:	f7ff bbb2 	b.w	8001564 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e00:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 8001e04:	d005      	beq.n	8001e12 <HAL_PCD_IRQHandler+0x8d2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e06:	6822      	ldr	r2, [r4, #0]
 8001e08:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e10:	e7f0      	b.n	8001df4 <HAL_PCD_IRQHandler+0x8b4>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e12:	04c6      	lsls	r6, r0, #19
 8001e14:	d522      	bpl.n	8001e5c <HAL_PCD_IRQHandler+0x91c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	041b      	lsls	r3, r3, #16
 8001e22:	0c1b      	lsrs	r3, r3, #16
 8001e24:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e28:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e2c:	f023 0308 	bic.w	r3, r3, #8
 8001e30:	041b      	lsls	r3, r3, #16
 8001e32:	0c1b      	lsrs	r3, r3, #16
 8001e34:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8001e38:	f894 32e4 	ldrb.w	r3, [r4, #740]	; 0x2e4
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d104      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x90a>
      hpcd->LPM_State = LPM_L0;
 8001e40:	f884 12e4 	strb.w	r1, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e44:	4620      	mov	r0, r4
 8001e46:	f000 f9a4 	bl	8002192 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7fe fb80 	bl	8000550 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e50:	6822      	ldr	r2, [r4, #0]
 8001e52:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e5a:	e7cb      	b.n	8001df4 <HAL_PCD_IRQHandler+0x8b4>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e5c:	0505      	lsls	r5, r0, #20
 8001e5e:	d51b      	bpl.n	8001e98 <HAL_PCD_IRQHandler+0x958>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e60:	6822      	ldr	r2, [r4, #0]
 8001e62:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f043 0308 	orr.w	r3, r3, #8
 8001e6c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e70:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e80:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      HAL_PCD_SuspendCallback(hpcd);
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7fe fb4e 	bl	8000530 <HAL_PCD_SuspendCallback>
 8001e94:	f7ff bb66 	b.w	8001564 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001e98:	0601      	lsls	r1, r0, #24
 8001e9a:	d52b      	bpl.n	8001ef4 <HAL_PCD_IRQHandler+0x9b4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ea6:	0412      	lsls	r2, r2, #16
 8001ea8:	0c12      	lsrs	r2, r2, #16
 8001eaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001eae:	f894 22e4 	ldrb.w	r2, [r4, #740]	; 0x2e4
 8001eb2:	2a00      	cmp	r2, #0
 8001eb4:	d1eb      	bne.n	8001e8e <HAL_PCD_IRQHandler+0x94e>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001eb6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001eba:	b292      	uxth	r2, r2
 8001ebc:	f042 0204 	orr.w	r2, r2, #4
 8001ec0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ec4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	f042 0208 	orr.w	r2, r2, #8
      hpcd->LPM_State = LPM_L1;
 8001ece:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8001ed4:	f884 12e4 	strb.w	r1, [r4, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ed8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001edc:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8001ee0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ee4:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ee6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
}
 8001eea:	b003      	add	sp, #12
 8001eec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ef0:	f000 b94f 	b.w	8002192 <HAL_PCDEx_LPM_Callback>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001ef4:	0582      	lsls	r2, r0, #22
 8001ef6:	d50d      	bpl.n	8001f14 <HAL_PCD_IRQHandler+0x9d4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ef8:	6822      	ldr	r2, [r4, #0]
 8001efa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001efe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f02:	041b      	lsls	r3, r3, #16
 8001f04:	0c1b      	lsrs	r3, r3, #16
 8001f06:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7fe faff 	bl	800050e <HAL_PCD_SOFCallback>
    return;
 8001f10:	f7ff bb28 	b.w	8001564 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001f14:	05c3      	lsls	r3, r0, #23
 8001f16:	f57f ab25 	bpl.w	8001564 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f1a:	6822      	ldr	r2, [r4, #0]
 8001f1c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f24:	e766      	b.n	8001df4 <HAL_PCD_IRQHandler+0x8b4>
 8001f26:	bf00      	nop

08001f28 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001f28:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	4605      	mov	r5, r0
 8001f30:	f04f 0428 	mov.w	r4, #40	; 0x28
 8001f34:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8001f38:	d020      	beq.n	8001f7c <HAL_PCD_EP_Open+0x54>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f3a:	fb00 4104 	mla	r1, r0, r4, r4
    ep->is_in = 1U;
 8001f3e:	fb00 4404 	mla	r4, r0, r4, r4
 8001f42:	442c      	add	r4, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f44:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001f46:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f48:	4429      	add	r1, r5
    ep->is_in = 1U;
 8001f4a:	7166      	strb	r6, [r4, #5]
  ep->maxpacket = ep_mps;
 8001f4c:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8001f4e:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f50:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8001f52:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001f54:	b102      	cbz	r2, 8001f58 <HAL_PCD_EP_Open+0x30>
    ep->tx_fifo_num = ep->num;
 8001f56:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8001f58:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001f5a:	bf04      	itt	eq
 8001f5c:	2300      	moveq	r3, #0
 8001f5e:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001f60:	f895 32ac 	ldrb.w	r3, [r5, #684]	; 0x2ac
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d013      	beq.n	8001f90 <HAL_PCD_EP_Open+0x68>
 8001f68:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f6a:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8001f6c:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f70:	f001 fd76 	bl	8003a60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f74:	2000      	movs	r0, #0
 8001f76:	f885 02ac 	strb.w	r0, [r5, #684]	; 0x2ac
}
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f7c:	fb04 5100 	mla	r1, r4, r0, r5
    ep->is_in = 0U;
 8001f80:	fb04 5400 	mla	r4, r4, r0, r5
 8001f84:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f86:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 8001f8a:	f884 616d 	strb.w	r6, [r4, #365]	; 0x16d
 8001f8e:	e7dd      	b.n	8001f4c <HAL_PCD_EP_Open+0x24>
  __HAL_LOCK(hpcd);
 8001f90:	2002      	movs	r0, #2
 8001f92:	e7f2      	b.n	8001f7a <HAL_PCD_EP_Open+0x52>

08001f94 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001f94:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	f001 0207 	and.w	r2, r1, #7
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	f04f 0328 	mov.w	r3, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8001fa4:	d017      	beq.n	8001fd6 <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa6:	fb02 3103 	mla	r1, r2, r3, r3
    ep->is_in = 1U;
 8001faa:	fb02 3303 	mla	r3, r2, r3, r3
 8001fae:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb0:	3104      	adds	r1, #4
 8001fb2:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	7158      	strb	r0, [r3, #5]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fb8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001fba:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d013      	beq.n	8001fea <HAL_PCD_EP_Close+0x56>
 8001fc2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fc4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001fc6:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fca:	f001 fea7 	bl	8003d1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 8001fd4:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd6:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 8001fda:	fb03 0302 	mla	r3, r3, r2, r0
 8001fde:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe0:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 8001fe4:	f883 016d 	strb.w	r0, [r3, #365]	; 0x16d
 8001fe8:	e7e6      	b.n	8001fb8 <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 8001fea:	2002      	movs	r0, #2
 8001fec:	e7f2      	b.n	8001fd4 <HAL_PCD_EP_Close+0x40>

08001fee <HAL_PCD_EP_Receive>:
{
 8001fee:	b570      	push	{r4, r5, r6, lr}
 8001ff0:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8001ff4:	2628      	movs	r6, #40	; 0x28
 8001ff6:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 8001ffa:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffc:	f884 116c 	strb.w	r1, [r4, #364]	; 0x16c
  ep->xfer_len = len;
 8002000:	e9c4 2360 	strd	r2, r3, [r4, #384]	; 0x180
  ep->xfer_count = 0U;
 8002004:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
  ep->is_in = 0U;
 8002008:	f884 516d 	strb.w	r5, [r4, #365]	; 0x16d
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800200c:	f504 71b6 	add.w	r1, r4, #364	; 0x16c
 8002010:	6800      	ldr	r0, [r0, #0]
 8002012:	f001 ffe1 	bl	8003fd8 <USB_EPStartXfer>
}
 8002016:	4628      	mov	r0, r5
 8002018:	bd70      	pop	{r4, r5, r6, pc}

0800201a <HAL_PCD_EP_Transmit>:
{
 800201a:	b570      	push	{r4, r5, r6, lr}
 800201c:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002020:	2428      	movs	r4, #40	; 0x28
 8002022:	fb04 0501 	mla	r5, r4, r1, r0
  ep->xfer_len = len;
 8002026:	e9c5 2310 	strd	r2, r3, [r5, #64]	; 0x40
  ep->xfer_len_db = len;
 800202a:	64eb      	str	r3, [r5, #76]	; 0x4c
 800202c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002030:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  ep->xfer_fill_db = 1U;
 8002034:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 8002036:	2600      	movs	r6, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002038:	fb01 4404 	mla	r4, r1, r4, r4
  ep->xfer_fill_db = 1U;
 800203c:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 8002040:	64ae      	str	r6, [r5, #72]	; 0x48
  ep->num = ep_addr & EP_ADDR_MSK;
 8002042:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002046:	1d21      	adds	r1, r4, #4
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002048:	4401      	add	r1, r0
  ep->is_in = 1U;
 800204a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800204e:	6800      	ldr	r0, [r0, #0]
 8002050:	f001 ffc2 	bl	8003fd8 <USB_EPStartXfer>
}
 8002054:	4630      	mov	r0, r6
 8002056:	bd70      	pop	{r4, r5, r6, pc}

08002058 <HAL_PCD_EP_SetStall>:
{
 8002058:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800205a:	6843      	ldr	r3, [r0, #4]
 800205c:	f001 0507 	and.w	r5, r1, #7
 8002060:	429d      	cmp	r5, r3
{
 8002062:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002064:	d826      	bhi.n	80020b4 <HAL_PCD_EP_SetStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8002066:	f011 0f80 	tst.w	r1, #128	; 0x80
 800206a:	f04f 0228 	mov.w	r2, #40	; 0x28
 800206e:	d018      	beq.n	80020a2 <HAL_PCD_EP_SetStall+0x4a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002070:	fb05 2102 	mla	r1, r5, r2, r2
    ep->is_in = 1U;
 8002074:	fb05 2202 	mla	r2, r5, r2, r2
 8002078:	4422      	add	r2, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207a:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800207c:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207e:	4421      	add	r1, r4
    ep->is_in = 1U;
 8002080:	7153      	strb	r3, [r2, #5]
  ep->is_stall = 1U;
 8002082:	2301      	movs	r3, #1
 8002084:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002086:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002088:	f894 22ac 	ldrb.w	r2, [r4, #684]	; 0x2ac
 800208c:	429a      	cmp	r2, r3
 800208e:	d013      	beq.n	80020b8 <HAL_PCD_EP_SetStall+0x60>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002090:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002092:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002096:	f001 ff12 	bl	8003ebe <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800209a:	2000      	movs	r0, #0
 800209c:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 80020a0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80020a2:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 80020a6:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 80020a8:	f503 71b6 	add.w	r1, r3, #364	; 0x16c
    ep->is_in = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f882 316d 	strb.w	r3, [r2, #365]	; 0x16d
 80020b2:	e7e6      	b.n	8002082 <HAL_PCD_EP_SetStall+0x2a>
    return HAL_ERROR;
 80020b4:	2001      	movs	r0, #1
 80020b6:	e7f3      	b.n	80020a0 <HAL_PCD_EP_SetStall+0x48>
  __HAL_LOCK(hpcd);
 80020b8:	2002      	movs	r0, #2
 80020ba:	e7f1      	b.n	80020a0 <HAL_PCD_EP_SetStall+0x48>

080020bc <HAL_PCD_EP_ClrStall>:
{
 80020bc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020be:	6843      	ldr	r3, [r0, #4]
 80020c0:	f001 020f 	and.w	r2, r1, #15
 80020c4:	429a      	cmp	r2, r3
{
 80020c6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020c8:	d82a      	bhi.n	8002120 <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 80020ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80020ce:	f001 0207 	and.w	r2, r1, #7
 80020d2:	f04f 0328 	mov.w	r3, #40	; 0x28
 80020d6:	d019      	beq.n	800210c <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d8:	fb02 3103 	mla	r1, r2, r3, r3
    ep->is_in = 1U;
 80020dc:	fb02 3303 	mla	r3, r2, r3, r3
 80020e0:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e2:	3104      	adds	r1, #4
 80020e4:	4401      	add	r1, r0
    ep->is_in = 1U;
 80020e6:	2001      	movs	r0, #1
 80020e8:	7158      	strb	r0, [r3, #5]
  ep->is_stall = 0U;
 80020ea:	2500      	movs	r5, #0
 80020ec:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ee:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80020f0:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d015      	beq.n	8002124 <HAL_PCD_EP_ClrStall+0x68>
 80020f8:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020fa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80020fc:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002100:	f001 fefd 	bl	8003efe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002104:	f884 52ac 	strb.w	r5, [r4, #684]	; 0x2ac
  return HAL_OK;
 8002108:	4628      	mov	r0, r5
}
 800210a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800210c:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 8002110:	fb03 0302 	mla	r3, r3, r2, r0
 8002114:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002116:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 800211a:	f883 016d 	strb.w	r0, [r3, #365]	; 0x16d
 800211e:	e7e4      	b.n	80020ea <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 8002120:	2001      	movs	r0, #1
 8002122:	e7f2      	b.n	800210a <HAL_PCD_EP_ClrStall+0x4e>
  __HAL_LOCK(hpcd);
 8002124:	2002      	movs	r0, #2
 8002126:	e7f0      	b.n	800210a <HAL_PCD_EP_ClrStall+0x4e>

08002128 <HAL_PCD_EP_Flush>:
}
 8002128:	2000      	movs	r0, #0
 800212a:	4770      	bx	lr

0800212c <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800212c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002130:	bf18      	it	ne
 8002132:	f001 0107 	andne.w	r1, r1, #7
{
 8002136:	b510      	push	{r4, lr}
 8002138:	f04f 0428 	mov.w	r4, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800213c:	bf1b      	ittet	ne
 800213e:	fb01 4104 	mlane	r1, r1, r4, r4
 8002142:	3104      	addne	r1, #4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002144:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002148:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800214a:	bf08      	it	eq
 800214c:	f500 70b6 	addeq.w	r0, r0, #364	; 0x16c
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002150:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8002152:	b91a      	cbnz	r2, 800215c <HAL_PCDEx_PMAConfig+0x30>
    ep->doublebuffer = 0U;
 8002154:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8002156:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8002158:	2000      	movs	r0, #0
 800215a:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 800215c:	2201      	movs	r2, #1
 800215e:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002160:	6083      	str	r3, [r0, #8]
 8002162:	e7f9      	b.n	8002158 <HAL_PCDEx_PMAConfig+0x2c>

08002164 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8002164:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8002166:	2100      	movs	r1, #0
 8002168:	f880 12e4 	strb.w	r1, [r0, #740]	; 0x2e4
  hpcd->lpm_active = 1U;
 800216c:	2301      	movs	r3, #1
 800216e:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002172:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8002176:	b29b      	uxth	r3, r3
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002180:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8002184:	b29b      	uxth	r3, r3
 8002186:	f043 0302 	orr.w	r3, r3, #2
 800218a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800218e:	4608      	mov	r0, r1
 8002190:	4770      	bx	lr

08002192 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002192:	4770      	bx	lr

08002194 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002194:	4a02      	ldr	r2, [pc, #8]	; (80021a0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002196:	6813      	ldr	r3, [r2, #0]
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	6013      	str	r3, [r2, #0]
}
 800219e:	4770      	bx	lr
 80021a0:	58000400 	.word	0x58000400

080021a4 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80021a4:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80021a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 80021aa:	4608      	mov	r0, r1
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80021ac:	d101      	bne.n	80021b2 <HAL_PWR_EnterSTOPMode+0xe>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80021ae:	f000 b82d 	b.w	800220c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80021b2:	f000 b811 	b.w	80021d8 <HAL_PWREx_EnterSTOP0Mode>
	...

080021b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021b8:	4b02      	ldr	r3, [pc, #8]	; (80021c4 <HAL_PWREx_GetVoltageRange+0xc>)
 80021ba:	6818      	ldr	r0, [r3, #0]
}
 80021bc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	58000400 	.word	0x58000400

080021c8 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80021c8:	4a02      	ldr	r2, [pc, #8]	; (80021d4 <HAL_PWREx_EnableVddUSB+0xc>)
 80021ca:	6853      	ldr	r3, [r2, #4]
 80021cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d0:	6053      	str	r3, [r2, #4]
}
 80021d2:	4770      	bx	lr
 80021d4:	58000400 	.word	0x58000400

080021d8 <HAL_PWREx_EnterSTOP0Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_PWREx_EnterSTOP0Mode+0x2c>)
 80021da:	6813      	ldr	r3, [r2, #0]
 80021dc:	f023 0307 	bic.w	r3, r3, #7
 80021e0:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_PWREx_EnterSTOP0Mode+0x30>)
 80021e4:	691a      	ldr	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80021e6:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80021e8:	f042 0204 	orr.w	r2, r2, #4
 80021ec:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80021ee:	d105      	bne.n	80021fc <HAL_PWREx_EnterSTOP0Mode+0x24>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80021f0:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	f022 0204 	bic.w	r2, r2, #4
 80021f8:	611a      	str	r2, [r3, #16]
}
 80021fa:	4770      	bx	lr
    __SEV();
 80021fc:	bf40      	sev
    __WFE();
 80021fe:	bf20      	wfe
    __WFE();
 8002200:	bf20      	wfe
 8002202:	e7f6      	b.n	80021f2 <HAL_PWREx_EnterSTOP0Mode+0x1a>
 8002204:	58000400 	.word	0x58000400
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <HAL_PWREx_EnterSTOP1Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800220c:	4a0b      	ldr	r2, [pc, #44]	; (800223c <HAL_PWREx_EnterSTOP1Mode+0x30>)
 800220e:	6813      	ldr	r3, [r2, #0]
 8002210:	f023 0307 	bic.w	r3, r3, #7
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_PWREx_EnterSTOP1Mode+0x34>)
 800221c:	691a      	ldr	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800221e:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002220:	f042 0204 	orr.w	r2, r2, #4
 8002224:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002226:	d105      	bne.n	8002234 <HAL_PWREx_EnterSTOP1Mode+0x28>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002228:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	f022 0204 	bic.w	r2, r2, #4
 8002230:	611a      	str	r2, [r3, #16]
}
 8002232:	4770      	bx	lr
    __SEV();
 8002234:	bf40      	sev
    __WFE();
 8002236:	bf20      	wfe
    __WFE();
 8002238:	bf20      	wfe
 800223a:	e7f6      	b.n	800222a <HAL_PWREx_EnterSTOP1Mode+0x1e>
 800223c:	58000400 	.word	0x58000400
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002248:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 800224c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002250:	4770      	bx	lr

08002252 <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002256:	6818      	ldr	r0, [r3, #0]
}
 8002258:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800225c:	4770      	bx	lr

0800225e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800225e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002262:	6813      	ldr	r3, [r2, #0]
 8002264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002268:	4318      	orrs	r0, r3
 800226a:	6010      	str	r0, [r2, #0]
}
 800226c:	4770      	bx	lr

0800226e <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800226e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002272:	6853      	ldr	r3, [r2, #4]
 8002274:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002278:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800227c:	6050      	str	r0, [r2, #4]
}
 800227e:	4770      	bx	lr

08002280 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002280:	28b0      	cmp	r0, #176	; 0xb0
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002284:	4a33      	ldr	r2, [pc, #204]	; (8002354 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002286:	bf98      	it	ls
 8002288:	0900      	lsrls	r0, r0, #4
{
 800228a:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800228c:	bf8c      	ite	hi
 800228e:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002290:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002294:	4c30      	ldr	r4, [pc, #192]	; (8002358 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80022a0:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80022a4:	466e      	mov	r6, sp
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80022ae:	f7ff ff83 	bl	80021b8 <HAL_PWREx_GetVoltageRange>
 80022b2:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80022b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80022b8:	3410      	adds	r4, #16
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80022ba:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80022be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80022c6:	ac08      	add	r4, sp, #32
 80022c8:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022cc:	d020      	beq.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x90>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80022ce:	4b23      	ldr	r3, [pc, #140]	; (800235c <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 80022d0:	429d      	cmp	r5, r3
 80022d2:	d32f      	bcc.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0xb4>
 80022d4:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 80022d8:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 80022dc:	429d      	cmp	r5, r3
 80022de:	d92b      	bls.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0xb8>
 80022e0:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 80022e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e8:	429d      	cmp	r5, r3
 80022ea:	d927      	bls.n	800233c <RCC_SetFlashLatencyFromMSIRange+0xbc>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80022ec:	2400      	movs	r4, #0
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80022ee:	4d1c      	ldr	r5, [pc, #112]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 80022f0:	682b      	ldr	r3, [r5, #0]
 80022f2:	f023 0307 	bic.w	r3, r3, #7
 80022f6:	4323      	orrs	r3, r4
 80022f8:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80022fa:	f7fe fdcd 	bl	8000e98 <HAL_GetTick>
 80022fe:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	429c      	cmp	r4, r3
 8002308:	d11a      	bne.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0xc0>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800230a:	2000      	movs	r0, #0
}
 800230c:	b009      	add	sp, #36	; 0x24
 800230e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 8002312:	fbb5 f5f3 	udiv	r5, r5, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002316:	2300      	movs	r3, #0
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002318:	f856 2b04 	ldr.w	r2, [r6], #4
 800231c:	4295      	cmp	r5, r2
 800231e:	d805      	bhi.n	800232c <RCC_SetFlashLatencyFromMSIRange+0xac>
        latency = FLASH_LATENCY_RANGE[index];
 8002320:	aa08      	add	r2, sp, #32
 8002322:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002326:	f853 4c10 	ldr.w	r4, [r3, #-16]
        break;
 800232a:	e7e0      	b.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x6e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800232c:	3301      	adds	r3, #1
 800232e:	2b04      	cmp	r3, #4
 8002330:	d1f2      	bne.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x98>
 8002332:	e7db      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x6c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002334:	2300      	movs	r3, #0
 8002336:	e7f3      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8002338:	2301      	movs	r3, #1
 800233a:	e7f1      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 800233c:	2302      	movs	r3, #2
 800233e:	e7ef      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0xa0>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002340:	f7fe fdaa 	bl	8000e98 <HAL_GetTick>
 8002344:	1b80      	subs	r0, r0, r6
 8002346:	2802      	cmp	r0, #2
 8002348:	d9da      	bls.n	8002300 <RCC_SetFlashLatencyFromMSIRange+0x80>
      return HAL_TIMEOUT;
 800234a:	2003      	movs	r0, #3
 800234c:	e7de      	b.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800234e:	bf00      	nop
 8002350:	08007b48 	.word	0x08007b48
 8002354:	08007b88 	.word	0x08007b88
 8002358:	08007c48 	.word	0x08007c48
 800235c:	006acfc0 	.word	0x006acfc0
 8002360:	58004000 	.word	0x58004000
 8002364:	000f4240 	.word	0x000f4240

08002368 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236c:	689a      	ldr	r2, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800236e:	f012 020c 	ands.w	r2, r2, #12
 8002372:	d10a      	bne.n	800238a <HAL_RCC_GetSysClockFreq+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002374:	681b      	ldr	r3, [r3, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002376:	4a22      	ldr	r2, [pc, #136]	; (8002400 <HAL_RCC_GetSysClockFreq+0x98>)
 8002378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237c:	2bb0      	cmp	r3, #176	; 0xb0
 800237e:	bf28      	it	cs
 8002380:	23b0      	movcs	r3, #176	; 0xb0
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002388:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800238a:	2a04      	cmp	r2, #4
 800238c:	d035      	beq.n	80023fa <HAL_RCC_GetSysClockFreq+0x92>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800238e:	2a08      	cmp	r2, #8
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_GetSysClockFreq+0x3a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002392:	681b      	ldr	r3, [r3, #0]
      sysclockfreq = HSE_VALUE;
 8002394:	481b      	ldr	r0, [pc, #108]	; (8002404 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002396:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCC_GetSysClockFreq+0xa0>)
 800239c:	bf08      	it	eq
 800239e:	4618      	moveq	r0, r3
 80023a0:	4770      	bx	lr
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80023a8:	2a02      	cmp	r2, #2
 80023aa:	d024      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x8e>
 80023ac:	2a03      	cmp	r2, #3
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	d117      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x7a>
          pllinputfreq = HSE_VALUE / 2U;
 80023b2:	4815      	ldr	r0, [pc, #84]	; (8002408 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023b4:	4913      	ldr	r1, [pc, #76]	; (8002404 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023b6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80023ba:	bf08      	it	eq
 80023bc:	4601      	moveq	r1, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c2:	68d8      	ldr	r0, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80023c4:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80023c6:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023c8:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80023cc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80023d0:	0f5b      	lsrs	r3, r3, #29
 80023d2:	4348      	muls	r0, r1
 80023d4:	3201      	adds	r2, #1
 80023d6:	3301      	adds	r3, #1
 80023d8:	fbb0 f0f2 	udiv	r0, r0, r2
 80023dc:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80023e0:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80023e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80023e6:	2bb0      	cmp	r3, #176	; 0xb0
 80023e8:	bf28      	it	cs
 80023ea:	23b0      	movcs	r3, #176	; 0xb0
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
        break;
 80023f4:	e7e3      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x56>
    switch (pllsource)
 80023f6:	4903      	ldr	r1, [pc, #12]	; (8002404 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023f8:	e7e1      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x56>
    sysclockfreq = HSI_VALUE;
 80023fa:	4802      	ldr	r0, [pc, #8]	; (8002404 <HAL_RCC_GetSysClockFreq+0x9c>)
}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	08007b48 	.word	0x08007b48
 8002404:	00f42400 	.word	0x00f42400
 8002408:	01e84800 	.word	0x01e84800

0800240c <HAL_RCC_GetHCLKFreq>:
{
 800240c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800240e:	f7ff ffab 	bl	8002368 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002416:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_RCC_GetHCLKFreq+0x1c>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002422:	fbb0 f0f3 	udiv	r0, r0, r3
 8002426:	bd08      	pop	{r3, pc}
 8002428:	08007b88 	.word	0x08007b88

0800242c <HAL_RCC_OscConfig>:
{
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 800242e:	4604      	mov	r4, r0
 8002430:	b908      	cbnz	r0, 8002436 <HAL_RCC_OscConfig+0xa>
          return HAL_ERROR;
 8002432:	2001      	movs	r0, #1
 8002434:	e0b3      	b.n	800259e <HAL_RCC_OscConfig+0x172>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002436:	6803      	ldr	r3, [r0, #0]
 8002438:	069a      	lsls	r2, r3, #26
 800243a:	d530      	bpl.n	800249e <HAL_RCC_OscConfig+0x72>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800243c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002440:	69c1      	ldr	r1, [r0, #28]
 8002442:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002444:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002446:	f013 030c 	ands.w	r3, r3, #12
 800244a:	d007      	beq.n	800245c <HAL_RCC_OscConfig+0x30>
 800244c:	2b0c      	cmp	r3, #12
 800244e:	f040 808c 	bne.w	800256a <HAL_RCC_OscConfig+0x13e>
 8002452:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002456:	2b01      	cmp	r3, #1
 8002458:	f040 8087 	bne.w	800256a <HAL_RCC_OscConfig+0x13e>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800245c:	2900      	cmp	r1, #0
 800245e:	d0e8      	beq.n	8002432 <HAL_RCC_OscConfig+0x6>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002464:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800246c:	2bb0      	cmp	r3, #176	; 0xb0
 800246e:	bf28      	it	cs
 8002470:	23b0      	movcs	r3, #176	; 0xb0
 8002472:	4298      	cmp	r0, r3
 8002474:	d96e      	bls.n	8002554 <HAL_RCC_OscConfig+0x128>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002476:	f7ff ff03 	bl	8002280 <RCC_SetFlashLatencyFromMSIRange>
 800247a:	2800      	cmp	r0, #0
 800247c:	d1d9      	bne.n	8002432 <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002480:	f7ff feed 	bl	800225e <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002484:	6a20      	ldr	r0, [r4, #32]
 8002486:	f7ff fef2 	bl	800226e <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800248a:	f7ff ffbf 	bl	800240c <HAL_RCC_GetHCLKFreq>
 800248e:	4bb1      	ldr	r3, [pc, #708]	; (8002754 <HAL_RCC_OscConfig+0x328>)
 8002490:	6018      	str	r0, [r3, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002492:	4bb1      	ldr	r3, [pc, #708]	; (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	f7fe fcc1 	bl	8000e1c <HAL_InitTick>
 800249a:	2800      	cmp	r0, #0
 800249c:	d1c9      	bne.n	8002432 <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	07db      	lsls	r3, r3, #31
 80024a2:	d511      	bpl.n	80024c8 <HAL_RCC_OscConfig+0x9c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a8:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80024aa:	68d1      	ldr	r1, [r2, #12]
 80024ac:	6862      	ldr	r2, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024ae:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d006      	beq.n	80024c4 <HAL_RCC_OscConfig+0x98>
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	f040 8083 	bne.w	80025c2 <HAL_RCC_OscConfig+0x196>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80024bc:	f001 0303 	and.w	r3, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d17e      	bne.n	80025c2 <HAL_RCC_OscConfig+0x196>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	d0b4      	beq.n	8002432 <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	0799      	lsls	r1, r3, #30
 80024cc:	d51b      	bpl.n	8002506 <HAL_RCC_OscConfig+0xda>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d2:	68e1      	ldr	r1, [r4, #12]
 80024d4:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80024d6:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024d8:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d007      	beq.n	80024f0 <HAL_RCC_OscConfig+0xc4>
 80024e0:	2b0c      	cmp	r3, #12
 80024e2:	f040 8098 	bne.w	8002616 <HAL_RCC_OscConfig+0x1ea>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80024e6:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	f040 8093 	bne.w	8002616 <HAL_RCC_OscConfig+0x1ea>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024f0:	2900      	cmp	r1, #0
 80024f2:	d09e      	beq.n	8002432 <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80024f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f8:	6921      	ldr	r1, [r4, #16]
 80024fa:	6853      	ldr	r3, [r2, #4]
 80024fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002500:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002504:	6053      	str	r3, [r2, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	f013 0f18 	tst.w	r3, #24
 800250c:	f040 80ae 	bne.w	800266c <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	075f      	lsls	r7, r3, #29
 8002514:	f100 8149 	bmi.w	80027aa <HAL_RCC_OscConfig+0x37e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	065a      	lsls	r2, r3, #25
 800251c:	f140 81ae 	bpl.w	800287c <HAL_RCC_OscConfig+0x450>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002520:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002522:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8195 	beq.w	8002856 <HAL_RCC_OscConfig+0x42a>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800252c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002538:	f7fe fcae 	bl	8000e98 <HAL_GetTick>
 800253c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800253e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002542:	079b      	lsls	r3, r3, #30
 8002544:	f100 819a 	bmi.w	800287c <HAL_RCC_OscConfig+0x450>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002548:	f7fe fca6 	bl	8000e98 <HAL_GetTick>
 800254c:	1b83      	subs	r3, r0, r6
 800254e:	2b02      	cmp	r3, #2
 8002550:	d9f5      	bls.n	800253e <HAL_RCC_OscConfig+0x112>
 8002552:	e023      	b.n	800259c <HAL_RCC_OscConfig+0x170>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002554:	f7ff fe83 	bl	800225e <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002558:	6a20      	ldr	r0, [r4, #32]
 800255a:	f7ff fe88 	bl	800226e <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800255e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002560:	f7ff fe8e 	bl	8002280 <RCC_SetFlashLatencyFromMSIRange>
 8002564:	2800      	cmp	r0, #0
 8002566:	d090      	beq.n	800248a <HAL_RCC_OscConfig+0x5e>
 8002568:	e763      	b.n	8002432 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	b1b1      	cbz	r1, 80025a0 <HAL_RCC_OscConfig+0x174>
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002578:	f7fe fc8e 	bl	8000e98 <HAL_GetTick>
 800257c:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 800257e:	f7ff fe68 	bl	8002252 <LL_RCC_MSI_IsReady>
 8002582:	b130      	cbz	r0, 8002592 <HAL_RCC_OscConfig+0x166>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002584:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002586:	f7ff fe6a 	bl	800225e <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800258a:	6a20      	ldr	r0, [r4, #32]
 800258c:	f7ff fe6f 	bl	800226e <LL_RCC_MSI_SetCalibTrimming>
 8002590:	e785      	b.n	800249e <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002592:	f7fe fc81 	bl	8000e98 <HAL_GetTick>
 8002596:	1b40      	subs	r0, r0, r5
 8002598:	2802      	cmp	r0, #2
 800259a:	d9f0      	bls.n	800257e <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 800259c:	2003      	movs	r0, #3
}
 800259e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80025a0:	f022 0201 	bic.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025a6:	f7fe fc77 	bl	8000e98 <HAL_GetTick>
 80025aa:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 80025ac:	f7ff fe51 	bl	8002252 <LL_RCC_MSI_IsReady>
 80025b0:	2800      	cmp	r0, #0
 80025b2:	f43f af74 	beq.w	800249e <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b6:	f7fe fc6f 	bl	8000e98 <HAL_GetTick>
 80025ba:	1b40      	subs	r0, r0, r5
 80025bc:	2802      	cmp	r0, #2
 80025be:	d9f5      	bls.n	80025ac <HAL_RCC_OscConfig+0x180>
 80025c0:	e7ec      	b.n	800259c <HAL_RCC_OscConfig+0x170>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80025c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80025ca:	682b      	ldr	r3, [r5, #0]
 80025cc:	d111      	bne.n	80025f2 <HAL_RCC_OscConfig+0x1c6>
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80025d4:	f7fe fc60 	bl	8000e98 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80025d8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80025dc:	4605      	mov	r5, r0
 80025de:	6833      	ldr	r3, [r6, #0]
 80025e0:	039f      	lsls	r7, r3, #14
 80025e2:	f53f af71 	bmi.w	80024c8 <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e6:	f7fe fc57 	bl	8000e98 <HAL_GetTick>
 80025ea:	1b43      	subs	r3, r0, r5
 80025ec:	2b64      	cmp	r3, #100	; 0x64
 80025ee:	d9f6      	bls.n	80025de <HAL_RCC_OscConfig+0x1b2>
 80025f0:	e7d4      	b.n	800259c <HAL_RCC_OscConfig+0x170>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80025f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f6:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f8:	2a00      	cmp	r2, #0
 80025fa:	d1eb      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1a8>
        tickstart = HAL_GetTick();
 80025fc:	f7fe fc4c 	bl	8000e98 <HAL_GetTick>
 8002600:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002602:	682b      	ldr	r3, [r5, #0]
 8002604:	0398      	lsls	r0, r3, #14
 8002606:	f57f af5f 	bpl.w	80024c8 <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260a:	f7fe fc45 	bl	8000e98 <HAL_GetTick>
 800260e:	1b83      	subs	r3, r0, r6
 8002610:	2b64      	cmp	r3, #100	; 0x64
 8002612:	d9f6      	bls.n	8002602 <HAL_RCC_OscConfig+0x1d6>
 8002614:	e7c2      	b.n	800259c <HAL_RCC_OscConfig+0x170>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002616:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800261a:	682b      	ldr	r3, [r5, #0]
 800261c:	b1b1      	cbz	r1, 800264c <HAL_RCC_OscConfig+0x220>
 800261e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002622:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002624:	f7fe fc38 	bl	8000e98 <HAL_GetTick>
 8002628:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800262a:	682b      	ldr	r3, [r5, #0]
 800262c:	055a      	lsls	r2, r3, #21
 800262e:	d405      	bmi.n	800263c <HAL_RCC_OscConfig+0x210>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002630:	f7fe fc32 	bl	8000e98 <HAL_GetTick>
 8002634:	1b83      	subs	r3, r0, r6
 8002636:	2b02      	cmp	r3, #2
 8002638:	d9f7      	bls.n	800262a <HAL_RCC_OscConfig+0x1fe>
 800263a:	e7af      	b.n	800259c <HAL_RCC_OscConfig+0x170>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800263c:	686b      	ldr	r3, [r5, #4]
 800263e:	6922      	ldr	r2, [r4, #16]
 8002640:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002644:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002648:	606b      	str	r3, [r5, #4]
}
 800264a:	e75c      	b.n	8002506 <HAL_RCC_OscConfig+0xda>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800264c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002650:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002652:	f7fe fc21 	bl	8000e98 <HAL_GetTick>
 8002656:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	055b      	lsls	r3, r3, #21
 800265c:	f57f af53 	bpl.w	8002506 <HAL_RCC_OscConfig+0xda>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002660:	f7fe fc1a 	bl	8000e98 <HAL_GetTick>
 8002664:	1b83      	subs	r3, r0, r6
 8002666:	2b02      	cmp	r3, #2
 8002668:	d9f6      	bls.n	8002658 <HAL_RCC_OscConfig+0x22c>
 800266a:	e797      	b.n	800259c <HAL_RCC_OscConfig+0x170>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800266c:	6962      	ldr	r2, [r4, #20]
 800266e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002672:	2a00      	cmp	r2, #0
 8002674:	d072      	beq.n	800275c <HAL_RCC_OscConfig+0x330>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002676:	06de      	lsls	r6, r3, #27
 8002678:	d547      	bpl.n	800270a <HAL_RCC_OscConfig+0x2de>
        if (LL_RCC_LSI1_IsReady() == 0U)
 800267a:	f7ff fde3 	bl	8002244 <LL_RCC_LSI1_IsReady>
 800267e:	b1a0      	cbz	r0, 80026aa <HAL_RCC_OscConfig+0x27e>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002680:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002684:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002688:	f043 0304 	orr.w	r3, r3, #4
 800268c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002690:	f7fe fc02 	bl	8000e98 <HAL_GetTick>
 8002694:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002696:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800269a:	0718      	lsls	r0, r3, #28
 800269c:	d418      	bmi.n	80026d0 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800269e:	f7fe fbfb 	bl	8000e98 <HAL_GetTick>
 80026a2:	1b83      	subs	r3, r0, r6
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d9f6      	bls.n	8002696 <HAL_RCC_OscConfig+0x26a>
 80026a8:	e778      	b.n	800259c <HAL_RCC_OscConfig+0x170>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80026aa:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 80026b6:	f7fe fbef 	bl	8000e98 <HAL_GetTick>
 80026ba:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 80026bc:	f7ff fdc2 	bl	8002244 <LL_RCC_LSI1_IsReady>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d1dd      	bne.n	8002680 <HAL_RCC_OscConfig+0x254>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026c4:	f7fe fbe8 	bl	8000e98 <HAL_GetTick>
 80026c8:	1b40      	subs	r0, r0, r5
 80026ca:	2802      	cmp	r0, #2
 80026cc:	d9f6      	bls.n	80026bc <HAL_RCC_OscConfig+0x290>
 80026ce:	e765      	b.n	800259c <HAL_RCC_OscConfig+0x170>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80026d0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80026d4:	69a2      	ldr	r2, [r4, #24]
 80026d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026de:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80026e2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 80026ee:	f7fe fbd3 	bl	8000e98 <HAL_GetTick>
 80026f2:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 80026f4:	f7ff fda6 	bl	8002244 <LL_RCC_LSI1_IsReady>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	f43f af09 	beq.w	8002510 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026fe:	f7fe fbcb 	bl	8000e98 <HAL_GetTick>
 8002702:	1b40      	subs	r0, r0, r5
 8002704:	2802      	cmp	r0, #2
 8002706:	d9f5      	bls.n	80026f4 <HAL_RCC_OscConfig+0x2c8>
 8002708:	e748      	b.n	800259c <HAL_RCC_OscConfig+0x170>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800270a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002716:	f7fe fbbf 	bl	8000e98 <HAL_GetTick>
 800271a:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 800271c:	f7ff fd92 	bl	8002244 <LL_RCC_LSI1_IsReady>
 8002720:	b190      	cbz	r0, 8002748 <HAL_RCC_OscConfig+0x31c>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002722:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002726:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002732:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002736:	0719      	lsls	r1, r3, #28
 8002738:	f57f aeea 	bpl.w	8002510 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800273c:	f7fe fbac 	bl	8000e98 <HAL_GetTick>
 8002740:	1b40      	subs	r0, r0, r5
 8002742:	2803      	cmp	r0, #3
 8002744:	d9f5      	bls.n	8002732 <HAL_RCC_OscConfig+0x306>
 8002746:	e729      	b.n	800259c <HAL_RCC_OscConfig+0x170>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002748:	f7fe fba6 	bl	8000e98 <HAL_GetTick>
 800274c:	1b40      	subs	r0, r0, r5
 800274e:	2802      	cmp	r0, #2
 8002750:	d9e4      	bls.n	800271c <HAL_RCC_OscConfig+0x2f0>
 8002752:	e723      	b.n	800259c <HAL_RCC_OscConfig+0x170>
 8002754:	2000005c 	.word	0x2000005c
 8002758:	20000064 	.word	0x20000064
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800275c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002760:	f023 0304 	bic.w	r3, r3, #4
 8002764:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002768:	f7fe fb96 	bl	8000e98 <HAL_GetTick>
 800276c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800276e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002772:	071a      	lsls	r2, r3, #28
 8002774:	d413      	bmi.n	800279e <HAL_RCC_OscConfig+0x372>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002776:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002782:	f7fe fb89 	bl	8000e98 <HAL_GetTick>
 8002786:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002788:	f7ff fd5c 	bl	8002244 <LL_RCC_LSI1_IsReady>
 800278c:	2800      	cmp	r0, #0
 800278e:	f43f aebf 	beq.w	8002510 <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002792:	f7fe fb81 	bl	8000e98 <HAL_GetTick>
 8002796:	1b40      	subs	r0, r0, r5
 8002798:	2802      	cmp	r0, #2
 800279a:	d9f5      	bls.n	8002788 <HAL_RCC_OscConfig+0x35c>
 800279c:	e6fe      	b.n	800259c <HAL_RCC_OscConfig+0x170>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800279e:	f7fe fb7b 	bl	8000e98 <HAL_GetTick>
 80027a2:	1b83      	subs	r3, r0, r6
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d9e2      	bls.n	800276e <HAL_RCC_OscConfig+0x342>
 80027a8:	e6f8      	b.n	800259c <HAL_RCC_OscConfig+0x170>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027aa:	4e81      	ldr	r6, [pc, #516]	; (80029b0 <HAL_RCC_OscConfig+0x584>)
 80027ac:	6833      	ldr	r3, [r6, #0]
 80027ae:	05db      	lsls	r3, r3, #23
 80027b0:	d51c      	bpl.n	80027ec <HAL_RCC_OscConfig+0x3c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b2:	68a3      	ldr	r3, [r4, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80027ba:	d125      	bne.n	8002808 <HAL_RCC_OscConfig+0x3dc>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027bc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 80027c8:	f7fe fb66 	bl	8000e98 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80027cc:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80027d0:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f241 3688 	movw	r6, #5000	; 0x1388
 80027d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027da:	0798      	lsls	r0, r3, #30
 80027dc:	f53f ae9c 	bmi.w	8002518 <HAL_RCC_OscConfig+0xec>
 80027e0:	f7fe fb5a 	bl	8000e98 <HAL_GetTick>
 80027e4:	1b43      	subs	r3, r0, r5
 80027e6:	42b3      	cmp	r3, r6
 80027e8:	d9f5      	bls.n	80027d6 <HAL_RCC_OscConfig+0x3aa>
 80027ea:	e6d7      	b.n	800259c <HAL_RCC_OscConfig+0x170>
      HAL_PWR_EnableBkUpAccess();
 80027ec:	f7ff fcd2 	bl	8002194 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80027f0:	f7fe fb52 	bl	8000e98 <HAL_GetTick>
 80027f4:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f6:	6833      	ldr	r3, [r6, #0]
 80027f8:	05df      	lsls	r7, r3, #23
 80027fa:	d4da      	bmi.n	80027b2 <HAL_RCC_OscConfig+0x386>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fc:	f7fe fb4c 	bl	8000e98 <HAL_GetTick>
 8002800:	1b40      	subs	r0, r0, r5
 8002802:	2802      	cmp	r0, #2
 8002804:	d9f7      	bls.n	80027f6 <HAL_RCC_OscConfig+0x3ca>
 8002806:	e6c9      	b.n	800259c <HAL_RCC_OscConfig+0x170>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002808:	2b05      	cmp	r3, #5
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x3ee>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800280c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002810:	f043 0304 	orr.w	r3, r3, #4
 8002814:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8002818:	e7d0      	b.n	80027bc <HAL_RCC_OscConfig+0x390>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800281a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002826:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800282a:	f022 0204 	bic.w	r2, r2, #4
 800282e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1c8      	bne.n	80027c8 <HAL_RCC_OscConfig+0x39c>
      tickstart = HAL_GetTick();
 8002836:	f7fe fb2f 	bl	8000e98 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800283e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002840:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002844:	0799      	lsls	r1, r3, #30
 8002846:	f57f ae67 	bpl.w	8002518 <HAL_RCC_OscConfig+0xec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7fe fb25 	bl	8000e98 <HAL_GetTick>
 800284e:	1b83      	subs	r3, r0, r6
 8002850:	42bb      	cmp	r3, r7
 8002852:	d9f5      	bls.n	8002840 <HAL_RCC_OscConfig+0x414>
 8002854:	e6a2      	b.n	800259c <HAL_RCC_OscConfig+0x170>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002856:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002862:	f7fe fb19 	bl	8000e98 <HAL_GetTick>
 8002866:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002868:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800286c:	079f      	lsls	r7, r3, #30
 800286e:	d505      	bpl.n	800287c <HAL_RCC_OscConfig+0x450>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002870:	f7fe fb12 	bl	8000e98 <HAL_GetTick>
 8002874:	1b83      	subs	r3, r0, r6
 8002876:	2b02      	cmp	r3, #2
 8002878:	d9f6      	bls.n	8002868 <HAL_RCC_OscConfig+0x43c>
 800287a:	e68f      	b.n	800259c <HAL_RCC_OscConfig+0x170>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800287c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800287e:	b909      	cbnz	r1, 8002884 <HAL_RCC_OscConfig+0x458>
  return HAL_OK;
 8002880:	2000      	movs	r0, #0
 8002882:	e68c      	b.n	800259e <HAL_RCC_OscConfig+0x172>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002884:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002888:	2902      	cmp	r1, #2
 800288a:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800288c:	68eb      	ldr	r3, [r5, #12]
 800288e:	f002 020c 	and.w	r2, r2, #12
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002892:	d174      	bne.n	800297e <HAL_RCC_OscConfig+0x552>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002894:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002896:	f003 0103 	and.w	r1, r3, #3
 800289a:	4281      	cmp	r1, r0
 800289c:	d118      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4a4>
 800289e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028a0:	f003 0170 	and.w	r1, r3, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a4:	4281      	cmp	r1, r0
 80028a6:	d113      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4a4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80028aa:	f3c3 2106 	ubfx	r1, r3, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ae:	4281      	cmp	r1, r0
 80028b0:	d10e      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4a4>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80028b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028b4:	f403 1178 	and.w	r1, r3, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80028b8:	4281      	cmp	r1, r0
 80028ba:	d109      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4a4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028bc:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028be:	f003 6160 	and.w	r1, r3, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028c2:	4281      	cmp	r1, r0
 80028c4:	d104      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4a4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80028c8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028cc:	428b      	cmp	r3, r1
 80028ce:	d03f      	beq.n	8002950 <HAL_RCC_OscConfig+0x524>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d0:	2a0c      	cmp	r2, #12
 80028d2:	f43f adae 	beq.w	8002432 <HAL_RCC_OscConfig+0x6>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028d6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80028da:	682b      	ldr	r3, [r5, #0]
 80028dc:	015e      	lsls	r6, r3, #5
 80028de:	f53f ada8 	bmi.w	8002432 <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80028e2:	682b      	ldr	r3, [r5, #0]
 80028e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e8:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80028ea:	f7fe fad5 	bl	8000e98 <HAL_GetTick>
 80028ee:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f0:	682b      	ldr	r3, [r5, #0]
 80028f2:	0198      	lsls	r0, r3, #6
 80028f4:	d426      	bmi.n	8002944 <HAL_RCC_OscConfig+0x518>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f6:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 80028fa:	68e9      	ldr	r1, [r5, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <HAL_RCC_OscConfig+0x588>)
 8002900:	400a      	ands	r2, r1
 8002902:	4313      	orrs	r3, r2
 8002904:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002906:	4313      	orrs	r3, r2
 8002908:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800290a:	4313      	orrs	r3, r2
 800290c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800290e:	4313      	orrs	r3, r2
 8002910:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002912:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002916:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291e:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002920:	68eb      	ldr	r3, [r5, #12]
 8002922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002926:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8002928:	f7fe fab6 	bl	8000e98 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8002930:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	682b      	ldr	r3, [r5, #0]
 8002934:	0199      	lsls	r1, r3, #6
 8002936:	d4a3      	bmi.n	8002880 <HAL_RCC_OscConfig+0x454>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe faae 	bl	8000e98 <HAL_GetTick>
 800293c:	1b00      	subs	r0, r0, r4
 800293e:	2802      	cmp	r0, #2
 8002940:	d9f7      	bls.n	8002932 <HAL_RCC_OscConfig+0x506>
 8002942:	e62b      	b.n	800259c <HAL_RCC_OscConfig+0x170>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe faa8 	bl	8000e98 <HAL_GetTick>
 8002948:	1b80      	subs	r0, r0, r6
 800294a:	2802      	cmp	r0, #2
 800294c:	d9d0      	bls.n	80028f0 <HAL_RCC_OscConfig+0x4c4>
 800294e:	e625      	b.n	800259c <HAL_RCC_OscConfig+0x170>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	019a      	lsls	r2, r3, #6
 8002954:	d494      	bmi.n	8002880 <HAL_RCC_OscConfig+0x454>
 8002956:	682b      	ldr	r3, [r5, #0]
 8002958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295c:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800295e:	68eb      	ldr	r3, [r5, #12]
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 8002966:	f7fe fa97 	bl	8000e98 <HAL_GetTick>
 800296a:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	019b      	lsls	r3, r3, #6
 8002970:	d486      	bmi.n	8002880 <HAL_RCC_OscConfig+0x454>
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe fa91 	bl	8000e98 <HAL_GetTick>
 8002976:	1b00      	subs	r0, r0, r4
 8002978:	2802      	cmp	r0, #2
 800297a:	d9f7      	bls.n	800296c <HAL_RCC_OscConfig+0x540>
 800297c:	e60e      	b.n	800259c <HAL_RCC_OscConfig+0x170>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297e:	2a0c      	cmp	r2, #12
 8002980:	f43f ad57 	beq.w	8002432 <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002984:	682b      	ldr	r3, [r5, #0]
 8002986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800298a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800298c:	f7fe fa84 	bl	8000e98 <HAL_GetTick>
 8002990:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002992:	682b      	ldr	r3, [r5, #0]
 8002994:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002998:	d104      	bne.n	80029a4 <HAL_RCC_OscConfig+0x578>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800299a:	68e9      	ldr	r1, [r5, #12]
 800299c:	4a06      	ldr	r2, [pc, #24]	; (80029b8 <HAL_RCC_OscConfig+0x58c>)
 800299e:	400a      	ands	r2, r1
 80029a0:	60ea      	str	r2, [r5, #12]
 80029a2:	e76d      	b.n	8002880 <HAL_RCC_OscConfig+0x454>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe fa78 	bl	8000e98 <HAL_GetTick>
 80029a8:	1b00      	subs	r0, r0, r4
 80029aa:	2802      	cmp	r0, #2
 80029ac:	d9f1      	bls.n	8002992 <HAL_RCC_OscConfig+0x566>
 80029ae:	e5f5      	b.n	800259c <HAL_RCC_OscConfig+0x170>
 80029b0:	58000400 	.word	0x58000400
 80029b4:	11c1808c 	.word	0x11c1808c
 80029b8:	eefefffc 	.word	0xeefefffc

080029bc <HAL_RCC_ClockConfig>:
{
 80029bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80029c2:	4604      	mov	r4, r0
 80029c4:	b910      	cbnz	r0, 80029cc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80029c6:	2001      	movs	r0, #1
}
 80029c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4e79      	ldr	r6, [pc, #484]	; (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 80029ce:	6833      	ldr	r3, [r6, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d316      	bcc.n	8002a06 <HAL_RCC_ClockConfig+0x4a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	079a      	lsls	r2, r3, #30
 80029dc:	d527      	bpl.n	8002a2e <HAL_RCC_ClockConfig+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80029de:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80029e2:	68a2      	ldr	r2, [r4, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80029ee:	f7fe fa53 	bl	8000e98 <HAL_GetTick>
 80029f2:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	03db      	lsls	r3, r3, #15
 80029f8:	d419      	bmi.n	8002a2e <HAL_RCC_ClockConfig+0x72>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029fa:	f7fe fa4d 	bl	8000e98 <HAL_GetTick>
 80029fe:	1b83      	subs	r3, r0, r6
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d9f7      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x38>
 8002a04:	e011      	b.n	8002a2a <HAL_RCC_ClockConfig+0x6e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	6833      	ldr	r3, [r6, #0]
 8002a08:	f023 0307 	bic.w	r3, r3, #7
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002a10:	f7fe fa42 	bl	8000e98 <HAL_GetTick>
 8002a14:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	6833      	ldr	r3, [r6, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	42ab      	cmp	r3, r5
 8002a1e:	d0db      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a20:	f7fe fa3a 	bl	8000e98 <HAL_GetTick>
 8002a24:	1bc0      	subs	r0, r0, r7
 8002a26:	2802      	cmp	r0, #2
 8002a28:	d9f5      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x5a>
        return HAL_TIMEOUT;
 8002a2a:	2003      	movs	r0, #3
 8002a2c:	e7cc      	b.n	80029c8 <HAL_RCC_ClockConfig+0xc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	0698      	lsls	r0, r3, #26
 8002a32:	d516      	bpl.n	8002a62 <HAL_RCC_ClockConfig+0xa6>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002a34:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002a38:	6962      	ldr	r2, [r4, #20]
 8002a3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002a48:	f7fe fa26 	bl	8000e98 <HAL_GetTick>
 8002a4c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002a4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a52:	0399      	lsls	r1, r3, #14
 8002a54:	d405      	bmi.n	8002a62 <HAL_RCC_ClockConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a56:	f7fe fa1f 	bl	8000e98 <HAL_GetTick>
 8002a5a:	1b83      	subs	r3, r0, r6
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d9f6      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x92>
 8002a60:	e7e3      	b.n	8002a2a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	065a      	lsls	r2, r3, #25
 8002a66:	d517      	bpl.n	8002a98 <HAL_RCC_ClockConfig+0xdc>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002a68:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002a6c:	69a2      	ldr	r2, [r4, #24]
 8002a6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a72:	f023 030f 	bic.w	r3, r3, #15
 8002a76:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8002a7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002a7e:	f7fe fa0b 	bl	8000e98 <HAL_GetTick>
 8002a82:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a88:	03db      	lsls	r3, r3, #15
 8002a8a:	d405      	bmi.n	8002a98 <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a8c:	f7fe fa04 	bl	8000e98 <HAL_GetTick>
 8002a90:	1b83      	subs	r3, r0, r6
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d9f6      	bls.n	8002a84 <HAL_RCC_ClockConfig+0xc8>
 8002a96:	e7c8      	b.n	8002a2a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	075e      	lsls	r6, r3, #29
 8002a9c:	d513      	bpl.n	8002ac6 <HAL_RCC_ClockConfig+0x10a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002a9e:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002aa2:	68e2      	ldr	r2, [r4, #12]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002aae:	f7fe f9f3 	bl	8000e98 <HAL_GetTick>
 8002ab2:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0398      	lsls	r0, r3, #14
 8002ab8:	d405      	bmi.n	8002ac6 <HAL_RCC_ClockConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aba:	f7fe f9ed 	bl	8000e98 <HAL_GetTick>
 8002abe:	1b83      	subs	r3, r0, r6
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d9f7      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0xf8>
 8002ac4:	e7b1      	b.n	8002a2a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	0719      	lsls	r1, r3, #28
 8002aca:	d514      	bpl.n	8002af6 <HAL_RCC_ClockConfig+0x13a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002acc:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002ad0:	6922      	ldr	r2, [r4, #16]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ad8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002adc:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002ade:	f7fe f9db 	bl	8000e98 <HAL_GetTick>
 8002ae2:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	035a      	lsls	r2, r3, #13
 8002ae8:	d405      	bmi.n	8002af6 <HAL_RCC_ClockConfig+0x13a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aea:	f7fe f9d5 	bl	8000e98 <HAL_GetTick>
 8002aee:	1b83      	subs	r3, r0, r6
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d9f7      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x128>
 8002af4:	e799      	b.n	8002a2a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	07db      	lsls	r3, r3, #31
 8002afa:	d40f      	bmi.n	8002b1c <HAL_RCC_ClockConfig+0x160>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002afc:	4c2d      	ldr	r4, [pc, #180]	; (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	42ab      	cmp	r3, r5
 8002b06:	d841      	bhi.n	8002b8c <HAL_RCC_ClockConfig+0x1d0>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b08:	f7ff fc80 	bl	800240c <HAL_RCC_GetHCLKFreq>
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <HAL_RCC_ClockConfig+0x1fc>)
 8002b0e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 8002b10:	f7fe f9c8 	bl	8000ea4 <HAL_GetTickPrio>
}
 8002b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8002b18:	f7fe b980 	b.w	8000e1c <HAL_InitTick>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1c:	6863      	ldr	r3, [r4, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d120      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x1a8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b2c:	f43f af4b 	beq.w	80029c6 <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002b30:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002b34:	6862      	ldr	r2, [r4, #4]
 8002b36:	68b3      	ldr	r3, [r6, #8]
 8002b38:	f023 0303 	bic.w	r3, r3, #3
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002b40:	f7fe f9aa 	bl	8000e98 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002b48:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b4a:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4c:	6862      	ldr	r2, [r4, #4]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b56:	d0d1      	beq.n	8002afc <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7fe f99e 	bl	8000e98 <HAL_GetTick>
 8002b5c:	1bc0      	subs	r0, r0, r7
 8002b5e:	4540      	cmp	r0, r8
 8002b60:	d9f3      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x18e>
 8002b62:	e762      	b.n	8002a2a <HAL_RCC_ClockConfig+0x6e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d105      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1b8>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b72:	e7db      	b.n	8002b2c <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b74:	b923      	cbnz	r3, 8002b80 <HAL_RCC_ClockConfig+0x1c4>
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b76:	f7ff fb6c 	bl	8002252 <LL_RCC_MSI_IsReady>
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d1d8      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x174>
 8002b7e:	e722      	b.n	80029c6 <HAL_RCC_ClockConfig+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002b8a:	e7cf      	b.n	8002b2c <HAL_RCC_ClockConfig+0x170>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	f023 0307 	bic.w	r3, r3, #7
 8002b92:	432b      	orrs	r3, r5
 8002b94:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002b96:	f7fe f97f 	bl	8000e98 <HAL_GetTick>
 8002b9a:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	42ab      	cmp	r3, r5
 8002ba4:	d0b0      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x14c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ba6:	f7fe f977 	bl	8000e98 <HAL_GetTick>
 8002baa:	1b80      	subs	r0, r0, r6
 8002bac:	2802      	cmp	r0, #2
 8002bae:	d9f5      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x1e0>
 8002bb0:	e73b      	b.n	8002a2a <HAL_RCC_ClockConfig+0x6e>
 8002bb2:	bf00      	nop
 8002bb4:	58004000 	.word	0x58004000
 8002bb8:	2000005c 	.word	0x2000005c

08002bbc <LL_RCC_HSE_IsEnabledDiv2>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc0:	6818      	ldr	r0, [r3, #0]
}
 8002bc2:	f3c0 5000 	ubfx	r0, r0, #20, #1
 8002bc6:	4770      	bx	lr

08002bc8 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	6818      	ldr	r0, [r3, #0]
}
 8002bce:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8002bd2:	4770      	bx	lr

08002bd4 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002bdc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002be0:	4770      	bx	lr

08002be2 <LL_RCC_LSI1_IsReady>:
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be6:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8002bea:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002bee:	4770      	bx	lr

08002bf0 <LL_RCC_LSI2_IsReady>:
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf4:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8002bf8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8002bfc:	4770      	bx	lr

08002bfe <LL_RCC_MSI_GetRange>:
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 8002c08:	28b0      	cmp	r0, #176	; 0xb0
 8002c0a:	bf28      	it	cs
 8002c0c:	20b0      	movcs	r0, #176	; 0xb0
 8002c0e:	4770      	bx	lr

08002c10 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002c10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c14:	0902      	lsrs	r2, r0, #4
 8002c16:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c1a:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8002c1e:	0100      	lsls	r0, r0, #4
 8002c20:	ea23 0302 	bic.w	r3, r3, r2
 8002c24:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8002c28:	4318      	orrs	r0, r3
 8002c2a:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
}
 8002c2e:	4770      	bx	lr

08002c30 <LL_RCC_PLL_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c34:	6818      	ldr	r0, [r3, #0]
}
 8002c36:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8002c3a:	4770      	bx	lr

08002c3c <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c40:	6813      	ldr	r3, [r2, #0]
 8002c42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c46:	6013      	str	r3, [r2, #0]
}
 8002c48:	4770      	bx	lr

08002c4a <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4e:	6813      	ldr	r3, [r2, #0]
 8002c50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c54:	6013      	str	r3, [r2, #0]
}
 8002c56:	4770      	bx	lr

08002c58 <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	6818      	ldr	r0, [r3, #0]
}
 8002c5e:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8002c62:	4770      	bx	lr

08002c64 <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8002c64:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d023      	beq.n	8002cbc <RCC_PLL_GetFreqDomain_Q+0x58>
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d019      	beq.n	8002cac <RCC_PLL_GetFreqDomain_Q+0x48>
      }

      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c78:	f7ff ffc1 	bl	8002bfe <LL_RCC_MSI_GetRange>
 8002c7c:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <RCC_PLL_GetFreqDomain_Q+0x5c>)
 8002c7e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002c82:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c86:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002c8a:	68c3      	ldr	r3, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c8c:	68c1      	ldr	r1, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8002c8e:	68c0      	ldr	r0, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c90:	f3c3 2306 	ubfx	r3, r3, #8, #7
      break;
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002c94:	4353      	muls	r3, r2
 8002c96:	f3c0 6042 	ubfx	r0, r0, #25, #3
 8002c9a:	f3c1 1202 	ubfx	r2, r1, #4, #3
 8002c9e:	3201      	adds	r2, #1
 8002ca0:	3001      	adds	r0, #1
 8002ca2:	fbb3 f3f2 	udiv	r3, r3, r2
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8002ca6:	fbb3 f0f0 	udiv	r0, r3, r0
 8002caa:	bd08      	pop	{r3, pc}
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cac:	f7ff ff86 	bl	8002bbc <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <RCC_PLL_GetFreqDomain_Q+0x60>)
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <RCC_PLL_GetFreqDomain_Q+0x64>)
 8002cb4:	2801      	cmp	r0, #1
 8002cb6:	bf08      	it	eq
 8002cb8:	461a      	moveq	r2, r3
 8002cba:	e7e4      	b.n	8002c86 <RCC_PLL_GetFreqDomain_Q+0x22>
  switch (pllsource)
 8002cbc:	4a02      	ldr	r2, [pc, #8]	; (8002cc8 <RCC_PLL_GetFreqDomain_Q+0x64>)
 8002cbe:	e7e2      	b.n	8002c86 <RCC_PLL_GetFreqDomain_Q+0x22>
 8002cc0:	08007b48 	.word	0x08007b48
 8002cc4:	01e84800 	.word	0x01e84800
 8002cc8:	00f42400 	.word	0x00f42400

08002ccc <RCC_PLL_GetFreqDomain_P>:
{
 8002ccc:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d023      	beq.n	8002d24 <RCC_PLL_GetFreqDomain_P+0x58>
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d019      	beq.n	8002d14 <RCC_PLL_GetFreqDomain_P+0x48>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ce0:	f7ff ff8d 	bl	8002bfe <LL_RCC_MSI_GetRange>
 8002ce4:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <RCC_PLL_GetFreqDomain_P+0x5c>)
 8002ce6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002cea:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cee:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002cf2:	68c3      	ldr	r3, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002cf4:	68c1      	ldr	r1, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002cf6:	68c0      	ldr	r0, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cf8:	f3c3 2306 	ubfx	r3, r3, #8, #7
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002cfc:	4353      	muls	r3, r2
 8002cfe:	f3c0 4044 	ubfx	r0, r0, #17, #5
 8002d02:	f3c1 1202 	ubfx	r2, r1, #4, #3
 8002d06:	3201      	adds	r2, #1
 8002d08:	3001      	adds	r0, #1
 8002d0a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8002d0e:	fbb3 f0f0 	udiv	r0, r3, r0
 8002d12:	bd08      	pop	{r3, pc}
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d14:	f7ff ff52 	bl	8002bbc <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 8002d18:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <RCC_PLL_GetFreqDomain_P+0x60>)
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <RCC_PLL_GetFreqDomain_P+0x64>)
 8002d1c:	2801      	cmp	r0, #1
 8002d1e:	bf08      	it	eq
 8002d20:	461a      	moveq	r2, r3
 8002d22:	e7e4      	b.n	8002cee <RCC_PLL_GetFreqDomain_P+0x22>
  switch (pllsource)
 8002d24:	4a02      	ldr	r2, [pc, #8]	; (8002d30 <RCC_PLL_GetFreqDomain_P+0x64>)
 8002d26:	e7e2      	b.n	8002cee <RCC_PLL_GetFreqDomain_P+0x22>
 8002d28:	08007b48 	.word	0x08007b48
 8002d2c:	01e84800 	.word	0x01e84800
 8002d30:	00f42400 	.word	0x00f42400

08002d34 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8002d34:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0303 	and.w	r3, r3, #3

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d023      	beq.n	8002d8c <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d019      	beq.n	8002d7c <RCC_PLLSAI1_GetFreqDomain_Q+0x48>
        pllinputfreq = HSE_VALUE;
      }
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002d48:	f7ff ff59 	bl	8002bfe <LL_RCC_MSI_GetRange>
 8002d4c:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <RCC_PLLSAI1_GetFreqDomain_Q+0x5c>)
 8002d4e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002d52:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8002d56:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002d5a:	6903      	ldr	r3, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d5c:	68c1      	ldr	r1, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8002d5e:	6900      	ldr	r0, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8002d60:	f3c3 2306 	ubfx	r3, r3, #8, #7
      break;
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d64:	4353      	muls	r3, r2
 8002d66:	f3c0 6042 	ubfx	r0, r0, #25, #3
 8002d6a:	f3c1 1202 	ubfx	r2, r1, #4, #3
 8002d6e:	3201      	adds	r2, #1
 8002d70:	3001      	adds	r0, #1
 8002d72:	fbb3 f3f2 	udiv	r3, r3, r2
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8002d76:	fbb3 f0f0 	udiv	r0, r3, r0
 8002d7a:	bd08      	pop	{r3, pc}
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d7c:	f7ff ff1e 	bl	8002bbc <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <RCC_PLLSAI1_GetFreqDomain_Q+0x60>)
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <RCC_PLLSAI1_GetFreqDomain_Q+0x64>)
 8002d84:	2801      	cmp	r0, #1
 8002d86:	bf08      	it	eq
 8002d88:	461a      	moveq	r2, r3
 8002d8a:	e7e4      	b.n	8002d56 <RCC_PLLSAI1_GetFreqDomain_Q+0x22>
  switch (pllsource)
 8002d8c:	4a02      	ldr	r2, [pc, #8]	; (8002d98 <RCC_PLLSAI1_GetFreqDomain_Q+0x64>)
 8002d8e:	e7e2      	b.n	8002d56 <RCC_PLLSAI1_GetFreqDomain_Q+0x22>
 8002d90:	08007b48 	.word	0x08007b48
 8002d94:	01e84800 	.word	0x01e84800
 8002d98:	00f42400 	.word	0x00f42400

08002d9c <HAL_RCCEx_PeriphCLKConfig>:
{
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d9e:	6805      	ldr	r5, [r0, #0]
 8002da0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8002da4:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002da8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dae:	f000 80d9 	beq.w	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002db2:	f200 80c5 	bhi.w	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80db 	beq.w	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8002dbc:	2501      	movs	r5, #1
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	0518      	lsls	r0, r3, #20
 8002dc2:	d515      	bpl.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x54>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002dc4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002dc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dca:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8002dce:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8002dd2:	42bb      	cmp	r3, r7
 8002dd4:	d00c      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      HAL_PWR_EnableBkUpAccess();
 8002dd6:	f7ff f9dd 	bl	8002194 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002dda:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002dde:	2f00      	cmp	r7, #0
 8002de0:	f040 80fb 	bne.w	8002fda <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8002de4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	07da      	lsls	r2, r3, #31
 8002df4:	d509      	bpl.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfa:	69a0      	ldr	r0, [r4, #24]
 8002dfc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e00:	f022 0203 	bic.w	r2, r2, #3
 8002e04:	4302      	orrs	r2, r0
 8002e06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e0a:	079f      	lsls	r7, r3, #30
 8002e0c:	d509      	bpl.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x86>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e12:	69e0      	ldr	r0, [r4, #28]
 8002e14:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e1c:	4302      	orrs	r2, r0
 8002e1e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e22:	06de      	lsls	r6, r3, #27
 8002e24:	d50c      	bpl.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e28:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002e2c:	0c31      	lsrs	r1, r6, #16
 8002e2e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002e32:	0409      	lsls	r1, r1, #16
 8002e34:	ea22 0201 	bic.w	r2, r2, r1
 8002e38:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8002e3c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e40:	0698      	lsls	r0, r3, #26
 8002e42:	d50c      	bpl.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e46:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002e4a:	0c31      	lsrs	r1, r6, #16
 8002e4c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002e50:	0409      	lsls	r1, r1, #16
 8002e52:	ea22 0201 	bic.w	r2, r2, r1
 8002e56:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8002e5a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e5e:	0759      	lsls	r1, r3, #29
 8002e60:	d502      	bpl.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e62:	6a20      	ldr	r0, [r4, #32]
 8002e64:	f7ff fed4 	bl	8002c10 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	071a      	lsls	r2, r3, #28
 8002e6c:	d502      	bpl.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002e70:	f7ff fece 	bl	8002c10 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	05db      	lsls	r3, r3, #23
 8002e78:	d511      	bpl.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x102>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e84:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002e88:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e8a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8002e8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002e92:	f040 80ca 	bne.w	800302a <HAL_RCCEx_PeriphCLKConfig+0x28e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002e96:	68d3      	ldr	r3, [r2, #12]
 8002e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e9e:	6826      	ldr	r6, [r4, #0]
 8002ea0:	05b7      	lsls	r7, r6, #22
 8002ea2:	d51a      	bpl.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ea4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ea6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eae:	d003      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002eb0:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 8002eb4:	f040 80f1 	bne.w	800309a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002eb8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8002ebc:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8002ec0:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ec2:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002ec6:	bf08      	it	eq
 8002ec8:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002ecc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8002ed0:	bf02      	ittt	eq
 8002ed2:	68d3      	ldreq	r3, [r2, #12]
 8002ed4:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8002ed8:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eda:	0570      	lsls	r0, r6, #21
 8002edc:	d511      	bpl.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x166>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ee2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002ee4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ee8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002eec:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002eee:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002ef2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002ef6:	f040 80de 	bne.w	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002efa:	68d3      	ldr	r3, [r2, #12]
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f00:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002f02:	6822      	ldr	r2, [r4, #0]
 8002f04:	04d1      	lsls	r1, r2, #19
 8002f06:	d509      	bpl.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x180>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f0c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002f0e:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8002f12:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f16:	4303      	orrs	r3, r0
 8002f18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002f1c:	0493      	lsls	r3, r2, #18
 8002f1e:	d50d      	bpl.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f24:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002f26:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002f28:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f30:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002f32:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002f34:	f023 0303 	bic.w	r3, r3, #3
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->Sai1ClockSelection)
 8002f40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f48:	f47f af38 	bne.w	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x20>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f50:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002f52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f56:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002f60:	2500      	movs	r5, #0
 8002f62:	e72c      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x22>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f68:	68d3      	ldr	r3, [r2, #12]
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 8002f70:	e7ec      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f72:	f7ff fe6a 	bl	8002c4a <LL_RCC_PLLSAI1_Disable>
  tickstart = HAL_GetTick();
 8002f76:	f7fd ff8f 	bl	8000e98 <HAL_GetTick>
 8002f7a:	4605      	mov	r5, r0
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f7c:	f7ff fe6c 	bl	8002c58 <LL_RCC_PLLSAI1_IsReady>
 8002f80:	b9a0      	cbnz	r0, 8002fac <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f86:	6861      	ldr	r1, [r4, #4]
 8002f88:	6913      	ldr	r3, [r2, #16]
 8002f8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f92:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002f94:	6913      	ldr	r3, [r2, #16]
 8002f96:	68a1      	ldr	r1, [r4, #8]
 8002f98:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 8002fa0:	f7ff fe4c 	bl	8002c3c <LL_RCC_PLLSAI1_Enable>
    tickstart = HAL_GetTick();
 8002fa4:	f7fd ff78 	bl	8000e98 <HAL_GetTick>
 8002fa8:	4605      	mov	r5, r0
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fac:	f7fd ff74 	bl	8000e98 <HAL_GetTick>
 8002fb0:	1b40      	subs	r0, r0, r5
 8002fb2:	2802      	cmp	r0, #2
 8002fb4:	d9e2      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
{
 8002fb6:	2503      	movs	r5, #3
 8002fb8:	e701      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x22>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fba:	f7fd ff6d 	bl	8000e98 <HAL_GetTick>
 8002fbe:	1b40      	subs	r0, r0, r5
 8002fc0:	2802      	cmp	r0, #2
 8002fc2:	d8f8      	bhi.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fc4:	f7ff fe48 	bl	8002c58 <LL_RCC_PLLSAI1_IsReady>
 8002fc8:	2801      	cmp	r0, #1
 8002fca:	d1f6      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd0:	6961      	ldr	r1, [r4, #20]
 8002fd2:	6913      	ldr	r3, [r2, #16]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6113      	str	r3, [r2, #16]
    if (ret == HAL_OK)
 8002fd8:	e7b8      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fda:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002fde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fe2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fe6:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002fea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fee:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002ff2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff8:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8002ffa:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002ffe:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003002:	07d9      	lsls	r1, r3, #31
 8003004:	f57f aef4 	bpl.w	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x54>
          tickstart = HAL_GetTick();
 8003008:	f7fd ff46 	bl	8000e98 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f241 3788 	movw	r7, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8003010:	4606      	mov	r6, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8003012:	f7ff fddf 	bl	8002bd4 <LL_RCC_LSE_IsReady>
 8003016:	2801      	cmp	r0, #1
 8003018:	f43f aeea 	beq.w	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x54>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fd ff3c 	bl	8000e98 <HAL_GetTick>
 8003020:	1b80      	subs	r0, r0, r6
 8003022:	42b8      	cmp	r0, r7
 8003024:	d9f5      	bls.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x276>
              ret = HAL_TIMEOUT;
 8003026:	2503      	movs	r5, #3
 8003028:	e6e2      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800302a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800302e:	f47f af36 	bne.w	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x102>
  __HAL_RCC_PLLSAI1_DISABLE();
 8003032:	f7ff fe0a 	bl	8002c4a <LL_RCC_PLLSAI1_Disable>
  tickstart = HAL_GetTick();
 8003036:	f7fd ff2f 	bl	8000e98 <HAL_GetTick>
 800303a:	4606      	mov	r6, r0
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800303c:	f7ff fe0c 	bl	8002c58 <LL_RCC_PLLSAI1_IsReady>
 8003040:	b9a0      	cbnz	r0, 800306c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003046:	6861      	ldr	r1, [r4, #4]
 8003048:	6913      	ldr	r3, [r2, #16]
 800304a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800304e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003052:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003054:	6913      	ldr	r3, [r2, #16]
 8003056:	68e1      	ldr	r1, [r4, #12]
 8003058:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800305c:	430b      	orrs	r3, r1
 800305e:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 8003060:	f7ff fdec 	bl	8002c3c <LL_RCC_PLLSAI1_Enable>
    tickstart = HAL_GetTick();
 8003064:	f7fd ff18 	bl	8000e98 <HAL_GetTick>
 8003068:	4606      	mov	r6, r0
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800306a:	e00b      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800306c:	f7fd ff14 	bl	8000e98 <HAL_GetTick>
 8003070:	1b80      	subs	r0, r0, r6
 8003072:	2802      	cmp	r0, #2
 8003074:	d9e2      	bls.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
              ret = HAL_TIMEOUT;
 8003076:	2503      	movs	r5, #3
 8003078:	e711      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x102>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800307a:	f7fd ff0d 	bl	8000e98 <HAL_GetTick>
 800307e:	1b80      	subs	r0, r0, r6
 8003080:	2802      	cmp	r0, #2
 8003082:	d8f8      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003084:	f7ff fde8 	bl	8002c58 <LL_RCC_PLLSAI1_IsReady>
 8003088:	2801      	cmp	r0, #1
 800308a:	d1f6      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800308c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003090:	6961      	ldr	r1, [r4, #20]
 8003092:	6913      	ldr	r3, [r2, #16]
 8003094:	430b      	orrs	r3, r1
 8003096:	6113      	str	r3, [r2, #16]
      if (ret != HAL_OK)
 8003098:	e701      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x102>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800309a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800309e:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80030a2:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80030a6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030aa:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80030ae:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 80030b2:	4301      	orrs	r1, r0
 80030b4:	e705      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030b6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80030ba:	f47f af22 	bne.w	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x166>
  __HAL_RCC_PLLSAI1_DISABLE();
 80030be:	f7ff fdc4 	bl	8002c4a <LL_RCC_PLLSAI1_Disable>
  tickstart = HAL_GetTick();
 80030c2:	f7fd fee9 	bl	8000e98 <HAL_GetTick>
 80030c6:	4606      	mov	r6, r0
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030c8:	f7ff fdc6 	bl	8002c58 <LL_RCC_PLLSAI1_IsReady>
 80030cc:	b9a0      	cbnz	r0, 80030f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80030ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030d2:	6861      	ldr	r1, [r4, #4]
 80030d4:	6913      	ldr	r3, [r2, #16]
 80030d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80030de:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80030e0:	6913      	ldr	r3, [r2, #16]
 80030e2:	6921      	ldr	r1, [r4, #16]
 80030e4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 80030ec:	f7ff fda6 	bl	8002c3c <LL_RCC_PLLSAI1_Enable>
    tickstart = HAL_GetTick();
 80030f0:	f7fd fed2 	bl	8000e98 <HAL_GetTick>
 80030f4:	4606      	mov	r6, r0
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030f6:	e00b      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x374>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030f8:	f7fd fece 	bl	8000e98 <HAL_GetTick>
 80030fc:	1b80      	subs	r0, r0, r6
 80030fe:	2802      	cmp	r0, #2
 8003100:	d9e2      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
              ret = HAL_TIMEOUT;
 8003102:	2503      	movs	r5, #3
 8003104:	e6fd      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x166>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003106:	f7fd fec7 	bl	8000e98 <HAL_GetTick>
 800310a:	1b80      	subs	r0, r0, r6
 800310c:	2802      	cmp	r0, #2
 800310e:	d8f8      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x366>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003110:	f7ff fda2 	bl	8002c58 <LL_RCC_PLLSAI1_IsReady>
 8003114:	2801      	cmp	r0, #1
 8003116:	d1f6      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800311c:	6961      	ldr	r1, [r4, #20]
 800311e:	6913      	ldr	r3, [r2, #16]
 8003120:	430b      	orrs	r3, r1
 8003122:	6113      	str	r3, [r2, #16]
      if (ret != HAL_OK)
 8003124:	e6ed      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x166>

08003126 <HAL_RCCEx_GetRngCLKSource>:
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8003126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 800312e:	f010 4040 	ands.w	r0, r0, #3221225472	; 0xc0000000
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8003132:	bf02      	ittt	eq
 8003134:	f8d3 0088 	ldreq.w	r0, [r3, #136]	; 0x88
 8003138:	f000 6040 	andeq.w	r0, r0, #201326592	; 0xc000000
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 800313c:	f040 5080 	orreq.w	r0, r0, #268435456	; 0x10000000
}
 8003140:	4770      	bx	lr

08003142 <HAL_RCCEx_GetPeriphCLKConfig>:
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
{
 8003146:	b508      	push	{r3, lr}
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SMPS;
 8003148:	f643 737f 	movw	r3, #16255	; 0x3f7f
 800314c:	6003      	str	r3, [r0, #0]
 800314e:	690b      	ldr	r3, [r1, #16]
 8003150:	f3c3 2306 	ubfx	r3, r3, #8, #7
  PeriphClkInit->PLLSAI1.PLLN = LL_RCC_PLLSAI1_GetN();
 8003154:	6043      	str	r3, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8003156:	690b      	ldr	r3, [r1, #16]
 8003158:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
  PeriphClkInit->PLLSAI1.PLLP = LL_RCC_PLLSAI1_GetP();
 800315c:	6083      	str	r3, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 800315e:	690b      	ldr	r3, [r1, #16]
 8003160:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
  PeriphClkInit->PLLSAI1.PLLR = LL_RCC_PLLSAI1_GetR();
 8003164:	6103      	str	r3, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8003166:	690b      	ldr	r3, [r1, #16]
 8003168:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
  PeriphClkInit->PLLSAI1.PLLQ = LL_RCC_PLLSAI1_GetQ();
 800316c:	60c3      	str	r3, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800316e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003172:	f003 0303 	and.w	r3, r3, #3
  PeriphClkInit->Usart1ClockSelection   = __HAL_RCC_GET_USART1_SOURCE();
 8003176:	6183      	str	r3, [r0, #24]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003178:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800317c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
  PeriphClkInit->Lpuart1ClockSelection  = __HAL_RCC_GET_LPUART1_SOURCE();
 8003180:	61c3      	str	r3, [r0, #28]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8003182:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
  PeriphClkInit->I2c1ClockSelection     = __HAL_RCC_GET_I2C1_SOURCE();
 8003190:	6203      	str	r3, [r0, #32]
 8003192:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800319c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  PeriphClkInit->I2c3ClockSelection     = __HAL_RCC_GET_I2C3_SOURCE();
 80031a0:	6243      	str	r3, [r0, #36]	; 0x24
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 80031a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80031a6:	0c1b      	lsrs	r3, r3, #16
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
  PeriphClkInit->Lptim1ClockSelection   = __HAL_RCC_GET_LPTIM1_SOURCE();
 80031b0:	6283      	str	r3, [r0, #40]	; 0x28
 80031b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80031b6:	0c1b      	lsrs	r3, r3, #16
 80031b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  PeriphClkInit->Lptim2ClockSelection   = __HAL_RCC_GET_LPTIM2_SOURCE();
 80031c0:	62c3      	str	r3, [r0, #44]	; 0x2c
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 80031c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80031c6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
  PeriphClkInit->Sai1ClockSelection     = __HAL_RCC_GET_SAI1_SOURCE();
 80031ca:	6303      	str	r3, [r0, #48]	; 0x30
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80031cc:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 80031d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
  PeriphClkInit->RTCClockSelection      = __HAL_RCC_GET_RTC_SOURCE();
 80031d4:	6403      	str	r3, [r0, #64]	; 0x40
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 80031d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80031da:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
  PeriphClkInit->UsbClockSelection      = __HAL_RCC_GET_USB_SOURCE();
 80031de:	6343      	str	r3, [r0, #52]	; 0x34
{
 80031e0:	4602      	mov	r2, r0
  PeriphClkInit->RngClockSelection      = HAL_RCCEx_GetRngCLKSource();
 80031e2:	f7ff ffa0 	bl	8003126 <HAL_RCCEx_GetRngCLKSource>
 80031e6:	6390      	str	r0, [r2, #56]	; 0x38
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 80031e8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80031ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  PeriphClkInit->AdcClockSelection      = __HAL_RCC_GET_ADC_SOURCE();
 80031f0:	63d3      	str	r3, [r2, #60]	; 0x3c
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 80031f2:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 80031f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  PeriphClkInit->RFWakeUpClockSelection = __HAL_RCC_GET_RFWAKEUP_SOURCE();
 80031fa:	6453      	str	r3, [r2, #68]	; 0x44
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 80031fc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80031fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
  PeriphClkInit->SmpsDivSelection       = __HAL_RCC_GET_SMPS_DIV();
 8003202:	64d3      	str	r3, [r2, #76]	; 0x4c
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL));
 8003204:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003206:	f003 0303 	and.w	r3, r3, #3
  PeriphClkInit->SmpsClockSelection     = __HAL_RCC_GET_SMPS_SOURCE();
 800320a:	6493      	str	r3, [r2, #72]	; 0x48
}
 800320c:	bd08      	pop	{r3, pc}
	...

08003210 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8003210:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 8003212:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003216:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800321a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800321c:	d122      	bne.n	8003264 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800321e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003222:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 8003226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322a:	d108      	bne.n	800323e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      if (LL_RCC_LSE_IsReady() == 1U)
 800322c:	f7ff fcd2 	bl	8002bd4 <LL_RCC_LSE_IsReady>
 8003230:	2801      	cmp	r0, #1
 8003232:	d001      	beq.n	8003238 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 8003234:	2000      	movs	r0, #0
 8003236:	e001      	b.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
        frequency = LSE_VALUE;
 8003238:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
 800323c:	bd10      	pop	{r4, pc}
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 800323e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003242:	d10a      	bne.n	800325a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8003244:	f7ff fccd 	bl	8002be2 <LL_RCC_LSI1_IsReady>
 8003248:	4602      	mov	r2, r0
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 800324a:	f7ff fcd1 	bl	8002bf0 <LL_RCC_LSI2_IsReady>
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800324e:	2a01      	cmp	r2, #1
 8003250:	f040 81a5 	bne.w	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
        frequency = LSI_VALUE;
 8003254:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8003258:	e7f0      	b.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 800325a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800325e:	d1e9      	bne.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      frequency = HSE_VALUE / 32U;
 8003260:	48ac      	ldr	r0, [pc, #688]	; (8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003262:	e7eb      	b.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003264:	2840      	cmp	r0, #64	; 0x40
 8003266:	d13c      	bne.n	80032e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8003268:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800326c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 8003270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003274:	f000 811d 	beq.w	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8003278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800327c:	f000 816e 	beq.w	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003280:	b113      	cbz	r3, 8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8003282:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8003286:	e7d9      	b.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8003288:	f7ff fce6 	bl	8002c58 <LL_RCC_PLLSAI1_IsReady>
 800328c:	2801      	cmp	r0, #1
 800328e:	d1d1      	bne.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003290:	68e3      	ldr	r3, [r4, #12]
 8003292:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 8003296:	2b02      	cmp	r3, #2
 8003298:	d021      	beq.n	80032de <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 800329a:	2b03      	cmp	r3, #3
 800329c:	d017      	beq.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800329e:	f7ff fcae 	bl	8002bfe <LL_RCC_MSI_GetRange>
 80032a2:	4a9d      	ldr	r2, [pc, #628]	; (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80032a4:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80032a8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 80032ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b0:	6910      	ldr	r0, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80032b2:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 80032b4:	6912      	ldr	r2, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 80032b6:	f3c0 2006 	ubfx	r0, r0, #8, #7
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80032ba:	4358      	muls	r0, r3
 80032bc:	f3c1 1302 	ubfx	r3, r1, #4, #3
 80032c0:	3301      	adds	r3, #1
 80032c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80032c6:	f3c2 4344 	ubfx	r3, r2, #17, #5
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80032ca:	3301      	adds	r3, #1
 80032cc:	e01e      	b.n	800330c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80032ce:	f7ff fc75 	bl	8002bbc <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 80032d2:	4a92      	ldr	r2, [pc, #584]	; (800351c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80032d4:	4b92      	ldr	r3, [pc, #584]	; (8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80032d6:	2801      	cmp	r0, #1
 80032d8:	bf18      	it	ne
 80032da:	4613      	movne	r3, r2
 80032dc:	e7e6      	b.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  switch (pllsource)
 80032de:	4b90      	ldr	r3, [pc, #576]	; (8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80032e0:	e7e4      	b.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80032e2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80032e6:	d134      	bne.n	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 80032e8:	f7ff ff1d 	bl	8003126 <HAL_RCCEx_GetRngCLKSource>
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 80032ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032f0:	d0a8      	beq.n	8003244 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 80032f2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80032f6:	d099      	beq.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 80032f8:	f1b0 5fc0 	cmp.w	r0, #402653184	; 0x18000000
 80032fc:	d109      	bne.n	8003312 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      if (LL_RCC_PLL_IsReady() == 1U)
 80032fe:	f7ff fc97 	bl	8002c30 <LL_RCC_PLL_IsReady>
 8003302:	2801      	cmp	r0, #1
 8003304:	d196      	bne.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 8003306:	f7ff fcad 	bl	8002c64 <RCC_PLL_GetFreqDomain_Q>
 800330a:	2303      	movs	r3, #3
 800330c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003310:	e794      	b.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 8003312:	f1b0 5fe0 	cmp.w	r0, #469762048	; 0x1c000000
 8003316:	d10a      	bne.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	079c      	lsls	r4, r3, #30
 800331c:	d58a      	bpl.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 800331e:	f7ff fc6e 	bl	8002bfe <LL_RCC_MSI_GetRange>
 8003322:	4b7d      	ldr	r3, [pc, #500]	; (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003324:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003328:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800332c:	e7ed      	b.n	800330a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 800332e:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
 8003332:	d108      	bne.n	8003346 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8003334:	f7ff fc90 	bl	8002c58 <LL_RCC_PLLSAI1_IsReady>
 8003338:	2801      	cmp	r0, #1
 800333a:	f47f af7b 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
}
 800333e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8003342:	f7ff bcf7 	b.w	8002d34 <RCC_PLLSAI1_GetFreqDomain_Q>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003346:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800334a:	0798      	lsls	r0, r3, #30
 800334c:	f100 810b 	bmi.w	8003566 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8003350:	e770      	b.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 8003352:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003356:	d128      	bne.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8003358:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800335c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 8003360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003364:	d00c      	beq.n	8003380 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8003366:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800336a:	d012      	beq.n	8003392 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 800336c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003370:	d0e0      	beq.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003372:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003376:	079a      	lsls	r2, r3, #30
 8003378:	f57f af5c 	bpl.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = HSI48_VALUE;
 800337c:	4869      	ldr	r0, [pc, #420]	; (8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 800337e:	e75d      	b.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
        if (LL_RCC_PLL_IsReady() == 1U)
 8003380:	f7ff fc56 	bl	8002c30 <LL_RCC_PLL_IsReady>
 8003384:	2801      	cmp	r0, #1
 8003386:	f47f af55 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
}
 800338a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          frequency = RCC_PLL_GetFreqDomain_Q();
 800338e:	f7ff bc69 	b.w	8002c64 <RCC_PLL_GetFreqDomain_Q>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	0799      	lsls	r1, r3, #30
 8003396:	f57f af4d 	bpl.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800339a:	f7ff fc30 	bl	8002bfe <LL_RCC_MSI_GetRange>
 800339e:	4b5e      	ldr	r3, [pc, #376]	; (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80033a0:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80033a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80033a8:	e748      	b.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80033aa:	2801      	cmp	r0, #1
 80033ac:	d123      	bne.n	80033f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80033ae:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80033b2:	f003 0303 	and.w	r3, r3, #3
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	f000 80d0 	beq.w	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80033bc:	2b03      	cmp	r3, #3
 80033be:	f43f af35 	beq.w	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d103      	bne.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
}
 80033c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        frequency = HAL_RCC_GetSysClockFreq();
 80033ca:	f7fe bfcd 	b.w	8002368 <HAL_RCC_GetSysClockFreq>
        frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 80033ce:	f7fe ffcb 	bl	8002368 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80033d2:	68a2      	ldr	r2, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80033d4:	68a3      	ldr	r3, [r4, #8]
 80033d6:	4954      	ldr	r1, [pc, #336]	; (8003528 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 80033d8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80033dc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80033e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80033e4:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 80033e8:	4a50      	ldr	r2, [pc, #320]	; (800352c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 80033ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	40d8      	lsrs	r0, r3
        break;
 80033f4:	e722      	b.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80033f6:	2802      	cmp	r0, #2
 80033f8:	d11c      	bne.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80033fa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80033fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 8003402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003406:	f000 80a9 	beq.w	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800340a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800340e:	f43f af0d 	beq.w	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8003412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003416:	d0d6      	beq.n	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8003418:	f7fe ffa6 	bl	8002368 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800341c:	68a2      	ldr	r2, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800341e:	68a3      	ldr	r3, [r4, #8]
 8003420:	4941      	ldr	r1, [pc, #260]	; (8003528 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8003422:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003426:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800342a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800342e:	fbb0 f0f2 	udiv	r0, r0, r2
 8003432:	e7d9      	b.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003434:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003438:	d144      	bne.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 800343a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800343e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 8003442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003446:	d034      	beq.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8003448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800344c:	d0bb      	beq.n	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 800344e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003452:	f47f aeef 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8003456:	f7ff fbff 	bl	8002c58 <LL_RCC_PLLSAI1_IsReady>
 800345a:	2801      	cmp	r0, #1
 800345c:	f47f aeea 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 800346a:	2b02      	cmp	r3, #2
 800346c:	d01f      	beq.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 800346e:	2b03      	cmp	r3, #3
 8003470:	d015      	beq.n	800349e <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003472:	f7ff fbc4 	bl	8002bfe <LL_RCC_MSI_GetRange>
 8003476:	4a28      	ldr	r2, [pc, #160]	; (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003478:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800347c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003484:	6910      	ldr	r0, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003486:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8003488:	6912      	ldr	r2, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 800348a:	f3c0 2006 	ubfx	r0, r0, #8, #7
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800348e:	4358      	muls	r0, r3
 8003490:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8003494:	3301      	adds	r3, #1
 8003496:	fbb0 f0f3 	udiv	r0, r0, r3
 800349a:	0f53      	lsrs	r3, r2, #29
 800349c:	e715      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800349e:	f7ff fb8d 	bl	8002bbc <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80034a4:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80034a6:	2801      	cmp	r0, #1
 80034a8:	bf18      	it	ne
 80034aa:	4613      	movne	r3, r2
 80034ac:	e7e8      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
  switch (pllsource)
 80034ae:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80034b0:	e7e6      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
        if (LL_RCC_PLL_IsReady() == 1U)
 80034b2:	f7ff fbbd 	bl	8002c30 <LL_RCC_PLL_IsReady>
 80034b6:	2801      	cmp	r0, #1
 80034b8:	f47f aebc 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
}
 80034bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          frequency = RCC_PLL_GetFreqDomain_P();
 80034c0:	f7ff bc04 	b.w	8002ccc <RCC_PLL_GetFreqDomain_P>
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80034c4:	2804      	cmp	r0, #4
 80034c6:	d115      	bne.n	80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 80034c8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 80034cc:	4a18      	ldr	r2, [pc, #96]	; (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80034d8:	4293      	cmp	r3, r2
 80034da:	f43f af74 	beq.w	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80034de:	f502 7280 	add.w	r2, r2, #256	; 0x100
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d03a      	beq.n	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 80034e6:	f7fe ff3f 	bl	8002368 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ee:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	e795      	b.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80034f4:	2808      	cmp	r0, #8
 80034f6:	d11f      	bne.n	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 80034f8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 80034fc:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003504:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003508:	4293      	cmp	r3, r2
 800350a:	f43f af5c 	beq.w	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 800350e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003512:	e7e6      	b.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003514:	000f4240 	.word	0x000f4240
 8003518:	08007b48 	.word	0x08007b48
 800351c:	01e84800 	.word	0x01e84800
 8003520:	00f42400 	.word	0x00f42400
 8003524:	02dc6c00 	.word	0x02dc6c00
 8003528:	08007b88 	.word	0x08007b88
 800352c:	08007c28 	.word	0x08007c28
 8003530:	00030100 	.word	0x00030100
 8003534:	00301000 	.word	0x00301000
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8003538:	2810      	cmp	r0, #16
 800353a:	d11b      	bne.n	8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 800353c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 8003540:	4a4f      	ldr	r2, [pc, #316]	; (8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x470>)
 8003542:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8003550:	4293      	cmp	r3, r2
 8003552:	f43f ae77 	beq.w	8003244 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 8003556:	4a4b      	ldr	r2, [pc, #300]	; (8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x474>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d106      	bne.n	800356a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        if (LL_RCC_HSI_IsReady() == 1U)
 800355c:	f7ff fb34 	bl	8002bc8 <LL_RCC_HSI_IsReady>
 8003560:	2801      	cmp	r0, #1
 8003562:	f47f ae67 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = HSI_VALUE;
 8003566:	4848      	ldr	r0, [pc, #288]	; (8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8003568:	e668      	b.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 800356a:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 800356e:	f47f af53 	bne.w	8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003572:	e65b      	b.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8003574:	2820      	cmp	r0, #32
 8003576:	d116      	bne.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8003578:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 800357c:	4a43      	ldr	r2, [pc, #268]	; (800368c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 800357e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003588:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800358c:	4293      	cmp	r3, r2
 800358e:	f43f ae59 	beq.w	8003244 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 8003592:	4a3f      	ldr	r2, [pc, #252]	; (8003690 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d0e1      	beq.n	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8003598:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800359c:	e7e7      	b.n	800356e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800359e:	2801      	cmp	r0, #1
 80035a0:	f47f ae48 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 80035a4:	e656      	b.n	8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 80035a6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80035aa:	d110      	bne.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 80035ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 80035b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035bc:	f43f ae36 	beq.w	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 80035c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035c4:	f47f ae36 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      frequency = HSE_VALUE / 1024U;
 80035c8:	f647 2012 	movw	r0, #31250	; 0x7a12
  return (frequency);
 80035cc:	e636      	b.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 80035ce:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80035d2:	f47f ae2f 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 80035d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 80035da:	f3c2 1201 	ubfx	r2, r2, #4, #2
 80035de:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 80035e0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80035e4:	d10c      	bne.n	8003600 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
      if (LL_RCC_HSI_IsReady() == 1U)
 80035e6:	f7ff faef 	bl	8002bc8 <LL_RCC_HSI_IsReady>
 80035ea:	2801      	cmp	r0, #1
 80035ec:	f47f ae22 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 80035f0:	2318      	movs	r3, #24
 80035f2:	435a      	muls	r2, r3
 80035f4:	4b27      	ldr	r3, [pc, #156]	; (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80035f6:	4824      	ldr	r0, [pc, #144]	; (8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80035f8:	589b      	ldr	r3, [r3, r2]
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 80035fa:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 80035fe:	e01b      	b.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8003600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003604:	d10a      	bne.n	800361c <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003606:	680b      	ldr	r3, [r1, #0]
 8003608:	039b      	lsls	r3, r3, #14
 800360a:	f57f ae13 	bpl.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 800360e:	4b21      	ldr	r3, [pc, #132]	; (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003610:	4821      	ldr	r0, [pc, #132]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003612:	2118      	movs	r1, #24
 8003614:	fb01 3202 	mla	r2, r1, r2, r3
 8003618:	6953      	ldr	r3, [r2, #20]
 800361a:	e7ee      	b.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 800361c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003620:	f47f ae08 	bne.w	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      switch (LL_RCC_MSI_GetRange())
 8003624:	f7ff faeb 	bl	8002bfe <LL_RCC_MSI_GetRange>
 8003628:	28a0      	cmp	r0, #160	; 0xa0
 800362a:	d021      	beq.n	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800362c:	d806      	bhi.n	800363c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 800362e:	2880      	cmp	r0, #128	; 0x80
 8003630:	d00e      	beq.n	8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8003632:	2890      	cmp	r0, #144	; 0x90
 8003634:	d014      	beq.n	8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003636:	2000      	movs	r0, #0
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8003638:	0840      	lsrs	r0, r0, #1
 800363a:	e5ff      	b.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
      switch (LL_RCC_MSI_GetRange())
 800363c:	28b0      	cmp	r0, #176	; 0xb0
 800363e:	d1fa      	bne.n	8003636 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8003640:	4b14      	ldr	r3, [pc, #80]	; (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003642:	2118      	movs	r1, #24
 8003644:	fb01 3202 	mla	r2, r1, r2, r3
 8003648:	4914      	ldr	r1, [pc, #80]	; (800369c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800364a:	6853      	ldr	r3, [r2, #4]
 800364c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 800364e:	e7d4      	b.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003652:	2118      	movs	r1, #24
 8003654:	fb01 3202 	mla	r2, r1, r2, r3
 8003658:	4910      	ldr	r1, [pc, #64]	; (800369c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800365a:	6913      	ldr	r3, [r2, #16]
 800365c:	6a08      	ldr	r0, [r1, #32]
 800365e:	e7cc      	b.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003662:	2118      	movs	r1, #24
 8003664:	fb01 3202 	mla	r2, r1, r2, r3
 8003668:	490c      	ldr	r1, [pc, #48]	; (800369c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800366a:	68d3      	ldr	r3, [r2, #12]
 800366c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800366e:	e7c4      	b.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003672:	2118      	movs	r1, #24
 8003674:	fb01 3202 	mla	r2, r1, r2, r3
 8003678:	4908      	ldr	r1, [pc, #32]	; (800369c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800367a:	6893      	ldr	r3, [r2, #8]
 800367c:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800367e:	e7bc      	b.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8003680:	000c0004 	.word	0x000c0004
 8003684:	000c0008 	.word	0x000c0008
 8003688:	00f42400 	.word	0x00f42400
 800368c:	00300010 	.word	0x00300010
 8003690:	00300020 	.word	0x00300020
 8003694:	08007bc8 	.word	0x08007bc8
 8003698:	01e84800 	.word	0x01e84800
 800369c:	08007b48 	.word	0x08007b48

080036a0 <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
  {
    tmpIT |= SAI_IT_FREQ;
 80036a0:	2901      	cmp	r1, #1
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80036a2:	6c41      	ldr	r1, [r0, #68]	; 0x44
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80036a4:	6842      	ldr	r2, [r0, #4]
    tmpIT |= SAI_IT_FREQ;
 80036a6:	bf14      	ite	ne
 80036a8:	2301      	movne	r3, #1
 80036aa:	2309      	moveq	r3, #9
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80036ac:	2908      	cmp	r1, #8
 80036ae:	d105      	bne.n	80036bc <SAI_InterruptFlag+0x1c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80036b0:	f022 0102 	bic.w	r1, r2, #2
 80036b4:	2901      	cmp	r1, #1
  {
    tmpIT |= SAI_IT_CNRDY;
 80036b6:	bf08      	it	eq
 80036b8:	f043 0310 	orreq.w	r3, r3, #16
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80036bc:	3a02      	subs	r2, #2
 80036be:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80036c0:	bf94      	ite	ls
 80036c2:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80036c6:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 80036ca:	4770      	bx	lr

080036cc <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80036cc:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80036ce:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	f641 3358 	movw	r3, #7000	; 0x1b58
 80036d6:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 80036da:	680b      	ldr	r3, [r1, #0]
 80036dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80036e0:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 80036e2:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80036e4:	b93a      	cbnz	r2, 80036f6 <SAI_Disable+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80036e6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80036ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ee:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 80036f2:	2003      	movs	r0, #3
      break;
 80036f4:	4770      	bx	lr
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80036f6:	680b      	ldr	r3, [r1, #0]
 80036f8:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    count--;
 80036fc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8003700:	d1f0      	bne.n	80036e4 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003702:	4618      	mov	r0, r3

  return status;
}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	2000005c 	.word	0x2000005c

0800370c <HAL_SAI_MspInit>:
}
 800370c:	4770      	bx	lr
	...

08003710 <HAL_SAI_Init>:
{
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hsai == NULL)
 8003712:	4604      	mov	r4, r0
 8003714:	b910      	cbnz	r0, 800371c <HAL_SAI_Init+0xc>
    return HAL_ERROR;
 8003716:	2501      	movs	r5, #1
}
 8003718:	4628      	mov	r0, r5
 800371a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800371c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003720:	2b01      	cmp	r3, #1
 8003722:	d109      	bne.n	8003738 <HAL_SAI_Init+0x28>
    if ((hsai->Instance != SAI1_Block_A) ||
 8003724:	6802      	ldr	r2, [r0, #0]
 8003726:	4b6d      	ldr	r3, [pc, #436]	; (80038dc <HAL_SAI_Init+0x1cc>)
 8003728:	429a      	cmp	r2, r3
 800372a:	d1f4      	bne.n	8003716 <HAL_SAI_Init+0x6>
 800372c:	6843      	ldr	r3, [r0, #4]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d1f1      	bne.n	8003716 <HAL_SAI_Init+0x6>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8003732:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ee      	bne.n	8003716 <HAL_SAI_Init+0x6>
  if (hsai->State == HAL_SAI_STATE_RESET)
 8003738:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800373c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003740:	b923      	cbnz	r3, 800374c <HAL_SAI_Init+0x3c>
    hsai->Lock = HAL_UNLOCKED;
 8003742:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8003746:	4620      	mov	r0, r4
 8003748:	f7ff ffe0 	bl	800370c <HAL_SAI_MspInit>
  if (SAI_Disable(hsai) != HAL_OK)
 800374c:	4620      	mov	r0, r4
 800374e:	f7ff ffbd 	bl	80036cc <SAI_Disable>
 8003752:	4605      	mov	r5, r0
 8003754:	2800      	cmp	r0, #0
 8003756:	d1de      	bne.n	8003716 <HAL_SAI_Init+0x6>
  hsai->State = HAL_SAI_STATE_BUSY;
 8003758:	2302      	movs	r3, #2
 800375a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.Synchro)
 800375e:	68a3      	ldr	r3, [r4, #8]
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003760:	2b01      	cmp	r3, #1
  SAI1->GCR = 0;
 8003762:	4b5f      	ldr	r3, [pc, #380]	; (80038e0 <HAL_SAI_Init+0x1d0>)
 8003764:	6018      	str	r0, [r3, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003766:	6a23      	ldr	r3, [r4, #32]
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003768:	bf14      	ite	ne
 800376a:	2600      	movne	r6, #0
 800376c:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003770:	b323      	cbz	r3, 80037bc <HAL_SAI_Init+0xac>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003772:	2040      	movs	r0, #64	; 0x40
 8003774:	f7ff fd4c 	bl	8003210 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8003778:	69a3      	ldr	r3, [r4, #24]
 800377a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800377c:	6a21      	ldr	r1, [r4, #32]
 800377e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003782:	f040 809a 	bne.w	80038ba <HAL_SAI_Init+0x1aa>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003786:	2a04      	cmp	r2, #4
        tmpframelength = hsai->FrameInit.FrameLength;
 8003788:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800378a:	f000 8094 	beq.w	80038b6 <HAL_SAI_Init+0x1a6>
        tmpframelength = 256U;
 800378e:	2a08      	cmp	r2, #8
 8003790:	bf08      	it	eq
 8003792:	f44f 7380 	moveq.w	r3, #256	; 0x100
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8003796:	270a      	movs	r7, #10
 8003798:	4378      	muls	r0, r7
 800379a:	434b      	muls	r3, r1
    hsai->Init.Mckdiv = tmpval / 10U;
 800379c:	210a      	movs	r1, #10
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800379e:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 80037a2:	fbb0 f3f1 	udiv	r3, r0, r1
    if ((tmpval % 10U) > 8U)
 80037a6:	fb01 0013 	mls	r0, r1, r3, r0
 80037aa:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1U;
 80037ac:	bf08      	it	eq
 80037ae:	3301      	addeq	r3, #1
 80037b0:	6263      	str	r3, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80037b2:	2a04      	cmp	r2, #4
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80037b4:	bf02      	ittt	eq
 80037b6:	6a63      	ldreq	r3, [r4, #36]	; 0x24
 80037b8:	085b      	lsreq	r3, r3, #1
 80037ba:	6263      	streq	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80037bc:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80037be:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80037c0:	f033 0102 	bics.w	r1, r3, #2
 80037c4:	f040 8084 	bne.w	80038d0 <HAL_SAI_Init+0x1c0>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80037c8:	2a01      	cmp	r2, #1
 80037ca:	bf18      	it	ne
 80037cc:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80037d0:	6822      	ldr	r2, [r4, #0]
 80037d2:	4844      	ldr	r0, [pc, #272]	; (80038e4 <HAL_SAI_Init+0x1d4>)
 80037d4:	6817      	ldr	r7, [r2, #0]
 80037d6:	4038      	ands	r0, r7
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80037d8:	6c67      	ldr	r7, [r4, #68]	; 0x44
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80037da:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80037dc:	433b      	orrs	r3, r7
 80037de:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 80037e0:	6810      	ldr	r0, [r2, #0]
 80037e2:	433b      	orrs	r3, r7
 80037e4:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80037e6:	433b      	orrs	r3, r7
 80037e8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80037ea:	433b      	orrs	r3, r7
 80037ec:	6967      	ldr	r7, [r4, #20]
 80037ee:	433b      	orrs	r3, r7
 80037f0:	69a7      	ldr	r7, [r4, #24]
 80037f2:	433b      	orrs	r3, r7
 80037f4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80037f6:	433b      	orrs	r3, r7
 80037f8:	6927      	ldr	r7, [r4, #16]
 80037fa:	433b      	orrs	r3, r7
 80037fc:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80037fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003800:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8003804:	4333      	orrs	r3, r6
 8003806:	430b      	orrs	r3, r1
 8003808:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800380a:	6853      	ldr	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800380c:	6b20      	ldr	r0, [r4, #48]	; 0x30
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800380e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003812:	f023 030f 	bic.w	r3, r3, #15
 8003816:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003818:	69e3      	ldr	r3, [r4, #28]
 800381a:	6851      	ldr	r1, [r2, #4]
 800381c:	4303      	orrs	r3, r0
 800381e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003820:	4303      	orrs	r3, r0
 8003822:	430b      	orrs	r3, r1
 8003824:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003826:	6891      	ldr	r1, [r2, #8]
 8003828:	4b2f      	ldr	r3, [pc, #188]	; (80038e8 <HAL_SAI_Init+0x1d8>)
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800382a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800382c:	400b      	ands	r3, r1
 800382e:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003832:	6891      	ldr	r1, [r2, #8]
 8003834:	4303      	orrs	r3, r0
 8003836:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003838:	4303      	orrs	r3, r0
 800383a:	430b      	orrs	r3, r1
 800383c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800383e:	3901      	subs	r1, #1
 8003840:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8003842:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003844:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003846:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800384a:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800384c:	68d3      	ldr	r3, [r2, #12]
 800384e:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8003852:	f023 030f 	bic.w	r3, r3, #15
 8003856:	041b      	lsls	r3, r3, #16
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800385c:	68d1      	ldr	r1, [r2, #12]
 800385e:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
 8003862:	4303      	orrs	r3, r0
 8003864:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003866:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003868:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800386c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800386e:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003870:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003874:	60d3      	str	r3, [r2, #12]
  if (hsai->Instance == SAI1_Block_A)
 8003876:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_SAI_Init+0x1cc>)
 8003878:	429a      	cmp	r2, r3
 800387a:	d113      	bne.n	80038a4 <HAL_SAI_Init+0x194>
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800387c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8003884:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8003888:	2a01      	cmp	r2, #1
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800388a:	f1a3 0304 	sub.w	r3, r3, #4
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800388e:	d109      	bne.n	80038a4 <HAL_SAI_Init+0x194>
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8003890:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003892:	1e51      	subs	r1, r2, #1
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8003894:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003896:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800389a:	645a      	str	r2, [r3, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800389c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80038a4:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 80038a6:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80038a8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  __HAL_UNLOCK(hsai);
 80038ac:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 80038b0:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  return HAL_OK;
 80038b4:	e730      	b.n	8003718 <HAL_SAI_Init+0x8>
        tmpframelength = 64U;
 80038b6:	2340      	movs	r3, #64	; 0x40
 80038b8:	e76d      	b.n	8003796 <HAL_SAI_Init+0x86>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80038ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80038bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c0:	bf0c      	ite	eq
 80038c2:	2302      	moveq	r3, #2
 80038c4:	2301      	movne	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80038c6:	270a      	movs	r7, #10
 80038c8:	434b      	muls	r3, r1
 80038ca:	4378      	muls	r0, r7
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	e765      	b.n	800379c <HAL_SAI_Init+0x8c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80038d0:	2a01      	cmp	r2, #1
 80038d2:	bf14      	ite	ne
 80038d4:	2100      	movne	r1, #0
 80038d6:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80038da:	e779      	b.n	80037d0 <HAL_SAI_Init+0xc0>
 80038dc:	40015404 	.word	0x40015404
 80038e0:	40015400 	.word	0x40015400
 80038e4:	f005c010 	.word	0xf005c010
 80038e8:	fff88000 	.word	0xfff88000

080038ec <HAL_SAI_Receive_DMA>:
{
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	4613      	mov	r3, r2
 80038f0:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 80038f2:	460a      	mov	r2, r1
 80038f4:	2900      	cmp	r1, #0
 80038f6:	d042      	beq.n	800397e <HAL_SAI_Receive_DMA+0x92>
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d040      	beq.n	800397e <HAL_SAI_Receive_DMA+0x92>
  if (hsai->State == HAL_SAI_STATE_READY)
 80038fc:	f890 1091 	ldrb.w	r1, [r0, #145]	; 0x91
 8003900:	2901      	cmp	r1, #1
 8003902:	b2cd      	uxtb	r5, r1
 8003904:	d13d      	bne.n	8003982 <HAL_SAI_Receive_DMA+0x96>
    __HAL_LOCK(hsai);
 8003906:	f890 1090 	ldrb.w	r1, [r0, #144]	; 0x90
 800390a:	2901      	cmp	r1, #1
 800390c:	d039      	beq.n	8003982 <HAL_SAI_Receive_DMA+0x96>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800390e:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003910:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
 8003912:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003916:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
    hsai->pBuffPtr = pData;
 800391a:	6782      	str	r2, [r0, #120]	; 0x78
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800391c:	f880 1091 	strb.w	r1, [r0, #145]	; 0x91
    hsai->XferSize = Size;
 8003920:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 8003924:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003928:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800392c:	4916      	ldr	r1, [pc, #88]	; (8003988 <HAL_SAI_Receive_DMA+0x9c>)
 800392e:	6301      	str	r1, [r0, #48]	; 0x30
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8003930:	4916      	ldr	r1, [pc, #88]	; (800398c <HAL_SAI_Receive_DMA+0xa0>)
 8003932:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8003934:	4916      	ldr	r1, [pc, #88]	; (8003990 <HAL_SAI_Receive_DMA+0xa4>)
    hsai->hdmarx->XferAbortCallback = NULL;
 8003936:	e9c0 160d 	strd	r1, r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800393a:	6821      	ldr	r1, [r4, #0]
 800393c:	311c      	adds	r1, #28
 800393e:	f7fd fc33 	bl	80011a8 <HAL_DMA_Start_IT>
 8003942:	4601      	mov	r1, r0
 8003944:	b118      	cbz	r0, 800394e <HAL_SAI_Receive_DMA+0x62>
      __HAL_UNLOCK(hsai);
 8003946:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
}
 800394a:	4628      	mov	r0, r5
 800394c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800394e:	4620      	mov	r0, r4
 8003950:	f7ff fea6 	bl	80036a0 <SAI_InterruptFlag>
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	4310      	orrs	r0, r2
 800395a:	6118      	str	r0, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003962:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	03d2      	lsls	r2, r2, #15
      __HAL_SAI_ENABLE(hsai);
 8003968:	bf58      	it	pl
 800396a:	681a      	ldrpl	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800396c:	f04f 0500 	mov.w	r5, #0
      __HAL_SAI_ENABLE(hsai);
 8003970:	bf5c      	itt	pl
 8003972:	f442 3280 	orrpl.w	r2, r2, #65536	; 0x10000
 8003976:	601a      	strpl	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8003978:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    return HAL_OK;
 800397c:	e7e5      	b.n	800394a <HAL_SAI_Receive_DMA+0x5e>
    return  HAL_ERROR;
 800397e:	2501      	movs	r5, #1
 8003980:	e7e3      	b.n	800394a <HAL_SAI_Receive_DMA+0x5e>
    return HAL_BUSY;
 8003982:	2502      	movs	r5, #2
 8003984:	e7e1      	b.n	800394a <HAL_SAI_Receive_DMA+0x5e>
 8003986:	bf00      	nop
 8003988:	080039cb 	.word	0x080039cb
 800398c:	08003995 	.word	0x08003995
 8003990:	080039d7 	.word	0x080039d7

08003994 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003994:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003996:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003998:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800399a:	2b20      	cmp	r3, #32
 800399c:	d011      	beq.n	80039c2 <SAI_DMARxCplt+0x2e>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800399e:	6825      	ldr	r5, [r4, #0]
 80039a0:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
 80039a2:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80039a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039a8:	602b      	str	r3, [r5, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80039aa:	4620      	mov	r0, r4
    hsai->XferCount = 0;
 80039ac:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80039b0:	f7ff fe76 	bl	80036a0 <SAI_InterruptFlag>
 80039b4:	692b      	ldr	r3, [r5, #16]
 80039b6:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
 80039ba:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80039bc:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
 80039be:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7fd f96c 	bl	8000ca0 <HAL_SAI_RxCpltCallback>
#endif
}
 80039c8:	bd38      	pop	{r3, r4, r5, pc}

080039ca <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039ca:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80039cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80039ce:	f7fd f9af 	bl	8000d30 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80039d2:	bd08      	pop	{r3, pc}

080039d4 <HAL_SAI_ErrorCallback>:
 80039d4:	4770      	bx	lr

080039d6 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80039d6:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039d8:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80039da:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80039de:	6822      	ldr	r2, [r4, #0]
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80039e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80039e8:	6813      	ldr	r3, [r2, #0]
 80039ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039ee:	6013      	str	r3, [r2, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 80039f0:	4620      	mov	r0, r4
 80039f2:	f7ff fe6b 	bl	80036cc <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7ff ffe6 	bl	80039d4 <HAL_SAI_ErrorCallback>
#endif
}
 8003a08:	bd10      	pop	{r4, pc}

08003a0a <HAL_SAI_GetState>:
  return hsai->State;
 8003a0a:	f890 0091 	ldrb.w	r0, [r0, #145]	; 0x91
}
 8003a0e:	4770      	bx	lr

08003a10 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a10:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003a12:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 8003a16:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8003a1a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	4770      	bx	lr

08003a22 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a22:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003a26:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8003a2a:	045b      	lsls	r3, r3, #17
 8003a2c:	0c5b      	lsrs	r3, r3, #17
 8003a2e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003a32:	2000      	movs	r0, #0
 8003a34:	4770      	bx	lr

08003a36 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a36:	b084      	sub	sp, #16
 8003a38:	b510      	push	{r4, lr}
 8003a3a:	ac03      	add	r4, sp, #12
 8003a3c:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8003a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a44:	2301      	movs	r3, #1
 8003a46:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8003a50:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 8003a52:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a56:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	4770      	bx	lr
	...

08003a60 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a62:	780f      	ldrb	r7, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003a64:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a66:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8003a6a:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8003a6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a72:	0412      	lsls	r2, r2, #16
 8003a74:	463b      	mov	r3, r7
 8003a76:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8003a78:	2d03      	cmp	r5, #3
 8003a7a:	d851      	bhi.n	8003b20 <USB_ActivateEndpoint+0xc0>
 8003a7c:	e8df f005 	tbb	[pc, r5]
 8003a80:	494b4d02 	.word	0x494b4d02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003a88:	462c      	mov	r4, r5
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003a8a:	f248 0c80 	movw	ip, #32896	; 0x8080
 8003a8e:	ea42 020c 	orr.w	r2, r2, ip
 8003a92:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003a96:	f830 6023 	ldrh.w	r6, [r0, r3, lsl #2]
 8003a9a:	f8df e27c 	ldr.w	lr, [pc, #636]	; 8003d18 <USB_ActivateEndpoint+0x2b8>
 8003a9e:	b2b6      	uxth	r6, r6
 8003aa0:	ea06 060e 	and.w	r6, r6, lr
 8003aa4:	433e      	orrs	r6, r7
 8003aa6:	ea4c 0606 	orr.w	r6, ip, r6
 8003aaa:	f820 6023 	strh.w	r6, [r0, r3, lsl #2]

  if (ep->doublebuffer == 0U)
 8003aae:	7b0a      	ldrb	r2, [r1, #12]
 8003ab0:	eb00 06c7 	add.w	r6, r0, r7, lsl #3
 8003ab4:	2a00      	cmp	r2, #0
 8003ab6:	f040 8081 	bne.w	8003bbc <USB_ActivateEndpoint+0x15c>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003aba:	88ca      	ldrh	r2, [r1, #6]
    if (ep->is_in != 0U)
 8003abc:	f891 c001 	ldrb.w	ip, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ac0:	0852      	lsrs	r2, r2, #1
 8003ac2:	0052      	lsls	r2, r2, #1
    if (ep->is_in != 0U)
 8003ac4:	f1bc 0f00 	cmp.w	ip, #0
 8003ac8:	d02c      	beq.n	8003b24 <USB_ActivateEndpoint+0xc4>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003aca:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003ace:	fa16 f681 	uxtah	r6, r6, r1
 8003ad2:	f8a6 2400 	strh.w	r2, [r6, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ad6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003ada:	0651      	lsls	r1, r2, #25
 8003adc:	d50a      	bpl.n	8003af4 <USB_ActivateEndpoint+0x94>
 8003ade:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003ae2:	b292      	uxth	r2, r2
 8003ae4:	ea02 020e 	and.w	r2, r2, lr
 8003ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aec:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003af0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003af4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003af8:	4984      	ldr	r1, [pc, #528]	; (8003d0c <USB_ActivateEndpoint+0x2ac>)
 8003afa:	b292      	uxth	r2, r2
      if (ep->type != EP_TYPE_ISOC)
 8003afc:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003afe:	ea02 0201 	and.w	r2, r2, r1
      if (ep->type != EP_TYPE_ISOC)
 8003b02:	d001      	beq.n	8003b08 <USB_ActivateEndpoint+0xa8>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b04:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b10:	e0b2      	b.n	8003c78 <USB_ActivateEndpoint+0x218>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003b12:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003b16:	2400      	movs	r4, #0
      break;
 8003b18:	e7b7      	b.n	8003a8a <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003b1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 8003b1e:	e7fa      	b.n	8003b16 <USB_ActivateEndpoint+0xb6>
  switch (ep->type)
 8003b20:	2401      	movs	r4, #1
 8003b22:	e7b2      	b.n	8003a8a <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b24:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b28:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b2a:	fa16 f585 	uxtah	r5, r6, r5
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b2e:	293e      	cmp	r1, #62	; 0x3e
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b30:	f8a5 2404 	strh.w	r2, [r5, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b34:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b38:	fa16 f682 	uxtah	r6, r6, r2
 8003b3c:	d925      	bls.n	8003b8a <USB_ActivateEndpoint+0x12a>
 8003b3e:	094d      	lsrs	r5, r1, #5
 8003b40:	06ca      	lsls	r2, r1, #27
 8003b42:	4a73      	ldr	r2, [pc, #460]	; (8003d10 <USB_ActivateEndpoint+0x2b0>)
 8003b44:	bf08      	it	eq
 8003b46:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 8003b4a:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003b4e:	b292      	uxth	r2, r2
 8003b50:	f8a6 2406 	strh.w	r2, [r6, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b54:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003b58:	0452      	lsls	r2, r2, #17
 8003b5a:	d50d      	bpl.n	8003b78 <USB_ActivateEndpoint+0x118>
 8003b5c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003b60:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003b64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b68:	0412      	lsls	r2, r2, #16
 8003b6a:	0c12      	lsrs	r2, r2, #16
 8003b6c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003b70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b74:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b78:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003b7c:	4965      	ldr	r1, [pc, #404]	; (8003d14 <USB_ActivateEndpoint+0x2b4>)
 8003b7e:	b292      	uxth	r2, r2
 8003b80:	400a      	ands	r2, r1
      if (ep->num == 0U)
 8003b82:	b9c7      	cbnz	r7, 8003bb6 <USB_ActivateEndpoint+0x156>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b84:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003b88:	e7be      	b.n	8003b08 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b8a:	b971      	cbnz	r1, 8003baa <USB_ActivateEndpoint+0x14a>
 8003b8c:	f8b6 2406 	ldrh.w	r2, [r6, #1030]	; 0x406
 8003b90:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003b94:	0412      	lsls	r2, r2, #16
 8003b96:	0c12      	lsrs	r2, r2, #16
 8003b98:	f8a6 2406 	strh.w	r2, [r6, #1030]	; 0x406
 8003b9c:	f8b6 2406 	ldrh.w	r2, [r6, #1030]	; 0x406
 8003ba0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003ba4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003ba8:	e7d1      	b.n	8003b4e <USB_ActivateEndpoint+0xee>
 8003baa:	084a      	lsrs	r2, r1, #1
 8003bac:	07c9      	lsls	r1, r1, #31
 8003bae:	bf48      	it	mi
 8003bb0:	3201      	addmi	r2, #1
 8003bb2:	0292      	lsls	r2, r2, #10
 8003bb4:	e7cb      	b.n	8003b4e <USB_ActivateEndpoint+0xee>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003bb6:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8003bba:	e7a5      	b.n	8003b08 <USB_ActivateEndpoint+0xa8>
    if (ep->type == EP_TYPE_BULK)
 8003bbc:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003bbe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8003bc2:	d15d      	bne.n	8003c80 <USB_ActivateEndpoint+0x220>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003bc4:	b292      	uxth	r2, r2
 8003bc6:	ea02 020e 	and.w	r2, r2, lr
 8003bca:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003bce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003bd2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003bd6:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003bda:	890a      	ldrh	r2, [r1, #8]
 8003bdc:	fa16 f787 	uxtah	r7, r6, r7
 8003be0:	0852      	lsrs	r2, r2, #1
 8003be2:	0052      	lsls	r2, r2, #1
 8003be4:	f8a7 2400 	strh.w	r2, [r7, #1024]	; 0x400
 8003be8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003bec:	fa16 f682 	uxtah	r6, r6, r2
 8003bf0:	894a      	ldrh	r2, [r1, #10]
 8003bf2:	0852      	lsrs	r2, r2, #1
 8003bf4:	0052      	lsls	r2, r2, #1
 8003bf6:	f8a6 2404 	strh.w	r2, [r6, #1028]	; 0x404
    if (ep->is_in == 0U)
 8003bfa:	784a      	ldrb	r2, [r1, #1]
 8003bfc:	2a00      	cmp	r2, #0
 8003bfe:	d148      	bne.n	8003c92 <USB_ActivateEndpoint+0x232>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c00:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c04:	0456      	lsls	r6, r2, #17
 8003c06:	d50d      	bpl.n	8003c24 <USB_ActivateEndpoint+0x1c4>
 8003c08:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c0c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c14:	0412      	lsls	r2, r2, #16
 8003c16:	0c12      	lsrs	r2, r2, #16
 8003c18:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003c1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c20:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c24:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c28:	0655      	lsls	r5, r2, #25
 8003c2a:	d50d      	bpl.n	8003c48 <USB_ActivateEndpoint+0x1e8>
 8003c2c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c30:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c38:	0412      	lsls	r2, r2, #16
 8003c3a:	0c12      	lsrs	r2, r2, #16
 8003c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c40:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003c44:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c48:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c54:	0412      	lsls	r2, r2, #16
 8003c56:	0c12      	lsrs	r2, r2, #16
 8003c58:	f248 0180 	movw	r1, #32896	; 0x8080
 8003c5c:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003c60:	430a      	orrs	r2, r1
 8003c62:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c66:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c6a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c72:	0412      	lsls	r2, r2, #16
 8003c74:	0c12      	lsrs	r2, r2, #16
 8003c76:	430a      	orrs	r2, r1
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c78:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003c80:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8003c84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c88:	0412      	lsls	r2, r2, #16
 8003c8a:	0c12      	lsrs	r2, r2, #16
 8003c8c:	ea4c 0202 	orr.w	r2, ip, r2
 8003c90:	e79f      	b.n	8003bd2 <USB_ActivateEndpoint+0x172>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c92:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c96:	0451      	lsls	r1, r2, #17
 8003c98:	d50d      	bpl.n	8003cb6 <USB_ActivateEndpoint+0x256>
 8003c9a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c9e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003ca2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ca6:	0412      	lsls	r2, r2, #16
 8003ca8:	0c12      	lsrs	r2, r2, #16
 8003caa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003cae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cb2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cb6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cba:	0652      	lsls	r2, r2, #25
 8003cbc:	d50d      	bpl.n	8003cda <USB_ActivateEndpoint+0x27a>
 8003cbe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cc2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003cc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cca:	0412      	lsls	r2, r2, #16
 8003ccc:	0c12      	lsrs	r2, r2, #16
 8003cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003cd6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cda:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cde:	490b      	ldr	r1, [pc, #44]	; (8003d0c <USB_ActivateEndpoint+0x2ac>)
 8003ce0:	b292      	uxth	r2, r2
 8003ce2:	400a      	ands	r2, r1
      if (ep->type != EP_TYPE_ISOC)
 8003ce4:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ce6:	bf18      	it	ne
 8003ce8:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cf4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cf8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d04:	0412      	lsls	r2, r2, #16
 8003d06:	0c12      	lsrs	r2, r2, #16
 8003d08:	e6fe      	b.n	8003b08 <USB_ActivateEndpoint+0xa8>
 8003d0a:	bf00      	nop
 8003d0c:	ffff8fbf 	.word	0xffff8fbf
 8003d10:	ffff8000 	.word	0xffff8000
 8003d14:	ffffbf8f 	.word	0xffffbf8f
 8003d18:	ffff8f8f 	.word	0xffff8f8f

08003d1c <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8003d1c:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d1e:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8003d20:	7b09      	ldrb	r1, [r1, #12]
 8003d22:	bbd9      	cbnz	r1, 8003d9c <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8003d24:	b30a      	cbz	r2, 8003d6a <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d26:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d2a:	0651      	lsls	r1, r2, #25
 8003d2c:	d50d      	bpl.n	8003d4a <USB_DeactivateEndpoint+0x2e>
 8003d2e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d32:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d3a:	0412      	lsls	r2, r2, #16
 8003d3c:	0c12      	lsrs	r2, r2, #16
 8003d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d42:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003d46:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d4a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d4e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d56:	0412      	lsls	r2, r2, #16
 8003d58:	0c12      	lsrs	r2, r2, #16
 8003d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d62:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003d66:	2000      	movs	r0, #0
 8003d68:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d6a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d6e:	0452      	lsls	r2, r2, #17
 8003d70:	d50d      	bpl.n	8003d8e <USB_DeactivateEndpoint+0x72>
 8003d72:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d76:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d7e:	0412      	lsls	r2, r2, #16
 8003d80:	0c12      	lsrs	r2, r2, #16
 8003d82:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003d86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d8a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d8e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d9a:	e7dc      	b.n	8003d56 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8003d9c:	2a00      	cmp	r2, #0
 8003d9e:	d148      	bne.n	8003e32 <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003da0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003da4:	0451      	lsls	r1, r2, #17
 8003da6:	d50d      	bpl.n	8003dc4 <USB_DeactivateEndpoint+0xa8>
 8003da8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003dac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003db0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003db4:	0412      	lsls	r2, r2, #16
 8003db6:	0c12      	lsrs	r2, r2, #16
 8003db8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003dbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dc0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dc4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003dc8:	0652      	lsls	r2, r2, #25
 8003dca:	d50d      	bpl.n	8003de8 <USB_DeactivateEndpoint+0xcc>
 8003dcc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003dd0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003dd4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003dd8:	0412      	lsls	r2, r2, #16
 8003dda:	0c12      	lsrs	r2, r2, #16
 8003ddc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003de0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003de4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003de8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003dec:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003df0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003df4:	0412      	lsls	r2, r2, #16
 8003df6:	0c12      	lsrs	r2, r2, #16
 8003df8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dfc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003e00:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e04:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e10:	0412      	lsls	r2, r2, #16
 8003e12:	0c12      	lsrs	r2, r2, #16
 8003e14:	f248 0180 	movw	r1, #32896	; 0x8080
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e1e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e22:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e2a:	0412      	lsls	r2, r2, #16
 8003e2c:	0c12      	lsrs	r2, r2, #16
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	e797      	b.n	8003d62 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e32:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e36:	0451      	lsls	r1, r2, #17
 8003e38:	d50d      	bpl.n	8003e56 <USB_DeactivateEndpoint+0x13a>
 8003e3a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e3e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e46:	0412      	lsls	r2, r2, #16
 8003e48:	0c12      	lsrs	r2, r2, #16
 8003e4a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003e4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e52:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e56:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e5a:	0652      	lsls	r2, r2, #25
 8003e5c:	d50d      	bpl.n	8003e7a <USB_DeactivateEndpoint+0x15e>
 8003e5e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e62:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e6a:	0412      	lsls	r2, r2, #16
 8003e6c:	0c12      	lsrs	r2, r2, #16
 8003e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e72:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003e76:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003e7a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e7e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e86:	0412      	lsls	r2, r2, #16
 8003e88:	0c12      	lsrs	r2, r2, #16
 8003e8a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e92:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e96:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e9a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea2:	0412      	lsls	r2, r2, #16
 8003ea4:	0c12      	lsrs	r2, r2, #16
 8003ea6:	f248 0180 	movw	r1, #32896	; 0x8080
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003eb0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003eb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003eb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ebc:	e7b5      	b.n	8003e2a <USB_DeactivateEndpoint+0x10e>

08003ebe <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003ebe:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003ec0:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8003ec2:	b18b      	cbz	r3, 8003ee8 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003ec4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed0:	041b      	lsls	r3, r3, #16
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003ee8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003eec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	0c1b      	lsrs	r3, r3, #16
 8003ef8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003efc:	e7ec      	b.n	8003ed8 <USB_EPSetStall+0x1a>

08003efe <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003efe:	7b0b      	ldrb	r3, [r1, #12]
 8003f00:	bb3b      	cbnz	r3, 8003f52 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8003f02:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f04:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8003f06:	b333      	cbz	r3, 8003f56 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f0c:	065b      	lsls	r3, r3, #25
 8003f0e:	d50d      	bpl.n	8003f2c <USB_EPClearStall+0x2e>
 8003f10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	0c1b      	lsrs	r3, r3, #16
 8003f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003f2c:	78cb      	ldrb	r3, [r1, #3]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d00f      	beq.n	8003f52 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003f52:	2000      	movs	r0, #0
 8003f54:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f56:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f5a:	045b      	lsls	r3, r3, #17
 8003f5c:	d50d      	bpl.n	8003f7a <USB_EPClearStall+0x7c>
 8003f5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f76:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f7a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003f8e:	e7da      	b.n	8003f46 <USB_EPClearStall+0x48>

08003f90 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003f90:	b911      	cbnz	r1, 8003f98 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003f98:	2000      	movs	r0, #0
 8003f9a:	4770      	bx	lr

08003f9c <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8003f9c:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8003fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8003fae:	2000      	movs	r0, #0
 8003fb0:	4770      	bx	lr

08003fb2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003fb2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003fb6:	b280      	uxth	r0, r0
 8003fb8:	4770      	bx	lr

08003fba <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003fba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003fbe:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003fc0:	4410      	add	r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003fc8:	1a40      	subs	r0, r0, r1

  for (count = n; count != 0U; count--)
 8003fca:	428b      	cmp	r3, r1
 8003fcc:	d100      	bne.n	8003fd0 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8003fce:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003fd0:	880a      	ldrh	r2, [r1, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8003fd2:	5242      	strh	r2, [r0, r1]
    pBuf++;
 8003fd4:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8003fd6:	e7f8      	b.n	8003fca <USB_WritePMA+0x10>

08003fd8 <USB_EPStartXfer>:
{
 8003fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fdc:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8003fde:	7849      	ldrb	r1, [r1, #1]
    if (ep->doublebuffer == 0U)
 8003fe0:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8003fe2:	2901      	cmp	r1, #1
{
 8003fe4:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8003fe6:	f040 811f 	bne.w	8004228 <USB_EPStartXfer+0x250>
    if (ep->xfer_len > ep->maxpacket)
 8003fea:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003fee:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ff0:	6961      	ldr	r1, [r4, #20]
 8003ff2:	4566      	cmp	r6, ip
 8003ff4:	bf28      	it	cs
 8003ff6:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 8003ff8:	bb12      	cbnz	r2, 8004040 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ffa:	b2b6      	uxth	r6, r6
 8003ffc:	88e2      	ldrh	r2, [r4, #6]
 8003ffe:	4633      	mov	r3, r6
 8004000:	f7ff ffdb 	bl	8003fba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004004:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004008:	7823      	ldrb	r3, [r4, #0]
 800400a:	f205 4102 	addw	r1, r5, #1026	; 0x402
 800400e:	fa11 f282 	uxtah	r2, r1, r2
 8004012:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004016:	8016      	strh	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004018:	7822      	ldrb	r2, [r4, #0]
 800401a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800401e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800402e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004036:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800403a:	2000      	movs	r0, #0
}
 800403c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 8004040:	78e2      	ldrb	r2, [r4, #3]
        if (ep->xfer_len_db > ep->maxpacket)
 8004042:	6a23      	ldr	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004044:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 8004046:	2a02      	cmp	r2, #2
 8004048:	f040 80d7 	bne.w	80041fa <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 800404c:	459c      	cmp	ip, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800404e:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8004052:	f080 80bb 	bcs.w	80041cc <USB_EPStartXfer+0x1f4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004056:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800405a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800405e:	0412      	lsls	r2, r2, #16
 8004060:	0c12      	lsrs	r2, r2, #16
 8004062:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8004066:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800406a:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800406e:	f830 8027 	ldrh.w	r8, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004072:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004076:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004078:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 800407c:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800407e:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004080:	d053      	beq.n	800412a <USB_EPStartXfer+0x152>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004082:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8004086:	fa1c f282 	uxtah	r2, ip, r2
 800408a:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800408e:	8962      	ldrh	r2, [r4, #10]
 8004090:	f7ff ff93 	bl	8003fba <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8004094:	6a22      	ldr	r2, [r4, #32]
 8004096:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8004098:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800409a:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 800409c:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800409e:	bf8c      	ite	hi
 80040a0:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 80040a2:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 80040a4:	4431      	add	r1, r6
 80040a6:	bf88      	it	hi
 80040a8:	4632      	movhi	r2, r6
 80040aa:	6223      	str	r3, [r4, #32]
 80040ac:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80040ae:	b293      	uxth	r3, r2
 80040b0:	bb70      	cbnz	r0, 8004110 <USB_EPStartXfer+0x138>
 80040b2:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 80040b6:	7820      	ldrb	r0, [r4, #0]
 80040b8:	f205 4702 	addw	r7, r5, #1026	; 0x402
 80040bc:	fa17 f686 	uxtah	r6, r7, r6
 80040c0:	2a3e      	cmp	r2, #62	; 0x3e
 80040c2:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 80040c6:	d90e      	bls.n	80040e6 <USB_EPStartXfer+0x10e>
 80040c8:	0950      	lsrs	r0, r2, #5
 80040ca:	06d7      	lsls	r7, r2, #27
 80040cc:	4aaa      	ldr	r2, [pc, #680]	; (8004378 <USB_EPStartXfer+0x3a0>)
 80040ce:	bf08      	it	eq
 80040d0:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 80040d4:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80040d8:	b292      	uxth	r2, r2
 80040da:	8032      	strh	r2, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040dc:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040de:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040e0:	f7ff ff6b 	bl	8003fba <USB_WritePMA>
 80040e4:	e798      	b.n	8004018 <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80040e6:	b95a      	cbnz	r2, 8004100 <USB_EPStartXfer+0x128>
 80040e8:	8832      	ldrh	r2, [r6, #0]
 80040ea:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80040ee:	0412      	lsls	r2, r2, #16
 80040f0:	0c12      	lsrs	r2, r2, #16
 80040f2:	8032      	strh	r2, [r6, #0]
 80040f4:	8832      	ldrh	r2, [r6, #0]
 80040f6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80040fa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80040fe:	e7eb      	b.n	80040d8 <USB_EPStartXfer+0x100>
 8004100:	0850      	lsrs	r0, r2, #1
 8004102:	07d2      	lsls	r2, r2, #31
 8004104:	bf48      	it	mi
 8004106:	3001      	addmi	r0, #1
 8004108:	0280      	lsls	r0, r0, #10
 800410a:	b280      	uxth	r0, r0
 800410c:	8030      	strh	r0, [r6, #0]
 800410e:	e7e5      	b.n	80040dc <USB_EPStartXfer+0x104>
 8004110:	2801      	cmp	r0, #1
 8004112:	d1e3      	bne.n	80040dc <USB_EPStartXfer+0x104>
 8004114:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004118:	7820      	ldrb	r0, [r4, #0]
 800411a:	f205 4602 	addw	r6, r5, #1026	; 0x402
 800411e:	fa16 f282 	uxtah	r2, r6, r2
 8004122:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004126:	8013      	strh	r3, [r2, #0]
 8004128:	e7d8      	b.n	80040dc <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800412a:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 800412e:	fa1c f282 	uxtah	r2, ip, r2
 8004132:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004136:	8922      	ldrh	r2, [r4, #8]
 8004138:	f7ff ff3f 	bl	8003fba <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800413c:	6a22      	ldr	r2, [r4, #32]
 800413e:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8004140:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004142:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 8004144:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8004146:	bf8c      	ite	hi
 8004148:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800414a:	4643      	movls	r3, r8
            ep->xfer_buff += len;
 800414c:	4431      	add	r1, r6
 800414e:	bf88      	it	hi
 8004150:	4632      	movhi	r2, r6
 8004152:	6223      	str	r3, [r4, #32]
 8004154:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004156:	b293      	uxth	r3, r2
 8004158:	bb58      	cbnz	r0, 80041b2 <USB_EPStartXfer+0x1da>
 800415a:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 800415e:	7820      	ldrb	r0, [r4, #0]
 8004160:	f205 4706 	addw	r7, r5, #1030	; 0x406
 8004164:	fa17 f686 	uxtah	r6, r7, r6
 8004168:	2a3e      	cmp	r2, #62	; 0x3e
 800416a:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 800416e:	d90b      	bls.n	8004188 <USB_EPStartXfer+0x1b0>
 8004170:	0950      	lsrs	r0, r2, #5
 8004172:	06d7      	lsls	r7, r2, #27
 8004174:	4a80      	ldr	r2, [pc, #512]	; (8004378 <USB_EPStartXfer+0x3a0>)
 8004176:	bf08      	it	eq
 8004178:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 800417c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8004180:	b292      	uxth	r2, r2
 8004182:	8032      	strh	r2, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004184:	8962      	ldrh	r2, [r4, #10]
 8004186:	e7aa      	b.n	80040de <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004188:	b95a      	cbnz	r2, 80041a2 <USB_EPStartXfer+0x1ca>
 800418a:	8832      	ldrh	r2, [r6, #0]
 800418c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004190:	0412      	lsls	r2, r2, #16
 8004192:	0c12      	lsrs	r2, r2, #16
 8004194:	8032      	strh	r2, [r6, #0]
 8004196:	8832      	ldrh	r2, [r6, #0]
 8004198:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800419c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80041a0:	e7ee      	b.n	8004180 <USB_EPStartXfer+0x1a8>
 80041a2:	0850      	lsrs	r0, r2, #1
 80041a4:	07d2      	lsls	r2, r2, #31
 80041a6:	bf48      	it	mi
 80041a8:	3001      	addmi	r0, #1
 80041aa:	0280      	lsls	r0, r0, #10
 80041ac:	b280      	uxth	r0, r0
 80041ae:	8030      	strh	r0, [r6, #0]
 80041b0:	e7e8      	b.n	8004184 <USB_EPStartXfer+0x1ac>
 80041b2:	2801      	cmp	r0, #1
 80041b4:	d1e6      	bne.n	8004184 <USB_EPStartXfer+0x1ac>
 80041b6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80041ba:	7820      	ldrb	r0, [r4, #0]
 80041bc:	f205 4606 	addw	r6, r5, #1030	; 0x406
 80041c0:	fa16 f282 	uxtah	r2, r6, r2
 80041c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80041c8:	8013      	strh	r3, [r2, #0]
 80041ca:	e7db      	b.n	8004184 <USB_EPStartXfer+0x1ac>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80041cc:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80041d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041d4:	0412      	lsls	r2, r2, #16
 80041d6:	0c12      	lsrs	r2, r2, #16
 80041d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041e0:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80041e4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80041e8:	f200 4602 	addw	r6, r0, #1026	; 0x402
 80041ec:	fa16 f282 	uxtah	r2, r6, r2
 80041f0:	b29b      	uxth	r3, r3
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041f2:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041f6:	8922      	ldrh	r2, [r4, #8]
 80041f8:	e772      	b.n	80040e0 <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80041fa:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 80041fe:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004200:	f012 0f40 	tst.w	r2, #64	; 0x40
        ep->xfer_len_db -= len;
 8004204:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004206:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800420a:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800420c:	d007      	beq.n	800421e <USB_EPStartXfer+0x246>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800420e:	f200 4606 	addw	r6, r0, #1030	; 0x406
 8004212:	fa16 f282 	uxtah	r2, r6, r2
 8004216:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800421a:	8962      	ldrh	r2, [r4, #10]
 800421c:	e760      	b.n	80040e0 <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800421e:	f200 4602 	addw	r6, r0, #1026	; 0x402
 8004222:	fa16 f282 	uxtah	r2, r6, r2
 8004226:	e7e4      	b.n	80041f2 <USB_EPStartXfer+0x21a>
    if (ep->doublebuffer == 0U)
 8004228:	bb7a      	cbnz	r2, 800428a <USB_EPStartXfer+0x2b2>
      if (ep->xfer_len > ep->maxpacket)
 800422a:	69a3      	ldr	r3, [r4, #24]
 800422c:	6921      	ldr	r1, [r4, #16]
 800422e:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8004230:	bf88      	it	hi
 8004232:	1a5a      	subhi	r2, r3, r1
 8004234:	61a2      	str	r2, [r4, #24]
 8004236:	bf88      	it	hi
 8004238:	460b      	movhi	r3, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800423a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800423e:	7822      	ldrb	r2, [r4, #0]
 8004240:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8004244:	fa10 f181 	uxtah	r1, r0, r1
 8004248:	2b3e      	cmp	r3, #62	; 0x3e
 800424a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800424e:	f200 80cb 	bhi.w	80043e8 <USB_EPStartXfer+0x410>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 80d1 	bne.w	80043fa <USB_EPStartXfer+0x422>
 8004258:	880b      	ldrh	r3, [r1, #0]
 800425a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	800b      	strh	r3, [r1, #0]
 8004264:	880b      	ldrh	r3, [r1, #0]
 8004266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800426a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800426e:	b29b      	uxth	r3, r3
 8004270:	800b      	strh	r3, [r1, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004272:	7822      	ldrb	r2, [r4, #0]
 8004274:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004288:	e6d1      	b.n	800402e <USB_EPStartXfer+0x56>
      if (ep->type == EP_TYPE_BULK)
 800428a:	78e3      	ldrb	r3, [r4, #3]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d175      	bne.n	800437c <USB_EPStartXfer+0x3a4>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004290:	2900      	cmp	r1, #0
 8004292:	d14b      	bne.n	800432c <USB_EPStartXfer+0x354>
 8004294:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8004298:	7823      	ldrb	r3, [r4, #0]
 800429a:	f200 4202 	addw	r2, r0, #1026	; 0x402
 800429e:	fa12 f181 	uxtah	r1, r2, r1
 80042a2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	2b3e      	cmp	r3, #62	; 0x3e
 80042aa:	d922      	bls.n	80042f2 <USB_EPStartXfer+0x31a>
 80042ac:	0958      	lsrs	r0, r3, #5
 80042ae:	4a32      	ldr	r2, [pc, #200]	; (8004378 <USB_EPStartXfer+0x3a0>)
 80042b0:	06df      	lsls	r7, r3, #27
 80042b2:	bf08      	it	eq
 80042b4:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 80042b8:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80042bc:	b292      	uxth	r2, r2
 80042be:	800a      	strh	r2, [r1, #0]
 80042c0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80042c4:	7822      	ldrb	r2, [r4, #0]
 80042c6:	f205 4006 	addw	r0, r5, #1030	; 0x406
 80042ca:	fa10 f181 	uxtah	r1, r0, r1
 80042ce:	2b3e      	cmp	r3, #62	; 0x3e
 80042d0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80042d4:	d820      	bhi.n	8004318 <USB_EPStartXfer+0x340>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d145      	bne.n	8004366 <USB_EPStartXfer+0x38e>
 80042da:	880b      	ldrh	r3, [r1, #0]
 80042dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	0c1b      	lsrs	r3, r3, #16
 80042e4:	800b      	strh	r3, [r1, #0]
 80042e6:	880b      	ldrh	r3, [r1, #0]
 80042e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f0:	e01a      	b.n	8004328 <USB_EPStartXfer+0x350>
 80042f2:	b95b      	cbnz	r3, 800430c <USB_EPStartXfer+0x334>
 80042f4:	880a      	ldrh	r2, [r1, #0]
 80042f6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80042fa:	0412      	lsls	r2, r2, #16
 80042fc:	0c12      	lsrs	r2, r2, #16
 80042fe:	800a      	strh	r2, [r1, #0]
 8004300:	880a      	ldrh	r2, [r1, #0]
 8004302:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004306:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800430a:	e7d7      	b.n	80042bc <USB_EPStartXfer+0x2e4>
 800430c:	085a      	lsrs	r2, r3, #1
 800430e:	07de      	lsls	r6, r3, #31
 8004310:	bf48      	it	mi
 8004312:	3201      	addmi	r2, #1
 8004314:	0292      	lsls	r2, r2, #10
 8004316:	e7d1      	b.n	80042bc <USB_EPStartXfer+0x2e4>
 8004318:	095a      	lsrs	r2, r3, #5
 800431a:	06d8      	lsls	r0, r3, #27
 800431c:	4b16      	ldr	r3, [pc, #88]	; (8004378 <USB_EPStartXfer+0x3a0>)
 800431e:	bf08      	it	eq
 8004320:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8004324:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8004328:	b29b      	uxth	r3, r3
 800432a:	800b      	strh	r3, [r1, #0]
        if (ep->xfer_count != 0U)
 800432c:	69e3      	ldr	r3, [r4, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d09f      	beq.n	8004272 <USB_EPStartXfer+0x29a>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004332:	7822      	ldrb	r2, [r4, #0]
 8004334:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004338:	f244 0340 	movw	r3, #16448	; 0x4040
 800433c:	ea03 0001 	and.w	r0, r3, r1
 8004340:	438b      	bics	r3, r1
 8004342:	d001      	beq.n	8004348 <USB_EPStartXfer+0x370>
 8004344:	2800      	cmp	r0, #0
 8004346:	d194      	bne.n	8004272 <USB_EPStartXfer+0x29a>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004348:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800434c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	0c1b      	lsrs	r3, r3, #16
 8004358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800435c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004360:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8004364:	e785      	b.n	8004272 <USB_EPStartXfer+0x29a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004366:	085a      	lsrs	r2, r3, #1
 8004368:	07db      	lsls	r3, r3, #31
 800436a:	bf48      	it	mi
 800436c:	3201      	addmi	r2, #1
 800436e:	0292      	lsls	r2, r2, #10
 8004370:	b292      	uxth	r2, r2
 8004372:	800a      	strh	r2, [r1, #0]
 8004374:	e7da      	b.n	800432c <USB_EPStartXfer+0x354>
 8004376:	bf00      	nop
 8004378:	ffff8000 	.word	0xffff8000
      else if (ep->type == EP_TYPE_ISOC)
 800437c:	2b01      	cmp	r3, #1
 800437e:	d144      	bne.n	800440a <USB_EPStartXfer+0x432>
        if (ep->xfer_len > ep->maxpacket)
 8004380:	69a3      	ldr	r3, [r4, #24]
 8004382:	6922      	ldr	r2, [r4, #16]
 8004384:	4293      	cmp	r3, r2
          ep->xfer_len -= len;
 8004386:	bf8a      	itet	hi
 8004388:	1a98      	subhi	r0, r3, r2
          ep->xfer_len = 0U;
 800438a:	2000      	movls	r0, #0
 800438c:	4613      	movhi	r3, r2
 800438e:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004390:	2900      	cmp	r1, #0
 8004392:	f47f af6e 	bne.w	8004272 <USB_EPStartXfer+0x29a>
 8004396:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800439a:	7822      	ldrb	r2, [r4, #0]
 800439c:	f205 4002 	addw	r0, r5, #1026	; 0x402
 80043a0:	fa10 f181 	uxtah	r1, r0, r1
 80043a4:	2b3e      	cmp	r3, #62	; 0x3e
 80043a6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80043aa:	d90a      	bls.n	80043c2 <USB_EPStartXfer+0x3ea>
 80043ac:	0958      	lsrs	r0, r3, #5
 80043ae:	4a18      	ldr	r2, [pc, #96]	; (8004410 <USB_EPStartXfer+0x438>)
 80043b0:	06df      	lsls	r7, r3, #27
 80043b2:	bf08      	it	eq
 80043b4:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 80043b8:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80043bc:	b292      	uxth	r2, r2
 80043be:	800a      	strh	r2, [r1, #0]
 80043c0:	e73b      	b.n	800423a <USB_EPStartXfer+0x262>
 80043c2:	b95b      	cbnz	r3, 80043dc <USB_EPStartXfer+0x404>
 80043c4:	880a      	ldrh	r2, [r1, #0]
 80043c6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80043ca:	0412      	lsls	r2, r2, #16
 80043cc:	0c12      	lsrs	r2, r2, #16
 80043ce:	800a      	strh	r2, [r1, #0]
 80043d0:	880a      	ldrh	r2, [r1, #0]
 80043d2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80043d6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80043da:	e7ef      	b.n	80043bc <USB_EPStartXfer+0x3e4>
 80043dc:	085a      	lsrs	r2, r3, #1
 80043de:	07de      	lsls	r6, r3, #31
 80043e0:	bf48      	it	mi
 80043e2:	3201      	addmi	r2, #1
 80043e4:	0292      	lsls	r2, r2, #10
 80043e6:	e7e9      	b.n	80043bc <USB_EPStartXfer+0x3e4>
 80043e8:	095a      	lsrs	r2, r3, #5
 80043ea:	06d8      	lsls	r0, r3, #27
 80043ec:	4b08      	ldr	r3, [pc, #32]	; (8004410 <USB_EPStartXfer+0x438>)
 80043ee:	bf08      	it	eq
 80043f0:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80043f4:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80043f8:	e739      	b.n	800426e <USB_EPStartXfer+0x296>
 80043fa:	085a      	lsrs	r2, r3, #1
 80043fc:	07db      	lsls	r3, r3, #31
 80043fe:	bf48      	it	mi
 8004400:	3201      	addmi	r2, #1
 8004402:	0292      	lsls	r2, r2, #10
 8004404:	b292      	uxth	r2, r2
 8004406:	800a      	strh	r2, [r1, #0]
 8004408:	e733      	b.n	8004272 <USB_EPStartXfer+0x29a>
        return HAL_ERROR;
 800440a:	2001      	movs	r0, #1
 800440c:	e616      	b.n	800403c <USB_EPStartXfer+0x64>
 800440e:	bf00      	nop
 8004410:	ffff8000 	.word	0xffff8000

08004414 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004414:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8004418:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800441a:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 800441c:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 800441e:	460c      	mov	r4, r1
 8004420:	462e      	mov	r6, r5
 8004422:	1a47      	subs	r7, r0, r1
 8004424:	193a      	adds	r2, r7, r4
 8004426:	3402      	adds	r4, #2
 8004428:	b936      	cbnz	r6, 8004438 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800442a:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 800442c:	bf44      	itt	mi
 800442e:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004432:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8004436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8004438:	8812      	ldrh	r2, [r2, #0]
 800443a:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800443c:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004440:	0a12      	lsrs	r2, r2, #8
 8004442:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8004446:	3e01      	subs	r6, #1
 8004448:	e7ec      	b.n	8004424 <USB_ReadPMA+0x10>
	...

0800444c <USBD_AUDIO_GetCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_AUDIO_CfgDesc);
 800444c:	2376      	movs	r3, #118	; 0x76
 800444e:	8003      	strh	r3, [r0, #0]
  return USBD_AUDIO_CfgDesc;
}
 8004450:	4800      	ldr	r0, [pc, #0]	; (8004454 <USBD_AUDIO_GetCfgDesc+0x8>)
 8004452:	4770      	bx	lr
 8004454:	20002fe4 	.word	0x20002fe4

08004458 <USBD_AUDIO_EP0_RxReady>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{  
 8004458:	b510      	push	{r4, lr}
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 800445a:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800445e:	7f23      	ldrb	r3, [r4, #28]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d114      	bne.n	800448e <USBD_AUDIO_EP0_RxReady+0x36>
  {    
    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8004464:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8004468:	2b02      	cmp	r3, #2
 800446a:	d110      	bne.n	800448e <USBD_AUDIO_EP0_RxReady+0x36>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->VolumeCtl(VOL_CUR);    
 800446c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8004470:	4a08      	ldr	r2, [pc, #32]	; (8004494 <USBD_AUDIO_EP0_RxReady+0x3c>)
 8004472:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004476:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 800447a:	f9b2 0076 	ldrsh.w	r0, [r2, #118]	; 0x76
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4798      	blx	r3
      
      haudio->control.cmd = 0;
      haudio->control.len = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      haudio->control.unit = 0;
 8004488:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
      haudio->control.cmd = 0;
 800448c:	83a3      	strh	r3, [r4, #28]
      haudio->control.data[0]=0;
      haudio->control.data[0]=0;
    }
  }    
  return USBD_OK;
}
 800448e:	2000      	movs	r0, #0
 8004490:	bd10      	pop	{r4, pc}
 8004492:	bf00      	nop
 8004494:	20002fe4 	.word	0x20002fe4

08004498 <USBD_AUDIO_EP0_TxReady>:
*/
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
  /* Only OUT control data are processed */
  return USBD_OK;
}
 8004498:	2000      	movs	r0, #0
 800449a:	4770      	bx	lr

0800449c <USBD_AUDIO_DataOut>:
*/
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev, 
                                    uint8_t epnum)
{  
  return USBD_OK;
}
 800449c:	2000      	movs	r0, #0
 800449e:	4770      	bx	lr

080044a0 <USBD_AUDIO_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 80044a0:	230a      	movs	r3, #10
 80044a2:	8003      	strh	r3, [r0, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
}
 80044a4:	4800      	ldr	r0, [pc, #0]	; (80044a8 <USBD_AUDIO_GetDeviceQualifierDesc+0x8>)
 80044a6:	4770      	bx	lr
 80044a8:	20000068 	.word	0x20000068

080044ac <USBD_AUDIO_DataIn>:
{
 80044ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  haudio = pdev->pClassData;
 80044b0:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  haudio->timeout=0;
 80044b4:	2300      	movs	r3, #0
  if (epnum == (AUDIO_IN_EP & 0x7F))
 80044b6:	2901      	cmp	r1, #1
  uint16_t IsocInWr_app = haudio->wr_ptr;
 80044b8:	8b25      	ldrh	r5, [r4, #24]
  uint16_t true_dim = haudio->buffer_length;
 80044ba:	f8b4 800e 	ldrh.w	r8, [r4, #14]
  uint16_t packet_dim = haudio->paketDimension;
 80044be:	f8b4 9012 	ldrh.w	r9, [r4, #18]
  uint16_t channels = haudio->channels;
 80044c2:	f894 a004 	ldrb.w	sl, [r4, #4]
  haudio->timeout=0;
 80044c6:	81a3      	strh	r3, [r4, #12]
{
 80044c8:	4606      	mov	r6, r0
  if (epnum == (AUDIO_IN_EP & 0x7F))
 80044ca:	d146      	bne.n	800455a <USBD_AUDIO_DataIn+0xae>
    if (haudio->state == STATE_USB_IDLE) 
 80044cc:	7d23      	ldrb	r3, [r4, #20]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d109      	bne.n	80044e6 <USBD_AUDIO_DataIn+0x3a>
      haudio->state=STATE_USB_REQUESTS_STARTED;
 80044d2:	2302      	movs	r3, #2
 80044d4:	7523      	strb	r3, [r4, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Record();      
 80044d6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80044da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80044de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4798      	blx	r3
    if (haudio->state == STATE_USB_BUFFER_WRITE_STARTED)   
 80044e6:	7d23      	ldrb	r3, [r4, #20]
 80044e8:	2b03      	cmp	r3, #3
  length_usb_pck = packet_dim;  
 80044ea:	464f      	mov	r7, r9
    if (haudio->state == STATE_USB_BUFFER_WRITE_STARTED)   
 80044ec:	d142      	bne.n	8004574 <USBD_AUDIO_DataIn+0xc8>
      haudio->rd_ptr = haudio->rd_ptr % (true_dim);              
 80044ee:	8ae2      	ldrh	r2, [r4, #22]
 80044f0:	fbb2 f3f8 	udiv	r3, r2, r8
 80044f4:	fb08 2213 	mls	r2, r8, r3, r2
 80044f8:	b292      	uxth	r2, r2
      if(IsocInWr_app<haudio->rd_ptr){
 80044fa:	42aa      	cmp	r2, r5
        app = ((true_dim) - haudio->rd_ptr) +  IsocInWr_app;
 80044fc:	bf88      	it	hi
 80044fe:	4445      	addhi	r5, r8
      if(app >= (packet_dim*haudio->upper_treshold)){       
 8004500:	7ea3      	ldrb	r3, [r4, #26]
      haudio->rd_ptr = haudio->rd_ptr % (true_dim);              
 8004502:	82e2      	strh	r2, [r4, #22]
        app = IsocInWr_app - haudio->rd_ptr;
 8004504:	1aad      	subs	r5, r5, r2
 8004506:	b2ad      	uxth	r5, r5
      if(app >= (packet_dim*haudio->upper_treshold)){       
 8004508:	fb09 f303 	mul.w	r3, r9, r3
 800450c:	429d      	cmp	r5, r3
 800450e:	db27      	blt.n	8004560 <USBD_AUDIO_DataIn+0xb4>
        length_usb_pck += channels*3;
 8004510:	2703      	movs	r7, #3
 8004512:	fb17 970a 	smlabb	r7, r7, sl, r9
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 8004516:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004518:	463b      	mov	r3, r7
 800451a:	440a      	add	r2, r1
 800451c:	4630      	mov	r0, r6
 800451e:	2181      	movs	r1, #129	; 0x81
 8004520:	f7fc f8dd 	bl	80006de <USBD_LL_Transmit>
      haudio->rd_ptr += length_usb_pck;      
 8004524:	8ae3      	ldrh	r3, [r4, #22]
      if(app < haudio->buffer_length/10)
 8004526:	220a      	movs	r2, #10
      haudio->rd_ptr += length_usb_pck;      
 8004528:	441f      	add	r7, r3
      if(app < haudio->buffer_length/10)
 800452a:	89e3      	ldrh	r3, [r4, #14]
 800452c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004530:	42ab      	cmp	r3, r5
      haudio->rd_ptr += length_usb_pck;      
 8004532:	82e7      	strh	r7, [r4, #22]
      if(app < haudio->buffer_length/10)
 8004534:	d911      	bls.n	800455a <USBD_AUDIO_DataIn+0xae>
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Stop();
 8004536:	f8d6 02d4 	ldr.w	r0, [r6, #724]	; 0x2d4
 800453a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800453e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	4798      	blx	r3
        haudio->state = STATE_USB_IDLE; 
 8004546:	2301      	movs	r3, #1
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 8004548:	89e2      	ldrh	r2, [r4, #14]
        haudio->state = STATE_USB_IDLE; 
 800454a:	7523      	strb	r3, [r4, #20]
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 800454c:	8a23      	ldrh	r3, [r4, #16]
 800454e:	6e20      	ldr	r0, [r4, #96]	; 0x60
        haudio->timeout=0;
 8004550:	2100      	movs	r1, #0
 8004552:	81a1      	strh	r1, [r4, #12]
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 8004554:	441a      	add	r2, r3
 8004556:	f002 fd2d 	bl	8006fb4 <memset>
}
 800455a:	2000      	movs	r0, #0
 800455c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }else if(app <= (packet_dim*haudio->lower_treshold)){
 8004560:	7ee3      	ldrb	r3, [r4, #27]
 8004562:	fb09 f303 	mul.w	r3, r9, r3
 8004566:	429d      	cmp	r5, r3
        length_usb_pck -= channels*3;
 8004568:	bfdc      	itt	le
 800456a:	eb0a 0a4a 	addle.w	sl, sl, sl, lsl #1
 800456e:	eba9 070a 	suble.w	r7, r9, sl
 8004572:	e7d0      	b.n	8004516 <USBD_AUDIO_DataIn+0x6a>
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 8004574:	4a03      	ldr	r2, [pc, #12]	; (8004584 <USBD_AUDIO_DataIn+0xd8>)
 8004576:	464b      	mov	r3, r9
 8004578:	2181      	movs	r1, #129	; 0x81
 800457a:	4630      	mov	r0, r6
 800457c:	f7fc f8af 	bl	80006de <USBD_LL_Transmit>
 8004580:	e7eb      	b.n	800455a <USBD_AUDIO_DataIn+0xae>
 8004582:	bf00      	nop
 8004584:	2000305c 	.word	0x2000305c

08004588 <USBD_AUDIO_DeInit>:
{
 8004588:	b510      	push	{r4, lr}
 800458a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,AUDIO_IN_EP);  
 800458c:	2181      	movs	r1, #129	; 0x81
 800458e:	f7fc f870 	bl	8000672 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8004592:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004596:	b163      	cbz	r3, 80045b2 <USBD_AUDIO_DeInit+0x2a>
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0);
 8004598:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
 800459c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80045a0:	2000      	movs	r0, #0
 80045a2:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4798      	blx	r3
    haudioInstance.state = STATE_USB_WAITING_FOR_INIT; 
 80045aa:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <USBD_AUDIO_DeInit+0x30>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 80045b2:	2000      	movs	r0, #0
 80045b4:	bd10      	pop	{r4, pc}
 80045b6:	bf00      	nop
 80045b8:	20002fe4 	.word	0x20002fe4

080045bc <USBD_AUDIO_Init>:
{
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(haudioInstance.state!=STATE_USB_WAITING_FOR_INIT)
 80045be:	4c1f      	ldr	r4, [pc, #124]	; (800463c <USBD_AUDIO_Init+0x80>)
 80045c0:	f894 620c 	ldrb.w	r6, [r4, #524]	; 0x20c
{
 80045c4:	4605      	mov	r5, r0
  if(haudioInstance.state!=STATE_USB_WAITING_FOR_INIT)
 80045c6:	bbbe      	cbnz	r6, 8004638 <USBD_AUDIO_Init+0x7c>
  pdev->pClassData = &haudioInstance;
 80045c8:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
  uint16_t packet_dim = haudio->paketDimension;
 80045cc:	f8b4 720a 	ldrh.w	r7, [r4, #522]	; 0x20a
  pdev->pClassData = &haudioInstance;
 80045d0:	f8c0 32bc 	str.w	r3, [r0, #700]	; 0x2bc
  uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * haudio->dataAmount / haudio->paketDimension;
 80045d4:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->frequency,0,haudio->channels);
 80045d8:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
  haudio->rd_ptr = 0;
 80045dc:	f8a4 620e 	strh.w	r6, [r4, #526]	; 0x20e
  uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * haudio->dataAmount / haudio->paketDimension;
 80045e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80045e4:	fbb3 f3f7 	udiv	r3, r3, r7
  haudio->wr_ptr=wr_rd_offset * packet_dim;
 80045e8:	fb13 f307 	smulbb	r3, r3, r7
 80045ec:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->frequency,0,haudio->channels);
 80045f0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
  haudio->timeout = 0;
 80045f4:	f8a4 6204 	strh.w	r6, [r4, #516]	; 0x204
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->frequency,0,haudio->channels);
 80045f8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80045fc:	4631      	mov	r1, r6
 80045fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004602:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4798      	blx	r3
  USBD_LL_OpenEP(pdev,
 800460a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800460e:	2201      	movs	r2, #1
 8004610:	2181      	movs	r1, #129	; 0x81
 8004612:	4628      	mov	r0, r5
 8004614:	f7fc f823 	bl	800065e <USBD_LL_OpenEP>
  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 8004618:	2181      	movs	r1, #129	; 0x81
 800461a:	4628      	mov	r0, r5
 800461c:	f7fc f830 	bl	8000680 <USBD_LL_FlushEP>
  USBD_LL_Transmit(pdev, AUDIO_IN_EP,
 8004620:	463b      	mov	r3, r7
 8004622:	f104 0278 	add.w	r2, r4, #120	; 0x78
 8004626:	2181      	movs	r1, #129	; 0x81
 8004628:	4628      	mov	r0, r5
 800462a:	f7fc f858 	bl	80006de <USBD_LL_Transmit>
  haudio->state=STATE_USB_IDLE;
 800462e:	2301      	movs	r3, #1
 8004630:	f884 320c 	strb.w	r3, [r4, #524]	; 0x20c
}
 8004634:	4630      	mov	r0, r6
 8004636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL; 
 8004638:	2603      	movs	r6, #3
 800463a:	e7fb      	b.n	8004634 <USBD_AUDIO_Init+0x78>
 800463c:	20002fe4 	.word	0x20002fe4

08004640 <USBD_AUDIO_IsoINIncomplete>:
 8004640:	2000      	movs	r0, #0
 8004642:	4770      	bx	lr

08004644 <USBD_AUDIO_Setup>:
{
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	780c      	ldrb	r4, [r1, #0]
  haudio = pdev->pClassData;
 8004648:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800464c:	f014 0460 	ands.w	r4, r4, #96	; 0x60
{
 8004650:	4684      	mov	ip, r0
 8004652:	460f      	mov	r7, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004654:	d049      	beq.n	80046ea <USBD_AUDIO_Setup+0xa6>
 8004656:	2c20      	cmp	r4, #32
 8004658:	d12a      	bne.n	80046b0 <USBD_AUDIO_Setup+0x6c>
    switch (req->bRequest)
 800465a:	784d      	ldrb	r5, [r1, #1]
 800465c:	2d01      	cmp	r5, #1
 800465e:	d019      	beq.n	8004694 <USBD_AUDIO_Setup+0x50>
 8004660:	f105 037f 	add.w	r3, r5, #127	; 0x7f
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b03      	cmp	r3, #3
 8004668:	d838      	bhi.n	80046dc <USBD_AUDIO_Setup+0x98>
 800466a:	3d81      	subs	r5, #129	; 0x81
 800466c:	2d03      	cmp	r5, #3
 800466e:	d835      	bhi.n	80046dc <USBD_AUDIO_Setup+0x98>
 8004670:	e8df f005 	tbb	[pc, r5]
 8004674:	2f252002 	.word	0x2f252002
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
  
  (haudio->control.data)[0] = (uint16_t)VOL_CUR & 0xFF;
 8004678:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <USBD_AUDIO_Setup+0xe4>)
 800467a:	88ca      	ldrh	r2, [r1, #6]
 800467c:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004680:	7773      	strb	r3, [r6, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_CUR & 0xFF00 ) >> 8;
 8004682:	f3c3 2307 	ubfx	r3, r3, #8, #8
  (haudio->control.data)[1] = ((uint16_t)VOL_MIN & 0xFF00 ) >> 8;
 8004686:	77b3      	strb	r3, [r6, #30]
  USBD_CtlSendData (pdev, 
 8004688:	f106 011d 	add.w	r1, r6, #29
 800468c:	4660      	mov	r0, ip
 800468e:	f000 fe2c 	bl	80052ea <USBD_CtlSendData>
 8004692:	e00d      	b.n	80046b0 <USBD_AUDIO_Setup+0x6c>
*/
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{ 
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
  if (req->wLength)
 8004694:	88ca      	ldrh	r2, [r1, #6]
 8004696:	2a00      	cmp	r2, #0
 8004698:	d043      	beq.n	8004722 <USBD_AUDIO_Setup+0xde>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx (pdev,
 800469a:	4924      	ldr	r1, [pc, #144]	; (800472c <USBD_AUDIO_Setup+0xe8>)
 800469c:	f000 fe3a 	bl	8005314 <USBD_CtlPrepareRx>
                       (uint8_t *)&VOL_CUR,
                       req->wLength);
    
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80046a0:	7735      	strb	r5, [r6, #28]
    haudio->control.len = req->wLength;          /* Set the request data length */
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 80046a8:	88bb      	ldrh	r3, [r7, #4]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	f886 305e 	strb.w	r3, [r6, #94]	; 0x5e
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046b0:	2400      	movs	r4, #0
 80046b2:	e018      	b.n	80046e6 <USBD_AUDIO_Setup+0xa2>
  (haudio->control.data)[0] = (uint16_t)VOL_MIN & 0xFF;
 80046b4:	23e0      	movs	r3, #224	; 0xe0
 80046b6:	88ca      	ldrh	r2, [r1, #6]
 80046b8:	7773      	strb	r3, [r6, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MIN & 0xFF00 ) >> 8;
 80046ba:	23db      	movs	r3, #219	; 0xdb
 80046bc:	e7e3      	b.n	8004686 <USBD_AUDIO_Setup+0x42>
  (haudio->control.data)[0] = (uint16_t)VOL_MAX & 0xFF;
 80046be:	2400      	movs	r4, #0
 80046c0:	88ca      	ldrh	r2, [r1, #6]
 80046c2:	7774      	strb	r4, [r6, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_RES & 0xFF00 ) >> 8;  
 80046c4:	77b4      	strb	r4, [r6, #30]
  USBD_CtlSendData (pdev, 
 80046c6:	f106 011d 	add.w	r1, r6, #29
 80046ca:	4660      	mov	r0, ip
      USBD_CtlSendData (pdev,
 80046cc:	f000 fe0d 	bl	80052ea <USBD_CtlSendData>
      break;
 80046d0:	e009      	b.n	80046e6 <USBD_AUDIO_Setup+0xa2>
  (haudio->control.data)[0] = (uint16_t)VOL_RES & 0xFF;
 80046d2:	2323      	movs	r3, #35	; 0x23
 80046d4:	88ca      	ldrh	r2, [r1, #6]
 80046d6:	7773      	strb	r3, [r6, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_RES & 0xFF00 ) >> 8;  
 80046d8:	2400      	movs	r4, #0
 80046da:	e7f3      	b.n	80046c4 <USBD_AUDIO_Setup+0x80>
      USBD_CtlError (pdev, req);
 80046dc:	4639      	mov	r1, r7
 80046de:	4660      	mov	r0, ip
 80046e0:	f000 fddc 	bl	800529c <USBD_CtlError>
      return USBD_FAIL;
 80046e4:	2403      	movs	r4, #3
}
 80046e6:	4620      	mov	r0, r4
 80046e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 80046ea:	784b      	ldrb	r3, [r1, #1]
 80046ec:	2b0a      	cmp	r3, #10
 80046ee:	d00d      	beq.n	800470c <USBD_AUDIO_Setup+0xc8>
 80046f0:	2b0b      	cmp	r3, #11
 80046f2:	d00e      	beq.n	8004712 <USBD_AUDIO_Setup+0xce>
 80046f4:	2b06      	cmp	r3, #6
 80046f6:	d1f6      	bne.n	80046e6 <USBD_AUDIO_Setup+0xa2>
      if( (req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80046f8:	884b      	ldrh	r3, [r1, #2]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	2b21      	cmp	r3, #33	; 0x21
 80046fe:	d1f2      	bne.n	80046e6 <USBD_AUDIO_Setup+0xa2>
        len = MIN(USB_AUDIO_DESC_SIZ , req->wLength);   
 8004700:	88ca      	ldrh	r2, [r1, #6]
        USBD_CtlSendData (pdev, 
 8004702:	490b      	ldr	r1, [pc, #44]	; (8004730 <USBD_AUDIO_Setup+0xec>)
 8004704:	2a09      	cmp	r2, #9
 8004706:	bf28      	it	cs
 8004708:	2209      	movcs	r2, #9
 800470a:	e7df      	b.n	80046cc <USBD_AUDIO_Setup+0x88>
                        (uint8_t *)haudio->alt_setting,
 800470c:	6831      	ldr	r1, [r6, #0]
      USBD_CtlSendData (pdev,
 800470e:	2201      	movs	r2, #1
 8004710:	e7dc      	b.n	80046cc <USBD_AUDIO_Setup+0x88>
      if ((uint8_t)(req->wValue) < USBD_MAX_NUM_INTERFACES)
 8004712:	788b      	ldrb	r3, [r1, #2]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d801      	bhi.n	800471c <USBD_AUDIO_Setup+0xd8>
        haudio->alt_setting = (uint8_t)(req->wValue);
 8004718:	6033      	str	r3, [r6, #0]
 800471a:	e7e4      	b.n	80046e6 <USBD_AUDIO_Setup+0xa2>
        USBD_CtlError (pdev, req);
 800471c:	f000 fdbe 	bl	800529c <USBD_CtlError>
 8004720:	e7e1      	b.n	80046e6 <USBD_AUDIO_Setup+0xa2>
  return ret;
 8004722:	4614      	mov	r4, r2
 8004724:	e7df      	b.n	80046e6 <USBD_AUDIO_Setup+0xa2>
 8004726:	bf00      	nop
 8004728:	20002fe4 	.word	0x20002fe4
 800472c:	2000305a 	.word	0x2000305a
 8004730:	20002ff6 	.word	0x20002ff6

08004734 <USBD_AUDIO_IsoOutIncomplete>:
 8004734:	2000      	movs	r0, #0
 8004736:	4770      	bx	lr

08004738 <USBD_AUDIO_SOF>:
 8004738:	2000      	movs	r0, #0
 800473a:	4770      	bx	lr

0800473c <USBD_AUDIO_Data_Transfer>:
*       you can pass 16 PCM samples if the function is called each millisecond, 
*       32 samples if called every 2 milliseconds and so on. 
* @retval status
*/
uint8_t  USBD_AUDIO_Data_Transfer(USBD_HandleTypeDef *pdev, int16_t * audioData, uint16_t PCMSamples)
{
 800473c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
  
  if(haudioInstance.state==STATE_USB_WAITING_FOR_INIT){    
 800473e:	4b39      	ldr	r3, [pc, #228]	; (8004824 <USBD_AUDIO_Data_Transfer+0xe8>)
 8004740:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d068      	beq.n	800481a <USBD_AUDIO_Data_Transfer+0xde>
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8004748:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  uint16_t dataAmount = PCMSamples * 3;//2; /*Bytes*/
  uint16_t true_dim = haudio->buffer_length;
  uint16_t current_data_Amount = haudio->dataAmount;
  uint16_t packet_dim = haudio->paketDimension;
  
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 800474c:	7d2b      	ldrb	r3, [r5, #20]
  uint16_t dataAmount = PCMSamples * 3;//2; /*Bytes*/
 800474e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 8004752:	2b02      	cmp	r3, #2
  uint16_t dataAmount = PCMSamples * 3;//2; /*Bytes*/
 8004754:	b294      	uxth	r4, r2
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 8004756:	d002      	beq.n	800475e <USBD_AUDIO_Data_Transfer+0x22>
 8004758:	8a2a      	ldrh	r2, [r5, #16]
 800475a:	42a2      	cmp	r2, r4
 800475c:	d02e      	beq.n	80047bc <USBD_AUDIO_Data_Transfer+0x80>
  uint16_t packet_dim = haudio->paketDimension;
 800475e:	8a6a      	ldrh	r2, [r5, #18]
    
    /*USB parameters definition, based on the amount of data passed*/
    haudio->dataAmount=dataAmount;                  
 8004760:	822c      	strh	r4, [r5, #16]
    uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * dataAmount / packet_dim; 
 8004762:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    haudio->wr_ptr=wr_rd_offset * packet_dim;
    haudio->rd_ptr = 0;
    haudio->upper_treshold = wr_rd_offset + 1;
    haudio->lower_treshold = wr_rd_offset - 1;
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 8004766:	fbb4 f4f2 	udiv	r4, r4, r2
    uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * dataAmount / packet_dim; 
 800476a:	fbb3 f3f2 	udiv	r3, r3, r2
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 800476e:	fb14 f402 	smulbb	r4, r4, r2
    haudio->wr_ptr=wr_rd_offset * packet_dim;
 8004772:	fb13 f102 	smulbb	r1, r3, r2
 8004776:	8329      	strh	r1, [r5, #24]
    haudio->upper_treshold = wr_rd_offset + 1;
 8004778:	b2db      	uxtb	r3, r3
    haudio->rd_ptr = 0;
 800477a:	2100      	movs	r1, #0
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 800477c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    
    /*Memory allocation for data buffer, depending (also) on data amount passed to the transfer function*/
    if(haudio->buffer != NULL)
 8004780:	6e28      	ldr	r0, [r5, #96]	; 0x60
    haudio->rd_ptr = 0;
 8004782:	82e9      	strh	r1, [r5, #22]
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 8004784:	0064      	lsls	r4, r4, #1
    haudio->upper_treshold = wr_rd_offset + 1;
 8004786:	1c59      	adds	r1, r3, #1
    haudio->lower_treshold = wr_rd_offset - 1;
 8004788:	3b01      	subs	r3, #1
    haudio->upper_treshold = wr_rd_offset + 1;
 800478a:	76a9      	strb	r1, [r5, #26]
    haudio->lower_treshold = wr_rd_offset - 1;
 800478c:	76eb      	strb	r3, [r5, #27]
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 800478e:	81ec      	strh	r4, [r5, #14]
    if(haudio->buffer != NULL)
 8004790:	b108      	cbz	r0, 8004796 <USBD_AUDIO_Data_Transfer+0x5a>
    {
      USBD_free(haudio->buffer);      
 8004792:	f002 fbf9 	bl	8006f88 <free>
    }
    haudio->buffer = USBD_malloc(haudio->buffer_length + haudio->dataAmount);
 8004796:	89ea      	ldrh	r2, [r5, #14]
 8004798:	8a2b      	ldrh	r3, [r5, #16]
 800479a:	441a      	add	r2, r3
 800479c:	4610      	mov	r0, r2
 800479e:	9201      	str	r2, [sp, #4]
 80047a0:	f002 fbea 	bl	8006f78 <malloc>
 80047a4:	2403      	movs	r4, #3
 80047a6:	6628      	str	r0, [r5, #96]	; 0x60
    if(haudio->buffer == NULL)
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d038      	beq.n	800481e <USBD_AUDIO_Data_Transfer+0xe2>
    {
      return USBD_FAIL;       
    }
    memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 80047ac:	9a01      	ldr	r2, [sp, #4]
 80047ae:	2100      	movs	r1, #0
 80047b0:	f002 fc00 	bl	8006fb4 <memset>
    haudio->state=STATE_USB_BUFFER_WRITE_STARTED;
 80047b4:	752c      	strb	r4, [r5, #20]
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
    if((haudio->wr_ptr-dataAmount) == 0){
      memcpy((uint8_t *)(((uint8_t *)haudio->buffer)+true_dim),(uint8_t *)haudio->buffer, dataAmount);
    }
  }
  return USBD_OK;  
 80047b6:	2000      	movs	r0, #0
}
 80047b8:	b002      	add	sp, #8
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
  }else if(haudio->state==STATE_USB_BUFFER_WRITE_STARTED){
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d1fa      	bne.n	80047b6 <USBD_AUDIO_Data_Transfer+0x7a>
    if(haudio->timeout++==TIMEOUT_VALUE){
 80047c0:	89ab      	ldrh	r3, [r5, #12]
  uint16_t true_dim = haudio->buffer_length;
 80047c2:	89ee      	ldrh	r6, [r5, #14]
    if(haudio->timeout++==TIMEOUT_VALUE){
 80047c4:	b21a      	sxth	r2, r3
 80047c6:	3301      	adds	r3, #1
 80047c8:	b21b      	sxth	r3, r3
 80047ca:	2ac8      	cmp	r2, #200	; 0xc8
 80047cc:	81ab      	strh	r3, [r5, #12]
 80047ce:	d10d      	bne.n	80047ec <USBD_AUDIO_Data_Transfer+0xb0>
      haudio->state=STATE_USB_IDLE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	752b      	strb	r3, [r5, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Stop();   
 80047d4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80047d8:	9101      	str	r1, [sp, #4]
 80047da:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80047de:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	4798      	blx	r3
     haudio->timeout=0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	9901      	ldr	r1, [sp, #4]
 80047ea:	81ab      	strh	r3, [r5, #12]
    memcpy((uint8_t * )&haudio->buffer[haudio->wr_ptr], (uint8_t *)(audioData), dataAmount);    
 80047ec:	8b2b      	ldrh	r3, [r5, #24]
 80047ee:	6e28      	ldr	r0, [r5, #96]	; 0x60
 80047f0:	4622      	mov	r2, r4
 80047f2:	4418      	add	r0, r3
 80047f4:	f002 fbd0 	bl	8006f98 <memcpy>
    haudio->wr_ptr += dataAmount;
 80047f8:	8b2b      	ldrh	r3, [r5, #24]
 80047fa:	4423      	add	r3, r4
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	fbb3 f2f6 	udiv	r2, r3, r6
 8004802:	fb06 3312 	mls	r3, r6, r2, r3
 8004806:	b29b      	uxth	r3, r3
    if((haudio->wr_ptr-dataAmount) == 0){
 8004808:	42a3      	cmp	r3, r4
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
 800480a:	832b      	strh	r3, [r5, #24]
    if((haudio->wr_ptr-dataAmount) == 0){
 800480c:	d1d3      	bne.n	80047b6 <USBD_AUDIO_Data_Transfer+0x7a>
      memcpy((uint8_t *)(((uint8_t *)haudio->buffer)+true_dim),(uint8_t *)haudio->buffer, dataAmount);
 800480e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8004810:	4622      	mov	r2, r4
 8004812:	1988      	adds	r0, r1, r6
 8004814:	f002 fbc0 	bl	8006f98 <memcpy>
 8004818:	e7cd      	b.n	80047b6 <USBD_AUDIO_Data_Transfer+0x7a>
    return USBD_BUSY;    
 800481a:	2001      	movs	r0, #1
 800481c:	e7cc      	b.n	80047b8 <USBD_AUDIO_Data_Transfer+0x7c>
      return USBD_FAIL;       
 800481e:	4620      	mov	r0, r4
 8004820:	e7ca      	b.n	80047b8 <USBD_AUDIO_Data_Transfer+0x7c>
 8004822:	bf00      	nop
 8004824:	20002fe4 	.word	0x20002fe4

08004828 <USBD_AUDIO_RegisterInterface>:
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_AUDIO_ItfTypeDef *fops)
{
  if(fops != NULL)
 8004828:	b109      	cbz	r1, 800482e <USBD_AUDIO_RegisterInterface+0x6>
  {
    pdev->pUserData[0]= fops;
 800482a:	f8c0 12c4 	str.w	r1, [r0, #708]	; 0x2c4
  }
  return 0;}
 800482e:	2000      	movs	r0, #0
 8004830:	4770      	bx	lr
	...

08004834 <USBD_AUDIO_Init_Microphone_Descriptor>:
*/
void USBD_AUDIO_Init_Microphone_Descriptor(USBD_HandleTypeDef   *pdev, uint32_t samplingFrequency, uint8_t Channels)
{
  uint16_t index;
  uint8_t AUDIO_CONTROLS;   
  USBD_AUDIO_CfgDesc[0] = 0x09;                                                /* bLength */
 8004834:	4bcc      	ldr	r3, [pc, #816]	; (8004b68 <USBD_AUDIO_Init_Microphone_Descriptor+0x334>)
 8004836:	f240 2009 	movw	r0, #521	; 0x209
{
 800483a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USBD_AUDIO_CfgDesc[0] = 0x09;                                                /* bLength */
 800483e:	8018      	strh	r0, [r3, #0]
  USBD_AUDIO_CfgDesc[1] = 0x02;                                                /* bDescriptorType */
  USBD_AUDIO_CfgDesc[2] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)&0xff);       /* wTotalLength */
 8004840:	f102 006c 	add.w	r0, r2, #108	; 0x6c
 8004844:	7098      	strb	r0, [r3, #2]
  USBD_AUDIO_CfgDesc[3] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)>>8);
 8004846:	1200      	asrs	r0, r0, #8
  USBD_AUDIO_CfgDesc[4] = 0x02;                                                /* bNumInterfaces */
  USBD_AUDIO_CfgDesc[5] = 0x01;                                                /* bConfigurationValue */
  USBD_AUDIO_CfgDesc[6] = 0x00;                                                /* iConfiguration */
  USBD_AUDIO_CfgDesc[7] = 0x80;                                                /* bmAttributes  BUS Powered*/
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 8004848:	4cc8      	ldr	r4, [pc, #800]	; (8004b6c <USBD_AUDIO_Init_Microphone_Descriptor+0x338>)
  USBD_AUDIO_CfgDesc[3] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)>>8);
 800484a:	70d8      	strb	r0, [r3, #3]
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 800484c:	48c8      	ldr	r0, [pc, #800]	; (8004b70 <USBD_AUDIO_Init_Microphone_Descriptor+0x33c>)
  USBD_AUDIO_CfgDesc[11] = 0x00;                                               /* bInterfaceNumber */
  USBD_AUDIO_CfgDesc[12] = 0x00;                                               /* bAlternateSetting */
  USBD_AUDIO_CfgDesc[13] = 0x00;                                               /* bNumEndpoints */
  USBD_AUDIO_CfgDesc[14] = USB_DEVICE_CLASS_AUDIO;                             /* bInterfaceClass */
  USBD_AUDIO_CfgDesc[15] = AUDIO_SUBCLASS_AUDIOCONTROL;                        /* bInterfaceSubClass */
  USBD_AUDIO_CfgDesc[16] = AUDIO_PROTOCOL_UNDEFINED;                           /* bInterfaceProtocol */
 800484e:	4dc9      	ldr	r5, [pc, #804]	; (8004b74 <USBD_AUDIO_Init_Microphone_Descriptor+0x340>)
  USBD_AUDIO_CfgDesc[29] = AUDIO_CONTROL_INPUT_TERMINAL;                       /* bDescriptorSubtype */
  USBD_AUDIO_CfgDesc[30] = 0x01;                                               /* bTerminalID */
  USBD_AUDIO_CfgDesc[31] = 0x01;                                               /* wTerminalType AUDIO_TERMINAL_USB_MICROPHONE   0x0201 */
  USBD_AUDIO_CfgDesc[32] = 0x02;
  USBD_AUDIO_CfgDesc[33] = 0x00;                                               /* bAssocTerminal */
  USBD_AUDIO_CfgDesc[34] = Channels;                                           /* bNrChannels */   
 8004850:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 8004854:	e9c3 4001 	strd	r4, r0, [r3, #4]
  USBD_AUDIO_CfgDesc[16] = AUDIO_PROTOCOL_UNDEFINED;                           /* bInterfaceProtocol */
 8004858:	48c7      	ldr	r0, [pc, #796]	; (8004b78 <USBD_AUDIO_Init_Microphone_Descriptor+0x344>)
 800485a:	e9c3 5003 	strd	r5, r0, [r3, #12]
  USBD_AUDIO_CfgDesc[20] = AUDIO_CONTROL_HEADER;                               /* bDescriptorSubtype */
 800485e:	2001      	movs	r0, #1
 8004860:	8298      	strh	r0, [r3, #20]
  USBD_AUDIO_CfgDesc[22] = 0x01;
 8004862:	7598      	strb	r0, [r3, #22]
  USBD_AUDIO_CfgDesc[23] = 0x25+Channels;                                      /* wTotalLength = 37+AUDIO_CHANNELS*/
 8004864:	f102 0025 	add.w	r0, r2, #37	; 0x25
 8004868:	75d8      	strb	r0, [r3, #23]
  USBD_AUDIO_CfgDesc[24] = 0x00;
 800486a:	48c4      	ldr	r0, [pc, #784]	; (8004b7c <USBD_AUDIO_Init_Microphone_Descriptor+0x348>)
 800486c:	6198      	str	r0, [r3, #24]
  USBD_AUDIO_CfgDesc[28] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 800486e:	f100 4075 	add.w	r0, r0, #4110417920	; 0xf5000000
 8004872:	f500 7092 	add.w	r0, r0, #292	; 0x124
 8004876:	61d8      	str	r0, [r3, #28]
  USBD_AUDIO_CfgDesc[32] = 0x02;
 8004878:	2002      	movs	r0, #2
  if(Channels != 2)
 800487a:	4282      	cmp	r2, r0
    USBD_AUDIO_CfgDesc[35] = 0x00;                                             /* wChannelConfig 0x0000  Mono */
    USBD_AUDIO_CfgDesc[36] = 0x00;
  }
  else
  {
    USBD_AUDIO_CfgDesc[35] = 0x03;                                             /* wChannelConfig 0x0003  Stereo */
 800487c:	bf04      	itt	eq
 800487e:	2403      	moveq	r4, #3
 8004880:	f883 4023 	strbeq.w	r4, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
  }   
  USBD_AUDIO_CfgDesc[37] = 0x00;                                               /* iChannelNames */
  USBD_AUDIO_CfgDesc[38] = 0x00;                                               /* iTerminal */   
  /* USB Microphone Audio Feature Unit Descriptor */
  USBD_AUDIO_CfgDesc[39] = 0x07+Channels+1;                                    /* bLength */
 8004884:	f102 0408 	add.w	r4, r2, #8
 8004888:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
  USBD_AUDIO_CfgDesc[40] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 800488c:	4cbc      	ldr	r4, [pc, #752]	; (8004b80 <USBD_AUDIO_Init_Microphone_Descriptor+0x34c>)
  USBD_AUDIO_CfgDesc[32] = 0x02;
 800488e:	8418      	strh	r0, [r3, #32]
  USBD_AUDIO_CfgDesc[40] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 8004890:	629c      	str	r4, [r3, #40]	; 0x28
 8004892:	f04f 0000 	mov.w	r0, #0
  USBD_AUDIO_CfgDesc[41] = AUDIO_CONTROL_FEATURE_UNIT;                         /* bDescriptorSubtype */
  USBD_AUDIO_CfgDesc[42] = 0x02;                                               /* bUnitID */
  USBD_AUDIO_CfgDesc[43] = 0x01;                                               /* bSourceID */
  USBD_AUDIO_CfgDesc[44] = 0x01;                                               /* bControlSize */   
 8004896:	f04f 0401 	mov.w	r4, #1
    USBD_AUDIO_CfgDesc[35] = 0x00;                                             /* wChannelConfig 0x0000  Mono */
 800489a:	bf18      	it	ne
 800489c:	f883 0023 	strbne.w	r0, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 80048a0:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  index = 47;   
  if(Channels == 1)
 80048a4:	42a2      	cmp	r2, r4
  USBD_AUDIO_CfgDesc[37] = 0x00;                                               /* iChannelNames */
 80048a6:	f04f 0000 	mov.w	r0, #0
 80048aa:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
  USBD_AUDIO_CfgDesc[38] = 0x00;                                               /* iTerminal */   
 80048ae:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
  USBD_AUDIO_CfgDesc[44] = 0x01;                                               /* bControlSize */   
 80048b2:	f883 402c 	strb.w	r4, [r3, #44]	; 0x2c
  if(Channels == 1)
 80048b6:	f040 812a 	bne.w	8004b0e <USBD_AUDIO_Init_Microphone_Descriptor+0x2da>
  {
    AUDIO_CONTROLS = (0x02);     
    USBD_AUDIO_CfgDesc[45] = AUDIO_CONTROLS;
 80048ba:	2402      	movs	r4, #2
    USBD_AUDIO_CfgDesc[46] = 0x00;     
 80048bc:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
    USBD_AUDIO_CfgDesc[45] = AUDIO_CONTROLS;
 80048c0:	f883 402d 	strb.w	r4, [r3, #45]	; 0x2d
  index = 47;   
 80048c4:	202f      	movs	r0, #47	; 0x2f
    index++;
  }   
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
  index++;   
  /*USB Microphone Output Terminal Descriptor */
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 80048c6:	1c46      	adds	r6, r0, #1
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
 80048c8:	2400      	movs	r4, #0
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 80048ca:	2509      	movs	r5, #9
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
 80048cc:	541c      	strb	r4, [r3, r0]
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 80048ce:	559d      	strb	r5, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 80048d0:	1c86      	adds	r6, r0, #2
 80048d2:	f04f 0824 	mov.w	r8, #36	; 0x24
 80048d6:	f803 8006 	strb.w	r8, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_CONTROL_OUTPUT_TERMINAL;                 /* bDescriptorSubtype */
 80048da:	1cc6      	adds	r6, r0, #3
 80048dc:	2703      	movs	r7, #3
 80048de:	559f      	strb	r7, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalID */
 80048e0:	1d06      	adds	r6, r0, #4
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wTerminalType AUDIO_TERMINAL_USB_STREAMING 0x0101*/
 80048e2:	f100 0c05 	add.w	ip, r0, #5
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalID */
 80048e6:	559f      	strb	r7, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wTerminalType AUDIO_TERMINAL_USB_STREAMING 0x0101*/
 80048e8:	2601      	movs	r6, #1
 80048ea:	f803 600c 	strb.w	r6, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 0x01;
 80048ee:	f100 0c06 	add.w	ip, r0, #6
  USBD_AUDIO_CfgDesc[index++] = 0x00;
  USBD_AUDIO_CfgDesc[index++] = 0x02;
 80048f2:	f04f 0e02 	mov.w	lr, #2
  USBD_AUDIO_CfgDesc[index++] = 0x01;
 80048f6:	f803 600c 	strb.w	r6, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 0x00;
 80048fa:	f100 0c07 	add.w	ip, r0, #7
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Zero Bandwith */
  /* Interface 1, Alternate Setting 0                                             */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 80048fe:	f100 090b 	add.w	r9, r0, #11
  USBD_AUDIO_CfgDesc[index++] = 0x00;
 8004902:	f803 400c 	strb.w	r4, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 0x02;
 8004906:	f100 0c08 	add.w	ip, r0, #8
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalLink */
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bDelay */
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
  USBD_AUDIO_CfgDesc[index++] = 0x00;                
  /* USB Microphone Audio Type I Format Interface Descriptor */                
  USBD_AUDIO_CfgDesc[index++] = 0x0B;                                          /* bLength */
 800490a:	f04f 0a0b 	mov.w	sl, #11
  USBD_AUDIO_CfgDesc[index++] = 0x02;
 800490e:	f803 e00c 	strb.w	lr, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 8004912:	eb00 0c05 	add.w	ip, r0, r5
 8004916:	f803 400c 	strb.w	r4, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 800491a:	f100 0c0a 	add.w	ip, r0, #10
 800491e:	f803 500c 	strb.w	r5, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 8004922:	f04f 0c04 	mov.w	ip, #4
 8004926:	f803 c009 	strb.w	ip, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 800492a:	f100 090c 	add.w	r9, r0, #12
 800492e:	f803 6009 	strb.w	r6, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bAlternateSetting */
 8004932:	f100 090d 	add.w	r9, r0, #13
 8004936:	f803 4009 	strb.w	r4, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bNumEndpoints */
 800493a:	f100 090e 	add.w	r9, r0, #14
 800493e:	f803 4009 	strb.w	r4, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 8004942:	f100 090f 	add.w	r9, r0, #15
 8004946:	f803 6009 	strb.w	r6, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 800494a:	f100 0910 	add.w	r9, r0, #16
 800494e:	f803 e009 	strb.w	lr, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 8004952:	f100 0911 	add.w	r9, r0, #17
 8004956:	f803 4009 	strb.w	r4, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 800495a:	f100 0912 	add.w	r9, r0, #18
 800495e:	f803 4009 	strb.w	r4, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 8004962:	f100 0913 	add.w	r9, r0, #19
 8004966:	f803 5009 	strb.w	r5, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 800496a:	f100 0914 	add.w	r9, r0, #20
 800496e:	f803 c009 	strb.w	ip, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 8004972:	f100 0c15 	add.w	ip, r0, #21
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_INTERFACE_DESC_SIZE;           /* bLength */
 8004976:	f100 091c 	add.w	r9, r0, #28
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 800497a:	f803 600c 	strb.w	r6, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bAlternateSetting */
 800497e:	f100 0c16 	add.w	ip, r0, #22
 8004982:	f803 600c 	strb.w	r6, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bNumEndpoints */
 8004986:	f100 0c17 	add.w	ip, r0, #23
 800498a:	f803 600c 	strb.w	r6, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 800498e:	f100 0c18 	add.w	ip, r0, #24
 8004992:	f803 600c 	strb.w	r6, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 8004996:	f100 0c19 	add.w	ip, r0, #25
 800499a:	f803 e00c 	strb.w	lr, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 800499e:	f100 0c1a 	add.w	ip, r0, #26
 80049a2:	f803 400c 	strb.w	r4, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* iInterface */   
 80049a6:	f100 0c1b 	add.w	ip, r0, #27
 80049aa:	f803 400c 	strb.w	r4, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_INTERFACE_DESC_SIZE;           /* bLength */
 80049ae:	f04f 0c07 	mov.w	ip, #7
 80049b2:	f803 c009 	strb.w	ip, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 80049b6:	f100 091d 	add.w	r9, r0, #29
 80049ba:	f803 8009 	strb.w	r8, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_GENERAL;                       /* bDescriptorSubtype */
 80049be:	f100 091e 	add.w	r9, r0, #30
 80049c2:	f803 6009 	strb.w	r6, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalLink */
 80049c6:	f100 091f 	add.w	r9, r0, #31
 80049ca:	f803 7009 	strb.w	r7, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bDelay */
 80049ce:	f100 0920 	add.w	r9, r0, #32
 80049d2:	f803 6009 	strb.w	r6, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
 80049d6:	f100 0921 	add.w	r9, r0, #33	; 0x21
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bLockDelayUnits */
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
    
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*3);
  haudioInstance.frequency=samplingFrequency;
 80049da:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
 80049de:	f803 6009 	strb.w	r6, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                
 80049e2:	f100 0922 	add.w	r9, r0, #34	; 0x22
 80049e6:	f803 4009 	strb.w	r4, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x0B;                                          /* bLength */
 80049ea:	f100 0923 	add.w	r9, r0, #35	; 0x23
 80049ee:	f803 a009 	strb.w	sl, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 80049f2:	eb00 0908 	add.w	r9, r0, r8
 80049f6:	f803 8009 	strb.w	r8, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_FORMAT_TYPE;                   /* bDescriptorSubtype */
 80049fa:	f100 0825 	add.w	r8, r0, #37	; 0x25
 80049fe:	f803 e008 	strb.w	lr, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_FORMAT_TYPE_I;                           /* bFormatType */
 8004a02:	f100 0e26 	add.w	lr, r0, #38	; 0x26
 8004a06:	f803 600e 	strb.w	r6, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = Channels;                                      /* bNrChannels */
 8004a0a:	f100 0e27 	add.w	lr, r0, #39	; 0x27
 8004a0e:	f803 200e 	strb.w	r2, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bSubFrameSize */
 8004a12:	f100 0e28 	add.w	lr, r0, #40	; 0x28
 8004a16:	f803 700e 	strb.w	r7, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 24;                                            /* bBitResolution */
 8004a1a:	f100 0729 	add.w	r7, r0, #41	; 0x29
 8004a1e:	f04f 0e18 	mov.w	lr, #24
 8004a22:	f803 e007 	strb.w	lr, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                           /* bSamFreqType */
 8004a26:	f100 072a 	add.w	r7, r0, #42	; 0x2a
  USBD_AUDIO_CfgDesc[index++] = (samplingFrequency>>8)&0xff;
 8004a2a:	ea4f 2e11 	mov.w	lr, r1, lsr #8
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                           /* bSamFreqType */
 8004a2e:	55de      	strb	r6, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency&0xff;                        /* tSamFreq 8000 = 0x1F40 */
 8004a30:	f100 072b 	add.w	r7, r0, #43	; 0x2b
 8004a34:	55d9      	strb	r1, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = (samplingFrequency>>8)&0xff;
 8004a36:	f100 072c 	add.w	r7, r0, #44	; 0x2c
 8004a3a:	f803 e007 	strb.w	lr, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency>>16;   
 8004a3e:	f100 072d 	add.w	r7, r0, #45	; 0x2d
 8004a42:	ea4f 4e11 	mov.w	lr, r1, lsr #16
 8004a46:	f803 e007 	strb.w	lr, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] =  AUDIO_STANDARD_ENDPOINT_DESC_SIZE;            /* bLength */
 8004a4a:	f100 072e 	add.w	r7, r0, #46	; 0x2e
  USBD_AUDIO_CfgDesc[index++] = AUDIO_IN_EP;                                   /* bEndpointAddress 1 in endpoint*/
 8004a4e:	f04f 0e81 	mov.w	lr, #129	; 0x81
  USBD_AUDIO_CfgDesc[index++] =  AUDIO_STANDARD_ENDPOINT_DESC_SIZE;            /* bLength */
 8004a52:	55dd      	strb	r5, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bDescriptorType */
 8004a54:	f100 072f 	add.w	r7, r0, #47	; 0x2f
 8004a58:	2505      	movs	r5, #5
 8004a5a:	55dd      	strb	r5, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_IN_EP;                                   /* bEndpointAddress 1 in endpoint*/
 8004a5c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8004a60:	f803 e007 	strb.w	lr, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bmAttributes */
 8004a64:	f100 0731 	add.w	r7, r0, #49	; 0x31
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*3)&0xFF;  /* wMaxPacketSize */ 
 8004a68:	f100 0e32 	add.w	lr, r0, #50	; 0x32
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bmAttributes */
 8004a6c:	55dd      	strb	r5, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*3)&0xFF;  /* wMaxPacketSize */ 
 8004a6e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004a72:	fbb1 f5f5 	udiv	r5, r1, r5
 8004a76:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8004a7a:	3706      	adds	r7, #6
 8004a7c:	fb17 f802 	smulbb	r8, r7, r2
 8004a80:	f803 800e 	strb.w	r8, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*3)>>8; 
 8004a84:	4357      	muls	r7, r2
 8004a86:	f100 0e33 	add.w	lr, r0, #51	; 0x33
 8004a8a:	0a3f      	lsrs	r7, r7, #8
 8004a8c:	f803 700e 	strb.w	r7, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterval */
 8004a90:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8004a94:	55de      	strb	r6, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bRefresh */
 8004a96:	f100 0735 	add.w	r7, r0, #53	; 0x35
 8004a9a:	55dc      	strb	r4, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bSynchAddress */   
 8004a9c:	f100 0736 	add.w	r7, r0, #54	; 0x36
 8004aa0:	55dc      	strb	r4, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_ENDPOINT_DESC_SIZE;            /* bLength */
 8004aa2:	f100 0737 	add.w	r7, r0, #55	; 0x37
 8004aa6:	f803 c007 	strb.w	ip, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_DESCRIPTOR_TYPE;                /* bDescriptorType */
 8004aaa:	f100 0738 	add.w	r7, r0, #56	; 0x38
 8004aae:	f04f 0c25 	mov.w	ip, #37	; 0x25
 8004ab2:	f803 c007 	strb.w	ip, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_GENERAL;                        /* bDescriptor */
 8004ab6:	f100 0739 	add.w	r7, r0, #57	; 0x39
 8004aba:	55de      	strb	r6, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bmAttributes */
 8004abc:	f100 063a 	add.w	r6, r0, #58	; 0x3a
 8004ac0:	559c      	strb	r4, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bLockDelayUnits */
 8004ac2:	f100 063b 	add.w	r6, r0, #59	; 0x3b
 8004ac6:	559c      	strb	r4, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
 8004ac8:	f100 063c 	add.w	r6, r0, #60	; 0x3c
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
 8004acc:	303d      	adds	r0, #61	; 0x3d
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
 8004ace:	559c      	strb	r4, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
 8004ad0:	541c      	strb	r4, [r3, r0]
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*3);
 8004ad2:	fb15 f002 	smulbb	r0, r5, r2
 8004ad6:	b280      	uxth	r0, r0
 8004ad8:	eb00 0540 	add.w	r5, r0, r0, lsl #1
  haudioInstance.buffer_length = haudioInstance.paketDimension * AUDIO_IN_PACKET_NUM;
 8004adc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8004ae0:	0041      	lsls	r1, r0, #1
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*3);
 8004ae2:	f8a3 520a 	strh.w	r5, [r3, #522]	; 0x20a
  haudioInstance.buffer_length = haudioInstance.paketDimension * AUDIO_IN_PACKET_NUM;
 8004ae6:	f8a3 1206 	strh.w	r1, [r3, #518]	; 0x206
  haudioInstance.channels=Channels;  
 8004aea:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  haudioInstance.upper_treshold = 5;
 8004aee:	f240 2205 	movw	r2, #517	; 0x205
 8004af2:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
  haudioInstance.lower_treshold = 2;
  haudioInstance.state = STATE_USB_WAITING_FOR_INIT;
 8004af6:	f883 420c 	strb.w	r4, [r3, #524]	; 0x20c
  haudioInstance.wr_ptr = 3 * haudioInstance.paketDimension;
 8004afa:	f8a3 0210 	strh.w	r0, [r3, #528]	; 0x210
  haudioInstance.rd_ptr = 0;  
 8004afe:	f8a3 420e 	strh.w	r4, [r3, #526]	; 0x20e
  haudioInstance.dataAmount=0;
 8004b02:	f8a3 4208 	strh.w	r4, [r3, #520]	; 0x208
  haudioInstance.buffer = 0;
 8004b06:	f8c3 4258 	str.w	r4, [r3, #600]	; 0x258
}
 8004b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    USBD_AUDIO_CfgDesc[45] = 0x00;
 8004b0e:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
  if(Channels > 2)
 8004b12:	2a02      	cmp	r2, #2
    USBD_AUDIO_CfgDesc[46] = AUDIO_CONTROLS;
 8004b14:	f240 2002 	movw	r0, #514	; 0x202
 8004b18:	85d8      	strh	r0, [r3, #46]	; 0x2e
  if(Channels > 2)
 8004b1a:	d918      	bls.n	8004b4e <USBD_AUDIO_Init_Microphone_Descriptor+0x31a>
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b1c:	2002      	movs	r0, #2
  if(Channels > 3)
 8004b1e:	2a03      	cmp	r2, #3
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b20:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
  if(Channels > 3)
 8004b24:	d015      	beq.n	8004b52 <USBD_AUDIO_Init_Microphone_Descriptor+0x31e>
  if(Channels > 4)
 8004b26:	2a04      	cmp	r2, #4
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b28:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
  if(Channels > 4)
 8004b2c:	d013      	beq.n	8004b56 <USBD_AUDIO_Init_Microphone_Descriptor+0x322>
  if(Channels > 5)
 8004b2e:	2a05      	cmp	r2, #5
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b30:	f883 0032 	strb.w	r0, [r3, #50]	; 0x32
  if(Channels > 5)
 8004b34:	d011      	beq.n	8004b5a <USBD_AUDIO_Init_Microphone_Descriptor+0x326>
  if(Channels > 6)
 8004b36:	2a06      	cmp	r2, #6
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b38:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33
  if(Channels > 6)
 8004b3c:	d00f      	beq.n	8004b5e <USBD_AUDIO_Init_Microphone_Descriptor+0x32a>
  if(Channels > 7)
 8004b3e:	2a07      	cmp	r2, #7
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b40:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
  if(Channels > 7)
 8004b44:	d00d      	beq.n	8004b62 <USBD_AUDIO_Init_Microphone_Descriptor+0x32e>
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b46:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
    index++;
 8004b4a:	2036      	movs	r0, #54	; 0x36
 8004b4c:	e6bb      	b.n	80048c6 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8004b4e:	2030      	movs	r0, #48	; 0x30
 8004b50:	e6b9      	b.n	80048c6 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8004b52:	2031      	movs	r0, #49	; 0x31
 8004b54:	e6b7      	b.n	80048c6 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8004b56:	2032      	movs	r0, #50	; 0x32
 8004b58:	e6b5      	b.n	80048c6 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8004b5a:	2033      	movs	r0, #51	; 0x33
 8004b5c:	e6b3      	b.n	80048c6 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8004b5e:	2034      	movs	r0, #52	; 0x34
 8004b60:	e6b1      	b.n	80048c6 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8004b62:	2035      	movs	r0, #53	; 0x35
 8004b64:	e6af      	b.n	80048c6 <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
 8004b66:	bf00      	nop
 8004b68:	20002fe4 	.word	0x20002fe4
 8004b6c:	80000102 	.word	0x80000102
 8004b70:	00040932 	.word	0x00040932
 8004b74:	01010000 	.word	0x01010000
 8004b78:	24090000 	.word	0x24090000
 8004b7c:	0c010100 	.word	0x0c010100
 8004b80:	01020624 	.word	0x01020624

08004b84 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004b84:	b178      	cbz	r0, 8004ba6 <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004b8c:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004b90:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004b94:	b109      	cbz	r1, 8004b9a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004b96:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8004ba0:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004ba2:	f7fb bd23 	b.w	80005ec <USBD_LL_Init>

  return ret;
}
 8004ba6:	2003      	movs	r0, #3
 8004ba8:	4770      	bx	lr

08004baa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004baa:	b513      	push	{r0, r1, r4, lr}
  uint16_t len = 0U;
 8004bac:	2300      	movs	r3, #0
{
 8004bae:	4604      	mov	r4, r0
  uint16_t len = 0U;
 8004bb0:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8004bb4:	b181      	cbz	r1, 8004bd8 <USBD_RegisterClass+0x2e>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004bb6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass[0] = pclass;
 8004bb8:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004bbc:	b123      	cbz	r3, 8004bc8 <USBD_RegisterClass+0x1e>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004bbe:	f10d 0006 	add.w	r0, sp, #6
 8004bc2:	4798      	blx	r3
 8004bc4:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004bc8:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
 8004bcc:	3301      	adds	r3, #1
 8004bce:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 8004bd2:	2000      	movs	r0, #0
}
 8004bd4:	b002      	add	sp, #8
 8004bd6:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004bd8:	2003      	movs	r0, #3
 8004bda:	e7fb      	b.n	8004bd4 <USBD_RegisterClass+0x2a>

08004bdc <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004bdc:	f7fb bd38 	b.w	8000650 <USBD_LL_Start>

08004be0 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004be0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004be4:	b10b      	cbz	r3, 8004bea <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	4770      	bx	lr

08004bee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bee:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004bf0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8004bf8:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8004bfa:	bf18      	it	ne
 8004bfc:	2003      	movne	r0, #3
 8004bfe:	bd08      	pop	{r3, pc}

08004c00 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004c04:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f000 fb3c 	bl	8005286 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004c0e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004c10:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8004c14:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004c18:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8004c1c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004c20:	f001 031f 	and.w	r3, r1, #31
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d008      	beq.n	8004c3a <USBD_LL_SetupStage+0x3a>
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d00c      	beq.n	8004c46 <USBD_LL_SetupStage+0x46>
 8004c2c:	b98b      	cbnz	r3, 8004c52 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c2e:	4629      	mov	r1, r5
 8004c30:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8004c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c36:	f000 b903 	b.w	8004e40 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4620      	mov	r0, r4
}
 8004c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c42:	f000 ba53 	b.w	80050ec <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c46:	4629      	mov	r1, r5
 8004c48:	4620      	mov	r0, r4
}
 8004c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c4e:	f000 ba7c 	b.w	800514a <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c52:	4620      	mov	r0, r4
 8004c54:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 8004c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c5c:	f7fb bd17 	b.w	800068e <USBD_LL_StallEP>

08004c60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	4604      	mov	r4, r0
 8004c64:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8004c66:	bb09      	cbnz	r1, 8004cac <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c68:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d10c      	bne.n	8004c8a <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c70:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d90a      	bls.n	8004c8e <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 8004c78:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c7a:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8004c7c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c80:	bf28      	it	cs
 8004c82:	461a      	movcs	r2, r3
 8004c84:	4631      	mov	r1, r6
 8004c86:	f000 fb52 	bl	800532e <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c8e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d106      	bne.n	8004ca4 <USBD_LL_DataOutStage+0x44>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004c96:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	b113      	cbz	r3, 8004ca4 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 8004c9e:	f8c0 12d4 	str.w	r1, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004ca2:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f000 fb4a 	bl	800533e <USBD_CtlSendStatus>
 8004caa:	e7ee      	b.n	8004c8a <USBD_LL_DataOutStage+0x2a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d1ea      	bne.n	8004c8a <USBD_LL_DataOutStage+0x2a>
        if (pdev->pClass[idx]->DataOut != NULL)
 8004cb4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0e5      	beq.n	8004c8a <USBD_LL_DataOutStage+0x2a>
          pdev->classId = idx;
 8004cbe:	2200      	movs	r2, #0
}
 8004cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8004cc4:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004cc8:	4718      	bx	r3

08004cca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004cca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ccc:	4604      	mov	r4, r0
 8004cce:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	d141      	bne.n	8004d58 <USBD_LL_DataInStage+0x8e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004cd4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004cd8:	2a02      	cmp	r2, #2
 8004cda:	d10f      	bne.n	8004cfc <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 8004cdc:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 8004ce0:	4295      	cmp	r5, r2
 8004ce2:	d914      	bls.n	8004d0e <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8004ce4:	1aaa      	subs	r2, r5, r2
 8004ce6:	9101      	str	r1, [sp, #4]
 8004ce8:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004cea:	4631      	mov	r1, r6
 8004cec:	f000 fb0a 	bl	8005304 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cf0:	9b01      	ldr	r3, [sp, #4]
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f7fb fcf8 	bl	80006ec <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8004cfc:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004d00:	b113      	cbz	r3, 8004d08 <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8004d08:	2000      	movs	r0, #0
 8004d0a:	b002      	add	sp, #8
 8004d0c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8004d0e:	d10e      	bne.n	8004d2e <USBD_LL_DataInStage+0x64>
            (pep->total_length >= pep->maxpacket) &&
 8004d10:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8004d12:	4295      	cmp	r5, r2
 8004d14:	d80b      	bhi.n	8004d2e <USBD_LL_DataInStage+0x64>
            (pep->total_length >= pep->maxpacket) &&
 8004d16:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8004d1a:	42aa      	cmp	r2, r5
 8004d1c:	d207      	bcs.n	8004d2e <USBD_LL_DataInStage+0x64>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004d1e:	460a      	mov	r2, r1
 8004d20:	9101      	str	r1, [sp, #4]
 8004d22:	f000 faef 	bl	8005304 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004d26:	9b01      	ldr	r3, [sp, #4]
 8004d28:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8004d2c:	e7e1      	b.n	8004cf2 <USBD_LL_DataInStage+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d2e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d108      	bne.n	8004d48 <USBD_LL_DataInStage+0x7e>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004d36:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	b123      	cbz	r3, 8004d48 <USBD_LL_DataInStage+0x7e>
              pdev->classId = 0U;
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004d44:	4620      	mov	r0, r4
 8004d46:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d48:	2180      	movs	r1, #128	; 0x80
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f7fb fc9f 	bl	800068e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004d50:	4620      	mov	r0, r4
 8004d52:	f000 faff 	bl	8005354 <USBD_CtlReceiveStatus>
 8004d56:	e7d1      	b.n	8004cfc <USBD_LL_DataInStage+0x32>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d58:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d1d3      	bne.n	8004d08 <USBD_LL_DataInStage+0x3e>
        if (pdev->pClass[idx]->DataIn != NULL)
 8004d60:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0ce      	beq.n	8004d08 <USBD_LL_DataInStage+0x3e>
          pdev->classId = idx;
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
}
 8004d70:	b002      	add	sp, #8
 8004d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004d76:	4718      	bx	r3

08004d78 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004d80:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d84:	2100      	movs	r1, #0
{
 8004d86:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d88:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8004d8c:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8004d8e:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8004d92:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 8004d96:	b9b3      	cbnz	r3, 8004dc6 <USBD_LL_Reset+0x4e>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d98:	2600      	movs	r6, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d9a:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d9c:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d9e:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004da0:	2701      	movs	r7, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004da2:	2340      	movs	r3, #64	; 0x40
 8004da4:	4620      	mov	r0, r4
 8004da6:	f7fb fc5a 	bl	800065e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004daa:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dae:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004db2:	462b      	mov	r3, r5
 8004db4:	2200      	movs	r2, #0
 8004db6:	2180      	movs	r1, #128	; 0x80
 8004db8:	4620      	mov	r0, r4
 8004dba:	f7fb fc50 	bl	800065e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004dbe:	84a7      	strh	r7, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dc0:	6225      	str	r5, [r4, #32]

  return ret;
}
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pdev->pClass[0]->DeInit != NULL)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0e5      	beq.n	8004d98 <USBD_LL_Reset+0x20>
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004dcc:	4798      	blx	r3
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	d0e2      	beq.n	8004d98 <USBD_LL_Reset+0x20>
        ret = USBD_FAIL;
 8004dd2:	2603      	movs	r6, #3
 8004dd4:	e7e1      	b.n	8004d9a <USBD_LL_Reset+0x22>

08004dd6 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004dd6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004dd8:	2000      	movs	r0, #0
 8004dda:	4770      	bx	lr

08004ddc <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8004ddc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004de6:	2304      	movs	r3, #4
 8004de8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004dec:	2000      	movs	r0, #0
 8004dee:	4770      	bx	lr

08004df0 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004df0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004df4:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004df6:	bf02      	ittt	eq
 8004df8:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004dfc:	b2db      	uxtbeq	r3, r3
 8004dfe:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004e02:	2000      	movs	r0, #0
 8004e04:	4770      	bx	lr

08004e06 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004e06:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e08:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004e0c:	2a03      	cmp	r2, #3
 8004e0e:	d105      	bne.n	8004e1c <USBD_LL_SOF+0x16>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004e10:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004e14:	b113      	cbz	r3, 8004e1c <USBD_LL_SOF+0x16>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	b103      	cbz	r3, 8004e1c <USBD_LL_SOF+0x16>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004e1a:	4798      	blx	r3
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	bd08      	pop	{r3, pc}

08004e20 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8004e20:	2000      	movs	r0, #0
 8004e22:	4770      	bx	lr

08004e24 <USBD_CoreFindEP>:
 8004e24:	2000      	movs	r0, #0
 8004e26:	4770      	bx	lr

08004e28 <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8004e28:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e2a:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8004e2c:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e2e:	f7fb fc2e 	bl	800068e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004e32:	4620      	mov	r0, r4
 8004e34:	2100      	movs	r1, #0
}
 8004e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8004e3a:	f7fb bc28 	b.w	800068e <USBD_LL_StallEP>
	...

08004e40 <USBD_StdDevReq>:
{
 8004e40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004e44:	780d      	ldrb	r5, [r1, #0]
 8004e46:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e4a:	2d20      	cmp	r5, #32
{
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e50:	d014      	beq.n	8004e7c <USBD_StdDevReq+0x3c>
 8004e52:	2d40      	cmp	r5, #64	; 0x40
 8004e54:	d012      	beq.n	8004e7c <USBD_StdDevReq+0x3c>
 8004e56:	2d00      	cmp	r5, #0
 8004e58:	f040 810a 	bne.w	8005070 <USBD_StdDevReq+0x230>
      switch (req->bRequest)
 8004e5c:	784f      	ldrb	r7, [r1, #1]
 8004e5e:	2f09      	cmp	r7, #9
 8004e60:	f200 8106 	bhi.w	8005070 <USBD_StdDevReq+0x230>
 8004e64:	e8df f017 	tbh	[pc, r7, lsl #1]
 8004e68:	0134010b 	.word	0x0134010b
 8004e6c:	01230104 	.word	0x01230104
 8004e70:	00860104 	.word	0x00860104
 8004e74:	01040016 	.word	0x01040016
 8004e78:	00a200f3 	.word	0x00a200f3
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004e7c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8004e80:	33ae      	adds	r3, #174	; 0xae
 8004e82:	4631      	mov	r1, r6
 8004e84:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4620      	mov	r0, r4
}
 8004e8c:	b002      	add	sp, #8
 8004e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004e92:	4718      	bx	r3
  uint16_t len = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004e9a:	884b      	ldrh	r3, [r1, #2]
 8004e9c:	0a1a      	lsrs	r2, r3, #8
 8004e9e:	3a01      	subs	r2, #1
 8004ea0:	2a06      	cmp	r2, #6
 8004ea2:	d837      	bhi.n	8004f14 <USBD_StdDevReq+0xd4>
 8004ea4:	e8df f002 	tbb	[pc, r2]
 8004ea8:	36291c04 	.word	0x36291c04
 8004eac:	5136      	.short	0x5136
 8004eae:	5b          	.byte	0x5b
 8004eaf:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004eb0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004eb4:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004eb6:	7c20      	ldrb	r0, [r4, #16]
 8004eb8:	f10d 0106 	add.w	r1, sp, #6
 8004ebc:	4798      	blx	r3
  if (req->wLength != 0U)
 8004ebe:	88f2      	ldrh	r2, [r6, #6]
 8004ec0:	2a00      	cmp	r2, #0
 8004ec2:	f000 8101 	beq.w	80050c8 <USBD_StdDevReq+0x288>
    if (len != 0U)
 8004ec6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004eca:	b31b      	cbz	r3, 8004f14 <USBD_StdDevReq+0xd4>
      len = MIN(len, req->wLength);
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	bf28      	it	cs
 8004ed0:	461a      	movcs	r2, r3
 8004ed2:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004ed6:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 fa06 	bl	80052ea <USBD_CtlSendData>
        break;
 8004ede:	e01c      	b.n	8004f1a <USBD_StdDevReq+0xda>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ee0:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8004ee2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ee6:	b932      	cbnz	r2, 8004ef6 <USBD_StdDevReq+0xb6>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8004eea:	f10d 0006 	add.w	r0, sp, #6
 8004eee:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ef0:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004ef2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004ef4:	e7e3      	b.n	8004ebe <USBD_StdDevReq+0x7e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	e7f7      	b.n	8004eea <USBD_StdDevReq+0xaa>
      switch ((uint8_t)(req->wValue))
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b05      	cmp	r3, #5
 8004efe:	d809      	bhi.n	8004f14 <USBD_StdDevReq+0xd4>
 8004f00:	e8df f003 	tbb	[pc, r3]
 8004f04:	17130f03 	.word	0x17130f03
 8004f08:	1f1b      	.short	0x1f1b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004f0a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f0e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1d0      	bne.n	8004eb6 <USBD_StdDevReq+0x76>
      USBD_CtlError(pdev, req);
 8004f14:	4620      	mov	r0, r4
 8004f16:	f7ff ff87 	bl	8004e28 <USBD_CtlError.constprop.0>
}
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	b002      	add	sp, #8
 8004f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004f22:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	e7f2      	b.n	8004f10 <USBD_StdDevReq+0xd0>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004f2a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	e7ee      	b.n	8004f10 <USBD_StdDevReq+0xd0>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004f32:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	e7ea      	b.n	8004f10 <USBD_StdDevReq+0xd0>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004f3a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	e7e6      	b.n	8004f10 <USBD_StdDevReq+0xd0>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004f42:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	e7e2      	b.n	8004f10 <USBD_StdDevReq+0xd0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f4a:	7c03      	ldrb	r3, [r0, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e1      	bne.n	8004f14 <USBD_StdDevReq+0xd4>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8004f50:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004f54:	f10d 0006 	add.w	r0, sp, #6
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5a:	4798      	blx	r3
  if (err != 0U)
 8004f5c:	e7af      	b.n	8004ebe <USBD_StdDevReq+0x7e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f5e:	7c03      	ldrb	r3, [r0, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1d7      	bne.n	8004f14 <USBD_StdDevReq+0xd4>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8004f64:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004f68:	f10d 0006 	add.w	r0, sp, #6
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004f70:	2307      	movs	r3, #7
 8004f72:	e7be      	b.n	8004ef2 <USBD_StdDevReq+0xb2>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004f74:	888b      	ldrh	r3, [r1, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1cc      	bne.n	8004f14 <USBD_StdDevReq+0xd4>
 8004f7a:	88cb      	ldrh	r3, [r1, #6]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1c9      	bne.n	8004f14 <USBD_StdDevReq+0xd4>
 8004f80:	884e      	ldrh	r6, [r1, #2]
 8004f82:	2e7f      	cmp	r6, #127	; 0x7f
 8004f84:	d8c6      	bhi.n	8004f14 <USBD_StdDevReq+0xd4>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d0c2      	beq.n	8004f14 <USBD_StdDevReq+0xd4>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004f8e:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8004f90:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004f94:	f7fb fb9c 	bl	80006d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f000 f9d0 	bl	800533e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004f9e:	b11e      	cbz	r6, 8004fa8 <USBD_StdDevReq+0x168>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004fa0:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004fa2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004fa6:	e7b8      	b.n	8004f1a <USBD_StdDevReq+0xda>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e7fa      	b.n	8004fa2 <USBD_StdDevReq+0x162>
  cfgidx = (uint8_t)(req->wValue);
 8004fac:	788e      	ldrb	r6, [r1, #2]
 8004fae:	4f4e      	ldr	r7, [pc, #312]	; (80050e8 <USBD_StdDevReq+0x2a8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004fb0:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8004fb2:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004fb4:	d903      	bls.n	8004fbe <USBD_StdDevReq+0x17e>
    USBD_CtlError(pdev, req);
 8004fb6:	f7ff ff37 	bl	8004e28 <USBD_CtlError.constprop.0>
      ret = USBD_FAIL;
 8004fba:	2503      	movs	r5, #3
      break;
 8004fbc:	e7ad      	b.n	8004f1a <USBD_StdDevReq+0xda>
  switch (pdev->dev_state)
 8004fbe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	fa5f f883 	uxtb.w	r8, r3
 8004fc8:	d009      	beq.n	8004fde <USBD_StdDevReq+0x19e>
 8004fca:	f1b8 0f03 	cmp.w	r8, #3
 8004fce:	d018      	beq.n	8005002 <USBD_StdDevReq+0x1c2>
      USBD_CtlError(pdev, req);
 8004fd0:	f7ff ff2a 	bl	8004e28 <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004fd4:	7839      	ldrb	r1, [r7, #0]
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f7ff fe09 	bl	8004bee <USBD_ClrClassConfig>
 8004fdc:	e7ed      	b.n	8004fba <USBD_StdDevReq+0x17a>
      if (cfgidx != 0U)
 8004fde:	2e00      	cmp	r6, #0
 8004fe0:	d072      	beq.n	80050c8 <USBD_StdDevReq+0x288>
        pdev->dev_config = cfgidx;
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004fe6:	f7ff fdfb 	bl	8004be0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004fea:	4605      	mov	r5, r0
 8004fec:	4620      	mov	r0, r4
 8004fee:	b125      	cbz	r5, 8004ffa <USBD_StdDevReq+0x1ba>
          USBD_CtlError(pdev, req);
 8004ff0:	f7ff ff1a 	bl	8004e28 <USBD_CtlError.constprop.0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004ff4:	f884 829c 	strb.w	r8, [r4, #668]	; 0x29c
 8004ff8:	e78f      	b.n	8004f1a <USBD_StdDevReq+0xda>
          (void)USBD_CtlSendStatus(pdev);
 8004ffa:	f000 f9a0 	bl	800533e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e7cf      	b.n	8004fa2 <USBD_StdDevReq+0x162>
      if (cfgidx == 0U)
 8005002:	b95e      	cbnz	r6, 800501c <USBD_StdDevReq+0x1dc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005004:	2302      	movs	r3, #2
 8005006:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800500a:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800500c:	4631      	mov	r1, r6
 800500e:	f7ff fdee 	bl	8004bee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005012:	4620      	mov	r0, r4
 8005014:	f000 f993 	bl	800533e <USBD_CtlSendStatus>
 8005018:	4635      	mov	r5, r6
 800501a:	e77e      	b.n	8004f1a <USBD_StdDevReq+0xda>
      else if (cfgidx != pdev->dev_config)
 800501c:	6841      	ldr	r1, [r0, #4]
 800501e:	2901      	cmp	r1, #1
 8005020:	d052      	beq.n	80050c8 <USBD_StdDevReq+0x288>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005022:	b2c9      	uxtb	r1, r1
 8005024:	f7ff fde3 	bl	8004bee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005028:	7839      	ldrb	r1, [r7, #0]
 800502a:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800502c:	4620      	mov	r0, r4
 800502e:	f7ff fdd7 	bl	8004be0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8005032:	4606      	mov	r6, r0
 8005034:	2800      	cmp	r0, #0
 8005036:	d047      	beq.n	80050c8 <USBD_StdDevReq+0x288>
          USBD_CtlError(pdev, req);
 8005038:	4620      	mov	r0, r4
 800503a:	f7ff fef5 	bl	8004e28 <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800503e:	7921      	ldrb	r1, [r4, #4]
 8005040:	4620      	mov	r0, r4
 8005042:	f7ff fdd4 	bl	8004bee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005046:	2302      	movs	r3, #2
 8005048:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800504c:	e7e4      	b.n	8005018 <USBD_StdDevReq+0x1d8>
  if (req->wLength != 1U)
 800504e:	88ca      	ldrh	r2, [r1, #6]
 8005050:	2a01      	cmp	r2, #1
 8005052:	f47f af5f 	bne.w	8004f14 <USBD_StdDevReq+0xd4>
    switch (pdev->dev_state)
 8005056:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800505a:	2902      	cmp	r1, #2
 800505c:	b2cb      	uxtb	r3, r1
 800505e:	d805      	bhi.n	800506c <USBD_StdDevReq+0x22c>
 8005060:	b133      	cbz	r3, 8005070 <USBD_StdDevReq+0x230>
        pdev->dev_default_config = 0U;
 8005062:	4601      	mov	r1, r0
 8005064:	2300      	movs	r3, #0
 8005066:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800506a:	e735      	b.n	8004ed8 <USBD_StdDevReq+0x98>
    switch (pdev->dev_state)
 800506c:	2b03      	cmp	r3, #3
 800506e:	d004      	beq.n	800507a <USBD_StdDevReq+0x23a>
        USBD_CtlError(pdev, req);
 8005070:	4620      	mov	r0, r4
 8005072:	f7ff fed9 	bl	8004e28 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8005076:	2500      	movs	r5, #0
        break;
 8005078:	e74f      	b.n	8004f1a <USBD_StdDevReq+0xda>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800507a:	1d01      	adds	r1, r0, #4
 800507c:	e72c      	b.n	8004ed8 <USBD_StdDevReq+0x98>
  switch (pdev->dev_state)
 800507e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005082:	3b01      	subs	r3, #1
 8005084:	2b02      	cmp	r3, #2
 8005086:	d8f3      	bhi.n	8005070 <USBD_StdDevReq+0x230>
      if (req->wLength != 0x2U)
 8005088:	88cb      	ldrh	r3, [r1, #6]
 800508a:	2b02      	cmp	r3, #2
 800508c:	f47f af42 	bne.w	8004f14 <USBD_StdDevReq+0xd4>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005090:	2301      	movs	r3, #1
 8005092:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8005094:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8005098:	b10b      	cbz	r3, 800509e <USBD_StdDevReq+0x25e>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800509a:	2303      	movs	r3, #3
 800509c:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800509e:	2202      	movs	r2, #2
 80050a0:	f104 010c 	add.w	r1, r4, #12
 80050a4:	4620      	mov	r0, r4
 80050a6:	f000 f920 	bl	80052ea <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80050aa:	463d      	mov	r5, r7
      break;
 80050ac:	e735      	b.n	8004f1a <USBD_StdDevReq+0xda>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80050ae:	884b      	ldrh	r3, [r1, #2]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d102      	bne.n	80050ba <USBD_StdDevReq+0x27a>
        pdev->dev_remote_wakeup = 0U;
 80050b4:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80050b8:	e006      	b.n	80050c8 <USBD_StdDevReq+0x288>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	f47f af2a 	bne.w	8004f14 <USBD_StdDevReq+0xd4>
    pdev->dev_test_mode = req->wIndex >> 8;
 80050c0:	888b      	ldrh	r3, [r1, #4]
 80050c2:	0a1b      	lsrs	r3, r3, #8
 80050c4:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
        (void)USBD_CtlSendStatus(pdev);
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 f938 	bl	800533e <USBD_CtlSendStatus>
 80050ce:	e724      	b.n	8004f1a <USBD_StdDevReq+0xda>
  switch (pdev->dev_state)
 80050d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80050d4:	3b01      	subs	r3, #1
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d8ca      	bhi.n	8005070 <USBD_StdDevReq+0x230>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80050da:	884b      	ldrh	r3, [r1, #2]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	f47f af1c 	bne.w	8004f1a <USBD_StdDevReq+0xda>
        pdev->dev_remote_wakeup = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e7e6      	b.n	80050b4 <USBD_StdDevReq+0x274>
 80050e6:	bf00      	nop
 80050e8:	20003240 	.word	0x20003240

080050ec <USBD_StdItfReq>:
{
 80050ec:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050ee:	780b      	ldrb	r3, [r1, #0]
 80050f0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80050f4:	2a40      	cmp	r2, #64	; 0x40
{
 80050f6:	4604      	mov	r4, r0
 80050f8:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050fa:	d001      	beq.n	8005100 <USBD_StdItfReq+0x14>
 80050fc:	065b      	lsls	r3, r3, #25
 80050fe:	d41f      	bmi.n	8005140 <USBD_StdItfReq+0x54>
      switch (pdev->dev_state)
 8005100:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005104:	3b01      	subs	r3, #1
 8005106:	2b02      	cmp	r3, #2
 8005108:	d81a      	bhi.n	8005140 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800510a:	7931      	ldrb	r1, [r6, #4]
 800510c:	2902      	cmp	r1, #2
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800510e:	4620      	mov	r0, r4
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005110:	d817      	bhi.n	8005142 <USBD_StdItfReq+0x56>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005112:	f7ff fe85 	bl	8004e20 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005116:	b988      	cbnz	r0, 800513c <USBD_StdItfReq+0x50>
              if (pdev->pClass[idx]->Setup != NULL)
 8005118:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	b16b      	cbz	r3, 800513c <USBD_StdItfReq+0x50>
                pdev->classId = idx;
 8005120:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005124:	4631      	mov	r1, r6
 8005126:	4620      	mov	r0, r4
 8005128:	4798      	blx	r3
 800512a:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800512c:	88f3      	ldrh	r3, [r6, #6]
 800512e:	b91b      	cbnz	r3, 8005138 <USBD_StdItfReq+0x4c>
 8005130:	b915      	cbnz	r5, 8005138 <USBD_StdItfReq+0x4c>
              (void)USBD_CtlSendStatus(pdev);
 8005132:	4620      	mov	r0, r4
 8005134:	f000 f903 	bl	800533e <USBD_CtlSendStatus>
}
 8005138:	4628      	mov	r0, r5
 800513a:	bd70      	pop	{r4, r5, r6, pc}
              ret = USBD_FAIL;
 800513c:	2503      	movs	r5, #3
 800513e:	e7f5      	b.n	800512c <USBD_StdItfReq+0x40>
          USBD_CtlError(pdev, req);
 8005140:	4620      	mov	r0, r4
 8005142:	f7ff fe71 	bl	8004e28 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8005146:	2500      	movs	r5, #0
          break;
 8005148:	e7f6      	b.n	8005138 <USBD_StdItfReq+0x4c>

0800514a <USBD_StdEPReq>:
{
 800514a:	b570      	push	{r4, r5, r6, lr}
 800514c:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 800514e:	888a      	ldrh	r2, [r1, #4]
 8005150:	790e      	ldrb	r6, [r1, #4]
 8005152:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005156:	2b20      	cmp	r3, #32
{
 8005158:	4604      	mov	r4, r0
 800515a:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800515c:	d053      	beq.n	8005206 <USBD_StdEPReq+0xbc>
 800515e:	2b40      	cmp	r3, #64	; 0x40
 8005160:	d051      	beq.n	8005206 <USBD_StdEPReq+0xbc>
 8005162:	bb63      	cbnz	r3, 80051be <USBD_StdEPReq+0x74>
      switch (req->bRequest)
 8005164:	784b      	ldrb	r3, [r1, #1]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d03b      	beq.n	80051e2 <USBD_StdEPReq+0x98>
 800516a:	2b03      	cmp	r3, #3
 800516c:	d020      	beq.n	80051b0 <USBD_StdEPReq+0x66>
 800516e:	bb33      	cbnz	r3, 80051be <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 8005170:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005174:	2b02      	cmp	r3, #2
 8005176:	b2d9      	uxtb	r1, r3
 8005178:	d061      	beq.n	800523e <USBD_StdEPReq+0xf4>
 800517a:	2903      	cmp	r1, #3
 800517c:	d11f      	bne.n	80051be <USBD_StdEPReq+0x74>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800517e:	f006 030f 	and.w	r3, r6, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8005182:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005186:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800518a:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800518e:	d065      	beq.n	800525c <USBD_StdEPReq+0x112>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005190:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005192:	b1a3      	cbz	r3, 80051be <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005194:	f006 057f 	and.w	r5, r6, #127	; 0x7f
 8005198:	3501      	adds	r5, #1
 800519a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800519e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80051a2:	f016 037f 	ands.w	r3, r6, #127	; 0x7f
 80051a6:	d165      	bne.n	8005274 <USBD_StdEPReq+0x12a>
                pep->status = 0x0001U;
 80051a8:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80051aa:	2202      	movs	r2, #2
 80051ac:	4629      	mov	r1, r5
 80051ae:	e051      	b.n	8005254 <USBD_StdEPReq+0x10a>
          switch (pdev->dev_state)
 80051b0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	d037      	beq.n	800522a <USBD_StdEPReq+0xe0>
 80051ba:	2a03      	cmp	r2, #3
 80051bc:	d003      	beq.n	80051c6 <USBD_StdEPReq+0x7c>
              USBD_CtlError(pdev, req);
 80051be:	4620      	mov	r0, r4
 80051c0:	f7ff fe32 	bl	8004e28 <USBD_CtlError.constprop.0>
              break;
 80051c4:	e00b      	b.n	80051de <USBD_StdEPReq+0x94>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051c6:	884b      	ldrh	r3, [r1, #2]
 80051c8:	b933      	cbnz	r3, 80051d8 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80051ca:	0671      	lsls	r1, r6, #25
 80051cc:	d004      	beq.n	80051d8 <USBD_StdEPReq+0x8e>
 80051ce:	88eb      	ldrh	r3, [r5, #6]
 80051d0:	b913      	cbnz	r3, 80051d8 <USBD_StdEPReq+0x8e>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80051d2:	4631      	mov	r1, r6
 80051d4:	f7fb fa5b 	bl	800068e <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 f8b0 	bl	800533e <USBD_CtlSendStatus>
}
 80051de:	2000      	movs	r0, #0
 80051e0:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 80051e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	d01e      	beq.n	800522a <USBD_StdEPReq+0xe0>
 80051ec:	2a03      	cmp	r2, #3
 80051ee:	d1e6      	bne.n	80051be <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051f0:	884b      	ldrh	r3, [r1, #2]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f3      	bne.n	80051de <USBD_StdEPReq+0x94>
                if ((ep_addr & 0x7FU) != 0x00U)
 80051f6:	0673      	lsls	r3, r6, #25
 80051f8:	d002      	beq.n	8005200 <USBD_StdEPReq+0xb6>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80051fa:	4631      	mov	r1, r6
 80051fc:	f7fb fa4e 	bl	800069c <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 8005200:	4620      	mov	r0, r4
 8005202:	f000 f89c 	bl	800533e <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005206:	4631      	mov	r1, r6
 8005208:	4620      	mov	r0, r4
 800520a:	f7ff fe0b 	bl	8004e24 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800520e:	2800      	cmp	r0, #0
 8005210:	d1e5      	bne.n	80051de <USBD_StdEPReq+0x94>
                  if (pdev->pClass[idx]->Setup != NULL)
 8005212:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
                  pdev->classId = idx;
 8005216:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0de      	beq.n	80051de <USBD_StdEPReq+0x94>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005220:	4629      	mov	r1, r5
 8005222:	4620      	mov	r0, r4
}
 8005224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005228:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800522a:	0672      	lsls	r2, r6, #25
 800522c:	d0c7      	beq.n	80051be <USBD_StdEPReq+0x74>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800522e:	4631      	mov	r1, r6
 8005230:	f7fb fa2d 	bl	800068e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005234:	2180      	movs	r1, #128	; 0x80
 8005236:	4620      	mov	r0, r4
 8005238:	f7fb fa29 	bl	800068e <USBD_LL_StallEP>
 800523c:	e7cf      	b.n	80051de <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800523e:	0671      	lsls	r1, r6, #25
 8005240:	d1bd      	bne.n	80051be <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005242:	0613      	lsls	r3, r2, #24
 8005244:	bf4c      	ite	mi
 8005246:	f100 0114 	addmi.w	r1, r0, #20
 800524a:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800524e:	2300      	movs	r3, #0
 8005250:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005252:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005254:	4620      	mov	r0, r4
 8005256:	f000 f848 	bl	80052ea <USBD_CtlSendData>
              break;
 800525a:	e7c0      	b.n	80051de <USBD_StdEPReq+0x94>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800525c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0ac      	beq.n	80051be <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005264:	f006 057f 	and.w	r5, r6, #127	; 0x7f
 8005268:	2314      	movs	r3, #20
 800526a:	fb03 0505 	mla	r5, r3, r5, r0
 800526e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8005272:	e796      	b.n	80051a2 <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005274:	4631      	mov	r1, r6
 8005276:	4620      	mov	r0, r4
 8005278:	f7fb fa17 	bl	80006aa <USBD_LL_IsStallEP>
 800527c:	b108      	cbz	r0, 8005282 <USBD_StdEPReq+0x138>
                pep->status = 0x0001U;
 800527e:	2301      	movs	r3, #1
 8005280:	e792      	b.n	80051a8 <USBD_StdEPReq+0x5e>
                pep->status = 0x0000U;
 8005282:	6028      	str	r0, [r5, #0]
 8005284:	e791      	b.n	80051aa <USBD_StdEPReq+0x60>

08005286 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8005286:	780b      	ldrb	r3, [r1, #0]
 8005288:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800528a:	784b      	ldrb	r3, [r1, #1]
 800528c:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800528e:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8005290:	8043      	strh	r3, [r0, #2]
 8005292:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 8005294:	8083      	strh	r3, [r0, #4]
 8005296:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 8005298:	80c3      	strh	r3, [r0, #6]
}
 800529a:	4770      	bx	lr

0800529c <USBD_CtlError>:
{
 800529c:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800529e:	2180      	movs	r1, #128	; 0x80
{
 80052a0:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80052a2:	f7fb f9f4 	bl	800068e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80052a6:	4620      	mov	r0, r4
 80052a8:	2100      	movs	r1, #0
}
 80052aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80052ae:	f7fb b9ee 	b.w	800068e <USBD_LL_StallEP>

080052b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80052b2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80052b4:	b188      	cbz	r0, 80052da <USBD_GetString+0x28>
 80052b6:	2400      	movs	r4, #0
 80052b8:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80052ba:	4623      	mov	r3, r4
 80052bc:	3401      	adds	r4, #1
 80052be:	5d05      	ldrb	r5, [r0, r4]
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	d1fa      	bne.n	80052ba <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	3301      	adds	r3, #1
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 80052cc:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80052ce:	2303      	movs	r3, #3
 80052d0:	704b      	strb	r3, [r1, #1]
  idx++;
 80052d2:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80052d4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80052d8:	b902      	cbnz	r2, 80052dc <USBD_GetString+0x2a>
}
 80052da:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 80052dc:	54ca      	strb	r2, [r1, r3]
    idx++;
 80052de:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 80052e0:	b2d2      	uxtb	r2, r2
    idx++;
 80052e2:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80052e4:	548d      	strb	r5, [r1, r2]
    idx++;
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	e7f4      	b.n	80052d4 <USBD_GetString+0x22>

080052ea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80052ea:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80052ec:	2402      	movs	r4, #2
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80052ee:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length = len;
 80052f0:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80052f4:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80052f8:	460a      	mov	r2, r1
 80052fa:	2100      	movs	r1, #0
 80052fc:	f7fb f9ef 	bl	80006de <USBD_LL_Transmit>

  return USBD_OK;
}
 8005300:	2000      	movs	r0, #0
 8005302:	bd10      	pop	{r4, pc}

08005304 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005304:	b508      	push	{r3, lr}
 8005306:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005308:	460a      	mov	r2, r1
 800530a:	2100      	movs	r1, #0
 800530c:	f7fb f9e7 	bl	80006de <USBD_LL_Transmit>

  return USBD_OK;
}
 8005310:	2000      	movs	r0, #0
 8005312:	bd08      	pop	{r3, pc}

08005314 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005314:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005316:	2403      	movs	r4, #3
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005318:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length = len;
 800531a:	e9c0 2256 	strd	r2, r2, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800531e:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005322:	460a      	mov	r2, r1
 8005324:	2100      	movs	r1, #0
 8005326:	f7fb f9e1 	bl	80006ec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800532a:	2000      	movs	r0, #0
 800532c:	bd10      	pop	{r4, pc}

0800532e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800532e:	b508      	push	{r3, lr}
 8005330:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005332:	460a      	mov	r2, r1
 8005334:	2100      	movs	r1, #0
 8005336:	f7fb f9d9 	bl	80006ec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800533a:	2000      	movs	r0, #0
 800533c:	bd08      	pop	{r3, pc}

0800533e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800533e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005340:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005342:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005344:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005348:	4619      	mov	r1, r3
 800534a:	461a      	mov	r2, r3
 800534c:	f7fb f9c7 	bl	80006de <USBD_LL_Transmit>

  return USBD_OK;
}
 8005350:	2000      	movs	r0, #0
 8005352:	bd08      	pop	{r3, pc}

08005354 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005354:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005356:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005358:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800535a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800535e:	4619      	mov	r1, r3
 8005360:	461a      	mov	r2, r3
 8005362:	f7fb f9c3 	bl	80006ec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005366:	2000      	movs	r0, #0
 8005368:	bd08      	pop	{r3, pc}
	...

0800536c <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP>:
 800536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005370:	b09f      	sub	sp, #124	; 0x7c
 8005372:	4613      	mov	r3, r2
 8005374:	9218      	str	r2, [sp, #96]	; 0x60
 8005376:	9010      	str	r0, [sp, #64]	; 0x40
 8005378:	f8b2 0042 	ldrh.w	r0, [r2, #66]	; 0x42
 800537c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800537e:	920d      	str	r2, [sp, #52]	; 0x34
 8005380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005382:	920f      	str	r2, [sp, #60]	; 0x3c
 8005384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005386:	921d      	str	r2, [sp, #116]	; 0x74
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	9205      	str	r2, [sp, #20]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	9206      	str	r2, [sp, #24]
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	9208      	str	r2, [sp, #32]
 8005394:	6a1a      	ldr	r2, [r3, #32]
 8005396:	9207      	str	r2, [sp, #28]
 8005398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800539a:	920e      	str	r2, [sp, #56]	; 0x38
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	920c      	str	r2, [sp, #48]	; 0x30
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	9202      	str	r2, [sp, #8]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	920a      	str	r2, [sp, #40]	; 0x28
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	9209      	str	r2, [sp, #36]	; 0x24
 80053b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053b2:	901b      	str	r0, [sp, #108]	; 0x6c
 80053b4:	9219      	str	r2, [sp, #100]	; 0x64
 80053b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b8:	931a      	str	r3, [sp, #104]	; 0x68
 80053ba:	911c      	str	r1, [sp, #112]	; 0x70
 80053bc:	2800      	cmp	r0, #0
 80053be:	f000 81d9 	beq.w	8005774 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x408>
 80053c2:	2300      	movs	r3, #0
 80053c4:	f8df 9368 	ldr.w	r9, [pc, #872]	; 8005730 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3c4>
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	e00e      	b.n	80053ea <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x7e>
 80053cc:	f301 020f 	ssat	r2, #16, r1
 80053d0:	9801      	ldr	r0, [sp, #4]
 80053d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80053d4:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
 80053d8:	4602      	mov	r2, r0
 80053da:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80053dc:	3201      	adds	r2, #1
 80053de:	428a      	cmp	r2, r1
 80053e0:	9201      	str	r2, [sp, #4]
 80053e2:	e9cd 830e 	strd	r8, r3, [sp, #56]	; 0x38
 80053e6:	f000 81a7 	beq.w	8005738 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3cc>
 80053ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053ec:	f852 3b08 	ldr.w	r3, [r2], #8
 80053f0:	9210      	str	r2, [sp, #64]	; 0x40
 80053f2:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80053f6:	ba5b      	rev16	r3, r3
 80053f8:	ba4c      	rev16	r4, r1
 80053fa:	0e20      	lsrs	r0, r4, #24
 80053fc:	9004      	str	r0, [sp, #16]
 80053fe:	48c2      	ldr	r0, [pc, #776]	; (8005708 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x39c>)
 8005400:	4fc2      	ldr	r7, [pc, #776]	; (800570c <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3a0>)
 8005402:	9403      	str	r4, [sp, #12]
 8005404:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005408:	b2dd      	uxtb	r5, r3
 800540a:	4601      	mov	r1, r0
 800540c:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 8005410:	f850 e022 	ldr.w	lr, [r0, r2, lsl #2]
 8005414:	f859 c022 	ldr.w	ip, [r9, r2, lsl #2]
 8005418:	f857 8022 	ldr.w	r8, [r7, r2, lsl #2]
 800541c:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
 8005420:	f89d b00c 	ldrb.w	fp, [sp, #12]
 8005424:	460f      	mov	r7, r1
 8005426:	9904      	ldr	r1, [sp, #16]
 8005428:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800542c:	9113      	str	r1, [sp, #76]	; 0x4c
 800542e:	0e1e      	lsrs	r6, r3, #24
 8005430:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
 8005434:	4db6      	ldr	r5, [pc, #728]	; (8005710 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3a4>)
 8005436:	9111      	str	r1, [sp, #68]	; 0x44
 8005438:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800543c:	ea05 0544 	and.w	r5, r5, r4, lsl #1
 8005440:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 8005444:	eb05 451c 	add.w	r5, r5, ip, lsr #16
 8005448:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800544c:	fa15 f580 	uxtah	r5, r5, r0
 8005450:	0c04      	lsrs	r4, r0, #16
 8005452:	9802      	ldr	r0, [sp, #8]
 8005454:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 8005458:	4405      	add	r5, r0
 800545a:	f859 a026 	ldr.w	sl, [r9, r6, lsl #2]
 800545e:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8005462:	fa14 f48a 	uxtah	r4, r4, sl
 8005466:	0c00      	lsrs	r0, r0, #16
 8005468:	f859 a02b 	ldr.w	sl, [r9, fp, lsl #2]
 800546c:	fa10 f082 	uxtah	r0, r0, r2
 8005470:	0c12      	lsrs	r2, r2, #16
 8005472:	eb02 421a 	add.w	r2, r2, sl, lsr #16
 8005476:	fa12 f28e 	uxtah	r2, r2, lr
 800547a:	4639      	mov	r1, r7
 800547c:	9217      	str	r2, [sp, #92]	; 0x5c
 800547e:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8005482:	4fa2      	ldr	r7, [pc, #648]	; (800570c <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3a0>)
 8005484:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8005488:	9312      	str	r3, [sp, #72]	; 0x48
 800548a:	4ba1      	ldr	r3, [pc, #644]	; (8005710 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3a4>)
 800548c:	fa10 f08a 	uxtah	r0, r0, sl
 8005490:	ea03 0a48 	and.w	sl, r3, r8, lsl #1
 8005494:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8005498:	eb00 0348 	add.w	r3, r0, r8, lsl #1
 800549c:	4638      	mov	r0, r7
 800549e:	9316      	str	r3, [sp, #88]	; 0x58
 80054a0:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 80054a4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80054a8:	460f      	mov	r7, r1
 80054aa:	f850 102b 	ldr.w	r1, [r0, fp, lsl #2]
 80054ae:	9102      	str	r1, [sp, #8]
 80054b0:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
 80054b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80054b6:	46bb      	mov	fp, r7
 80054b8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80054ba:	44a2      	add	sl, r4
 80054bc:	9c03      	ldr	r4, [sp, #12]
 80054be:	fa1b f887 	uxtah	r8, fp, r7
 80054c2:	fa1f fc8c 	uxth.w	ip, ip
 80054c6:	f3c4 4b07 	ubfx	fp, r4, #16, #8
 80054ca:	eb0c 4c17 	add.w	ip, ip, r7, lsr #16
 80054ce:	08ed      	lsrs	r5, r5, #3
 80054d0:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80054d4:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 80054d8:	9411      	str	r4, [sp, #68]	; 0x44
 80054da:	042c      	lsls	r4, r5, #16
 80054dc:	9415      	str	r4, [sp, #84]	; 0x54
 80054de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80054e0:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 80054e4:	9109      	str	r1, [sp, #36]	; 0x24
 80054e6:	4454      	add	r4, sl
 80054e8:	9414      	str	r4, [sp, #80]	; 0x50
 80054ea:	fa1f f488 	uxth.w	r4, r8
 80054ee:	fa14 f486 	uxtah	r4, r4, r6
 80054f2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80054f6:	0c36      	lsrs	r6, r6, #16
 80054f8:	eb04 4412 	add.w	r4, r4, r2, lsr #16
 80054fc:	fa1e fe82 	uxtah	lr, lr, r2
 8005500:	fa16 f681 	uxtah	r6, r6, r1
 8005504:	4a82      	ldr	r2, [pc, #520]	; (8005710 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3a4>)
 8005506:	4d81      	ldr	r5, [pc, #516]	; (800570c <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3a0>)
 8005508:	eb06 4118 	add.w	r1, r6, r8, lsr #16
 800550c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800550e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005512:	ea02 0343 	and.w	r3, r2, r3, lsl #1
 8005516:	4433      	add	r3, r6
 8005518:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
 800551c:	9603      	str	r6, [sp, #12]
 800551e:	4e7a      	ldr	r6, [pc, #488]	; (8005708 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x39c>)
 8005520:	f856 5027 	ldr.w	r5, [r6, r7, lsl #2]
 8005524:	950b      	str	r5, [sp, #44]	; 0x2c
 8005526:	4610      	mov	r0, r2
 8005528:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800552a:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
 800552e:	4e76      	ldr	r6, [pc, #472]	; (8005708 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x39c>)
 8005530:	4607      	mov	r7, r0
 8005532:	9802      	ldr	r0, [sp, #8]
 8005534:	4465      	add	r5, ip
 8005536:	950a      	str	r5, [sp, #40]	; 0x28
 8005538:	eb0e 0e4a 	add.w	lr, lr, sl, lsl #1
 800553c:	9d04      	ldr	r5, [sp, #16]
 800553e:	ea07 0a40 	and.w	sl, r7, r0, lsl #1
 8005542:	4f72      	ldr	r7, [pc, #456]	; (800570c <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3a0>)
 8005544:	0c00      	lsrs	r0, r0, #16
 8005546:	44d6      	add	lr, sl
 8005548:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 800554c:	f859 402b 	ldr.w	r4, [r9, fp, lsl #2]
 8005550:	f857 8025 	ldr.w	r8, [r7, r5, lsl #2]
 8005554:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8005558:	9504      	str	r5, [sp, #16]
 800555a:	fa13 f382 	uxtah	r3, r3, r2
 800555e:	eb0e 4212 	add.w	r2, lr, r2, lsr #16
 8005562:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005564:	f857 702b 	ldr.w	r7, [r7, fp, lsl #2]
 8005568:	fa12 fa84 	uxtah	sl, r2, r4
 800556c:	eb00 4014 	add.w	r0, r0, r4, lsr #16
 8005570:	4c67      	ldr	r4, [pc, #412]	; (8005710 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3a4>)
 8005572:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005574:	4626      	mov	r6, r4
 8005576:	ea04 0445 	and.w	r4, r4, r5, lsl #1
 800557a:	4414      	add	r4, r2
 800557c:	0c2a      	lsrs	r2, r5, #16
 800557e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8005582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005584:	9a03      	ldr	r2, [sp, #12]
 8005586:	442c      	add	r4, r5
 8005588:	ea06 0242 	and.w	r2, r6, r2, lsl #1
 800558c:	4635      	mov	r5, r6
 800558e:	9e03      	ldr	r6, [sp, #12]
 8005590:	0c36      	lsrs	r6, r6, #16
 8005592:	eb01 0646 	add.w	r6, r1, r6, lsl #1
 8005596:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005598:	ea05 0c48 	and.w	ip, r5, r8, lsl #1
 800559c:	fa1c fc81 	uxtah	ip, ip, r1
 80055a0:	0c0d      	lsrs	r5, r1, #16
 80055a2:	ea4f 01da 	mov.w	r1, sl, lsr #3
 80055a6:	9102      	str	r1, [sp, #8]
 80055a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055aa:	4410      	add	r0, r2
 80055ac:	eb0c 4c11 	add.w	ip, ip, r1, lsr #16
 80055b0:	4a55      	ldr	r2, [pc, #340]	; (8005708 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x39c>)
 80055b2:	4957      	ldr	r1, [pc, #348]	; (8005710 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3a4>)
 80055b4:	f852 e02b 	ldr.w	lr, [r2, fp, lsl #2]
 80055b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80055ba:	ea01 0b47 	and.w	fp, r1, r7, lsl #1
 80055be:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80055c2:	e9dd 7114 	ldrd	r7, r1, [sp, #80]	; 0x50
 80055c6:	ea41 07d7 	orr.w	r7, r1, r7, lsr #3
 80055ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055cc:	0412      	lsls	r2, r2, #16
 80055ce:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 80055d2:	eb06 010b 	add.w	r1, r6, fp
 80055d6:	9109      	str	r1, [sp, #36]	; 0x24
 80055d8:	9902      	ldr	r1, [sp, #8]
 80055da:	08e4      	lsrs	r4, r4, #3
 80055dc:	08c0      	lsrs	r0, r0, #3
 80055de:	08db      	lsrs	r3, r3, #3
 80055e0:	fa15 f58e 	uxtah	r5, r5, lr
 80055e4:	ea4f 4818 	mov.w	r8, r8, lsr #16
 80055e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80055ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80055f0:	eb0c 044a 	add.w	r4, ip, sl, lsl #1
 80055f4:	9804      	ldr	r0, [sp, #16]
 80055f6:	940a      	str	r4, [sp, #40]	; 0x28
 80055f8:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80055fc:	eb05 0448 	add.w	r4, r5, r8, lsl #1
 8005600:	9402      	str	r4, [sp, #8]
 8005602:	fa1e f480 	uxtah	r4, lr, r0
 8005606:	0c00      	lsrs	r0, r0, #16
 8005608:	940b      	str	r4, [sp, #44]	; 0x2c
 800560a:	900c      	str	r0, [sp, #48]	; 0x30
 800560c:	9c07      	ldr	r4, [sp, #28]
 800560e:	4841      	ldr	r0, [pc, #260]	; (8005714 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3a8>)
 8005610:	fb22 4600 	smlad	r6, r2, r0, r4
 8005614:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8005618:	fb27 680c 	smlad	r8, r7, ip, r6
 800561c:	4c3e      	ldr	r4, [pc, #248]	; (8005718 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3ac>)
 800561e:	9d08      	ldr	r5, [sp, #32]
 8005620:	fb22 5004 	smlad	r0, r2, r4, r5
 8005624:	4d3d      	ldr	r5, [pc, #244]	; (800571c <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3b0>)
 8005626:	fb27 0005 	smlad	r0, r7, r5, r0
 800562a:	f504 0452 	add.w	r4, r4, #13762560	; 0xd20000
 800562e:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
 8005632:	9e06      	ldr	r6, [sp, #24]
 8005634:	fb22 6504 	smlad	r5, r2, r4, r6
 8005638:	3c7c      	subs	r4, #124	; 0x7c
 800563a:	fb27 5504 	smlad	r5, r7, r4, r5
 800563e:	4c38      	ldr	r4, [pc, #224]	; (8005720 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3b4>)
 8005640:	9e05      	ldr	r6, [sp, #20]
 8005642:	fb22 6404 	smlad	r4, r2, r4, r6
 8005646:	4e37      	ldr	r6, [pc, #220]	; (8005724 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3b8>)
 8005648:	fb27 4406 	smlad	r4, r7, r6, r4
 800564c:	4e36      	ldr	r6, [pc, #216]	; (8005728 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3bc>)
 800564e:	fb22 f206 	smuad	r2, r2, r6
 8005652:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8005734 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3c8>
 8005656:	fb27 220e 	smlad	r2, r7, lr, r2
 800565a:	4f2e      	ldr	r7, [pc, #184]	; (8005714 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3a8>)
 800565c:	fb23 0007 	smlad	r0, r3, r7, r0
 8005660:	fb21 000c 	smlad	r0, r1, ip, r0
 8005664:	4f2c      	ldr	r7, [pc, #176]	; (8005718 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3ac>)
 8005666:	fb23 5507 	smlad	r5, r3, r7, r5
 800566a:	4f2c      	ldr	r7, [pc, #176]	; (800571c <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3b0>)
 800566c:	fb21 5707 	smlad	r7, r1, r7, r5
 8005670:	4d2e      	ldr	r5, [pc, #184]	; (800572c <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3c0>)
 8005672:	9707      	str	r7, [sp, #28]
 8005674:	fb23 4405 	smlad	r4, r3, r5, r4
 8005678:	3d7c      	subs	r5, #124	; 0x7c
 800567a:	fb21 4505 	smlad	r5, r1, r5, r4
 800567e:	4c28      	ldr	r4, [pc, #160]	; (8005720 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3b4>)
 8005680:	9508      	str	r5, [sp, #32]
 8005682:	fb23 2204 	smlad	r2, r3, r4, r2
 8005686:	4e27      	ldr	r6, [pc, #156]	; (8005724 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3b8>)
 8005688:	fb21 2206 	smlad	r2, r1, r6, r2
 800568c:	4e26      	ldr	r6, [pc, #152]	; (8005728 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3bc>)
 800568e:	9206      	str	r2, [sp, #24]
 8005690:	fb23 f306 	smuad	r3, r3, r6
 8005694:	fb21 330e 	smlad	r3, r1, lr, r3
 8005698:	9305      	str	r3, [sp, #20]
 800569a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800569c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800569e:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 80056a2:	4418      	add	r0, r3
 80056a4:	f100 4370 	add.w	r3, r0, #4026531840	; 0xf0000000
 80056a8:	441a      	add	r2, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056ae:	1a80      	subs	r0, r0, r2
 80056b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80056b2:	17c5      	asrs	r5, r0, #31
 80056b4:	fba0 6702 	umull	r6, r7, r0, r2
 80056b8:	fb02 7705 	mla	r7, r2, r5, r7
 80056bc:	f116 4000 	adds.w	r0, r6, #2147483648	; 0x80000000
 80056c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80056c2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80056c4:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 80056c8:	f147 0100 	adc.w	r1, r7, #0
 80056cc:	0049      	lsls	r1, r1, #1
 80056ce:	460c      	mov	r4, r1
 80056d0:	910d      	str	r1, [sp, #52]	; 0x34
 80056d2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80056d6:	2100      	movs	r1, #0
 80056d8:	fbc5 0104 	smlal	r0, r1, r5, r4
 80056dc:	2a00      	cmp	r2, #0
 80056de:	f43f ae75 	beq.w	80053cc <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x60>
 80056e2:	2a02      	cmp	r2, #2
 80056e4:	d008      	beq.n	80056f8 <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x38c>
 80056e6:	f301 0117 	ssat	r1, #24, r1
 80056ea:	9a01      	ldr	r2, [sp, #4]
 80056ec:	981c      	ldr	r0, [sp, #112]	; 0x70
 80056ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80056f2:	5081      	str	r1, [r0, r2]
 80056f4:	9a01      	ldr	r2, [sp, #4]
 80056f6:	e670      	b.n	80053da <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x6e>
 80056f8:	f301 0217 	ssat	r2, #24, r1
 80056fc:	9801      	ldr	r0, [sp, #4]
 80056fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005700:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
 8005704:	4602      	mov	r2, r0
 8005706:	e668      	b.n	80053da <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x6e>
 8005708:	200000ac 	.word	0x200000ac
 800570c:	200004ac 	.word	0x200004ac
 8005710:	0001fffe 	.word	0x0001fffe
 8005714:	00150006 	.word	0x00150006
 8005718:	015000d8 	.word	0x015000d8
 800571c:	00780038 	.word	0x00780038
 8005720:	007800d8 	.word	0x007800d8
 8005724:	015001c8 	.word	0x015001c8
 8005728:	00010006 	.word	0x00010006
 800572c:	02220244 	.word	0x02220244
 8005730:	200008ac 	.word	0x200008ac
 8005734:	00150038 	.word	0x00150038
 8005738:	4646      	mov	r6, r8
 800573a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800573c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800573e:	6010      	str	r0, [r2, #0]
 8005740:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005742:	6050      	str	r0, [r2, #4]
 8005744:	9802      	ldr	r0, [sp, #8]
 8005746:	6090      	str	r0, [r2, #8]
 8005748:	980a      	ldr	r0, [sp, #40]	; 0x28
 800574a:	60d0      	str	r0, [r2, #12]
 800574c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800574e:	6110      	str	r0, [r2, #16]
 8005750:	9805      	ldr	r0, [sp, #20]
 8005752:	6150      	str	r0, [r2, #20]
 8005754:	9806      	ldr	r0, [sp, #24]
 8005756:	6190      	str	r0, [r2, #24]
 8005758:	9808      	ldr	r0, [sp, #32]
 800575a:	61d0      	str	r0, [r2, #28]
 800575c:	9807      	ldr	r0, [sp, #28]
 800575e:	e9c2 0608 	strd	r0, r6, [r2, #32]
 8005762:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005764:	e9c2 030b 	strd	r0, r3, [r2, #44]	; 0x2c
 8005768:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800576a:	6393      	str	r3, [r2, #56]	; 0x38
 800576c:	2000      	movs	r0, #0
 800576e:	b01f      	add	sp, #124	; 0x7c
 8005770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005774:	e9dd 630e 	ldrd	r6, r3, [sp, #56]	; 0x38
 8005778:	e7df      	b.n	800573a <D64_S6D8_S6D4_S2D2_1CH_HTONS_VOL_HP+0x3ce>
 800577a:	bf00      	nop

0800577c <D64_S6D8_S6D4_S2D2_GENERIC>:
 800577c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005780:	b09d      	sub	sp, #116	; 0x74
 8005782:	4613      	mov	r3, r2
 8005784:	9200      	str	r2, [sp, #0]
 8005786:	900d      	str	r0, [sp, #52]	; 0x34
 8005788:	f8b2 0042 	ldrh.w	r0, [r2, #66]	; 0x42
 800578c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800578e:	9215      	str	r2, [sp, #84]	; 0x54
 8005790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005792:	9216      	str	r2, [sp, #88]	; 0x58
 8005794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005796:	921b      	str	r2, [sp, #108]	; 0x6c
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	920b      	str	r2, [sp, #44]	; 0x2c
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	9205      	str	r2, [sp, #20]
 80057a0:	69da      	ldr	r2, [r3, #28]
 80057a2:	9206      	str	r2, [sp, #24]
 80057a4:	6a1a      	ldr	r2, [r3, #32]
 80057a6:	920c      	str	r2, [sp, #48]	; 0x30
 80057a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057aa:	920e      	str	r2, [sp, #56]	; 0x38
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	920a      	str	r2, [sp, #40]	; 0x28
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	9209      	str	r2, [sp, #36]	; 0x24
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	9208      	str	r2, [sp, #32]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	9207      	str	r2, [sp, #28]
 80057bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057be:	9018      	str	r0, [sp, #96]	; 0x60
 80057c0:	691c      	ldr	r4, [r3, #16]
 80057c2:	9217      	str	r2, [sp, #92]	; 0x5c
 80057c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c6:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
 80057ca:	2800      	cmp	r0, #0
 80057cc:	f000 8221 	beq.w	8005c12 <D64_S6D8_S6D4_S2D2_GENERIC+0x496>
 80057d0:	9314      	str	r3, [sp, #80]	; 0x50
 80057d2:	2300      	movs	r3, #0
 80057d4:	f8df 83dc 	ldr.w	r8, [pc, #988]	; 8005bb4 <D64_S6D8_S6D4_S2D2_GENERIC+0x438>
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	46a3      	mov	fp, r4
 80057dc:	e013      	b.n	8005806 <D64_S6D8_S6D4_S2D2_GENERIC+0x8a>
 80057de:	f301 030f 	ssat	r3, #16, r1
 80057e2:	9901      	ldr	r1, [sp, #4]
 80057e4:	fb02 f201 	mul.w	r2, r2, r1
 80057e8:	9919      	ldr	r1, [sp, #100]	; 0x64
 80057ea:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 80057ee:	9b01      	ldr	r3, [sp, #4]
 80057f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80057f2:	3301      	adds	r3, #1
 80057f4:	4293      	cmp	r3, r2
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	f000 81eb 	beq.w	8005bd2 <D64_S6D8_S6D4_S2D2_GENERIC+0x456>
 80057fc:	9b00      	ldr	r3, [sp, #0]
 80057fe:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005804:	9314      	str	r3, [sp, #80]	; 0x50
 8005806:	9b00      	ldr	r3, [sp, #0]
 8005808:	f8b3 6046 	ldrh.w	r6, [r3, #70]	; 0x46
 800580c:	2e01      	cmp	r6, #1
 800580e:	f000 81b3 	beq.w	8005b78 <D64_S6D8_S6D4_S2D2_GENERIC+0x3fc>
 8005812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005814:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8005818:	4274      	negs	r4, r6
 800581a:	1853      	adds	r3, r2, r1
 800581c:	eb03 0744 	add.w	r7, r3, r4, lsl #1
 8005820:	eb07 0041 	add.w	r0, r7, r1, lsl #1
 8005824:	f813 a004 	ldrb.w	sl, [r3, r4]
 8005828:	5d05      	ldrb	r5, [r0, r4]
 800582a:	f817 e011 	ldrb.w	lr, [r7, r1, lsl #1]
 800582e:	f810 9014 	ldrb.w	r9, [r0, r4, lsl #1]
 8005832:	5c51      	ldrb	r1, [r2, r1]
 8005834:	f813 c014 	ldrb.w	ip, [r3, r4, lsl #1]
 8005838:	7817      	ldrb	r7, [r2, #0]
 800583a:	4420      	add	r0, r4
 800583c:	ea4f 420a 	mov.w	r2, sl, lsl #16
 8005840:	042d      	lsls	r5, r5, #16
 8005842:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 8005846:	f810 a014 	ldrb.w	sl, [r0, r4, lsl #1]
 800584a:	eb05 650e 	add.w	r5, r5, lr, lsl #24
 800584e:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8005852:	eb02 210c 	add.w	r1, r2, ip, lsl #8
 8005856:	eb05 2509 	add.w	r5, r5, r9, lsl #8
 800585a:	eb00 0286 	add.w	r2, r0, r6, lsl #2
 800585e:	eb05 030a 	add.w	r3, r5, sl
 8005862:	920d      	str	r2, [sp, #52]	; 0x34
 8005864:	4439      	add	r1, r7
 8005866:	b2cc      	uxtb	r4, r1
 8005868:	0e0f      	lsrs	r7, r1, #24
 800586a:	4dc9      	ldr	r5, [pc, #804]	; (8005b90 <D64_S6D8_S6D4_S2D2_GENERIC+0x414>)
 800586c:	4ec9      	ldr	r6, [pc, #804]	; (8005b94 <D64_S6D8_S6D4_S2D2_GENERIC+0x418>)
 800586e:	f855 e024 	ldr.w	lr, [r5, r4, lsl #2]
 8005872:	f858 a024 	ldr.w	sl, [r8, r4, lsl #2]
 8005876:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
 800587a:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 800587e:	0e18      	lsrs	r0, r3, #24
 8005880:	9004      	str	r0, [sp, #16]
 8005882:	0c24      	lsrs	r4, r4, #16
 8005884:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8005888:	9010      	str	r0, [sp, #64]	; 0x40
 800588a:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800588e:	fa14 f08e 	uxtah	r0, r4, lr
 8005892:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8005896:	4cc0      	ldr	r4, [pc, #768]	; (8005b98 <D64_S6D8_S6D4_S2D2_GENERIC+0x41c>)
 8005898:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800589c:	ea4f 4c1e 	mov.w	ip, lr, lsr #16
 80058a0:	ea04 0446 	and.w	r4, r4, r6, lsl #1
 80058a4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80058a8:	f858 6021 	ldr.w	r6, [r8, r1, lsl #2]
 80058ac:	0c36      	lsrs	r6, r6, #16
 80058ae:	eb06 0e4e 	add.w	lr, r6, lr, lsl #1
 80058b2:	4eb8      	ldr	r6, [pc, #736]	; (8005b94 <D64_S6D8_S6D4_S2D2_GENERIC+0x418>)
 80058b4:	fa5f f983 	uxtb.w	r9, r3
 80058b8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80058bc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80058c0:	9202      	str	r2, [sp, #8]
 80058c2:	f858 2029 	ldr.w	r2, [r8, r9, lsl #2]
 80058c6:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
 80058ca:	9a02      	ldr	r2, [sp, #8]
 80058cc:	eb04 4412 	add.w	r4, r4, r2, lsr #16
 80058d0:	f858 2029 	ldr.w	r2, [r8, r9, lsl #2]
 80058d4:	fa1c fc85 	uxtah	ip, ip, r5
 80058d8:	fa10 f082 	uxtah	r0, r0, r2
 80058dc:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80058e0:	4aab      	ldr	r2, [pc, #684]	; (8005b90 <D64_S6D8_S6D4_S2D2_GENERIC+0x414>)
 80058e2:	f858 c021 	ldr.w	ip, [r8, r1, lsl #2]
 80058e6:	fa14 f48c 	uxtah	r4, r4, ip
 80058ea:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
 80058ee:	4aa9      	ldr	r2, [pc, #676]	; (8005b94 <D64_S6D8_S6D4_S2D2_GENERIC+0x418>)
 80058f0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80058f4:	910f      	str	r1, [sp, #60]	; 0x3c
 80058f6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80058fa:	fa1e fe81 	uxtah	lr, lr, r1
 80058fe:	49a6      	ldr	r1, [pc, #664]	; (8005b98 <D64_S6D8_S6D4_S2D2_GENERIC+0x41c>)
 8005900:	ea01 0146 	and.w	r1, r1, r6, lsl #1
 8005904:	0c36      	lsrs	r6, r6, #16
 8005906:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800590a:	9611      	str	r6, [sp, #68]	; 0x44
 800590c:	4610      	mov	r0, r2
 800590e:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8005912:	4a9f      	ldr	r2, [pc, #636]	; (8005b90 <D64_S6D8_S6D4_S2D2_GENERIC+0x414>)
 8005914:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 8005918:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 800591c:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8005920:	9203      	str	r2, [sp, #12]
 8005922:	9a08      	ldr	r2, [sp, #32]
 8005924:	4414      	add	r4, r2
 8005926:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800592a:	fa1b fb8a 	uxtah	fp, fp, sl
 800592e:	eb02 421a 	add.w	r2, r2, sl, lsr #16
 8005932:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8005936:	08e4      	lsrs	r4, r4, #3
 8005938:	9402      	str	r4, [sp, #8]
 800593a:	fa1f f98a 	uxth.w	r9, sl
 800593e:	9c03      	ldr	r4, [sp, #12]
 8005940:	fa19 f987 	uxtah	r9, r9, r7
 8005944:	0c3f      	lsrs	r7, r7, #16
 8005946:	fa17 f784 	uxtah	r7, r7, r4
 800594a:	4c93      	ldr	r4, [pc, #588]	; (8005b98 <D64_S6D8_S6D4_S2D2_GENERIC+0x41c>)
 800594c:	eb07 471a 	add.w	r7, r7, sl, lsr #16
 8005950:	0c2d      	lsrs	r5, r5, #16
 8005952:	9713      	str	r7, [sp, #76]	; 0x4c
 8005954:	eb09 491c 	add.w	r9, r9, ip, lsr #16
 8005958:	fa15 f58c 	uxtah	r5, r5, ip
 800595c:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
 8005960:	ea04 0c46 	and.w	ip, r4, r6, lsl #1
 8005964:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005966:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 800596a:	f8cd b020 	str.w	fp, [sp, #32]
 800596e:	46a3      	mov	fp, r4
 8005970:	9c02      	ldr	r4, [sp, #8]
 8005972:	0424      	lsls	r4, r4, #16
 8005974:	9410      	str	r4, [sp, #64]	; 0x40
 8005976:	9c07      	ldr	r4, [sp, #28]
 8005978:	448e      	add	lr, r1
 800597a:	44f3      	add	fp, lr
 800597c:	46a6      	mov	lr, r4
 800597e:	4496      	add	lr, r2
 8005980:	4a85      	ldr	r2, [pc, #532]	; (8005b98 <D64_S6D8_S6D4_S2D2_GENERIC+0x41c>)
 8005982:	9c04      	ldr	r4, [sp, #16]
 8005984:	f8cd e01c 	str.w	lr, [sp, #28]
 8005988:	0c37      	lsrs	r7, r6, #16
 800598a:	ea02 0240 	and.w	r2, r2, r0, lsl #1
 800598e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8005990:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005994:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8005998:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800599c:	4415      	add	r5, r2
 800599e:	4a7d      	ldr	r2, [pc, #500]	; (8005b94 <D64_S6D8_S6D4_S2D2_GENERIC+0x418>)
 80059a0:	4f7c      	ldr	r7, [pc, #496]	; (8005b94 <D64_S6D8_S6D4_S2D2_GENERIC+0x418>)
 80059a2:	f858 a021 	ldr.w	sl, [r8, r1, lsl #2]
 80059a6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80059aa:	9202      	str	r2, [sp, #8]
 80059ac:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80059b0:	44b4      	add	ip, r6
 80059b2:	4e77      	ldr	r6, [pc, #476]	; (8005b90 <D64_S6D8_S6D4_S2D2_GENERIC+0x414>)
 80059b4:	f857 7021 	ldr.w	r7, [r7, r1, lsl #2]
 80059b8:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 80059bc:	4a75      	ldr	r2, [pc, #468]	; (8005b94 <D64_S6D8_S6D4_S2D2_GENERIC+0x418>)
 80059be:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 80059c2:	46a6      	mov	lr, r4
 80059c4:	0c00      	lsrs	r0, r0, #16
 80059c6:	4c72      	ldr	r4, [pc, #456]	; (8005b90 <D64_S6D8_S6D4_S2D2_GENERIC+0x414>)
 80059c8:	eb05 451a 	add.w	r5, r5, sl, lsr #16
 80059cc:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 80059d0:	fa1c fc8a 	uxtah	ip, ip, sl
 80059d4:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 80059d8:	f852 a023 	ldr.w	sl, [r2, r3, lsl #2]
 80059dc:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80059e0:	4a6d      	ldr	r2, [pc, #436]	; (8005b98 <D64_S6D8_S6D4_S2D2_GENERIC+0x41c>)
 80059e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059e4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 80059e8:	fa15 f181 	uxtah	r1, r5, r1
 80059ec:	9112      	str	r1, [sp, #72]	; 0x48
 80059ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80059f0:	ea02 0543 	and.w	r5, r2, r3, lsl #1
 80059f4:	440d      	add	r5, r1
 80059f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059f8:	440d      	add	r5, r1
 80059fa:	9902      	ldr	r1, [sp, #8]
 80059fc:	0c1b      	lsrs	r3, r3, #16
 80059fe:	ea02 0e47 	and.w	lr, r2, r7, lsl #1
 8005a02:	ea02 0b4a 	and.w	fp, r2, sl, lsl #1
 8005a06:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8005a0a:	ea02 0c41 	and.w	ip, r2, r1, lsl #1
 8005a0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005a10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a12:	08db      	lsrs	r3, r3, #3
 8005a14:	0c3f      	lsrs	r7, r7, #16
 8005a16:	9304      	str	r3, [sp, #16]
 8005a18:	eb01 0747 	add.w	r7, r1, r7, lsl #1
 8005a1c:	9b02      	ldr	r3, [sp, #8]
 8005a1e:	08d1      	lsrs	r1, r2, #3
 8005a20:	9a03      	ldr	r2, [sp, #12]
 8005a22:	fa1c fc86 	uxtah	ip, ip, r6
 8005a26:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
 8005a2a:	0c36      	lsrs	r6, r6, #16
 8005a2c:	0c1a      	lsrs	r2, r3, #16
 8005a2e:	fa16 f684 	uxtah	r6, r6, r4
 8005a32:	9202      	str	r2, [sp, #8]
 8005a34:	4470      	add	r0, lr
 8005a36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a38:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8005a3c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005a3e:	ea42 04d4 	orr.w	r4, r2, r4, lsr #3
 8005a42:	9a08      	ldr	r2, [sp, #32]
 8005a44:	08c0      	lsrs	r0, r0, #3
 8005a46:	4613      	mov	r3, r2
 8005a48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8005a4c:	9a07      	ldr	r2, [sp, #28]
 8005a4e:	9802      	ldr	r0, [sp, #8]
 8005a50:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8005a54:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8005a58:	9b04      	ldr	r3, [sp, #16]
 8005a5a:	9008      	str	r0, [sp, #32]
 8005a5c:	08ed      	lsrs	r5, r5, #3
 8005a5e:	fa1e f089 	uxtah	r0, lr, r9
 8005a62:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 8005a66:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005a6a:	9009      	str	r0, [sp, #36]	; 0x24
 8005a6c:	eb0c 054a 	add.w	r5, ip, sl, lsl #1
 8005a70:	ea4f 4019 	mov.w	r0, r9, lsr #16
 8005a74:	9507      	str	r5, [sp, #28]
 8005a76:	900a      	str	r0, [sp, #40]	; 0x28
 8005a78:	44bb      	add	fp, r7
 8005a7a:	4848      	ldr	r0, [pc, #288]	; (8005b9c <D64_S6D8_S6D4_S2D2_GENERIC+0x420>)
 8005a7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a7e:	fb22 5700 	smlad	r7, r2, r0, r5
 8005a82:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8005a86:	fb24 790c 	smlad	r9, r4, ip, r7
 8005a8a:	4d45      	ldr	r5, [pc, #276]	; (8005ba0 <D64_S6D8_S6D4_S2D2_GENERIC+0x424>)
 8005a8c:	9e06      	ldr	r6, [sp, #24]
 8005a8e:	fb22 6005 	smlad	r0, r2, r5, r6
 8005a92:	4e44      	ldr	r6, [pc, #272]	; (8005ba4 <D64_S6D8_S6D4_S2D2_GENERIC+0x428>)
 8005a94:	fb24 0006 	smlad	r0, r4, r6, r0
 8005a98:	f505 0552 	add.w	r5, r5, #13762560	; 0xd20000
 8005a9c:	f505 75b6 	add.w	r5, r5, #364	; 0x16c
 8005aa0:	9f05      	ldr	r7, [sp, #20]
 8005aa2:	fb22 7605 	smlad	r6, r2, r5, r7
 8005aa6:	3d7c      	subs	r5, #124	; 0x7c
 8005aa8:	fb24 6605 	smlad	r6, r4, r5, r6
 8005aac:	4d3e      	ldr	r5, [pc, #248]	; (8005ba8 <D64_S6D8_S6D4_S2D2_GENERIC+0x42c>)
 8005aae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005ab0:	fb22 7505 	smlad	r5, r2, r5, r7
 8005ab4:	4f3d      	ldr	r7, [pc, #244]	; (8005bac <D64_S6D8_S6D4_S2D2_GENERIC+0x430>)
 8005ab6:	fb24 5507 	smlad	r5, r4, r7, r5
 8005aba:	4f3d      	ldr	r7, [pc, #244]	; (8005bb0 <D64_S6D8_S6D4_S2D2_GENERIC+0x434>)
 8005abc:	fb22 f207 	smuad	r2, r2, r7
 8005ac0:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8005bb8 <D64_S6D8_S6D4_S2D2_GENERIC+0x43c>
 8005ac4:	fb24 220e 	smlad	r2, r4, lr, r2
 8005ac8:	4c34      	ldr	r4, [pc, #208]	; (8005b9c <D64_S6D8_S6D4_S2D2_GENERIC+0x420>)
 8005aca:	fb23 0004 	smlad	r0, r3, r4, r0
 8005ace:	fb21 000c 	smlad	r0, r1, ip, r0
 8005ad2:	4c33      	ldr	r4, [pc, #204]	; (8005ba0 <D64_S6D8_S6D4_S2D2_GENERIC+0x424>)
 8005ad4:	fb23 6604 	smlad	r6, r3, r4, r6
 8005ad8:	4c32      	ldr	r4, [pc, #200]	; (8005ba4 <D64_S6D8_S6D4_S2D2_GENERIC+0x428>)
 8005ada:	fb21 6604 	smlad	r6, r1, r4, r6
 8005ade:	f104 74d5 	add.w	r4, r4, #27918336	; 0x1aa0000
 8005ae2:	960c      	str	r6, [sp, #48]	; 0x30
 8005ae4:	f504 7403 	add.w	r4, r4, #524	; 0x20c
 8005ae8:	fb23 5504 	smlad	r5, r3, r4, r5
 8005aec:	3c7c      	subs	r4, #124	; 0x7c
 8005aee:	fb21 5404 	smlad	r4, r1, r4, r5
 8005af2:	4d2d      	ldr	r5, [pc, #180]	; (8005ba8 <D64_S6D8_S6D4_S2D2_GENERIC+0x42c>)
 8005af4:	9406      	str	r4, [sp, #24]
 8005af6:	fb23 2205 	smlad	r2, r3, r5, r2
 8005afa:	4f2c      	ldr	r7, [pc, #176]	; (8005bac <D64_S6D8_S6D4_S2D2_GENERIC+0x430>)
 8005afc:	fb21 2207 	smlad	r2, r1, r7, r2
 8005b00:	4f2b      	ldr	r7, [pc, #172]	; (8005bb0 <D64_S6D8_S6D4_S2D2_GENERIC+0x434>)
 8005b02:	9205      	str	r2, [sp, #20]
 8005b04:	fb23 f307 	smuad	r3, r3, r7
 8005b08:	fb21 330e 	smlad	r3, r1, lr, r3
 8005b0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b12:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 8005b16:	4418      	add	r0, r3
 8005b18:	f100 4370 	add.w	r3, r0, #4026531840	; 0xf0000000
 8005b1c:	b192      	cbz	r2, 8005b44 <D64_S6D8_S6D4_S2D2_GENERIC+0x3c8>
 8005b1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b20:	441a      	add	r2, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005b26:	1a80      	subs	r0, r0, r2
 8005b28:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005b2a:	17c5      	asrs	r5, r0, #31
 8005b2c:	fba0 6702 	umull	r6, r7, r0, r2
 8005b30:	fb02 7705 	mla	r7, r2, r5, r7
 8005b34:	f116 4000 	adds.w	r0, r6, #2147483648	; 0x80000000
 8005b38:	f147 0100 	adc.w	r1, r7, #0
 8005b3c:	004a      	lsls	r2, r1, #1
 8005b3e:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
 8005b42:	4613      	mov	r3, r2
 8005b44:	9a00      	ldr	r2, [sp, #0]
 8005b46:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005b48:	f8b2 404a 	ldrh.w	r4, [r2, #74]	; 0x4a
 8005b4c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8005b50:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005b54:	2100      	movs	r1, #0
 8005b56:	fbc5 0103 	smlal	r0, r1, r5, r3
 8005b5a:	2c00      	cmp	r4, #0
 8005b5c:	f43f ae3f 	beq.w	80057de <D64_S6D8_S6D4_S2D2_GENERIC+0x62>
 8005b60:	2c02      	cmp	r4, #2
 8005b62:	d02b      	beq.n	8005bbc <D64_S6D8_S6D4_S2D2_GENERIC+0x440>
 8005b64:	9b01      	ldr	r3, [sp, #4]
 8005b66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005b6a:	fb02 f203 	mul.w	r2, r2, r3
 8005b6e:	f301 0317 	ssat	r3, #24, r1
 8005b72:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005b74:	508b      	str	r3, [r1, r2]
 8005b76:	e63a      	b.n	80057ee <D64_S6D8_S6D4_S2D2_GENERIC+0x72>
 8005b78:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005b7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b7c:	0680      	lsls	r0, r0, #26
 8005b7e:	e9d2 1300 	ldrd	r1, r3, [r2]
 8005b82:	f102 0208 	add.w	r2, r2, #8
 8005b86:	d522      	bpl.n	8005bce <D64_S6D8_S6D4_S2D2_GENERIC+0x452>
 8005b88:	ba49      	rev16	r1, r1
 8005b8a:	ba5b      	rev16	r3, r3
 8005b8c:	920d      	str	r2, [sp, #52]	; 0x34
 8005b8e:	e66a      	b.n	8005866 <D64_S6D8_S6D4_S2D2_GENERIC+0xea>
 8005b90:	200000ac 	.word	0x200000ac
 8005b94:	200004ac 	.word	0x200004ac
 8005b98:	0001fffe 	.word	0x0001fffe
 8005b9c:	00150006 	.word	0x00150006
 8005ba0:	015000d8 	.word	0x015000d8
 8005ba4:	00780038 	.word	0x00780038
 8005ba8:	007800d8 	.word	0x007800d8
 8005bac:	015001c8 	.word	0x015001c8
 8005bb0:	00010006 	.word	0x00010006
 8005bb4:	200008ac 	.word	0x200008ac
 8005bb8:	00150038 	.word	0x00150038
 8005bbc:	f301 0317 	ssat	r3, #24, r1
 8005bc0:	9901      	ldr	r1, [sp, #4]
 8005bc2:	fb02 f201 	mul.w	r2, r2, r1
 8005bc6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005bc8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005bcc:	e60f      	b.n	80057ee <D64_S6D8_S6D4_S2D2_GENERIC+0x72>
 8005bce:	920d      	str	r2, [sp, #52]	; 0x34
 8005bd0:	e649      	b.n	8005866 <D64_S6D8_S6D4_S2D2_GENERIC+0xea>
 8005bd2:	465c      	mov	r4, fp
 8005bd4:	464f      	mov	r7, r9
 8005bd6:	9b00      	ldr	r3, [sp, #0]
 8005bd8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bda:	6019      	str	r1, [r3, #0]
 8005bdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bde:	6059      	str	r1, [r3, #4]
 8005be0:	9908      	ldr	r1, [sp, #32]
 8005be2:	6099      	str	r1, [r3, #8]
 8005be4:	461a      	mov	r2, r3
 8005be6:	9907      	ldr	r1, [sp, #28]
 8005be8:	60d9      	str	r1, [r3, #12]
 8005bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bec:	6114      	str	r4, [r2, #16]
 8005bee:	6159      	str	r1, [r3, #20]
 8005bf0:	9905      	ldr	r1, [sp, #20]
 8005bf2:	6199      	str	r1, [r3, #24]
 8005bf4:	9906      	ldr	r1, [sp, #24]
 8005bf6:	61d9      	str	r1, [r3, #28]
 8005bf8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bfa:	6219      	str	r1, [r3, #32]
 8005bfc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005bfe:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005c00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005c02:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005c04:	625f      	str	r7, [r3, #36]	; 0x24
 8005c06:	2000      	movs	r0, #0
 8005c08:	6319      	str	r1, [r3, #48]	; 0x30
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
 8005c0c:	b01d      	add	sp, #116	; 0x74
 8005c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c12:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005c14:	e7df      	b.n	8005bd6 <D64_S6D8_S6D4_S2D2_GENERIC+0x45a>
 8005c16:	bf00      	nop

08005c18 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP>:
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	b0a5      	sub	sp, #148	; 0x94
 8005c1e:	4613      	mov	r3, r2
 8005c20:	921e      	str	r2, [sp, #120]	; 0x78
 8005c22:	9013      	str	r0, [sp, #76]	; 0x4c
 8005c24:	f8b2 0042 	ldrh.w	r0, [r2, #66]	; 0x42
 8005c28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c2a:	9210      	str	r2, [sp, #64]	; 0x40
 8005c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c2e:	9211      	str	r2, [sp, #68]	; 0x44
 8005c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c32:	9223      	str	r2, [sp, #140]	; 0x8c
 8005c34:	695a      	ldr	r2, [r3, #20]
 8005c36:	9207      	str	r2, [sp, #28]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	9208      	str	r2, [sp, #32]
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	920a      	str	r2, [sp, #40]	; 0x28
 8005c40:	6a1a      	ldr	r2, [r3, #32]
 8005c42:	9206      	str	r2, [sp, #24]
 8005c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c46:	9209      	str	r2, [sp, #36]	; 0x24
 8005c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c4a:	9212      	str	r2, [sp, #72]	; 0x48
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	920e      	str	r2, [sp, #56]	; 0x38
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	920d      	str	r2, [sp, #52]	; 0x34
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	920c      	str	r2, [sp, #48]	; 0x30
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	9021      	str	r0, [sp, #132]	; 0x84
 8005c60:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	921f      	str	r2, [sp, #124]	; 0x7c
 8005c68:	9320      	str	r3, [sp, #128]	; 0x80
 8005c6a:	9122      	str	r1, [sp, #136]	; 0x88
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	f000 8272 	beq.w	8006156 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x53e>
 8005c72:	2300      	movs	r3, #0
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	e00e      	b.n	8005c96 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x7e>
 8005c78:	9c01      	ldr	r4, [sp, #4]
 8005c7a:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005c7c:	f306 010f 	ssat	r1, #16, r6
 8005c80:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8005c84:	4621      	mov	r1, r4
 8005c86:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005c88:	3101      	adds	r1, #1
 8005c8a:	4281      	cmp	r1, r0
 8005c8c:	9101      	str	r1, [sp, #4]
 8005c8e:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
 8005c92:	f000 8262 	beq.w	800615a <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x542>
 8005c96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005c98:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005c9c:	310c      	adds	r1, #12
 8005c9e:	9113      	str	r1, [sp, #76]	; 0x4c
 8005ca0:	ba52      	rev16	r2, r2
 8005ca2:	ba5b      	rev16	r3, r3
 8005ca4:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8005ca8:	fa91 fc91 	rev16.w	ip, r1
 8005cac:	fa5f f983 	uxtb.w	r9, r3
 8005cb0:	f3c3 2a07 	ubfx	sl, r3, #8, #8
 8005cb4:	0e19      	lsrs	r1, r3, #24
 8005cb6:	fa5f f48c 	uxtb.w	r4, ip
 8005cba:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005cbe:	4ecb      	ldr	r6, [pc, #812]	; (8005fec <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d4>)
 8005cc0:	9302      	str	r3, [sp, #8]
 8005cc2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8005cc6:	b2d5      	uxtb	r5, r2
 8005cc8:	9404      	str	r4, [sp, #16]
 8005cca:	4bc9      	ldr	r3, [pc, #804]	; (8005ff0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d8>)
 8005ccc:	4cc9      	ldr	r4, [pc, #804]	; (8005ff4 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3dc>)
 8005cce:	f856 8020 	ldr.w	r8, [r6, r0, lsl #2]
 8005cd2:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 8005cd6:	9103      	str	r1, [sp, #12]
 8005cd8:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8005cdc:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8005ce0:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8005ce4:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8005ce8:	4fc3      	ldr	r7, [pc, #780]	; (8005ff8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3e0>)
 8005cea:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8005cee:	931a      	str	r3, [sp, #104]	; 0x68
 8005cf0:	ea4f 631c 	mov.w	r3, ip, lsr #24
 8005cf4:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 8005cf8:	9305      	str	r3, [sp, #20]
 8005cfa:	4bbd      	ldr	r3, [pc, #756]	; (8005ff0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d8>)
 8005cfc:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8005d00:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 8005d04:	ea07 074e 	and.w	r7, r7, lr, lsl #1
 8005d08:	f853 c02b 	ldr.w	ip, [r3, fp, lsl #2]
 8005d0c:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005d10:	eb07 4711 	add.w	r7, r7, r1, lsr #16
 8005d14:	fa17 f78c 	uxtah	r7, r7, ip
 8005d18:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8005d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d1e:	0e12      	lsrs	r2, r2, #24
 8005d20:	441f      	add	r7, r3
 8005d22:	4bb3      	ldr	r3, [pc, #716]	; (8005ff0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d8>)
 8005d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d28:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8005d2c:	eb0c 0e4e 	add.w	lr, ip, lr, lsl #1
 8005d30:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8005d34:	4bae      	ldr	r3, [pc, #696]	; (8005ff0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d8>)
 8005d36:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8005d3a:	fa1c fc80 	uxtah	ip, ip, r0
 8005d3e:	0c00      	lsrs	r0, r0, #16
 8005d40:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8005d44:	4baa      	ldr	r3, [pc, #680]	; (8005ff0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d8>)
 8005d46:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8005d4a:	fa1c fc83 	uxtah	ip, ip, r3
 8005d4e:	4ba8      	ldr	r3, [pc, #672]	; (8005ff0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d8>)
 8005d50:	fa10 f088 	uxtah	r0, r0, r8
 8005d54:	901c      	str	r0, [sp, #112]	; 0x70
 8005d56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005d5a:	fa1e fe80 	uxtah	lr, lr, r0
 8005d5e:	48a5      	ldr	r0, [pc, #660]	; (8005ff4 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3dc>)
 8005d60:	f850 302b 	ldr.w	r3, [r0, fp, lsl #2]
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	f856 302b 	ldr.w	r3, [r6, fp, lsl #2]
 8005d6a:	930d      	str	r3, [sp, #52]	; 0x34
 8005d6c:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8005d70:	fa18 f883 	uxtah	r8, r8, r3
 8005d74:	4ba0      	ldr	r3, [pc, #640]	; (8005ff8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3e0>)
 8005d76:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005d7a:	ea03 0b44 	and.w	fp, r3, r4, lsl #1
 8005d7e:	0c24      	lsrs	r4, r4, #16
 8005d80:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
 8005d84:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8005d88:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8005d8c:	9215      	str	r2, [sp, #84]	; 0x54
 8005d8e:	4a98      	ldr	r2, [pc, #608]	; (8005ff0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d8>)
 8005d90:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 8005d94:	f852 802a 	ldr.w	r8, [r2, sl, lsl #2]
 8005d98:	f856 2029 	ldr.w	r2, [r6, r9, lsl #2]
 8005d9c:	9016      	str	r0, [sp, #88]	; 0x58
 8005d9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005da0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005da2:	9b03      	ldr	r3, [sp, #12]
 8005da4:	9802      	ldr	r0, [sp, #8]
 8005da6:	b289      	uxth	r1, r1
 8005da8:	fa12 f985 	uxtah	r9, r2, r5
 8005dac:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 8005db0:	4a8f      	ldr	r2, [pc, #572]	; (8005ff0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d8>)
 8005db2:	4d90      	ldr	r5, [pc, #576]	; (8005ff4 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3dc>)
 8005db4:	44de      	add	lr, fp
 8005db6:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8005dba:	462b      	mov	r3, r5
 8005dbc:	f855 502a 	ldr.w	r5, [r5, sl, lsl #2]
 8005dc0:	950b      	str	r5, [sp, #44]	; 0x2c
 8005dc2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8005dc6:	9518      	str	r5, [sp, #96]	; 0x60
 8005dc8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005dca:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 8005dce:	44ae      	add	lr, r5
 8005dd0:	4616      	mov	r6, r2
 8005dd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dd4:	9a04      	ldr	r2, [sp, #16]
 8005dd6:	4429      	add	r1, r5
 8005dd8:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
 8005ddc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8005de0:	960c      	str	r6, [sp, #48]	; 0x30
 8005de2:	4e82      	ldr	r6, [pc, #520]	; (8005fec <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d4>)
 8005de4:	f856 2020 	ldr.w	r2, [r6, r0, lsl #2]
 8005de8:	9803      	ldr	r0, [sp, #12]
 8005dea:	9202      	str	r2, [sp, #8]
 8005dec:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8005df0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005df4:	930e      	str	r3, [sp, #56]	; 0x38
 8005df6:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8005dfa:	9b00      	ldr	r3, [sp, #0]
 8005dfc:	f856 2020 	ldr.w	r2, [r6, r0, lsl #2]
 8005e00:	9219      	str	r2, [sp, #100]	; 0x64
 8005e02:	ea49 09d1 	orr.w	r9, r9, r1, lsr #3
 8005e06:	08ff      	lsrs	r7, r7, #3
 8005e08:	497b      	ldr	r1, [pc, #492]	; (8005ff8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3e0>)
 8005e0a:	4a79      	ldr	r2, [pc, #484]	; (8005ff0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d8>)
 8005e0c:	043f      	lsls	r7, r7, #16
 8005e0e:	ea47 0ede 	orr.w	lr, r7, lr, lsr #3
 8005e12:	ea01 0343 	and.w	r3, r1, r3, lsl #1
 8005e16:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005e18:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8005e1c:	449c      	add	ip, r3
 8005e1e:	9b00      	ldr	r3, [sp, #0]
 8005e20:	44bc      	add	ip, r7
 8005e22:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8005e24:	0c18      	lsrs	r0, r3, #16
 8005e26:	ea01 0344 	and.w	r3, r1, r4, lsl #1
 8005e2a:	0c24      	lsrs	r4, r4, #16
 8005e2c:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8005e30:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8005e32:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005e34:	443b      	add	r3, r7
 8005e36:	fa13 f388 	uxtah	r3, r3, r8
 8005e3a:	f852 e021 	ldr.w	lr, [r2, r1, lsl #2]
 8005e3e:	9a04      	ldr	r2, [sp, #16]
 8005e40:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005e44:	486b      	ldr	r0, [pc, #428]	; (8005ff4 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3dc>)
 8005e46:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
 8005e4a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8005e4e:	9203      	str	r2, [sp, #12]
 8005e50:	460a      	mov	r2, r1
 8005e52:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8005e56:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8005e5a:	921a      	str	r2, [sp, #104]	; 0x68
 8005e5c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005e5e:	910f      	str	r1, [sp, #60]	; 0x3c
 8005e60:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8005e64:	9004      	str	r0, [sp, #16]
 8005e66:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8005e6a:	901c      	str	r0, [sp, #112]	; 0x70
 8005e6c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005e70:	08d8      	lsrs	r0, r3, #3
 8005e72:	ea40 4c0c 	orr.w	ip, r0, ip, lsl #16
 8005e76:	495e      	ldr	r1, [pc, #376]	; (8005ff0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d8>)
 8005e78:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005e7a:	4b5f      	ldr	r3, [pc, #380]	; (8005ff8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3e0>)
 8005e7c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8005e80:	911b      	str	r1, [sp, #108]	; 0x6c
 8005e82:	ea03 0340 	and.w	r3, r3, r0, lsl #1
 8005e86:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005e88:	f8cd c000 	str.w	ip, [sp]
 8005e8c:	441c      	add	r4, r3
 8005e8e:	eb04 4818 	add.w	r8, r4, r8, lsr #16
 8005e92:	fa1f f48b 	uxth.w	r4, fp
 8005e96:	0c02      	lsrs	r2, r0, #16
 8005e98:	fa14 f481 	uxtah	r4, r4, r1
 8005e9c:	0c08      	lsrs	r0, r1, #16
 8005e9e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005ea0:	4b53      	ldr	r3, [pc, #332]	; (8005ff0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3d8>)
 8005ea2:	fa10 f081 	uxtah	r0, r0, r1
 8005ea6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005eaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005eac:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 8005eb0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005eb4:	9902      	ldr	r1, [sp, #8]
 8005eb6:	fa1c fc8a 	uxtah	ip, ip, sl
 8005eba:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 8005ebe:	fa1a fa81 	uxtah	sl, sl, r1
 8005ec2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ec4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8005ec8:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005ecc:	fa18 f881 	uxtah	r8, r8, r1
 8005ed0:	eb00 4b1b 	add.w	fp, r0, fp, lsr #16
 8005ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ed6:	4c48      	ldr	r4, [pc, #288]	; (8005ff8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3e0>)
 8005ed8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8005edc:	fa1b fb85 	uxtah	fp, fp, r5
 8005ee0:	9d05      	ldr	r5, [sp, #20]
 8005ee2:	ea04 0441 	and.w	r4, r4, r1, lsl #1
 8005ee6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005eea:	1914      	adds	r4, r2, r4
 8005eec:	940b      	str	r4, [sp, #44]	; 0x2c
 8005eee:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8005ef0:	9a05      	ldr	r2, [sp, #20]
 8005ef2:	0c08      	lsrs	r0, r1, #16
 8005ef4:	b29d      	uxth	r5, r3
 8005ef6:	9902      	ldr	r1, [sp, #8]
 8005ef8:	fa15 f584 	uxtah	r5, r5, r4
 8005efc:	eb05 4511 	add.w	r5, r5, r1, lsr #16
 8005f00:	9903      	ldr	r1, [sp, #12]
 8005f02:	0c24      	lsrs	r4, r4, #16
 8005f04:	fa14 f481 	uxtah	r4, r4, r1
 8005f08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005f0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005f0e:	4b3a      	ldr	r3, [pc, #232]	; (8005ff8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3e0>)
 8005f10:	9402      	str	r4, [sp, #8]
 8005f12:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8005f16:	461c      	mov	r4, r3
 8005f18:	eb0a 0a48 	add.w	sl, sl, r8, lsl #1
 8005f1c:	ea04 0847 	and.w	r8, r4, r7, lsl #1
 8005f20:	0c3f      	lsrs	r7, r7, #16
 8005f22:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8005f26:	4f33      	ldr	r7, [pc, #204]	; (8005ff4 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3dc>)
 8005f28:	44c2      	add	sl, r8
 8005f2a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8005f2e:	f856 8022 	ldr.w	r8, [r6, r2, lsl #2]
 8005f32:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005f34:	ea03 0341 	and.w	r3, r3, r1, lsl #1
 8005f38:	eb0a 4a1e 	add.w	sl, sl, lr, lsr #16
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4463      	add	r3, ip
 8005f40:	fa1a fa82 	uxtah	sl, sl, r2
 8005f44:	eb05 4c12 	add.w	ip, r5, r2, lsr #16
 8005f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f4a:	9c02      	ldr	r4, [sp, #8]
 8005f4c:	460e      	mov	r6, r1
 8005f4e:	ea06 0542 	and.w	r5, r6, r2, lsl #1
 8005f52:	fa13 f38e 	uxtah	r3, r3, lr
 8005f56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f5c:	eb03 034e 	add.w	r3, r3, lr, lsl #1
 8005f60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f64:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 8005f68:	9402      	str	r4, [sp, #8]
 8005f6a:	9c04      	ldr	r4, [sp, #16]
 8005f6c:	ea06 0142 	and.w	r1, r6, r2, lsl #1
 8005f70:	ea06 0e44 	and.w	lr, r6, r4, lsl #1
 8005f74:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005f76:	f8cd e014 	str.w	lr, [sp, #20]
 8005f7a:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 8005f7e:	0c24      	lsrs	r4, r4, #16
 8005f80:	9404      	str	r4, [sp, #16]
 8005f82:	4428      	add	r0, r5
 8005f84:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005f86:	4461      	add	r1, ip
 8005f88:	08c0      	lsrs	r0, r0, #3
 8005f8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f8e:	08db      	lsrs	r3, r3, #3
 8005f90:	fa1c fc84 	uxtah	ip, ip, r4
 8005f94:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8005f98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005f9c:	9c05      	ldr	r4, [sp, #20]
 8005f9e:	9802      	ldr	r0, [sp, #8]
 8005fa0:	ea06 0547 	and.w	r5, r6, r7, lsl #1
 8005fa4:	9e03      	ldr	r6, [sp, #12]
 8005fa6:	4420      	add	r0, r4
 8005fa8:	fa15 f582 	uxtah	r5, r5, r2
 8005fac:	9c04      	ldr	r4, [sp, #16]
 8005fae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fb0:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 8005fb4:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8005fb8:	0c3f      	lsrs	r7, r7, #16
 8005fba:	ea4f 0bd2 	mov.w	fp, r2, lsr #3
 8005fbe:	940c      	str	r4, [sp, #48]	; 0x30
 8005fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8005fc4:	eb0c 0447 	add.w	r4, ip, r7, lsl #1
 8005fc8:	940d      	str	r4, [sp, #52]	; 0x34
 8005fca:	fa1e f488 	uxtah	r4, lr, r8
 8005fce:	ea4f 0ada 	mov.w	sl, sl, lsr #3
 8005fd2:	940e      	str	r4, [sp, #56]	; 0x38
 8005fd4:	08d2      	lsrs	r2, r2, #3
 8005fd6:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8005fda:	08c9      	lsrs	r1, r1, #3
 8005fdc:	940f      	str	r4, [sp, #60]	; 0x3c
 8005fde:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8005fe2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005fe6:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8005fea:	e007      	b.n	8005ffc <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x3e4>
 8005fec:	200000ac 	.word	0x200000ac
 8005ff0:	200008ac 	.word	0x200008ac
 8005ff4:	200004ac 	.word	0x200004ac
 8005ff8:	0001fffe 	.word	0x0001fffe
 8005ffc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005ffe:	fb29 440e 	smlad	r4, r9, lr, r4
 8006002:	9402      	str	r4, [sp, #8]
 8006004:	9d06      	ldr	r5, [sp, #24]
 8006006:	4c68      	ldr	r4, [pc, #416]	; (80061a8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x590>)
 8006008:	fb29 5504 	smlad	r5, r9, r4, r5
 800600c:	4f67      	ldr	r7, [pc, #412]	; (80061ac <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x594>)
 800600e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006010:	fb20 5507 	smlad	r5, r0, r7, r5
 8006014:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 80061cc <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5b4>
 8006018:	9e00      	ldr	r6, [sp, #0]
 800601a:	fb26 550b 	smlad	r5, r6, fp, r5
 800601e:	9503      	str	r5, [sp, #12]
 8006020:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006022:	4d63      	ldr	r5, [pc, #396]	; (80061b0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x598>)
 8006024:	fb29 7c05 	smlad	ip, r9, r5, r7
 8006028:	f1a5 6594 	sub.w	r5, r5, #77594624	; 0x4a00000
 800602c:	f2a5 45a6 	subw	r5, r5, #1190	; 0x4a6
 8006030:	fb20 cc05 	smlad	ip, r0, r5, ip
 8006034:	4f5f      	ldr	r7, [pc, #380]	; (80061b4 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x59c>)
 8006036:	fb26 cc07 	smlad	ip, r6, r7, ip
 800603a:	4c5f      	ldr	r4, [pc, #380]	; (80061b8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5a0>)
 800603c:	9f08      	ldr	r7, [sp, #32]
 800603e:	fb29 7504 	smlad	r5, r9, r4, r7
 8006042:	4f5e      	ldr	r7, [pc, #376]	; (80061bc <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5a4>)
 8006044:	fb20 5507 	smlad	r5, r0, r7, r5
 8006048:	f5a7 77d5 	sub.w	r7, r7, #426	; 0x1aa
 800604c:	fb26 5507 	smlad	r5, r6, r7, r5
 8006050:	4f5b      	ldr	r7, [pc, #364]	; (80061c0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5a8>)
 8006052:	9c07      	ldr	r4, [sp, #28]
 8006054:	fb29 4407 	smlad	r4, r9, r7, r4
 8006058:	4606      	mov	r6, r0
 800605a:	485a      	ldr	r0, [pc, #360]	; (80061c4 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5ac>)
 800605c:	fb26 4400 	smlad	r4, r6, r0, r4
 8006060:	9800      	ldr	r0, [sp, #0]
 8006062:	4680      	mov	r8, r0
 8006064:	4858      	ldr	r0, [pc, #352]	; (80061c8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5b0>)
 8006066:	fb28 4400 	smlad	r4, r8, r0, r4
 800606a:	f8df a164 	ldr.w	sl, [pc, #356]	; 80061d0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5b8>
 800606e:	fb29 f00a 	smuad	r0, r9, sl
 8006072:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80061d4 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5bc>
 8006076:	fb26 0009 	smlad	r0, r6, r9, r0
 800607a:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80061d8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5c0>
 800607e:	9e00      	ldr	r6, [sp, #0]
 8006080:	fb26 0008 	smlad	r0, r6, r8, r0
 8006084:	9e03      	ldr	r6, [sp, #12]
 8006086:	fb22 6e0e 	smlad	lr, r2, lr, r6
 800608a:	4e47      	ldr	r6, [pc, #284]	; (80061a8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x590>)
 800608c:	fb22 cc06 	smlad	ip, r2, r6, ip
 8006090:	4e46      	ldr	r6, [pc, #280]	; (80061ac <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x594>)
 8006092:	fb23 cc06 	smlad	ip, r3, r6, ip
 8006096:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800609a:	4e45      	ldr	r6, [pc, #276]	; (80061b0 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x598>)
 800609c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80060a0:	fb22 5506 	smlad	r5, r2, r6, r5
 80060a4:	f1a6 6694 	sub.w	r6, r6, #77594624	; 0x4a00000
 80060a8:	f2a6 46a6 	subw	r6, r6, #1190	; 0x4a6
 80060ac:	fb23 5506 	smlad	r5, r3, r6, r5
 80060b0:	4e40      	ldr	r6, [pc, #256]	; (80061b4 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x59c>)
 80060b2:	fb21 5506 	smlad	r5, r1, r6, r5
 80060b6:	9506      	str	r5, [sp, #24]
 80060b8:	4d3f      	ldr	r5, [pc, #252]	; (80061b8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5a0>)
 80060ba:	fb22 4c05 	smlad	ip, r2, r5, r4
 80060be:	4c3f      	ldr	r4, [pc, #252]	; (80061bc <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5a4>)
 80060c0:	fb23 cc04 	smlad	ip, r3, r4, ip
 80060c4:	f5a4 74d5 	sub.w	r4, r4, #426	; 0x1aa
 80060c8:	fb21 c504 	smlad	r5, r1, r4, ip
 80060cc:	950a      	str	r5, [sp, #40]	; 0x28
 80060ce:	fb22 0007 	smlad	r0, r2, r7, r0
 80060d2:	4c3c      	ldr	r4, [pc, #240]	; (80061c4 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5ac>)
 80060d4:	fb23 0504 	smlad	r5, r3, r4, r0
 80060d8:	483b      	ldr	r0, [pc, #236]	; (80061c8 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x5b0>)
 80060da:	fb21 5000 	smlad	r0, r1, r0, r5
 80060de:	9008      	str	r0, [sp, #32]
 80060e0:	fb22 f20a 	smuad	r2, r2, sl
 80060e4:	fb23 2209 	smlad	r2, r3, r9, r2
 80060e8:	fb21 2308 	smlad	r3, r1, r8, r2
 80060ec:	9c02      	ldr	r4, [sp, #8]
 80060ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 80060f0:	9307      	str	r3, [sp, #28]
 80060f2:	10a2      	asrs	r2, r4, #2
 80060f4:	eb02 036e 	add.w	r3, r2, lr, asr #1
 80060f8:	440b      	add	r3, r1
 80060fa:	f103 4352 	add.w	r3, r3, #3523215360	; 0xd2000000
 80060fe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006100:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8006102:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006106:	4419      	add	r1, r3
 8006108:	4608      	mov	r0, r1
 800610a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800610c:	f8b4 404a 	ldrh.w	r4, [r4, #74]	; 0x4a
 8006110:	1a40      	subs	r0, r0, r1
 8006112:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006114:	17c5      	asrs	r5, r0, #31
 8006116:	fba0 6701 	umull	r6, r7, r0, r1
 800611a:	f116 4000 	adds.w	r0, r6, #2147483648	; 0x80000000
 800611e:	fb01 7705 	mla	r7, r1, r5, r7
 8006122:	f147 0100 	adc.w	r1, r7, #0
 8006126:	0049      	lsls	r1, r1, #1
 8006128:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800612a:	9110      	str	r1, [sp, #64]	; 0x40
 800612c:	460d      	mov	r5, r1
 800612e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006132:	2100      	movs	r1, #0
 8006134:	fbc6 0105 	smlal	r0, r1, r6, r5
 8006138:	460e      	mov	r6, r1
 800613a:	2c00      	cmp	r4, #0
 800613c:	f43f ad9c 	beq.w	8005c78 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x60>
 8006140:	2c02      	cmp	r4, #2
 8006142:	d029      	beq.n	8006198 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x580>
 8006144:	9901      	ldr	r1, [sp, #4]
 8006146:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8006148:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800614c:	f306 0117 	ssat	r1, #24, r6
 8006150:	5021      	str	r1, [r4, r0]
 8006152:	9901      	ldr	r1, [sp, #4]
 8006154:	e597      	b.n	8005c86 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x6e>
 8006156:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
 800615a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800615c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800615e:	600c      	str	r4, [r1, #0]
 8006160:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006162:	604c      	str	r4, [r1, #4]
 8006164:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006166:	608c      	str	r4, [r1, #8]
 8006168:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800616a:	60cc      	str	r4, [r1, #12]
 800616c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800616e:	610c      	str	r4, [r1, #16]
 8006170:	9c07      	ldr	r4, [sp, #28]
 8006172:	614c      	str	r4, [r1, #20]
 8006174:	9c08      	ldr	r4, [sp, #32]
 8006176:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006178:	618c      	str	r4, [r1, #24]
 800617a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800617c:	61cc      	str	r4, [r1, #28]
 800617e:	9c06      	ldr	r4, [sp, #24]
 8006180:	620c      	str	r4, [r1, #32]
 8006182:	e9c1 030b 	strd	r0, r3, [r1, #44]	; 0x2c
 8006186:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006188:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800618a:	638b      	str	r3, [r1, #56]	; 0x38
 800618c:	2000      	movs	r0, #0
 800618e:	e9c1 4209 	strd	r4, r2, [r1, #36]	; 0x24
 8006192:	b025      	add	sp, #148	; 0x94
 8006194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006198:	9c01      	ldr	r4, [sp, #4]
 800619a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800619c:	f306 0117 	ssat	r1, #24, r6
 80061a0:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 80061a4:	4621      	mov	r1, r4
 80061a6:	e56e      	b.n	8005c86 <D96_S6D8_S6D6_S2D2_1CH_HTONS_VOL_HP+0x6e>
 80061a8:	01c800fc 	.word	0x01c800fc
 80061ac:	007e0038 	.word	0x007e0038
 80061b0:	0d670b28 	.word	0x0d670b28
 80061b4:	048902f4 	.word	0x048902f4
 80061b8:	0d670f42 	.word	0x0d670f42
 80061bc:	107d10ec 	.word	0x107d10ec
 80061c0:	01c802f4 	.word	0x01c802f4
 80061c4:	04890682 	.word	0x04890682
 80061c8:	08c70b28 	.word	0x08c70b28
 80061cc:	00150006 	.word	0x00150006
 80061d0:	00010006 	.word	0x00010006
 80061d4:	00150038 	.word	0x00150038
 80061d8:	007e00fc 	.word	0x007e00fc

080061dc <D96_S6D8_S6D6_S2D2_GENERIC>:
 80061dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e0:	4613      	mov	r3, r2
 80061e2:	b0a7      	sub	sp, #156	; 0x9c
 80061e4:	e9cd 2002 	strd	r2, r0, [sp, #8]
 80061e8:	f8b2 0042 	ldrh.w	r0, [r2, #66]	; 0x42
 80061ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061ee:	921f      	str	r2, [sp, #124]	; 0x7c
 80061f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f2:	9220      	str	r2, [sp, #128]	; 0x80
 80061f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f6:	9225      	str	r2, [sp, #148]	; 0x94
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	9212      	str	r2, [sp, #72]	; 0x48
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	920c      	str	r2, [sp, #48]	; 0x30
 8006200:	69da      	ldr	r2, [r3, #28]
 8006202:	920e      	str	r2, [sp, #56]	; 0x38
 8006204:	6a1a      	ldr	r2, [r3, #32]
 8006206:	920f      	str	r2, [sp, #60]	; 0x3c
 8006208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800620a:	920d      	str	r2, [sp, #52]	; 0x34
 800620c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800620e:	9213      	str	r2, [sp, #76]	; 0x4c
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	9211      	str	r2, [sp, #68]	; 0x44
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	9210      	str	r2, [sp, #64]	; 0x40
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	9209      	str	r2, [sp, #36]	; 0x24
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	9207      	str	r2, [sp, #28]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	9022      	str	r0, [sp, #136]	; 0x88
 8006224:	9206      	str	r2, [sp, #24]
 8006226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622a:	9221      	str	r2, [sp, #132]	; 0x84
 800622c:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8006230:	2800      	cmp	r0, #0
 8006232:	f000 82ca 	beq.w	80067ca <D96_S6D8_S6D6_S2D2_GENERIC+0x5ee>
 8006236:	931e      	str	r3, [sp, #120]	; 0x78
 8006238:	2300      	movs	r3, #0
 800623a:	9304      	str	r3, [sp, #16]
 800623c:	e012      	b.n	8006264 <D96_S6D8_S6D6_S2D2_GENERIC+0x88>
 800623e:	9a04      	ldr	r2, [sp, #16]
 8006240:	f306 030f 	ssat	r3, #16, r6
 8006244:	fb01 f102 	mul.w	r1, r1, r2
 8006248:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800624a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800624e:	9b04      	ldr	r3, [sp, #16]
 8006250:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006252:	3301      	adds	r3, #1
 8006254:	4293      	cmp	r3, r2
 8006256:	9304      	str	r3, [sp, #16]
 8006258:	f000 82b8 	beq.w	80067cc <D96_S6D8_S6D6_S2D2_GENERIC+0x5f0>
 800625c:	9b02      	ldr	r3, [sp, #8]
 800625e:	9413      	str	r4, [sp, #76]	; 0x4c
 8006260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006262:	931e      	str	r3, [sp, #120]	; 0x78
 8006264:	9b02      	ldr	r3, [sp, #8]
 8006266:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 800626a:	2a01      	cmp	r2, #1
 800626c:	f000 829f 	beq.w	80067ae <D96_S6D8_S6D6_S2D2_GENERIC+0x5d2>
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	b210      	sxth	r0, r2
 8006274:	9d03      	ldr	r5, [sp, #12]
 8006276:	eb00 0e40 	add.w	lr, r0, r0, lsl #1
 800627a:	4254      	negs	r4, r2
 800627c:	0083      	lsls	r3, r0, #2
 800627e:	eb05 010e 	add.w	r1, r5, lr
 8006282:	eb01 0c04 	add.w	ip, r1, r4
 8006286:	181f      	adds	r7, r3, r0
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	eb0c 0307 	add.w	r3, ip, r7
 800628e:	191e      	adds	r6, r3, r4
 8006290:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8006294:	f81c 8007 	ldrb.w	r8, [ip, r7]
 8006298:	f815 900e 	ldrb.w	r9, [r5, lr]
 800629c:	f815 e002 	ldrb.w	lr, [r5, r2]
 80062a0:	5d1a      	ldrb	r2, [r3, r4]
 80062a2:	f813 c014 	ldrb.w	ip, [r3, r4, lsl #1]
 80062a6:	5d09      	ldrb	r1, [r1, r4]
 80062a8:	f895 a000 	ldrb.w	sl, [r5]
 80062ac:	eb06 0744 	add.w	r7, r6, r4, lsl #1
 80062b0:	eb07 0b00 	add.w	fp, r7, r0
 80062b4:	5c3b      	ldrb	r3, [r7, r0]
 80062b6:	f81b 0004 	ldrb.w	r0, [fp, r4]
 80062ba:	f816 6014 	ldrb.w	r6, [r6, r4, lsl #1]
 80062be:	0412      	lsls	r2, r2, #16
 80062c0:	eb02 6208 	add.w	r2, r2, r8, lsl #24
 80062c4:	eb0b 0704 	add.w	r7, fp, r4
 80062c8:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 80062cc:	0409      	lsls	r1, r1, #16
 80062ce:	0400      	lsls	r0, r0, #16
 80062d0:	eb00 6003 	add.w	r0, r0, r3, lsl #24
 80062d4:	eb01 6109 	add.w	r1, r1, r9, lsl #24
 80062d8:	f81b 3014 	ldrb.w	r3, [fp, r4, lsl #1]
 80062dc:	4416      	add	r6, r2
 80062de:	9a00      	ldr	r2, [sp, #0]
 80062e0:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 80062e4:	f817 e014 	ldrb.w	lr, [r7, r4, lsl #1]
 80062e8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80062ec:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80062f0:	4422      	add	r2, r4
 80062f2:	eb01 030a 	add.w	r3, r1, sl
 80062f6:	9203      	str	r2, [sp, #12]
 80062f8:	4470      	add	r0, lr
 80062fa:	fa5f f886 	uxtb.w	r8, r6
 80062fe:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8006302:	0e34      	lsrs	r4, r6, #24
 8006304:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8006308:	9400      	str	r4, [sp, #0]
 800630a:	961a      	str	r6, [sp, #104]	; 0x68
 800630c:	b2c5      	uxtb	r5, r0
 800630e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8006312:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8006316:	b2da      	uxtb	r2, r3
 8006318:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800631c:	f3c3 4707 	ubfx	r7, r3, #16, #8
 8006320:	9508      	str	r5, [sp, #32]
 8006322:	940a      	str	r4, [sp, #40]	; 0x28
 8006324:	4dc9      	ldr	r5, [pc, #804]	; (800664c <D96_S6D8_S6D6_S2D2_GENERIC+0x470>)
 8006326:	4cca      	ldr	r4, [pc, #808]	; (8006650 <D96_S6D8_S6D6_S2D2_GENERIC+0x474>)
 8006328:	961d      	str	r6, [sp, #116]	; 0x74
 800632a:	4eca      	ldr	r6, [pc, #808]	; (8006654 <D96_S6D8_S6D6_S2D2_GENERIC+0x478>)
 800632c:	f854 b022 	ldr.w	fp, [r4, r2, lsl #2]
 8006330:	f854 a021 	ldr.w	sl, [r4, r1, lsl #2]
 8006334:	0e00      	lsrs	r0, r0, #24
 8006336:	900b      	str	r0, [sp, #44]	; 0x2c
 8006338:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 800633c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8006340:	f854 6027 	ldr.w	r6, [r4, r7, lsl #2]
 8006344:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8006348:	9401      	str	r4, [sp, #4]
 800634a:	4cc2      	ldr	r4, [pc, #776]	; (8006654 <D96_S6D8_S6D6_S2D2_GENERIC+0x478>)
 800634c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8006350:	9114      	str	r1, [sp, #80]	; 0x50
 8006352:	49bf      	ldr	r1, [pc, #764]	; (8006650 <D96_S6D8_S6D6_S2D2_GENERIC+0x474>)
 8006354:	460c      	mov	r4, r1
 8006356:	fa1f fc8a 	uxth.w	ip, sl
 800635a:	f854 9028 	ldr.w	r9, [r4, r8, lsl #2]
 800635e:	462c      	mov	r4, r5
 8006360:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8006364:	9515      	str	r5, [sp, #84]	; 0x54
 8006366:	4dbb      	ldr	r5, [pc, #748]	; (8006654 <D96_S6D8_S6D6_S2D2_GENERIC+0x478>)
 8006368:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800636c:	9d07      	ldr	r5, [sp, #28]
 800636e:	9705      	str	r7, [sp, #20]
 8006370:	eb0c 4c1b 	add.w	ip, ip, fp, lsr #16
 8006374:	0e1b      	lsrs	r3, r3, #24
 8006376:	9f06      	ldr	r7, [sp, #24]
 8006378:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800637c:	44ac      	add	ip, r5
 800637e:	4db5      	ldr	r5, [pc, #724]	; (8006654 <D96_S6D8_S6D6_S2D2_GENERIC+0x478>)
 8006380:	fa17 f78b 	uxtah	r7, r7, fp
 8006384:	f854 b023 	ldr.w	fp, [r4, r3, lsl #2]
 8006388:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800638c:	9316      	str	r3, [sp, #88]	; 0x58
 800638e:	4bb0      	ldr	r3, [pc, #704]	; (8006650 <D96_S6D8_S6D6_S2D2_GENERIC+0x474>)
 8006390:	f854 4028 	ldr.w	r4, [r4, r8, lsl #2]
 8006394:	f853 502e 	ldr.w	r5, [r3, lr, lsl #2]
 8006398:	9519      	str	r5, [sp, #100]	; 0x64
 800639a:	4dae      	ldr	r5, [pc, #696]	; (8006654 <D96_S6D8_S6D6_S2D2_GENERIC+0x478>)
 800639c:	9417      	str	r4, [sp, #92]	; 0x5c
 800639e:	f855 5028 	ldr.w	r5, [r5, r8, lsl #2]
 80063a2:	9518      	str	r5, [sp, #96]	; 0x60
 80063a4:	08ff      	lsrs	r7, r7, #3
 80063a6:	9d00      	ldr	r5, [sp, #0]
 80063a8:	043f      	lsls	r7, r7, #16
 80063aa:	ea47 08dc 	orr.w	r8, r7, ip, lsr #3
 80063ae:	4faa      	ldr	r7, [pc, #680]	; (8006658 <D96_S6D8_S6D6_S2D2_GENERIC+0x47c>)
 80063b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80063b4:	9307      	str	r3, [sp, #28]
 80063b6:	ea07 0340 	and.w	r3, r7, r0, lsl #1
 80063ba:	eb03 4a1a 	add.w	sl, r3, sl, lsr #16
 80063be:	fa1a fa86 	uxtah	sl, sl, r6
 80063c2:	0c00      	lsrs	r0, r0, #16
 80063c4:	0c36      	lsrs	r6, r6, #16
 80063c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063c8:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 80063cc:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80063d2:	eb0c 4c19 	add.w	ip, ip, r9, lsr #16
 80063d6:	fa1c fc83 	uxtah	ip, ip, r3
 80063da:	0c1c      	lsrs	r4, r3, #16
 80063dc:	44b2      	add	sl, r6
 80063de:	9b05      	ldr	r3, [sp, #20]
 80063e0:	0c0e      	lsrs	r6, r1, #16
 80063e2:	fa16 f682 	uxtah	r6, r6, r2
 80063e6:	fa16 f989 	uxtah	r9, r6, r9
 80063ea:	fa14 f683 	uxtah	r6, r4, r3
 80063ee:	9b01      	ldr	r3, [sp, #4]
 80063f0:	4c96      	ldr	r4, [pc, #600]	; (800664c <D96_S6D8_S6D6_S2D2_GENERIC+0x470>)
 80063f2:	9609      	str	r6, [sp, #36]	; 0x24
 80063f4:	0c1d      	lsrs	r5, r3, #16
 80063f6:	fa10 f181 	uxtah	r1, r0, r1
 80063fa:	ea07 0043 	and.w	r0, r7, r3, lsl #1
 80063fe:	f854 302e 	ldr.w	r3, [r4, lr, lsl #2]
 8006402:	9314      	str	r3, [sp, #80]	; 0x50
 8006404:	4401      	add	r1, r0
 8006406:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006408:	4892      	ldr	r0, [pc, #584]	; (8006654 <D96_S6D8_S6D6_S2D2_GENERIC+0x478>)
 800640a:	463e      	mov	r6, r7
 800640c:	f850 702e 	ldr.w	r7, [r0, lr, lsl #2]
 8006410:	469e      	mov	lr, r3
 8006412:	ea4f 0ada 	mov.w	sl, sl, lsr #3
 8006416:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800641a:	9006      	str	r0, [sp, #24]
 800641c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800641e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8006422:	4401      	add	r1, r0
 8006424:	4d8a      	ldr	r5, [pc, #552]	; (8006650 <D96_S6D8_S6D6_S2D2_GENERIC+0x474>)
 8006426:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 800642a:	ea4a 0ed1 	orr.w	lr, sl, r1, lsr #3
 800642e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006430:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8006434:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006438:	931b      	str	r3, [sp, #108]	; 0x6c
 800643a:	0c08      	lsrs	r0, r1, #16
 800643c:	4633      	mov	r3, r6
 800643e:	ea06 0641 	and.w	r6, r6, r1, lsl #1
 8006442:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006444:	921a      	str	r2, [sp, #104]	; 0x68
 8006446:	444e      	add	r6, r9
 8006448:	9a08      	ldr	r2, [sp, #32]
 800644a:	f8cd e004 	str.w	lr, [sp, #4]
 800644e:	440e      	add	r6, r1
 8006450:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006452:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8006456:	921c      	str	r2, [sp, #112]	; 0x70
 8006458:	ea4f 4a1b 	mov.w	sl, fp, lsr #16
 800645c:	9a00      	ldr	r2, [sp, #0]
 800645e:	ea03 044b 	and.w	r4, r3, fp, lsl #1
 8006462:	eb01 0a4a 	add.w	sl, r1, sl, lsl #1
 8006466:	4b7b      	ldr	r3, [pc, #492]	; (8006654 <D96_S6D8_S6D6_S2D2_GENERIC+0x478>)
 8006468:	4978      	ldr	r1, [pc, #480]	; (800664c <D96_S6D8_S6D6_S2D2_GENERIC+0x470>)
 800646a:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
 800646e:	4464      	add	r4, ip
 8006470:	f851 c022 	ldr.w	ip, [r1, r2, lsl #2]
 8006474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006476:	f855 b022 	ldr.w	fp, [r5, r2, lsl #2]
 800647a:	9a08      	ldr	r2, [sp, #32]
 800647c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8006480:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006482:	9308      	str	r3, [sp, #32]
 8006484:	4b73      	ldr	r3, [pc, #460]	; (8006654 <D96_S6D8_S6D6_S2D2_GENERIC+0x478>)
 8006486:	fa14 f481 	uxtah	r4, r4, r1
 800648a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006490:	9309      	str	r3, [sp, #36]	; 0x24
 8006492:	eb04 0440 	add.w	r4, r4, r0, lsl #1
 8006496:	486d      	ldr	r0, [pc, #436]	; (800664c <D96_S6D8_S6D6_S2D2_GENERIC+0x470>)
 8006498:	4b6e      	ldr	r3, [pc, #440]	; (8006654 <D96_S6D8_S6D6_S2D2_GENERIC+0x478>)
 800649a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800649e:	9010      	str	r0, [sp, #64]	; 0x40
 80064a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80064a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80064a6:	9011      	str	r0, [sp, #68]	; 0x44
 80064a8:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 80064ac:	4d67      	ldr	r5, [pc, #412]	; (800664c <D96_S6D8_S6D6_S2D2_GENERIC+0x470>)
 80064ae:	4b69      	ldr	r3, [pc, #420]	; (8006654 <D96_S6D8_S6D6_S2D2_GENERIC+0x478>)
 80064b0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80064b4:	950a      	str	r5, [sp, #40]	; 0x28
 80064b6:	08f6      	lsrs	r6, r6, #3
 80064b8:	08e4      	lsrs	r4, r4, #3
 80064ba:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80064be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064c0:	9515      	str	r5, [sp, #84]	; 0x54
 80064c2:	ea44 4906 	orr.w	r9, r4, r6, lsl #16
 80064c6:	4e64      	ldr	r6, [pc, #400]	; (8006658 <D96_S6D8_S6D6_S2D2_GENERIC+0x47c>)
 80064c8:	f8cd 9000 	str.w	r9, [sp]
 80064cc:	ea06 0442 	and.w	r4, r6, r2, lsl #1
 80064d0:	4633      	mov	r3, r6
 80064d2:	0c16      	lsrs	r6, r2, #16
 80064d4:	9617      	str	r6, [sp, #92]	; 0x5c
 80064d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80064d8:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80064dc:	ea4f 4912 	mov.w	r9, r2, lsr #16
 80064e0:	fa16 f682 	uxtah	r6, r6, r2
 80064e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80064e6:	44a2      	add	sl, r4
 80064e8:	eb0a 4a11 	add.w	sl, sl, r1, lsr #16
 80064ec:	fa19 f982 	uxtah	r9, r9, r2
 80064f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80064f2:	9c07      	ldr	r4, [sp, #28]
 80064f4:	0c15      	lsrs	r5, r2, #16
 80064f6:	9a05      	ldr	r2, [sp, #20]
 80064f8:	eb05 4511 	add.w	r5, r5, r1, lsr #16
 80064fc:	eb06 4612 	add.w	r6, r6, r2, lsr #16
 8006500:	9a06      	ldr	r2, [sp, #24]
 8006502:	fa15 f587 	uxtah	r5, r5, r7
 8006506:	0c3f      	lsrs	r7, r7, #16
 8006508:	eb09 4914 	add.w	r9, r9, r4, lsr #16
 800650c:	fa17 f482 	uxtah	r4, r7, r2
 8006510:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006512:	4f4f      	ldr	r7, [pc, #316]	; (8006650 <D96_S6D8_S6D6_S2D2_GENERIC+0x474>)
 8006514:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8006518:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800651a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 800651e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006520:	eb06 4612 	add.w	r6, r6, r2, lsr #16
 8006524:	fa1a fa82 	uxtah	sl, sl, r2
 8006528:	461a      	mov	r2, r3
 800652a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800652c:	fa19 f981 	uxtah	r9, r9, r1
 8006530:	ea02 0243 	and.w	r2, r2, r3, lsl #1
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	eb09 0943 	add.w	r9, r9, r3, lsl #1
 800653a:	4432      	add	r2, r6
 800653c:	9b06      	ldr	r3, [sp, #24]
 800653e:	b2be      	uxth	r6, r7
 8006540:	fa16 f68e 	uxtah	r6, r6, lr
 8006544:	eb06 4613 	add.w	r6, r6, r3, lsr #16
 8006548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654a:	9908      	ldr	r1, [sp, #32]
 800654c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8006550:	fa1e fe83 	uxtah	lr, lr, r3
 8006554:	4b40      	ldr	r3, [pc, #256]	; (8006658 <D96_S6D8_S6D6_S2D2_GENERIC+0x47c>)
 8006556:	eb0e 4717 	add.w	r7, lr, r7, lsr #16
 800655a:	9706      	str	r7, [sp, #24]
 800655c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8006560:	461f      	mov	r7, r3
 8006562:	ea03 0c4c 	and.w	ip, r3, ip, lsl #1
 8006566:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 800656a:	ea07 0e41 	and.w	lr, r7, r1, lsl #1
 800656e:	0c09      	lsrs	r1, r1, #16
 8006570:	eb05 030c 	add.w	r3, r5, ip
 8006574:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8006578:	4d34      	ldr	r5, [pc, #208]	; (800664c <D96_S6D8_S6D6_S2D2_GENERIC+0x470>)
 800657a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800657c:	4474      	add	r4, lr
 800657e:	fa13 f38b 	uxtah	r3, r3, fp
 8006582:	eb04 4b1b 	add.w	fp, r4, fp, lsr #16
 8006586:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 800658a:	4d32      	ldr	r5, [pc, #200]	; (8006654 <D96_S6D8_S6D6_S2D2_GENERIC+0x478>)
 800658c:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
 8006590:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006592:	9505      	str	r5, [sp, #20]
 8006594:	463d      	mov	r5, r7
 8006596:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006598:	ea05 0c46 	and.w	ip, r5, r6, lsl #1
 800659c:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 80065a0:	fa1b f080 	uxtah	r0, fp, r0
 80065a4:	ea4f 4b16 	mov.w	fp, r6, lsr #16
 80065a8:	462e      	mov	r6, r5
 80065aa:	ea06 0e47 	and.w	lr, r6, r7, lsl #1
 80065ae:	4471      	add	r1, lr
 80065b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80065b4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80065b6:	44e1      	add	r9, ip
 80065b8:	ea06 0c44 	and.w	ip, r6, r4, lsl #1
 80065bc:	fa1c fc87 	uxtah	ip, ip, r7
 80065c0:	0c3d      	lsrs	r5, r7, #16
 80065c2:	9f06      	ldr	r7, [sp, #24]
 80065c4:	eb07 074e 	add.w	r7, r7, lr, lsl #1
 80065c8:	9706      	str	r7, [sp, #24]
 80065ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80065cc:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 80065d0:	ea06 0e47 	and.w	lr, r6, r7, lsl #1
 80065d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80065d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065da:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80065dc:	f8cd e01c 	str.w	lr, [sp, #28]
 80065e0:	08c0      	lsrs	r0, r0, #3
 80065e2:	08c9      	lsrs	r1, r1, #3
 80065e4:	eb0c 4c16 	add.w	ip, ip, r6, lsr #16
 80065e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80065ec:	fa15 f587 	uxtah	r5, r5, r7
 80065f0:	0c24      	lsrs	r4, r4, #16
 80065f2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80065f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80065fa:	9805      	ldr	r0, [sp, #20]
 80065fc:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 8006600:	9509      	str	r5, [sp, #36]	; 0x24
 8006602:	fa1e f580 	uxtah	r5, lr, r0
 8006606:	443e      	add	r6, r7
 8006608:	ea4f 0ada 	mov.w	sl, sl, lsr #3
 800660c:	eb0c 074b 	add.w	r7, ip, fp, lsl #1
 8006610:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8006614:	9510      	str	r5, [sp, #64]	; 0x40
 8006616:	08d2      	lsrs	r2, r2, #3
 8006618:	0c05      	lsrs	r5, r0, #16
 800661a:	08db      	lsrs	r3, r3, #3
 800661c:	9511      	str	r5, [sp, #68]	; 0x44
 800661e:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8006622:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
 8006626:	9606      	str	r6, [sp, #24]
 8006628:	9707      	str	r7, [sp, #28]
 800662a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800662e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006630:	fb28 550c 	smlad	r5, r8, ip, r5
 8006634:	f8df e028 	ldr.w	lr, [pc, #40]	; 8006660 <D96_S6D8_S6D6_S2D2_GENERIC+0x484>
 8006638:	9505      	str	r5, [sp, #20]
 800663a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800663c:	fb28 750e 	smlad	r5, r8, lr, r7
 8006640:	4f06      	ldr	r7, [pc, #24]	; (800665c <D96_S6D8_S6D6_S2D2_GENERIC+0x480>)
 8006642:	9801      	ldr	r0, [sp, #4]
 8006644:	fb20 5507 	smlad	r5, r0, r7, r5
 8006648:	e00c      	b.n	8006664 <D96_S6D8_S6D6_S2D2_GENERIC+0x488>
 800664a:	bf00      	nop
 800664c:	200004ac 	.word	0x200004ac
 8006650:	200008ac 	.word	0x200008ac
 8006654:	200000ac 	.word	0x200000ac
 8006658:	0001fffe 	.word	0x0001fffe
 800665c:	007e0038 	.word	0x007e0038
 8006660:	01c800fc 	.word	0x01c800fc
 8006664:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800684c <D96_S6D8_S6D6_S2D2_GENERIC+0x670>
 8006668:	9e00      	ldr	r6, [sp, #0]
 800666a:	fb26 540b 	smlad	r4, r6, fp, r5
 800666e:	9408      	str	r4, [sp, #32]
 8006670:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006672:	4c6c      	ldr	r4, [pc, #432]	; (8006824 <D96_S6D8_S6D6_S2D2_GENERIC+0x648>)
 8006674:	fb28 7704 	smlad	r7, r8, r4, r7
 8006678:	4c6b      	ldr	r4, [pc, #428]	; (8006828 <D96_S6D8_S6D6_S2D2_GENERIC+0x64c>)
 800667a:	fb20 7704 	smlad	r7, r0, r4, r7
 800667e:	4d6b      	ldr	r5, [pc, #428]	; (800682c <D96_S6D8_S6D6_S2D2_GENERIC+0x650>)
 8006680:	fb26 7705 	smlad	r7, r6, r5, r7
 8006684:	4c6a      	ldr	r4, [pc, #424]	; (8006830 <D96_S6D8_S6D6_S2D2_GENERIC+0x654>)
 8006686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006688:	fb28 5504 	smlad	r5, r8, r4, r5
 800668c:	4c69      	ldr	r4, [pc, #420]	; (8006834 <D96_S6D8_S6D6_S2D2_GENERIC+0x658>)
 800668e:	fb20 5504 	smlad	r5, r0, r4, r5
 8006692:	4634      	mov	r4, r6
 8006694:	4e68      	ldr	r6, [pc, #416]	; (8006838 <D96_S6D8_S6D6_S2D2_GENERIC+0x65c>)
 8006696:	fb24 5406 	smlad	r4, r4, r6, r5
 800669a:	4e68      	ldr	r6, [pc, #416]	; (800683c <D96_S6D8_S6D6_S2D2_GENERIC+0x660>)
 800669c:	940a      	str	r4, [sp, #40]	; 0x28
 800669e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80066a0:	fb28 5406 	smlad	r4, r8, r6, r5
 80066a4:	4681      	mov	r9, r0
 80066a6:	4866      	ldr	r0, [pc, #408]	; (8006840 <D96_S6D8_S6D6_S2D2_GENERIC+0x664>)
 80066a8:	fb29 4400 	smlad	r4, r9, r0, r4
 80066ac:	4865      	ldr	r0, [pc, #404]	; (8006844 <D96_S6D8_S6D6_S2D2_GENERIC+0x668>)
 80066ae:	9d00      	ldr	r5, [sp, #0]
 80066b0:	fb25 4400 	smlad	r4, r5, r0, r4
 80066b4:	f8df a198 	ldr.w	sl, [pc, #408]	; 8006850 <D96_S6D8_S6D6_S2D2_GENERIC+0x674>
 80066b8:	fb28 f00a 	smuad	r0, r8, sl
 80066bc:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8006854 <D96_S6D8_S6D6_S2D2_GENERIC+0x678>
 80066c0:	9d01      	ldr	r5, [sp, #4]
 80066c2:	fb25 0009 	smlad	r0, r5, r9, r0
 80066c6:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8006858 <D96_S6D8_S6D6_S2D2_GENERIC+0x67c>
 80066ca:	9d00      	ldr	r5, [sp, #0]
 80066cc:	fb25 0008 	smlad	r0, r5, r8, r0
 80066d0:	9d08      	ldr	r5, [sp, #32]
 80066d2:	fb22 5c0c 	smlad	ip, r2, ip, r5
 80066d6:	f8cd c000 	str.w	ip, [sp]
 80066da:	fb22 770e 	smlad	r7, r2, lr, r7
 80066de:	4d5a      	ldr	r5, [pc, #360]	; (8006848 <D96_S6D8_S6D6_S2D2_GENERIC+0x66c>)
 80066e0:	fb23 7705 	smlad	r7, r3, r5, r7
 80066e4:	fb21 7c0b 	smlad	ip, r1, fp, r7
 80066e8:	4d4e      	ldr	r5, [pc, #312]	; (8006824 <D96_S6D8_S6D6_S2D2_GENERIC+0x648>)
 80066ea:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80066ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80066f0:	fb22 7505 	smlad	r5, r2, r5, r7
 80066f4:	4f4c      	ldr	r7, [pc, #304]	; (8006828 <D96_S6D8_S6D6_S2D2_GENERIC+0x64c>)
 80066f6:	fb23 5507 	smlad	r5, r3, r7, r5
 80066fa:	4f4c      	ldr	r7, [pc, #304]	; (800682c <D96_S6D8_S6D6_S2D2_GENERIC+0x650>)
 80066fc:	fb21 5707 	smlad	r7, r1, r7, r5
 8006700:	4d4b      	ldr	r5, [pc, #300]	; (8006830 <D96_S6D8_S6D6_S2D2_GENERIC+0x654>)
 8006702:	970f      	str	r7, [sp, #60]	; 0x3c
 8006704:	fb22 4705 	smlad	r7, r2, r5, r4
 8006708:	4c4a      	ldr	r4, [pc, #296]	; (8006834 <D96_S6D8_S6D6_S2D2_GENERIC+0x658>)
 800670a:	fb23 7704 	smlad	r7, r3, r4, r7
 800670e:	f5a4 74d5 	sub.w	r4, r4, #426	; 0x1aa
 8006712:	fb21 7704 	smlad	r7, r1, r4, r7
 8006716:	970e      	str	r7, [sp, #56]	; 0x38
 8006718:	fb22 0006 	smlad	r0, r2, r6, r0
 800671c:	4c48      	ldr	r4, [pc, #288]	; (8006840 <D96_S6D8_S6D6_S2D2_GENERIC+0x664>)
 800671e:	fb23 0504 	smlad	r5, r3, r4, r0
 8006722:	4848      	ldr	r0, [pc, #288]	; (8006844 <D96_S6D8_S6D6_S2D2_GENERIC+0x668>)
 8006724:	fb21 5000 	smlad	r0, r1, r0, r5
 8006728:	900c      	str	r0, [sp, #48]	; 0x30
 800672a:	fb22 f20a 	smuad	r2, r2, sl
 800672e:	fb23 2209 	smlad	r2, r3, r9, r2
 8006732:	fb21 2308 	smlad	r3, r1, r8, r2
 8006736:	9d05      	ldr	r5, [sp, #20]
 8006738:	9312      	str	r3, [sp, #72]	; 0x48
 800673a:	10ac      	asrs	r4, r5, #2
 800673c:	9d00      	ldr	r5, [sp, #0]
 800673e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006740:	eb04 0565 	add.w	r5, r4, r5, asr #1
 8006744:	441d      	add	r5, r3
 8006746:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006748:	f105 4552 	add.w	r5, r5, #3523215360	; 0xd2000000
 800674c:	f505 05e0 	add.w	r5, r5, #7340032	; 0x700000
 8006750:	b193      	cbz	r3, 8006778 <D96_S6D8_S6D6_S2D2_GENERIC+0x59c>
 8006752:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006754:	442b      	add	r3, r5
 8006756:	461a      	mov	r2, r3
 8006758:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800675a:	1ad2      	subs	r2, r2, r3
 800675c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800675e:	17d1      	asrs	r1, r2, #31
 8006760:	fba2 6703 	umull	r6, r7, r2, r3
 8006764:	fb03 7701 	mla	r7, r3, r1, r7
 8006768:	f116 4200 	adds.w	r2, r6, #2147483648	; 0x80000000
 800676c:	f147 0300 	adc.w	r3, r7, #0
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
 8006776:	461d      	mov	r5, r3
 8006778:	9b02      	ldr	r3, [sp, #8]
 800677a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800677c:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
 8006780:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 8006784:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006788:	2300      	movs	r3, #0
 800678a:	fbc6 2305 	smlal	r2, r3, r6, r5
 800678e:	461e      	mov	r6, r3
 8006790:	2800      	cmp	r0, #0
 8006792:	f43f ad54 	beq.w	800623e <D96_S6D8_S6D6_S2D2_GENERIC+0x62>
 8006796:	2802      	cmp	r0, #2
 8006798:	d038      	beq.n	800680c <D96_S6D8_S6D6_S2D2_GENERIC+0x630>
 800679a:	9b04      	ldr	r3, [sp, #16]
 800679c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80067a0:	fb01 f102 	mul.w	r1, r1, r2
 80067a4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80067a6:	f306 0317 	ssat	r3, #24, r6
 80067aa:	5053      	str	r3, [r2, r1]
 80067ac:	e54f      	b.n	800624e <D96_S6D8_S6D6_S2D2_GENERIC+0x72>
 80067ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067b0:	9903      	ldr	r1, [sp, #12]
 80067b2:	0692      	lsls	r2, r2, #26
 80067b4:	680b      	ldr	r3, [r1, #0]
 80067b6:	e9d1 6001 	ldrd	r6, r0, [r1, #4]
 80067ba:	f101 010c 	add.w	r1, r1, #12
 80067be:	d52e      	bpl.n	800681e <D96_S6D8_S6D6_S2D2_GENERIC+0x642>
 80067c0:	ba5b      	rev16	r3, r3
 80067c2:	ba76      	rev16	r6, r6
 80067c4:	ba40      	rev16	r0, r0
 80067c6:	9103      	str	r1, [sp, #12]
 80067c8:	e597      	b.n	80062fa <D96_S6D8_S6D6_S2D2_GENERIC+0x11e>
 80067ca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80067cc:	9b02      	ldr	r3, [sp, #8]
 80067ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 80067d0:	6019      	str	r1, [r3, #0]
 80067d2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80067d4:	6059      	str	r1, [r3, #4]
 80067d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067d8:	6099      	str	r1, [r3, #8]
 80067da:	9907      	ldr	r1, [sp, #28]
 80067dc:	60d9      	str	r1, [r3, #12]
 80067de:	9906      	ldr	r1, [sp, #24]
 80067e0:	6119      	str	r1, [r3, #16]
 80067e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80067e4:	6159      	str	r1, [r3, #20]
 80067e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067e8:	6199      	str	r1, [r3, #24]
 80067ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80067ec:	61d9      	str	r1, [r3, #28]
 80067ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80067f0:	6219      	str	r1, [r3, #32]
 80067f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067f4:	6259      	str	r1, [r3, #36]	; 0x24
 80067f6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80067f8:	62d9      	str	r1, [r3, #44]	; 0x2c
 80067fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80067fc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80067fe:	629c      	str	r4, [r3, #40]	; 0x28
 8006800:	2000      	movs	r0, #0
 8006802:	6319      	str	r1, [r3, #48]	; 0x30
 8006804:	639a      	str	r2, [r3, #56]	; 0x38
 8006806:	b027      	add	sp, #156	; 0x9c
 8006808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680c:	9a04      	ldr	r2, [sp, #16]
 800680e:	f306 0317 	ssat	r3, #24, r6
 8006812:	fb01 f102 	mul.w	r1, r1, r2
 8006816:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006818:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800681c:	e517      	b.n	800624e <D96_S6D8_S6D6_S2D2_GENERIC+0x72>
 800681e:	9103      	str	r1, [sp, #12]
 8006820:	e56b      	b.n	80062fa <D96_S6D8_S6D6_S2D2_GENERIC+0x11e>
 8006822:	bf00      	nop
 8006824:	0d670b28 	.word	0x0d670b28
 8006828:	08c70682 	.word	0x08c70682
 800682c:	048902f4 	.word	0x048902f4
 8006830:	0d670f42 	.word	0x0d670f42
 8006834:	107d10ec 	.word	0x107d10ec
 8006838:	107d0f42 	.word	0x107d0f42
 800683c:	01c802f4 	.word	0x01c802f4
 8006840:	04890682 	.word	0x04890682
 8006844:	08c70b28 	.word	0x08c70b28
 8006848:	007e0038 	.word	0x007e0038
 800684c:	00150006 	.word	0x00150006
 8006850:	00010006 	.word	0x00010006
 8006854:	00150038 	.word	0x00150038
 8006858:	007e00fc 	.word	0x007e00fc

0800685c <PDM_Filter_Init>:
 800685c:	4a73      	ldr	r2, [pc, #460]	; (8006a2c <PDM_Filter_Init+0x1d0>)
 800685e:	4974      	ldr	r1, [pc, #464]	; (8006a30 <PDM_Filter_Init+0x1d4>)
 8006860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006864:	6813      	ldr	r3, [r2, #0]
 8006866:	f023 0301 	bic.w	r3, r3, #1
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	680b      	ldr	r3, [r1, #0]
 800686e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8006872:	4013      	ands	r3, r2
 8006874:	f24c 2540 	movw	r5, #49728	; 0xc240
 8006878:	42ab      	cmp	r3, r5
 800687a:	4604      	mov	r4, r0
 800687c:	d04a      	beq.n	8006914 <PDM_Filter_Init+0xb8>
 800687e:	680b      	ldr	r3, [r1, #0]
 8006880:	f24c 2170 	movw	r1, #49776	; 0xc270
 8006884:	401a      	ands	r2, r3
 8006886:	428a      	cmp	r2, r1
 8006888:	d044      	beq.n	8006914 <PDM_Filter_Init+0xb8>
 800688a:	4b6a      	ldr	r3, [pc, #424]	; (8006a34 <PDM_Filter_Init+0x1d8>)
 800688c:	2201      	movs	r2, #1
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	6819      	ldr	r1, [r3, #0]
 8006892:	2900      	cmp	r1, #0
 8006894:	d1fc      	bne.n	8006890 <PDM_Filter_Init+0x34>
 8006896:	4b68      	ldr	r3, [pc, #416]	; (8006a38 <PDM_Filter_Init+0x1dc>)
 8006898:	4a68      	ldr	r2, [pc, #416]	; (8006a3c <PDM_Filter_Init+0x1e0>)
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	4b68      	ldr	r3, [pc, #416]	; (8006a40 <PDM_Filter_Init+0x1e4>)
 80068a0:	429a      	cmp	r2, r3
 80068a2:	f104 000c 	add.w	r0, r4, #12
 80068a6:	f04f 025c 	mov.w	r2, #92	; 0x5c
 80068aa:	d04d      	beq.n	8006948 <PDM_Filter_Init+0xec>
 80068ac:	f000 fb82 	bl	8006fb4 <memset>
 80068b0:	2300      	movs	r3, #0
 80068b2:	6623      	str	r3, [r4, #96]	; 0x60
 80068b4:	8820      	ldrh	r0, [r4, #0]
 80068b6:	8963      	ldrh	r3, [r4, #10]
 80068b8:	8922      	ldrh	r2, [r4, #8]
 80068ba:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 80068be:	2801      	cmp	r0, #1
 80068c0:	f04f 0300 	mov.w	r3, #0
 80068c4:	6263      	str	r3, [r4, #36]	; 0x24
 80068c6:	6123      	str	r3, [r4, #16]
 80068c8:	6223      	str	r3, [r4, #32]
 80068ca:	60e3      	str	r3, [r4, #12]
 80068cc:	6463      	str	r3, [r4, #68]	; 0x44
 80068ce:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80068d2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80068d4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80068d8:	d93e      	bls.n	8006958 <PDM_Filter_Init+0xfc>
 80068da:	2003      	movs	r0, #3
 80068dc:	2302      	movs	r3, #2
 80068de:	8862      	ldrh	r2, [r4, #2]
 80068e0:	2a01      	cmp	r2, #1
 80068e2:	d936      	bls.n	8006952 <PDM_Filter_Init+0xf6>
 80068e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80068e6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80068ea:	d103      	bne.n	80068f4 <PDM_Filter_Init+0x98>
 80068ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80068ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80068f4:	6863      	ldr	r3, [r4, #4]
 80068f6:	b123      	cbz	r3, 8006902 <PDM_Filter_Init+0xa6>
 80068f8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80068fa:	64a3      	str	r3, [r4, #72]	; 0x48
 80068fc:	f042 0210 	orr.w	r2, r2, #16
 8006900:	65e2      	str	r2, [r4, #92]	; 0x5c
 8006902:	2300      	movs	r3, #0
 8006904:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8006908:	b910      	cbnz	r0, 8006910 <PDM_Filter_Init+0xb4>
 800690a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800690c:	3380      	adds	r3, #128	; 0x80
 800690e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006914:	4b4b      	ldr	r3, [pc, #300]	; (8006a44 <PDM_Filter_Init+0x1e8>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1b6      	bne.n	800688a <PDM_Filter_Init+0x2e>
 800691c:	4a4a      	ldr	r2, [pc, #296]	; (8006a48 <PDM_Filter_Init+0x1ec>)
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006924:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006928:	d006      	beq.n	8006938 <PDM_Filter_Init+0xdc>
 800692a:	6813      	ldr	r3, [r2, #0]
 800692c:	f240 4283 	movw	r2, #1155	; 0x483
 8006930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006934:	4293      	cmp	r3, r2
 8006936:	d1a8      	bne.n	800688a <PDM_Filter_Init+0x2e>
 8006938:	4b44      	ldr	r3, [pc, #272]	; (8006a4c <PDM_Filter_Init+0x1f0>)
 800693a:	2201      	movs	r2, #1
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	6819      	ldr	r1, [r3, #0]
 8006940:	2900      	cmp	r1, #0
 8006942:	d1fc      	bne.n	800693e <PDM_Filter_Init+0xe2>
 8006944:	4b42      	ldr	r3, [pc, #264]	; (8006a50 <PDM_Filter_Init+0x1f4>)
 8006946:	e7a7      	b.n	8006898 <PDM_Filter_Init+0x3c>
 8006948:	f000 fb34 	bl	8006fb4 <memset>
 800694c:	4b3c      	ldr	r3, [pc, #240]	; (8006a40 <PDM_Filter_Init+0x1e4>)
 800694e:	6623      	str	r3, [r4, #96]	; 0x60
 8006950:	e7b0      	b.n	80068b4 <PDM_Filter_Init+0x58>
 8006952:	d064      	beq.n	8006a1e <PDM_Filter_Init+0x1c2>
 8006954:	4618      	mov	r0, r3
 8006956:	e7c5      	b.n	80068e4 <PDM_Filter_Init+0x88>
 8006958:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006a64 <PDM_Filter_Init+0x208>
 800695c:	f899 2000 	ldrb.w	r2, [r9]
 8006960:	d02f      	beq.n	80069c2 <PDM_Filter_Init+0x166>
 8006962:	2a01      	cmp	r2, #1
 8006964:	d001      	beq.n	800696a <PDM_Filter_Init+0x10e>
 8006966:	2001      	movs	r0, #1
 8006968:	e7b9      	b.n	80068de <PDM_Filter_Init+0x82>
 800696a:	4a3a      	ldr	r2, [pc, #232]	; (8006a54 <PDM_Filter_Init+0x1f8>)
 800696c:	4f3a      	ldr	r7, [pc, #232]	; (8006a58 <PDM_Filter_Init+0x1fc>)
 800696e:	4e3b      	ldr	r6, [pc, #236]	; (8006a5c <PDM_Filter_Init+0x200>)
 8006970:	4d3b      	ldr	r5, [pc, #236]	; (8006a60 <PDM_Filter_Init+0x204>)
 8006972:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8006a68 <PDM_Filter_Init+0x20c>
 8006976:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8006a6c <PDM_Filter_Init+0x210>
 800697a:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
 800697e:	f852 af04 	ldr.w	sl, [r2, #4]!
 8006982:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8006986:	f856 1f04 	ldr.w	r1, [r6, #4]!
 800698a:	ea08 530a 	and.w	r3, r8, sl, lsl #20
 800698e:	ea0a 0b0e 	and.w	fp, sl, lr
 8006992:	ea43 030b 	orr.w	r3, r3, fp
 8006996:	f3ca 5a09 	ubfx	sl, sl, #20, #10
 800699a:	4453      	add	r3, sl
 800699c:	f855 af04 	ldr.w	sl, [r5, #4]!
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	ea4f 4030 	mov.w	r0, r0, ror #16
 80069a6:	ea4f 4131 	mov.w	r1, r1, ror #16
 80069aa:	ea4f 433a 	mov.w	r3, sl, ror #16
 80069ae:	4594      	cmp	ip, r2
 80069b0:	6030      	str	r0, [r6, #0]
 80069b2:	6039      	str	r1, [r7, #0]
 80069b4:	602b      	str	r3, [r5, #0]
 80069b6:	d1e2      	bne.n	800697e <PDM_Filter_Init+0x122>
 80069b8:	2300      	movs	r3, #0
 80069ba:	f889 3000 	strb.w	r3, [r9]
 80069be:	2001      	movs	r0, #1
 80069c0:	e78d      	b.n	80068de <PDM_Filter_Init+0x82>
 80069c2:	2a00      	cmp	r2, #0
 80069c4:	d18b      	bne.n	80068de <PDM_Filter_Init+0x82>
 80069c6:	4a23      	ldr	r2, [pc, #140]	; (8006a54 <PDM_Filter_Init+0x1f8>)
 80069c8:	4f23      	ldr	r7, [pc, #140]	; (8006a58 <PDM_Filter_Init+0x1fc>)
 80069ca:	4e24      	ldr	r6, [pc, #144]	; (8006a5c <PDM_Filter_Init+0x200>)
 80069cc:	4d24      	ldr	r5, [pc, #144]	; (8006a60 <PDM_Filter_Init+0x204>)
 80069ce:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006a68 <PDM_Filter_Init+0x20c>
 80069d2:	f8df e098 	ldr.w	lr, [pc, #152]	; 8006a6c <PDM_Filter_Init+0x210>
 80069d6:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
 80069da:	f852 af04 	ldr.w	sl, [r2, #4]!
 80069de:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80069e2:	f856 1f04 	ldr.w	r1, [r6, #4]!
 80069e6:	ea08 530a 	and.w	r3, r8, sl, lsl #20
 80069ea:	ea0a 0b0e 	and.w	fp, sl, lr
 80069ee:	ea43 030b 	orr.w	r3, r3, fp
 80069f2:	f3ca 5a09 	ubfx	sl, sl, #20, #10
 80069f6:	4453      	add	r3, sl
 80069f8:	f855 af04 	ldr.w	sl, [r5, #4]!
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	ea4f 4030 	mov.w	r0, r0, ror #16
 8006a02:	ea4f 4131 	mov.w	r1, r1, ror #16
 8006a06:	ea4f 433a 	mov.w	r3, sl, ror #16
 8006a0a:	4594      	cmp	ip, r2
 8006a0c:	6030      	str	r0, [r6, #0]
 8006a0e:	6039      	str	r1, [r7, #0]
 8006a10:	602b      	str	r3, [r5, #0]
 8006a12:	d1e2      	bne.n	80069da <PDM_Filter_Init+0x17e>
 8006a14:	2001      	movs	r0, #1
 8006a16:	f889 0000 	strb.w	r0, [r9]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e75f      	b.n	80068de <PDM_Filter_Init+0x82>
 8006a1e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006a20:	f042 0220 	orr.w	r2, r2, #32
 8006a24:	4618      	mov	r0, r3
 8006a26:	65e2      	str	r2, [r4, #92]	; 0x5c
 8006a28:	e75c      	b.n	80068e4 <PDM_Filter_Init+0x88>
 8006a2a:	bf00      	nop
 8006a2c:	e0002000 	.word	0xe0002000
 8006a30:	e000ed00 	.word	0xe000ed00
 8006a34:	40023008 	.word	0x40023008
 8006a38:	40023000 	.word	0x40023000
 8006a3c:	f407a5c2 	.word	0xf407a5c2
 8006a40:	b5e8b5cd 	.word	0xb5e8b5cd
 8006a44:	e0042000 	.word	0xe0042000
 8006a48:	5c001000 	.word	0x5c001000
 8006a4c:	58024c08 	.word	0x58024c08
 8006a50:	58024c00 	.word	0x58024c00
 8006a54:	20000ca8 	.word	0x20000ca8
 8006a58:	200000a8 	.word	0x200000a8
 8006a5c:	200008a8 	.word	0x200008a8
 8006a60:	200004a8 	.word	0x200004a8
 8006a64:	20003241 	.word	0x20003241
 8006a68:	3ff00000 	.word	0x3ff00000
 8006a6c:	000ffc00 	.word	0x000ffc00

08006a70 <PDM_Filter_setConfig>:
 8006a70:	4b5c      	ldr	r3, [pc, #368]	; (8006be4 <PDM_Filter_setConfig+0x174>)
 8006a72:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d13e      	bne.n	8006af6 <PDM_Filter_setConfig+0x86>
 8006a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8006a80:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006a82:	880e      	ldrh	r6, [r1, #0]
 8006a84:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8006a88:	ed2d 8b02 	vpush	{d8}
 8006a8c:	fa1f f882 	uxth.w	r8, r2
 8006a90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006a94:	f1b8 0f02 	cmp.w	r8, #2
 8006a98:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8006a9c:	f1a6 0209 	sub.w	r2, r6, #9
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	65c3      	str	r3, [r0, #92]	; 0x5c
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	bf88      	it	hi
 8006aa8:	f44f 7c80 	movhi.w	ip, #256	; 0x100
 8006aac:	f9b0 1054 	ldrsh.w	r1, [r0, #84]	; 0x54
 8006ab0:	bf96      	itet	ls
 8006ab2:	f04f 0c00 	movls.w	ip, #0
 8006ab6:	f44f 7084 	movhi.w	r0, #264	; 0x108
 8006aba:	2008      	movls	r0, #8
 8006abc:	2a01      	cmp	r2, #1
 8006abe:	b082      	sub	sp, #8
 8006ac0:	d943      	bls.n	8006b4a <PDM_Filter_setConfig+0xda>
 8006ac2:	428f      	cmp	r7, r1
 8006ac4:	d05b      	beq.n	8006b7e <PDM_Filter_setConfig+0x10e>
 8006ac6:	f117 0f0c 	cmn.w	r7, #12
 8006aca:	da16      	bge.n	8006afa <PDM_Filter_setConfig+0x8a>
 8006acc:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8006ad0:	3040      	adds	r0, #64	; 0x40
 8006ad2:	80ab      	strh	r3, [r5, #4]
 8006ad4:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
 8006ad8:	886b      	ldrh	r3, [r5, #2]
 8006ada:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8006ade:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
 8006ae2:	b918      	cbnz	r0, 8006aec <PDM_Filter_setConfig+0x7c>
 8006ae4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aea:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006aec:	b002      	add	sp, #8
 8006aee:	ecbd 8b02 	vpop	{d8}
 8006af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af6:	2004      	movs	r0, #4
 8006af8:	4770      	bx	lr
 8006afa:	2f33      	cmp	r7, #51	; 0x33
 8006afc:	dc3b      	bgt.n	8006b76 <PDM_Filter_setConfig+0x106>
 8006afe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006b00:	f003 020f 	and.w	r2, r3, #15
 8006b04:	2a09      	cmp	r2, #9
 8006b06:	d059      	beq.n	8006bbc <PDM_Filter_setConfig+0x14c>
 8006b08:	2a0a      	cmp	r2, #10
 8006b0a:	d041      	beq.n	8006b90 <PDM_Filter_setConfig+0x120>
 8006b0c:	eddf 8a36 	vldr	s17, [pc, #216]	; 8006be8 <PDM_Filter_setConfig+0x178>
 8006b10:	ed9f 8a36 	vldr	s16, [pc, #216]	; 8006bec <PDM_Filter_setConfig+0x17c>
 8006b14:	eddf 7a36 	vldr	s15, [pc, #216]	; 8006bf0 <PDM_Filter_setConfig+0x180>
 8006b18:	9001      	str	r0, [sp, #4]
 8006b1a:	ee07 7a10 	vmov	s14, r7
 8006b1e:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 8006b22:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006b26:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006b2a:	f000 fb6d 	bl	8007208 <powf>
 8006b2e:	ee28 8a28 	vmul.f32	s16, s16, s17
 8006b32:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006b36:	f000 fb43 	bl	80071c0 <roundf>
 8006b3a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8006b3e:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
 8006b42:	ed84 0a16 	vstr	s0, [r4, #88]	; 0x58
 8006b46:	9801      	ldr	r0, [sp, #4]
 8006b48:	e7c4      	b.n	8006ad4 <PDM_Filter_setConfig+0x64>
 8006b4a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8006b4e:	42b2      	cmp	r2, r6
 8006b50:	d01a      	beq.n	8006b88 <PDM_Filter_setConfig+0x118>
 8006b52:	f023 030f 	bic.w	r3, r3, #15
 8006b56:	4333      	orrs	r3, r6
 8006b58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006b5c:	2a70      	cmp	r2, #112	; 0x70
 8006b5e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	d022      	beq.n	8006bac <PDM_Filter_setConfig+0x13c>
 8006b66:	2b09      	cmp	r3, #9
 8006b68:	d034      	beq.n	8006bd4 <PDM_Filter_setConfig+0x164>
 8006b6a:	2b0a      	cmp	r3, #10
 8006b6c:	d11c      	bne.n	8006ba8 <PDM_Filter_setConfig+0x138>
 8006b6e:	4b21      	ldr	r3, [pc, #132]	; (8006bf4 <PDM_Filter_setConfig+0x184>)
 8006b70:	6663      	str	r3, [r4, #100]	; 0x64
 8006b72:	4660      	mov	r0, ip
 8006b74:	e7a7      	b.n	8006ac6 <PDM_Filter_setConfig+0x56>
 8006b76:	2333      	movs	r3, #51	; 0x33
 8006b78:	3040      	adds	r0, #64	; 0x40
 8006b7a:	80ab      	strh	r3, [r5, #4]
 8006b7c:	e7aa      	b.n	8006ad4 <PDM_Filter_setConfig+0x64>
 8006b7e:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8006b82:	42b3      	cmp	r3, r6
 8006b84:	d19f      	bne.n	8006ac6 <PDM_Filter_setConfig+0x56>
 8006b86:	e7a7      	b.n	8006ad8 <PDM_Filter_setConfig+0x68>
 8006b88:	428f      	cmp	r7, r1
 8006b8a:	d1f2      	bne.n	8006b72 <PDM_Filter_setConfig+0x102>
 8006b8c:	4660      	mov	r0, ip
 8006b8e:	e7a3      	b.n	8006ad8 <PDM_Filter_setConfig+0x68>
 8006b90:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006bf8 <PDM_Filter_setConfig+0x188>
 8006b94:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8006bfc <PDM_Filter_setConfig+0x18c>
 8006b98:	eddf 8a19 	vldr	s17, [pc, #100]	; 8006c00 <PDM_Filter_setConfig+0x190>
 8006b9c:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8006ba0:	bf18      	it	ne
 8006ba2:	eeb0 8a67 	vmovne.f32	s16, s15
 8006ba6:	e7b5      	b.n	8006b14 <PDM_Filter_setConfig+0xa4>
 8006ba8:	4660      	mov	r0, ip
 8006baa:	e78a      	b.n	8006ac2 <PDM_Filter_setConfig+0x52>
 8006bac:	2b09      	cmp	r3, #9
 8006bae:	d015      	beq.n	8006bdc <PDM_Filter_setConfig+0x16c>
 8006bb0:	2b0a      	cmp	r3, #10
 8006bb2:	d1f9      	bne.n	8006ba8 <PDM_Filter_setConfig+0x138>
 8006bb4:	4b13      	ldr	r3, [pc, #76]	; (8006c04 <PDM_Filter_setConfig+0x194>)
 8006bb6:	6663      	str	r3, [r4, #100]	; 0x64
 8006bb8:	4660      	mov	r0, ip
 8006bba:	e784      	b.n	8006ac6 <PDM_Filter_setConfig+0x56>
 8006bbc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8006c08 <PDM_Filter_setConfig+0x198>
 8006bc0:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8006c0c <PDM_Filter_setConfig+0x19c>
 8006bc4:	eddf 8a0e 	vldr	s17, [pc, #56]	; 8006c00 <PDM_Filter_setConfig+0x190>
 8006bc8:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8006bcc:	bf18      	it	ne
 8006bce:	eeb0 8a67 	vmovne.f32	s16, s15
 8006bd2:	e79f      	b.n	8006b14 <PDM_Filter_setConfig+0xa4>
 8006bd4:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <PDM_Filter_setConfig+0x1a0>)
 8006bd6:	6663      	str	r3, [r4, #100]	; 0x64
 8006bd8:	4660      	mov	r0, ip
 8006bda:	e774      	b.n	8006ac6 <PDM_Filter_setConfig+0x56>
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <PDM_Filter_setConfig+0x1a4>)
 8006bde:	6663      	str	r3, [r4, #100]	; 0x64
 8006be0:	4660      	mov	r0, ip
 8006be2:	e770      	b.n	8006ac6 <PDM_Filter_setConfig+0x56>
 8006be4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006be8:	4f800000 	.word	0x4f800000
 8006bec:	00000000 	.word	0x00000000
 8006bf0:	3d4ccccd 	.word	0x3d4ccccd
 8006bf4:	080061dd 	.word	0x080061dd
 8006bf8:	3cb3cc07 	.word	0x3cb3cc07
 8006bfc:	38b3cc07 	.word	0x38b3cc07
 8006c00:	4f000000 	.word	0x4f000000
 8006c04:	08005c19 	.word	0x08005c19
 8006c08:	3d800000 	.word	0x3d800000
 8006c0c:	39800000 	.word	0x39800000
 8006c10:	0800577d 	.word	0x0800577d
 8006c14:	0800536d 	.word	0x0800536d

08006c18 <PDM_Filter>:
 8006c18:	b410      	push	{r4}
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <PDM_Filter+0x30>)
 8006c1c:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8006c1e:	429c      	cmp	r4, r3
 8006c20:	d107      	bne.n	8006c32 <PDM_Filter+0x1a>
 8006c22:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8006c24:	05dc      	lsls	r4, r3, #23
 8006c26:	d508      	bpl.n	8006c3a <PDM_Filter+0x22>
 8006c28:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8006c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c2e:	320c      	adds	r2, #12
 8006c30:	4718      	bx	r3
 8006c32:	2004      	movs	r0, #4
 8006c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006c3e:	bf14      	ite	ne
 8006c40:	2020      	movne	r0, #32
 8006c42:	2030      	moveq	r0, #48	; 0x30
 8006c44:	e7f6      	b.n	8006c34 <PDM_Filter+0x1c>
 8006c46:	bf00      	nop
 8006c48:	b5e8b5cd 	.word	0xb5e8b5cd

08006c4c <arm_fir_decimate_q15>:
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	4604      	mov	r4, r0
 8006c52:	8845      	ldrh	r5, [r0, #2]
 8006c54:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8006c58:	6866      	ldr	r6, [r4, #4]
 8006c5a:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
 8006c5e:	b08f      	sub	sp, #60	; 0x3c
 8006c60:	3c01      	subs	r4, #1
 8006c62:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8006c66:	9002      	str	r0, [sp, #8]
 8006c68:	9401      	str	r4, [sp, #4]
 8006c6a:	7800      	ldrb	r0, [r0, #0]
 8006c6c:	fbb3 f3f0 	udiv	r3, r3, r0
 8006c70:	f003 0401 	and.w	r4, r3, #1
 8006c74:	940c      	str	r4, [sp, #48]	; 0x30
 8006c76:	085c      	lsrs	r4, r3, #1
 8006c78:	950a      	str	r5, [sp, #40]	; 0x28
 8006c7a:	9606      	str	r6, [sp, #24]
 8006c7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c7e:	940d      	str	r4, [sp, #52]	; 0x34
 8006c80:	f000 8096 	beq.w	8006db0 <arm_fir_decimate_q15+0x164>
 8006c84:	462b      	mov	r3, r5
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	9308      	str	r3, [sp, #32]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	3304      	adds	r3, #4
 8006c90:	08ad      	lsrs	r5, r5, #2
 8006c92:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8006c96:	9507      	str	r5, [sp, #28]
 8006c98:	00ed      	lsls	r5, r5, #3
 8006c9a:	9509      	str	r5, [sp, #36]	; 0x24
 8006c9c:	eb06 0805 	add.w	r8, r6, r5
 8006ca0:	9c01      	ldr	r4, [sp, #4]
 8006ca2:	1d0a      	adds	r2, r1, #4
 8006ca4:	1d23      	adds	r3, r4, #4
 8006ca6:	2602      	movs	r6, #2
 8006ca8:	4299      	cmp	r1, r3
 8006caa:	bf38      	it	cc
 8006cac:	4294      	cmpcc	r4, r2
 8006cae:	fb10 f506 	smulbb	r5, r0, r6
 8006cb2:	d36d      	bcc.n	8006d90 <arm_fir_decimate_q15+0x144>
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cb8:	fb16 2000 	smlabb	r0, r6, r0, r2
 8006cbc:	2809      	cmp	r0, #9
 8006cbe:	d967      	bls.n	8006d90 <arm_fir_decimate_q15+0x144>
 8006cc0:	1eae      	subs	r6, r5, #2
 8006cc2:	0876      	lsrs	r6, r6, #1
 8006cc4:	3601      	adds	r6, #1
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	4622      	mov	r2, r4
 8006cca:	2300      	movs	r3, #0
 8006ccc:	3301      	adds	r3, #1
 8006cce:	f850 4b04 	ldr.w	r4, [r0], #4
 8006cd2:	f842 4b04 	str.w	r4, [r2], #4
 8006cd6:	429e      	cmp	r6, r3
 8006cd8:	d8f8      	bhi.n	8006ccc <arm_fir_decimate_q15+0x80>
 8006cda:	9b02      	ldr	r3, [sp, #8]
 8006cdc:	9a01      	ldr	r2, [sp, #4]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	9305      	str	r3, [sp, #20]
 8006ce2:	006d      	lsls	r5, r5, #1
 8006ce4:	eb09 0e43 	add.w	lr, r9, r3, lsl #1
 8006ce8:	9b07      	ldr	r3, [sp, #28]
 8006cea:	442a      	add	r2, r5
 8006cec:	9201      	str	r2, [sp, #4]
 8006cee:	4429      	add	r1, r5
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 80f2 	beq.w	8006eda <arm_fir_decimate_q15+0x28e>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9d06      	ldr	r5, [sp, #24]
 8006cfa:	461c      	mov	r4, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4618      	mov	r0, r3
 8006d00:	46f4      	mov	ip, lr
 8006d02:	464f      	mov	r7, r9
 8006d04:	682e      	ldr	r6, [r5, #0]
 8006d06:	f8d7 b000 	ldr.w	fp, [r7]
 8006d0a:	f8dc a000 	ldr.w	sl, [ip]
 8006d0e:	fbcb 20c6 	smlald	r2, r0, fp, r6
 8006d12:	fbca 34c6 	smlald	r3, r4, sl, r6
 8006d16:	686e      	ldr	r6, [r5, #4]
 8006d18:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8006d1c:	f8dc a004 	ldr.w	sl, [ip, #4]
 8006d20:	3508      	adds	r5, #8
 8006d22:	3708      	adds	r7, #8
 8006d24:	f10c 0c08 	add.w	ip, ip, #8
 8006d28:	fbcb 20c6 	smlald	r2, r0, fp, r6
 8006d2c:	fbca 34c6 	smlald	r3, r4, sl, r6
 8006d30:	45a8      	cmp	r8, r5
 8006d32:	d1e7      	bne.n	8006d04 <arm_fir_decimate_q15+0xb8>
 8006d34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006d36:	44b6      	add	lr, r6
 8006d38:	eb09 0a06 	add.w	sl, r9, r6
 8006d3c:	9e08      	ldr	r6, [sp, #32]
 8006d3e:	b166      	cbz	r6, 8006d5a <arm_fir_decimate_q15+0x10e>
 8006d40:	4637      	mov	r7, r6
 8006d42:	f93e cb02 	ldrsh.w	ip, [lr], #2
 8006d46:	f93a bb02 	ldrsh.w	fp, [sl], #2
 8006d4a:	f935 6b02 	ldrsh.w	r6, [r5], #2
 8006d4e:	fbcb 20c6 	smlald	r2, r0, fp, r6
 8006d52:	fbcc 34c6 	smlald	r3, r4, ip, r6
 8006d56:	3f01      	subs	r7, #1
 8006d58:	d1f3      	bne.n	8006d42 <arm_fir_decimate_q15+0xf6>
 8006d5a:	0bd2      	lsrs	r2, r2, #15
 8006d5c:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
 8006d60:	9804      	ldr	r0, [sp, #16]
 8006d62:	f302 020f 	ssat	r2, #16, r2
 8006d66:	0bdb      	lsrs	r3, r3, #15
 8006d68:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
 8006d6c:	f303 030f 	ssat	r3, #16, r3
 8006d70:	f820 3c02 	strh.w	r3, [r0, #-2]
 8006d74:	9b05      	ldr	r3, [sp, #20]
 8006d76:	f820 2c04 	strh.w	r2, [r0, #-4]
 8006d7a:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 8006d7e:	1d03      	adds	r3, r0, #4
 8006d80:	9304      	str	r3, [sp, #16]
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	9303      	str	r3, [sp, #12]
 8006d88:	d00d      	beq.n	8006da6 <arm_fir_decimate_q15+0x15a>
 8006d8a:	9b02      	ldr	r3, [sp, #8]
 8006d8c:	7818      	ldrb	r0, [r3, #0]
 8006d8e:	e787      	b.n	8006ca0 <arm_fir_decimate_q15+0x54>
 8006d90:	9b01      	ldr	r3, [sp, #4]
 8006d92:	460a      	mov	r2, r1
 8006d94:	1e98      	subs	r0, r3, #2
 8006d96:	462b      	mov	r3, r5
 8006d98:	f932 4b02 	ldrsh.w	r4, [r2], #2
 8006d9c:	f820 4f02 	strh.w	r4, [r0, #2]!
 8006da0:	3b01      	subs	r3, #1
 8006da2:	d1f9      	bne.n	8006d98 <arm_fir_decimate_q15+0x14c>
 8006da4:	e799      	b.n	8006cda <arm_fir_decimate_q15+0x8e>
 8006da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006daa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8006db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d054      	beq.n	8006e60 <arm_fir_decimate_q15+0x214>
 8006db6:	9801      	ldr	r0, [sp, #4]
 8006db8:	9c02      	ldr	r4, [sp, #8]
 8006dba:	1d02      	adds	r2, r0, #4
 8006dbc:	1d0b      	adds	r3, r1, #4
 8006dbe:	7825      	ldrb	r5, [r4, #0]
 8006dc0:	4298      	cmp	r0, r3
 8006dc2:	bf38      	it	cc
 8006dc4:	4291      	cmpcc	r1, r2
 8006dc6:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006dca:	f0c0 808c 	bcc.w	8006ee6 <arm_fir_decimate_q15+0x29a>
 8006dce:	2a09      	cmp	r2, #9
 8006dd0:	f240 8089 	bls.w	8006ee6 <arm_fir_decimate_q15+0x29a>
 8006dd4:	1eab      	subs	r3, r5, #2
 8006dd6:	085b      	lsrs	r3, r3, #1
 8006dd8:	3301      	adds	r3, #1
 8006dda:	460c      	mov	r4, r1
 8006ddc:	2200      	movs	r2, #0
 8006dde:	3201      	adds	r2, #1
 8006de0:	f854 6b04 	ldr.w	r6, [r4], #4
 8006de4:	f840 6b04 	str.w	r6, [r0], #4
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d8f8      	bhi.n	8006dde <arm_fir_decimate_q15+0x192>
 8006dec:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 8006df0:	d004      	beq.n	8006dfc <arm_fir_decimate_q15+0x1b0>
 8006df2:	f931 2023 	ldrsh.w	r2, [r1, r3, lsl #2]
 8006df6:	9901      	ldr	r1, [sp, #4]
 8006df8:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
 8006dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfe:	089a      	lsrs	r2, r3, #2
 8006e00:	d07e      	beq.n	8006f00 <arm_fir_decimate_q15+0x2b4>
 8006e02:	00d5      	lsls	r5, r2, #3
 8006e04:	9806      	ldr	r0, [sp, #24]
 8006e06:	2200      	movs	r2, #0
 8006e08:	eb09 0405 	add.w	r4, r9, r5
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	4649      	mov	r1, r9
 8006e10:	f8d0 c000 	ldr.w	ip, [r0]
 8006e14:	6847      	ldr	r7, [r0, #4]
 8006e16:	680e      	ldr	r6, [r1, #0]
 8006e18:	3008      	adds	r0, #8
 8006e1a:	fbc6 23cc 	smlald	r2, r3, r6, ip
 8006e1e:	684e      	ldr	r6, [r1, #4]
 8006e20:	3108      	adds	r1, #8
 8006e22:	fbc6 23c7 	smlald	r2, r3, r6, r7
 8006e26:	428c      	cmp	r4, r1
 8006e28:	d1f2      	bne.n	8006e10 <arm_fir_decimate_q15+0x1c4>
 8006e2a:	9806      	ldr	r0, [sp, #24]
 8006e2c:	4428      	add	r0, r5
 8006e2e:	9006      	str	r0, [sp, #24]
 8006e30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006e32:	f010 0003 	ands.w	r0, r0, #3
 8006e36:	d008      	beq.n	8006e4a <arm_fir_decimate_q15+0x1fe>
 8006e38:	9e06      	ldr	r6, [sp, #24]
 8006e3a:	f931 4b02 	ldrsh.w	r4, [r1], #2
 8006e3e:	f936 5b02 	ldrsh.w	r5, [r6], #2
 8006e42:	fbc4 23c5 	smlald	r2, r3, r4, r5
 8006e46:	3801      	subs	r0, #1
 8006e48:	d1f7      	bne.n	8006e3a <arm_fir_decimate_q15+0x1ee>
 8006e4a:	9902      	ldr	r1, [sp, #8]
 8006e4c:	0bd2      	lsrs	r2, r2, #15
 8006e4e:	7809      	ldrb	r1, [r1, #0]
 8006e50:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8006e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e56:	f302 020f 	ssat	r2, #16, r2
 8006e5a:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8006e5e:	801a      	strh	r2, [r3, #0]
 8006e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e62:	1e5e      	subs	r6, r3, #1
 8006e64:	9b02      	ldr	r3, [sp, #8]
 8006e66:	08b0      	lsrs	r0, r6, #2
 8006e68:	689f      	ldr	r7, [r3, #8]
 8006e6a:	d023      	beq.n	8006eb4 <arm_fir_decimate_q15+0x268>
 8006e6c:	f109 0308 	add.w	r3, r9, #8
 8006e70:	f107 0208 	add.w	r2, r7, #8
 8006e74:	4591      	cmp	r9, r2
 8006e76:	bf38      	it	cc
 8006e78:	429f      	cmpcc	r7, r3
 8006e7a:	bf2c      	ite	cs
 8006e7c:	2301      	movcs	r3, #1
 8006e7e:	2300      	movcc	r3, #0
 8006e80:	1e42      	subs	r2, r0, #1
 8006e82:	2a04      	cmp	r2, #4
 8006e84:	bf94      	ite	ls
 8006e86:	2300      	movls	r3, #0
 8006e88:	f003 0301 	andhi.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d03a      	beq.n	8006f06 <arm_fir_decimate_q15+0x2ba>
 8006e90:	ea47 0309 	orr.w	r3, r7, r9
 8006e94:	075b      	lsls	r3, r3, #29
 8006e96:	d136      	bne.n	8006f06 <arm_fir_decimate_q15+0x2ba>
 8006e98:	f1a9 0108 	sub.w	r1, r9, #8
 8006e9c:	463a      	mov	r2, r7
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e9f1 4502 	ldrd	r4, r5, [r1, #8]!
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	4298      	cmp	r0, r3
 8006ea8:	e8e2 4502 	strd	r4, r5, [r2], #8
 8006eac:	d1f8      	bne.n	8006ea0 <arm_fir_decimate_q15+0x254>
 8006eae:	00c0      	lsls	r0, r0, #3
 8006eb0:	4407      	add	r7, r0
 8006eb2:	4481      	add	r9, r0
 8006eb4:	f016 0603 	ands.w	r6, r6, #3
 8006eb8:	d00c      	beq.n	8006ed4 <arm_fir_decimate_q15+0x288>
 8006eba:	f9b9 3000 	ldrsh.w	r3, [r9]
 8006ebe:	803b      	strh	r3, [r7, #0]
 8006ec0:	3e01      	subs	r6, #1
 8006ec2:	d007      	beq.n	8006ed4 <arm_fir_decimate_q15+0x288>
 8006ec4:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 8006ec8:	807b      	strh	r3, [r7, #2]
 8006eca:	2e01      	cmp	r6, #1
 8006ecc:	bf1c      	itt	ne
 8006ece:	f9b9 3004 	ldrshne.w	r3, [r9, #4]
 8006ed2:	80bb      	strhne	r3, [r7, #4]
 8006ed4:	b00f      	add	sp, #60	; 0x3c
 8006ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eda:	4618      	mov	r0, r3
 8006edc:	46ca      	mov	sl, r9
 8006ede:	9d06      	ldr	r5, [sp, #24]
 8006ee0:	461c      	mov	r4, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	e72a      	b.n	8006d3c <arm_fir_decimate_q15+0xf0>
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	3b02      	subs	r3, #2
 8006eea:	e000      	b.n	8006eee <arm_fir_decimate_q15+0x2a2>
 8006eec:	3a01      	subs	r2, #1
 8006eee:	f931 0b02 	ldrsh.w	r0, [r1], #2
 8006ef2:	f823 0f02 	strh.w	r0, [r3, #2]!
 8006ef6:	2a00      	cmp	r2, #0
 8006ef8:	d1f8      	bne.n	8006eec <arm_fir_decimate_q15+0x2a0>
 8006efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006efc:	089a      	lsrs	r2, r3, #2
 8006efe:	d180      	bne.n	8006e02 <arm_fir_decimate_q15+0x1b6>
 8006f00:	4613      	mov	r3, r2
 8006f02:	4649      	mov	r1, r9
 8006f04:	e794      	b.n	8006e30 <arm_fir_decimate_q15+0x1e4>
 8006f06:	463a      	mov	r2, r7
 8006f08:	464b      	mov	r3, r9
 8006f0a:	4601      	mov	r1, r0
 8006f0c:	681c      	ldr	r4, [r3, #0]
 8006f0e:	6014      	str	r4, [r2, #0]
 8006f10:	685c      	ldr	r4, [r3, #4]
 8006f12:	6054      	str	r4, [r2, #4]
 8006f14:	3901      	subs	r1, #1
 8006f16:	f103 0308 	add.w	r3, r3, #8
 8006f1a:	f102 0208 	add.w	r2, r2, #8
 8006f1e:	d1f5      	bne.n	8006f0c <arm_fir_decimate_q15+0x2c0>
 8006f20:	e7c5      	b.n	8006eae <arm_fir_decimate_q15+0x262>
 8006f22:	bf00      	nop

08006f24 <__errno>:
 8006f24:	4b01      	ldr	r3, [pc, #4]	; (8006f2c <__errno+0x8>)
 8006f26:	6818      	ldr	r0, [r3, #0]
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	200010ac 	.word	0x200010ac

08006f30 <__libc_init_array>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	4d0d      	ldr	r5, [pc, #52]	; (8006f68 <__libc_init_array+0x38>)
 8006f34:	4c0d      	ldr	r4, [pc, #52]	; (8006f6c <__libc_init_array+0x3c>)
 8006f36:	1b64      	subs	r4, r4, r5
 8006f38:	10a4      	asrs	r4, r4, #2
 8006f3a:	2600      	movs	r6, #0
 8006f3c:	42a6      	cmp	r6, r4
 8006f3e:	d109      	bne.n	8006f54 <__libc_init_array+0x24>
 8006f40:	4d0b      	ldr	r5, [pc, #44]	; (8006f70 <__libc_init_array+0x40>)
 8006f42:	4c0c      	ldr	r4, [pc, #48]	; (8006f74 <__libc_init_array+0x44>)
 8006f44:	f000 fd32 	bl	80079ac <_init>
 8006f48:	1b64      	subs	r4, r4, r5
 8006f4a:	10a4      	asrs	r4, r4, #2
 8006f4c:	2600      	movs	r6, #0
 8006f4e:	42a6      	cmp	r6, r4
 8006f50:	d105      	bne.n	8006f5e <__libc_init_array+0x2e>
 8006f52:	bd70      	pop	{r4, r5, r6, pc}
 8006f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f58:	4798      	blx	r3
 8006f5a:	3601      	adds	r6, #1
 8006f5c:	e7ee      	b.n	8006f3c <__libc_init_array+0xc>
 8006f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f62:	4798      	blx	r3
 8006f64:	3601      	adds	r6, #1
 8006f66:	e7f2      	b.n	8006f4e <__libc_init_array+0x1e>
 8006f68:	08007d0c 	.word	0x08007d0c
 8006f6c:	08007d0c 	.word	0x08007d0c
 8006f70:	08007d0c 	.word	0x08007d0c
 8006f74:	08007d10 	.word	0x08007d10

08006f78 <malloc>:
 8006f78:	4b02      	ldr	r3, [pc, #8]	; (8006f84 <malloc+0xc>)
 8006f7a:	4601      	mov	r1, r0
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	f000 b88d 	b.w	800709c <_malloc_r>
 8006f82:	bf00      	nop
 8006f84:	200010ac 	.word	0x200010ac

08006f88 <free>:
 8006f88:	4b02      	ldr	r3, [pc, #8]	; (8006f94 <free+0xc>)
 8006f8a:	4601      	mov	r1, r0
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	f000 b819 	b.w	8006fc4 <_free_r>
 8006f92:	bf00      	nop
 8006f94:	200010ac 	.word	0x200010ac

08006f98 <memcpy>:
 8006f98:	440a      	add	r2, r1
 8006f9a:	4291      	cmp	r1, r2
 8006f9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fa0:	d100      	bne.n	8006fa4 <memcpy+0xc>
 8006fa2:	4770      	bx	lr
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fae:	4291      	cmp	r1, r2
 8006fb0:	d1f9      	bne.n	8006fa6 <memcpy+0xe>
 8006fb2:	bd10      	pop	{r4, pc}

08006fb4 <memset>:
 8006fb4:	4402      	add	r2, r0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d100      	bne.n	8006fbe <memset+0xa>
 8006fbc:	4770      	bx	lr
 8006fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8006fc2:	e7f9      	b.n	8006fb8 <memset+0x4>

08006fc4 <_free_r>:
 8006fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fc6:	2900      	cmp	r1, #0
 8006fc8:	d044      	beq.n	8007054 <_free_r+0x90>
 8006fca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fce:	9001      	str	r0, [sp, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f1a1 0404 	sub.w	r4, r1, #4
 8006fd6:	bfb8      	it	lt
 8006fd8:	18e4      	addlt	r4, r4, r3
 8006fda:	f000 f8e3 	bl	80071a4 <__malloc_lock>
 8006fde:	4a1e      	ldr	r2, [pc, #120]	; (8007058 <_free_r+0x94>)
 8006fe0:	9801      	ldr	r0, [sp, #4]
 8006fe2:	6813      	ldr	r3, [r2, #0]
 8006fe4:	b933      	cbnz	r3, 8006ff4 <_free_r+0x30>
 8006fe6:	6063      	str	r3, [r4, #4]
 8006fe8:	6014      	str	r4, [r2, #0]
 8006fea:	b003      	add	sp, #12
 8006fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ff0:	f000 b8de 	b.w	80071b0 <__malloc_unlock>
 8006ff4:	42a3      	cmp	r3, r4
 8006ff6:	d908      	bls.n	800700a <_free_r+0x46>
 8006ff8:	6825      	ldr	r5, [r4, #0]
 8006ffa:	1961      	adds	r1, r4, r5
 8006ffc:	428b      	cmp	r3, r1
 8006ffe:	bf01      	itttt	eq
 8007000:	6819      	ldreq	r1, [r3, #0]
 8007002:	685b      	ldreq	r3, [r3, #4]
 8007004:	1949      	addeq	r1, r1, r5
 8007006:	6021      	streq	r1, [r4, #0]
 8007008:	e7ed      	b.n	8006fe6 <_free_r+0x22>
 800700a:	461a      	mov	r2, r3
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	b10b      	cbz	r3, 8007014 <_free_r+0x50>
 8007010:	42a3      	cmp	r3, r4
 8007012:	d9fa      	bls.n	800700a <_free_r+0x46>
 8007014:	6811      	ldr	r1, [r2, #0]
 8007016:	1855      	adds	r5, r2, r1
 8007018:	42a5      	cmp	r5, r4
 800701a:	d10b      	bne.n	8007034 <_free_r+0x70>
 800701c:	6824      	ldr	r4, [r4, #0]
 800701e:	4421      	add	r1, r4
 8007020:	1854      	adds	r4, r2, r1
 8007022:	42a3      	cmp	r3, r4
 8007024:	6011      	str	r1, [r2, #0]
 8007026:	d1e0      	bne.n	8006fea <_free_r+0x26>
 8007028:	681c      	ldr	r4, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	6053      	str	r3, [r2, #4]
 800702e:	4421      	add	r1, r4
 8007030:	6011      	str	r1, [r2, #0]
 8007032:	e7da      	b.n	8006fea <_free_r+0x26>
 8007034:	d902      	bls.n	800703c <_free_r+0x78>
 8007036:	230c      	movs	r3, #12
 8007038:	6003      	str	r3, [r0, #0]
 800703a:	e7d6      	b.n	8006fea <_free_r+0x26>
 800703c:	6825      	ldr	r5, [r4, #0]
 800703e:	1961      	adds	r1, r4, r5
 8007040:	428b      	cmp	r3, r1
 8007042:	bf04      	itt	eq
 8007044:	6819      	ldreq	r1, [r3, #0]
 8007046:	685b      	ldreq	r3, [r3, #4]
 8007048:	6063      	str	r3, [r4, #4]
 800704a:	bf04      	itt	eq
 800704c:	1949      	addeq	r1, r1, r5
 800704e:	6021      	streq	r1, [r4, #0]
 8007050:	6054      	str	r4, [r2, #4]
 8007052:	e7ca      	b.n	8006fea <_free_r+0x26>
 8007054:	b003      	add	sp, #12
 8007056:	bd30      	pop	{r4, r5, pc}
 8007058:	20003244 	.word	0x20003244

0800705c <sbrk_aligned>:
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	4e0e      	ldr	r6, [pc, #56]	; (8007098 <sbrk_aligned+0x3c>)
 8007060:	460c      	mov	r4, r1
 8007062:	6831      	ldr	r1, [r6, #0]
 8007064:	4605      	mov	r5, r0
 8007066:	b911      	cbnz	r1, 800706e <sbrk_aligned+0x12>
 8007068:	f000 f88c 	bl	8007184 <_sbrk_r>
 800706c:	6030      	str	r0, [r6, #0]
 800706e:	4621      	mov	r1, r4
 8007070:	4628      	mov	r0, r5
 8007072:	f000 f887 	bl	8007184 <_sbrk_r>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	d00a      	beq.n	8007090 <sbrk_aligned+0x34>
 800707a:	1cc4      	adds	r4, r0, #3
 800707c:	f024 0403 	bic.w	r4, r4, #3
 8007080:	42a0      	cmp	r0, r4
 8007082:	d007      	beq.n	8007094 <sbrk_aligned+0x38>
 8007084:	1a21      	subs	r1, r4, r0
 8007086:	4628      	mov	r0, r5
 8007088:	f000 f87c 	bl	8007184 <_sbrk_r>
 800708c:	3001      	adds	r0, #1
 800708e:	d101      	bne.n	8007094 <sbrk_aligned+0x38>
 8007090:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007094:	4620      	mov	r0, r4
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	20003248 	.word	0x20003248

0800709c <_malloc_r>:
 800709c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a0:	1ccd      	adds	r5, r1, #3
 80070a2:	f025 0503 	bic.w	r5, r5, #3
 80070a6:	3508      	adds	r5, #8
 80070a8:	2d0c      	cmp	r5, #12
 80070aa:	bf38      	it	cc
 80070ac:	250c      	movcc	r5, #12
 80070ae:	2d00      	cmp	r5, #0
 80070b0:	4607      	mov	r7, r0
 80070b2:	db01      	blt.n	80070b8 <_malloc_r+0x1c>
 80070b4:	42a9      	cmp	r1, r5
 80070b6:	d905      	bls.n	80070c4 <_malloc_r+0x28>
 80070b8:	230c      	movs	r3, #12
 80070ba:	603b      	str	r3, [r7, #0]
 80070bc:	2600      	movs	r6, #0
 80070be:	4630      	mov	r0, r6
 80070c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c4:	4e2e      	ldr	r6, [pc, #184]	; (8007180 <_malloc_r+0xe4>)
 80070c6:	f000 f86d 	bl	80071a4 <__malloc_lock>
 80070ca:	6833      	ldr	r3, [r6, #0]
 80070cc:	461c      	mov	r4, r3
 80070ce:	bb34      	cbnz	r4, 800711e <_malloc_r+0x82>
 80070d0:	4629      	mov	r1, r5
 80070d2:	4638      	mov	r0, r7
 80070d4:	f7ff ffc2 	bl	800705c <sbrk_aligned>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	4604      	mov	r4, r0
 80070dc:	d14d      	bne.n	800717a <_malloc_r+0xde>
 80070de:	6834      	ldr	r4, [r6, #0]
 80070e0:	4626      	mov	r6, r4
 80070e2:	2e00      	cmp	r6, #0
 80070e4:	d140      	bne.n	8007168 <_malloc_r+0xcc>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	4631      	mov	r1, r6
 80070ea:	4638      	mov	r0, r7
 80070ec:	eb04 0803 	add.w	r8, r4, r3
 80070f0:	f000 f848 	bl	8007184 <_sbrk_r>
 80070f4:	4580      	cmp	r8, r0
 80070f6:	d13a      	bne.n	800716e <_malloc_r+0xd2>
 80070f8:	6821      	ldr	r1, [r4, #0]
 80070fa:	3503      	adds	r5, #3
 80070fc:	1a6d      	subs	r5, r5, r1
 80070fe:	f025 0503 	bic.w	r5, r5, #3
 8007102:	3508      	adds	r5, #8
 8007104:	2d0c      	cmp	r5, #12
 8007106:	bf38      	it	cc
 8007108:	250c      	movcc	r5, #12
 800710a:	4629      	mov	r1, r5
 800710c:	4638      	mov	r0, r7
 800710e:	f7ff ffa5 	bl	800705c <sbrk_aligned>
 8007112:	3001      	adds	r0, #1
 8007114:	d02b      	beq.n	800716e <_malloc_r+0xd2>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	442b      	add	r3, r5
 800711a:	6023      	str	r3, [r4, #0]
 800711c:	e00e      	b.n	800713c <_malloc_r+0xa0>
 800711e:	6822      	ldr	r2, [r4, #0]
 8007120:	1b52      	subs	r2, r2, r5
 8007122:	d41e      	bmi.n	8007162 <_malloc_r+0xc6>
 8007124:	2a0b      	cmp	r2, #11
 8007126:	d916      	bls.n	8007156 <_malloc_r+0xba>
 8007128:	1961      	adds	r1, r4, r5
 800712a:	42a3      	cmp	r3, r4
 800712c:	6025      	str	r5, [r4, #0]
 800712e:	bf18      	it	ne
 8007130:	6059      	strne	r1, [r3, #4]
 8007132:	6863      	ldr	r3, [r4, #4]
 8007134:	bf08      	it	eq
 8007136:	6031      	streq	r1, [r6, #0]
 8007138:	5162      	str	r2, [r4, r5]
 800713a:	604b      	str	r3, [r1, #4]
 800713c:	4638      	mov	r0, r7
 800713e:	f104 060b 	add.w	r6, r4, #11
 8007142:	f000 f835 	bl	80071b0 <__malloc_unlock>
 8007146:	f026 0607 	bic.w	r6, r6, #7
 800714a:	1d23      	adds	r3, r4, #4
 800714c:	1af2      	subs	r2, r6, r3
 800714e:	d0b6      	beq.n	80070be <_malloc_r+0x22>
 8007150:	1b9b      	subs	r3, r3, r6
 8007152:	50a3      	str	r3, [r4, r2]
 8007154:	e7b3      	b.n	80070be <_malloc_r+0x22>
 8007156:	6862      	ldr	r2, [r4, #4]
 8007158:	42a3      	cmp	r3, r4
 800715a:	bf0c      	ite	eq
 800715c:	6032      	streq	r2, [r6, #0]
 800715e:	605a      	strne	r2, [r3, #4]
 8007160:	e7ec      	b.n	800713c <_malloc_r+0xa0>
 8007162:	4623      	mov	r3, r4
 8007164:	6864      	ldr	r4, [r4, #4]
 8007166:	e7b2      	b.n	80070ce <_malloc_r+0x32>
 8007168:	4634      	mov	r4, r6
 800716a:	6876      	ldr	r6, [r6, #4]
 800716c:	e7b9      	b.n	80070e2 <_malloc_r+0x46>
 800716e:	230c      	movs	r3, #12
 8007170:	603b      	str	r3, [r7, #0]
 8007172:	4638      	mov	r0, r7
 8007174:	f000 f81c 	bl	80071b0 <__malloc_unlock>
 8007178:	e7a1      	b.n	80070be <_malloc_r+0x22>
 800717a:	6025      	str	r5, [r4, #0]
 800717c:	e7de      	b.n	800713c <_malloc_r+0xa0>
 800717e:	bf00      	nop
 8007180:	20003244 	.word	0x20003244

08007184 <_sbrk_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4d06      	ldr	r5, [pc, #24]	; (80071a0 <_sbrk_r+0x1c>)
 8007188:	2300      	movs	r3, #0
 800718a:	4604      	mov	r4, r0
 800718c:	4608      	mov	r0, r1
 800718e:	602b      	str	r3, [r5, #0]
 8007190:	f7f9 f81e 	bl	80001d0 <_sbrk>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d102      	bne.n	800719e <_sbrk_r+0x1a>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	b103      	cbz	r3, 800719e <_sbrk_r+0x1a>
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	bd38      	pop	{r3, r4, r5, pc}
 80071a0:	2000324c 	.word	0x2000324c

080071a4 <__malloc_lock>:
 80071a4:	4801      	ldr	r0, [pc, #4]	; (80071ac <__malloc_lock+0x8>)
 80071a6:	f000 b809 	b.w	80071bc <__retarget_lock_acquire_recursive>
 80071aa:	bf00      	nop
 80071ac:	20003250 	.word	0x20003250

080071b0 <__malloc_unlock>:
 80071b0:	4801      	ldr	r0, [pc, #4]	; (80071b8 <__malloc_unlock+0x8>)
 80071b2:	f000 b804 	b.w	80071be <__retarget_lock_release_recursive>
 80071b6:	bf00      	nop
 80071b8:	20003250 	.word	0x20003250

080071bc <__retarget_lock_acquire_recursive>:
 80071bc:	4770      	bx	lr

080071be <__retarget_lock_release_recursive>:
 80071be:	4770      	bx	lr

080071c0 <roundf>:
 80071c0:	ee10 0a10 	vmov	r0, s0
 80071c4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80071c8:	3a7f      	subs	r2, #127	; 0x7f
 80071ca:	2a16      	cmp	r2, #22
 80071cc:	dc15      	bgt.n	80071fa <roundf+0x3a>
 80071ce:	2a00      	cmp	r2, #0
 80071d0:	da08      	bge.n	80071e4 <roundf+0x24>
 80071d2:	3201      	adds	r2, #1
 80071d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80071d8:	d101      	bne.n	80071de <roundf+0x1e>
 80071da:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80071de:	ee00 3a10 	vmov	s0, r3
 80071e2:	4770      	bx	lr
 80071e4:	4907      	ldr	r1, [pc, #28]	; (8007204 <roundf+0x44>)
 80071e6:	4111      	asrs	r1, r2
 80071e8:	4208      	tst	r0, r1
 80071ea:	d0fa      	beq.n	80071e2 <roundf+0x22>
 80071ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80071f0:	4113      	asrs	r3, r2
 80071f2:	4403      	add	r3, r0
 80071f4:	ea23 0301 	bic.w	r3, r3, r1
 80071f8:	e7f1      	b.n	80071de <roundf+0x1e>
 80071fa:	2a80      	cmp	r2, #128	; 0x80
 80071fc:	d1f1      	bne.n	80071e2 <roundf+0x22>
 80071fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007202:	4770      	bx	lr
 8007204:	007fffff 	.word	0x007fffff

08007208 <powf>:
 8007208:	b508      	push	{r3, lr}
 800720a:	ed2d 8b04 	vpush	{d8-d9}
 800720e:	eeb0 8a60 	vmov.f32	s16, s1
 8007212:	eeb0 9a40 	vmov.f32	s18, s0
 8007216:	f000 f84f 	bl	80072b8 <__ieee754_powf>
 800721a:	eeb4 8a48 	vcmp.f32	s16, s16
 800721e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007222:	eef0 8a40 	vmov.f32	s17, s0
 8007226:	d63e      	bvs.n	80072a6 <powf+0x9e>
 8007228:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800722c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007230:	d112      	bne.n	8007258 <powf+0x50>
 8007232:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723a:	d039      	beq.n	80072b0 <powf+0xa8>
 800723c:	eeb0 0a48 	vmov.f32	s0, s16
 8007240:	f000 fb35 	bl	80078ae <finitef>
 8007244:	b378      	cbz	r0, 80072a6 <powf+0x9e>
 8007246:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800724a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724e:	d52a      	bpl.n	80072a6 <powf+0x9e>
 8007250:	f7ff fe68 	bl	8006f24 <__errno>
 8007254:	2322      	movs	r3, #34	; 0x22
 8007256:	e014      	b.n	8007282 <powf+0x7a>
 8007258:	f000 fb29 	bl	80078ae <finitef>
 800725c:	b998      	cbnz	r0, 8007286 <powf+0x7e>
 800725e:	eeb0 0a49 	vmov.f32	s0, s18
 8007262:	f000 fb24 	bl	80078ae <finitef>
 8007266:	b170      	cbz	r0, 8007286 <powf+0x7e>
 8007268:	eeb0 0a48 	vmov.f32	s0, s16
 800726c:	f000 fb1f 	bl	80078ae <finitef>
 8007270:	b148      	cbz	r0, 8007286 <powf+0x7e>
 8007272:	eef4 8a68 	vcmp.f32	s17, s17
 8007276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727a:	d7e9      	bvc.n	8007250 <powf+0x48>
 800727c:	f7ff fe52 	bl	8006f24 <__errno>
 8007280:	2321      	movs	r3, #33	; 0x21
 8007282:	6003      	str	r3, [r0, #0]
 8007284:	e00f      	b.n	80072a6 <powf+0x9e>
 8007286:	eef5 8a40 	vcmp.f32	s17, #0.0
 800728a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728e:	d10a      	bne.n	80072a6 <powf+0x9e>
 8007290:	eeb0 0a49 	vmov.f32	s0, s18
 8007294:	f000 fb0b 	bl	80078ae <finitef>
 8007298:	b128      	cbz	r0, 80072a6 <powf+0x9e>
 800729a:	eeb0 0a48 	vmov.f32	s0, s16
 800729e:	f000 fb06 	bl	80078ae <finitef>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d1d4      	bne.n	8007250 <powf+0x48>
 80072a6:	eeb0 0a68 	vmov.f32	s0, s17
 80072aa:	ecbd 8b04 	vpop	{d8-d9}
 80072ae:	bd08      	pop	{r3, pc}
 80072b0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80072b4:	e7f7      	b.n	80072a6 <powf+0x9e>
	...

080072b8 <__ieee754_powf>:
 80072b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072bc:	ee10 4a90 	vmov	r4, s1
 80072c0:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80072c4:	ed2d 8b02 	vpush	{d8}
 80072c8:	ee10 6a10 	vmov	r6, s0
 80072cc:	eeb0 8a40 	vmov.f32	s16, s0
 80072d0:	eef0 8a60 	vmov.f32	s17, s1
 80072d4:	d10c      	bne.n	80072f0 <__ieee754_powf+0x38>
 80072d6:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80072da:	0076      	lsls	r6, r6, #1
 80072dc:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80072e0:	f240 8296 	bls.w	8007810 <__ieee754_powf+0x558>
 80072e4:	ee38 0a28 	vadd.f32	s0, s16, s17
 80072e8:	ecbd 8b02 	vpop	{d8}
 80072ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80072f4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80072f8:	dcf4      	bgt.n	80072e4 <__ieee754_powf+0x2c>
 80072fa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80072fe:	dd08      	ble.n	8007312 <__ieee754_powf+0x5a>
 8007300:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8007304:	d1ee      	bne.n	80072e4 <__ieee754_powf+0x2c>
 8007306:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800730a:	0064      	lsls	r4, r4, #1
 800730c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007310:	e7e6      	b.n	80072e0 <__ieee754_powf+0x28>
 8007312:	2e00      	cmp	r6, #0
 8007314:	da20      	bge.n	8007358 <__ieee754_powf+0xa0>
 8007316:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800731a:	da2d      	bge.n	8007378 <__ieee754_powf+0xc0>
 800731c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007320:	f2c0 827f 	blt.w	8007822 <__ieee754_powf+0x56a>
 8007324:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8007328:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800732c:	fa48 f703 	asr.w	r7, r8, r3
 8007330:	fa07 f303 	lsl.w	r3, r7, r3
 8007334:	4543      	cmp	r3, r8
 8007336:	f040 8274 	bne.w	8007822 <__ieee754_powf+0x56a>
 800733a:	f007 0701 	and.w	r7, r7, #1
 800733e:	f1c7 0702 	rsb	r7, r7, #2
 8007342:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007346:	d11f      	bne.n	8007388 <__ieee754_powf+0xd0>
 8007348:	2c00      	cmp	r4, #0
 800734a:	f280 8267 	bge.w	800781c <__ieee754_powf+0x564>
 800734e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007352:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007356:	e7c7      	b.n	80072e8 <__ieee754_powf+0x30>
 8007358:	2700      	movs	r7, #0
 800735a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800735e:	d1f0      	bne.n	8007342 <__ieee754_powf+0x8a>
 8007360:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8007364:	f000 8254 	beq.w	8007810 <__ieee754_powf+0x558>
 8007368:	dd08      	ble.n	800737c <__ieee754_powf+0xc4>
 800736a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8007674 <__ieee754_powf+0x3bc>
 800736e:	2c00      	cmp	r4, #0
 8007370:	bfa8      	it	ge
 8007372:	eeb0 0a68 	vmovge.f32	s0, s17
 8007376:	e7b7      	b.n	80072e8 <__ieee754_powf+0x30>
 8007378:	2702      	movs	r7, #2
 800737a:	e7ee      	b.n	800735a <__ieee754_powf+0xa2>
 800737c:	2c00      	cmp	r4, #0
 800737e:	f280 824a 	bge.w	8007816 <__ieee754_powf+0x55e>
 8007382:	eeb1 0a68 	vneg.f32	s0, s17
 8007386:	e7af      	b.n	80072e8 <__ieee754_powf+0x30>
 8007388:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800738c:	d102      	bne.n	8007394 <__ieee754_powf+0xdc>
 800738e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007392:	e7a9      	b.n	80072e8 <__ieee754_powf+0x30>
 8007394:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007398:	eeb0 0a48 	vmov.f32	s0, s16
 800739c:	d107      	bne.n	80073ae <__ieee754_powf+0xf6>
 800739e:	2e00      	cmp	r6, #0
 80073a0:	db05      	blt.n	80073ae <__ieee754_powf+0xf6>
 80073a2:	ecbd 8b02 	vpop	{d8}
 80073a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073aa:	f000 ba53 	b.w	8007854 <__ieee754_sqrtf>
 80073ae:	f000 fa77 	bl	80078a0 <fabsf>
 80073b2:	b125      	cbz	r5, 80073be <__ieee754_powf+0x106>
 80073b4:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80073b8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80073bc:	d116      	bne.n	80073ec <__ieee754_powf+0x134>
 80073be:	2c00      	cmp	r4, #0
 80073c0:	bfbc      	itt	lt
 80073c2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80073c6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80073ca:	2e00      	cmp	r6, #0
 80073cc:	da8c      	bge.n	80072e8 <__ieee754_powf+0x30>
 80073ce:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80073d2:	ea55 0307 	orrs.w	r3, r5, r7
 80073d6:	d104      	bne.n	80073e2 <__ieee754_powf+0x12a>
 80073d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80073dc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80073e0:	e782      	b.n	80072e8 <__ieee754_powf+0x30>
 80073e2:	2f01      	cmp	r7, #1
 80073e4:	d180      	bne.n	80072e8 <__ieee754_powf+0x30>
 80073e6:	eeb1 0a40 	vneg.f32	s0, s0
 80073ea:	e77d      	b.n	80072e8 <__ieee754_powf+0x30>
 80073ec:	0ff0      	lsrs	r0, r6, #31
 80073ee:	3801      	subs	r0, #1
 80073f0:	ea57 0300 	orrs.w	r3, r7, r0
 80073f4:	d104      	bne.n	8007400 <__ieee754_powf+0x148>
 80073f6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80073fa:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80073fe:	e773      	b.n	80072e8 <__ieee754_powf+0x30>
 8007400:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8007404:	dd74      	ble.n	80074f0 <__ieee754_powf+0x238>
 8007406:	4b9c      	ldr	r3, [pc, #624]	; (8007678 <__ieee754_powf+0x3c0>)
 8007408:	429d      	cmp	r5, r3
 800740a:	dc08      	bgt.n	800741e <__ieee754_powf+0x166>
 800740c:	2c00      	cmp	r4, #0
 800740e:	da0b      	bge.n	8007428 <__ieee754_powf+0x170>
 8007410:	2000      	movs	r0, #0
 8007412:	ecbd 8b02 	vpop	{d8}
 8007416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800741a:	f000 ba3b 	b.w	8007894 <__math_oflowf>
 800741e:	4b97      	ldr	r3, [pc, #604]	; (800767c <__ieee754_powf+0x3c4>)
 8007420:	429d      	cmp	r5, r3
 8007422:	dd08      	ble.n	8007436 <__ieee754_powf+0x17e>
 8007424:	2c00      	cmp	r4, #0
 8007426:	dcf3      	bgt.n	8007410 <__ieee754_powf+0x158>
 8007428:	2000      	movs	r0, #0
 800742a:	ecbd 8b02 	vpop	{d8}
 800742e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007432:	f000 ba29 	b.w	8007888 <__math_uflowf>
 8007436:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800743a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800743e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007680 <__ieee754_powf+0x3c8>
 8007442:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007446:	eee0 6a67 	vfms.f32	s13, s0, s15
 800744a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800744e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007452:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007684 <__ieee754_powf+0x3cc>
 800745e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007462:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8007688 <__ieee754_powf+0x3d0>
 8007466:	eee0 7a07 	vfma.f32	s15, s0, s14
 800746a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800768c <__ieee754_powf+0x3d4>
 800746e:	eef0 6a67 	vmov.f32	s13, s15
 8007472:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007476:	ee16 3a90 	vmov	r3, s13
 800747a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800747e:	f023 030f 	bic.w	r3, r3, #15
 8007482:	ee00 3a90 	vmov	s1, r3
 8007486:	eee0 0a47 	vfms.f32	s1, s0, s14
 800748a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800748e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8007492:	f024 040f 	bic.w	r4, r4, #15
 8007496:	ee07 4a10 	vmov	s14, r4
 800749a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800749e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eee7 0a27 	vfma.f32	s1, s14, s15
 80074aa:	3f01      	subs	r7, #1
 80074ac:	ea57 0200 	orrs.w	r2, r7, r0
 80074b0:	ee07 4a10 	vmov	s14, r4
 80074b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074b8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80074bc:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80074c0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80074c4:	ee17 4a10 	vmov	r4, s14
 80074c8:	bf08      	it	eq
 80074ca:	eeb0 8a40 	vmoveq.f32	s16, s0
 80074ce:	2c00      	cmp	r4, #0
 80074d0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80074d4:	f340 817e 	ble.w	80077d4 <__ieee754_powf+0x51c>
 80074d8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80074dc:	f340 80f8 	ble.w	80076d0 <__ieee754_powf+0x418>
 80074e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80074e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e8:	bf4c      	ite	mi
 80074ea:	2001      	movmi	r0, #1
 80074ec:	2000      	movpl	r0, #0
 80074ee:	e790      	b.n	8007412 <__ieee754_powf+0x15a>
 80074f0:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80074f4:	bf01      	itttt	eq
 80074f6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8007690 <__ieee754_powf+0x3d8>
 80074fa:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80074fe:	f06f 0217 	mvneq.w	r2, #23
 8007502:	ee17 5a90 	vmoveq	r5, s15
 8007506:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800750a:	bf18      	it	ne
 800750c:	2200      	movne	r2, #0
 800750e:	3b7f      	subs	r3, #127	; 0x7f
 8007510:	4413      	add	r3, r2
 8007512:	4a60      	ldr	r2, [pc, #384]	; (8007694 <__ieee754_powf+0x3dc>)
 8007514:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8007518:	4295      	cmp	r5, r2
 800751a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800751e:	dd06      	ble.n	800752e <__ieee754_powf+0x276>
 8007520:	4a5d      	ldr	r2, [pc, #372]	; (8007698 <__ieee754_powf+0x3e0>)
 8007522:	4295      	cmp	r5, r2
 8007524:	f340 80a4 	ble.w	8007670 <__ieee754_powf+0x3b8>
 8007528:	3301      	adds	r3, #1
 800752a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800752e:	2500      	movs	r5, #0
 8007530:	4a5a      	ldr	r2, [pc, #360]	; (800769c <__ieee754_powf+0x3e4>)
 8007532:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8007536:	ee07 1a90 	vmov	s15, r1
 800753a:	ed92 7a00 	vldr	s14, [r2]
 800753e:	4a58      	ldr	r2, [pc, #352]	; (80076a0 <__ieee754_powf+0x3e8>)
 8007540:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007544:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007548:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800754c:	1049      	asrs	r1, r1, #1
 800754e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007552:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007556:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800755a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800755e:	ee06 1a10 	vmov	s12, r1
 8007562:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007566:	ee36 7a47 	vsub.f32	s14, s12, s14
 800756a:	ee14 6a90 	vmov	r6, s9
 800756e:	4016      	ands	r6, r2
 8007570:	ee05 6a90 	vmov	s11, r6
 8007574:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007578:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800757c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80076a4 <__ieee754_powf+0x3ec>
 8007580:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8007584:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007588:	ee25 6a26 	vmul.f32	s12, s10, s13
 800758c:	eddf 6a46 	vldr	s13, [pc, #280]	; 80076a8 <__ieee754_powf+0x3f0>
 8007590:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007594:	eddf 6a45 	vldr	s13, [pc, #276]	; 80076ac <__ieee754_powf+0x3f4>
 8007598:	eee7 6a27 	vfma.f32	s13, s14, s15
 800759c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007680 <__ieee754_powf+0x3c8>
 80075a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075a4:	eddf 6a42 	vldr	s13, [pc, #264]	; 80076b0 <__ieee754_powf+0x3f8>
 80075a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80075ac:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80076b4 <__ieee754_powf+0x3fc>
 80075b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075b4:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80075b8:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80075bc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80075c0:	eee5 6a07 	vfma.f32	s13, s10, s14
 80075c4:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80075c8:	eef0 7a45 	vmov.f32	s15, s10
 80075cc:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80075d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d4:	ee17 1a90 	vmov	r1, s15
 80075d8:	4011      	ands	r1, r2
 80075da:	ee07 1a90 	vmov	s15, r1
 80075de:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80075e2:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80075e6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80075ea:	ee27 7a24 	vmul.f32	s14, s14, s9
 80075ee:	eea6 7a27 	vfma.f32	s14, s12, s15
 80075f2:	eeb0 6a47 	vmov.f32	s12, s14
 80075f6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80075fa:	ee16 1a10 	vmov	r1, s12
 80075fe:	4011      	ands	r1, r2
 8007600:	ee06 1a90 	vmov	s13, r1
 8007604:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007608:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80076b8 <__ieee754_powf+0x400>
 800760c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80076bc <__ieee754_powf+0x404>
 8007610:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007614:	ee06 1a10 	vmov	s12, r1
 8007618:	ee27 7a27 	vmul.f32	s14, s14, s15
 800761c:	eddf 7a28 	vldr	s15, [pc, #160]	; 80076c0 <__ieee754_powf+0x408>
 8007620:	4928      	ldr	r1, [pc, #160]	; (80076c4 <__ieee754_powf+0x40c>)
 8007622:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007626:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800762a:	edd1 7a00 	vldr	s15, [r1]
 800762e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	4b24      	ldr	r3, [pc, #144]	; (80076c8 <__ieee754_powf+0x410>)
 8007638:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800763c:	eef0 7a47 	vmov.f32	s15, s14
 8007640:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007644:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007648:	edd5 0a00 	vldr	s1, [r5]
 800764c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007654:	ee17 3a90 	vmov	r3, s15
 8007658:	4013      	ands	r3, r2
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007662:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007666:	eee6 6a65 	vfms.f32	s13, s12, s11
 800766a:	ee77 7a66 	vsub.f32	s15, s14, s13
 800766e:	e70e      	b.n	800748e <__ieee754_powf+0x1d6>
 8007670:	2501      	movs	r5, #1
 8007672:	e75d      	b.n	8007530 <__ieee754_powf+0x278>
 8007674:	00000000 	.word	0x00000000
 8007678:	3f7ffff3 	.word	0x3f7ffff3
 800767c:	3f800007 	.word	0x3f800007
 8007680:	3eaaaaab 	.word	0x3eaaaaab
 8007684:	3fb8aa3b 	.word	0x3fb8aa3b
 8007688:	36eca570 	.word	0x36eca570
 800768c:	3fb8aa00 	.word	0x3fb8aa00
 8007690:	4b800000 	.word	0x4b800000
 8007694:	001cc471 	.word	0x001cc471
 8007698:	005db3d6 	.word	0x005db3d6
 800769c:	08007cf4 	.word	0x08007cf4
 80076a0:	fffff000 	.word	0xfffff000
 80076a4:	3e6c3255 	.word	0x3e6c3255
 80076a8:	3e53f142 	.word	0x3e53f142
 80076ac:	3e8ba305 	.word	0x3e8ba305
 80076b0:	3edb6db7 	.word	0x3edb6db7
 80076b4:	3f19999a 	.word	0x3f19999a
 80076b8:	3f76384f 	.word	0x3f76384f
 80076bc:	3f763800 	.word	0x3f763800
 80076c0:	369dc3a0 	.word	0x369dc3a0
 80076c4:	08007d04 	.word	0x08007d04
 80076c8:	08007cfc 	.word	0x08007cfc
 80076cc:	3338aa3c 	.word	0x3338aa3c
 80076d0:	f040 8095 	bne.w	80077fe <__ieee754_powf+0x546>
 80076d4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80076cc <__ieee754_powf+0x414>
 80076d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076dc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80076e0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80076e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e8:	f73f aefa 	bgt.w	80074e0 <__ieee754_powf+0x228>
 80076ec:	15db      	asrs	r3, r3, #23
 80076ee:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80076f2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80076f6:	4103      	asrs	r3, r0
 80076f8:	4423      	add	r3, r4
 80076fa:	494b      	ldr	r1, [pc, #300]	; (8007828 <__ieee754_powf+0x570>)
 80076fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007700:	3a7f      	subs	r2, #127	; 0x7f
 8007702:	4111      	asrs	r1, r2
 8007704:	ea23 0101 	bic.w	r1, r3, r1
 8007708:	ee07 1a10 	vmov	s14, r1
 800770c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007710:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007714:	f1c2 0217 	rsb	r2, r2, #23
 8007718:	4110      	asrs	r0, r2
 800771a:	2c00      	cmp	r4, #0
 800771c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007720:	bfb8      	it	lt
 8007722:	4240      	neglt	r0, r0
 8007724:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007728:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800782c <__ieee754_powf+0x574>
 800772c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8007830 <__ieee754_powf+0x578>
 8007730:	ee17 3a10 	vmov	r3, s14
 8007734:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007738:	f023 030f 	bic.w	r3, r3, #15
 800773c:	ee07 3a10 	vmov	s14, r3
 8007740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007744:	ee27 0a00 	vmul.f32	s0, s14, s0
 8007748:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800774c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007834 <__ieee754_powf+0x57c>
 8007750:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8007754:	eef0 7a40 	vmov.f32	s15, s0
 8007758:	eee7 7a26 	vfma.f32	s15, s14, s13
 800775c:	eeb0 6a67 	vmov.f32	s12, s15
 8007760:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007764:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007768:	ee30 0a46 	vsub.f32	s0, s0, s12
 800776c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8007838 <__ieee754_powf+0x580>
 8007770:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800783c <__ieee754_powf+0x584>
 8007774:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007778:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8007840 <__ieee754_powf+0x588>
 800777c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007780:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007844 <__ieee754_powf+0x58c>
 8007784:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007788:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007848 <__ieee754_powf+0x590>
 800778c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007790:	eef0 6a67 	vmov.f32	s13, s15
 8007794:	eee6 6a47 	vfms.f32	s13, s12, s14
 8007798:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800779c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80077a0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80077a4:	eea7 0a80 	vfma.f32	s0, s15, s0
 80077a8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80077ac:	ee37 0a40 	vsub.f32	s0, s14, s0
 80077b0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80077b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80077b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80077bc:	ee10 3a10 	vmov	r3, s0
 80077c0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80077c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077c8:	da1f      	bge.n	800780a <__ieee754_powf+0x552>
 80077ca:	f000 f87d 	bl	80078c8 <scalbnf>
 80077ce:	ee20 0a08 	vmul.f32	s0, s0, s16
 80077d2:	e589      	b.n	80072e8 <__ieee754_powf+0x30>
 80077d4:	4a1d      	ldr	r2, [pc, #116]	; (800784c <__ieee754_powf+0x594>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	dd07      	ble.n	80077ea <__ieee754_powf+0x532>
 80077da:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80077de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e2:	bf4c      	ite	mi
 80077e4:	2001      	movmi	r0, #1
 80077e6:	2000      	movpl	r0, #0
 80077e8:	e61f      	b.n	800742a <__ieee754_powf+0x172>
 80077ea:	d108      	bne.n	80077fe <__ieee754_powf+0x546>
 80077ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077f0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80077f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f8:	f6ff af78 	blt.w	80076ec <__ieee754_powf+0x434>
 80077fc:	e7ed      	b.n	80077da <__ieee754_powf+0x522>
 80077fe:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007802:	f73f af73 	bgt.w	80076ec <__ieee754_powf+0x434>
 8007806:	2000      	movs	r0, #0
 8007808:	e78c      	b.n	8007724 <__ieee754_powf+0x46c>
 800780a:	ee00 3a10 	vmov	s0, r3
 800780e:	e7de      	b.n	80077ce <__ieee754_powf+0x516>
 8007810:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007814:	e568      	b.n	80072e8 <__ieee754_powf+0x30>
 8007816:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007850 <__ieee754_powf+0x598>
 800781a:	e565      	b.n	80072e8 <__ieee754_powf+0x30>
 800781c:	eeb0 0a48 	vmov.f32	s0, s16
 8007820:	e562      	b.n	80072e8 <__ieee754_powf+0x30>
 8007822:	2700      	movs	r7, #0
 8007824:	e58d      	b.n	8007342 <__ieee754_powf+0x8a>
 8007826:	bf00      	nop
 8007828:	007fffff 	.word	0x007fffff
 800782c:	35bfbe8c 	.word	0x35bfbe8c
 8007830:	3f317200 	.word	0x3f317200
 8007834:	3f317218 	.word	0x3f317218
 8007838:	b5ddea0e 	.word	0xb5ddea0e
 800783c:	3331bb4c 	.word	0x3331bb4c
 8007840:	388ab355 	.word	0x388ab355
 8007844:	bb360b61 	.word	0xbb360b61
 8007848:	3e2aaaab 	.word	0x3e2aaaab
 800784c:	43160000 	.word	0x43160000
 8007850:	00000000 	.word	0x00000000

08007854 <__ieee754_sqrtf>:
 8007854:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007858:	4770      	bx	lr

0800785a <with_errnof>:
 800785a:	b513      	push	{r0, r1, r4, lr}
 800785c:	4604      	mov	r4, r0
 800785e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007862:	f7ff fb5f 	bl	8006f24 <__errno>
 8007866:	ed9d 0a01 	vldr	s0, [sp, #4]
 800786a:	6004      	str	r4, [r0, #0]
 800786c:	b002      	add	sp, #8
 800786e:	bd10      	pop	{r4, pc}

08007870 <xflowf>:
 8007870:	b130      	cbz	r0, 8007880 <xflowf+0x10>
 8007872:	eef1 7a40 	vneg.f32	s15, s0
 8007876:	ee27 0a80 	vmul.f32	s0, s15, s0
 800787a:	2022      	movs	r0, #34	; 0x22
 800787c:	f7ff bfed 	b.w	800785a <with_errnof>
 8007880:	eef0 7a40 	vmov.f32	s15, s0
 8007884:	e7f7      	b.n	8007876 <xflowf+0x6>
	...

08007888 <__math_uflowf>:
 8007888:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007890 <__math_uflowf+0x8>
 800788c:	f7ff bff0 	b.w	8007870 <xflowf>
 8007890:	10000000 	.word	0x10000000

08007894 <__math_oflowf>:
 8007894:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800789c <__math_oflowf+0x8>
 8007898:	f7ff bfea 	b.w	8007870 <xflowf>
 800789c:	70000000 	.word	0x70000000

080078a0 <fabsf>:
 80078a0:	ee10 3a10 	vmov	r3, s0
 80078a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078a8:	ee00 3a10 	vmov	s0, r3
 80078ac:	4770      	bx	lr

080078ae <finitef>:
 80078ae:	b082      	sub	sp, #8
 80078b0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80078b4:	9801      	ldr	r0, [sp, #4]
 80078b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80078ba:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80078be:	bfac      	ite	ge
 80078c0:	2000      	movge	r0, #0
 80078c2:	2001      	movlt	r0, #1
 80078c4:	b002      	add	sp, #8
 80078c6:	4770      	bx	lr

080078c8 <scalbnf>:
 80078c8:	ee10 3a10 	vmov	r3, s0
 80078cc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80078d0:	d025      	beq.n	800791e <scalbnf+0x56>
 80078d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80078d6:	d302      	bcc.n	80078de <scalbnf+0x16>
 80078d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80078dc:	4770      	bx	lr
 80078de:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80078e2:	d122      	bne.n	800792a <scalbnf+0x62>
 80078e4:	4b2a      	ldr	r3, [pc, #168]	; (8007990 <scalbnf+0xc8>)
 80078e6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007994 <scalbnf+0xcc>
 80078ea:	4298      	cmp	r0, r3
 80078ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80078f0:	db16      	blt.n	8007920 <scalbnf+0x58>
 80078f2:	ee10 3a10 	vmov	r3, s0
 80078f6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80078fa:	3a19      	subs	r2, #25
 80078fc:	4402      	add	r2, r0
 80078fe:	2afe      	cmp	r2, #254	; 0xfe
 8007900:	dd15      	ble.n	800792e <scalbnf+0x66>
 8007902:	ee10 3a10 	vmov	r3, s0
 8007906:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007998 <scalbnf+0xd0>
 800790a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800799c <scalbnf+0xd4>
 800790e:	2b00      	cmp	r3, #0
 8007910:	eeb0 7a67 	vmov.f32	s14, s15
 8007914:	bfb8      	it	lt
 8007916:	eef0 7a66 	vmovlt.f32	s15, s13
 800791a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800791e:	4770      	bx	lr
 8007920:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80079a0 <scalbnf+0xd8>
 8007924:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007928:	4770      	bx	lr
 800792a:	0dd2      	lsrs	r2, r2, #23
 800792c:	e7e6      	b.n	80078fc <scalbnf+0x34>
 800792e:	2a00      	cmp	r2, #0
 8007930:	dd06      	ble.n	8007940 <scalbnf+0x78>
 8007932:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007936:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800793a:	ee00 3a10 	vmov	s0, r3
 800793e:	4770      	bx	lr
 8007940:	f112 0f16 	cmn.w	r2, #22
 8007944:	da1a      	bge.n	800797c <scalbnf+0xb4>
 8007946:	f24c 3350 	movw	r3, #50000	; 0xc350
 800794a:	4298      	cmp	r0, r3
 800794c:	ee10 3a10 	vmov	r3, s0
 8007950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007954:	dd0a      	ble.n	800796c <scalbnf+0xa4>
 8007956:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007998 <scalbnf+0xd0>
 800795a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800799c <scalbnf+0xd4>
 800795e:	eef0 7a40 	vmov.f32	s15, s0
 8007962:	2b00      	cmp	r3, #0
 8007964:	bf18      	it	ne
 8007966:	eeb0 0a47 	vmovne.f32	s0, s14
 800796a:	e7db      	b.n	8007924 <scalbnf+0x5c>
 800796c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80079a0 <scalbnf+0xd8>
 8007970:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80079a4 <scalbnf+0xdc>
 8007974:	eef0 7a40 	vmov.f32	s15, s0
 8007978:	2b00      	cmp	r3, #0
 800797a:	e7f3      	b.n	8007964 <scalbnf+0x9c>
 800797c:	3219      	adds	r2, #25
 800797e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007982:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007986:	eddf 7a08 	vldr	s15, [pc, #32]	; 80079a8 <scalbnf+0xe0>
 800798a:	ee07 3a10 	vmov	s14, r3
 800798e:	e7c4      	b.n	800791a <scalbnf+0x52>
 8007990:	ffff3cb0 	.word	0xffff3cb0
 8007994:	4c000000 	.word	0x4c000000
 8007998:	7149f2ca 	.word	0x7149f2ca
 800799c:	f149f2ca 	.word	0xf149f2ca
 80079a0:	0da24260 	.word	0x0da24260
 80079a4:	8da24260 	.word	0x8da24260
 80079a8:	33000000 	.word	0x33000000

080079ac <_init>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	bf00      	nop
 80079b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b2:	bc08      	pop	{r3}
 80079b4:	469e      	mov	lr, r3
 80079b6:	4770      	bx	lr

080079b8 <_fini>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	bf00      	nop
 80079bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079be:	bc08      	pop	{r3}
 80079c0:	469e      	mov	lr, r3
 80079c2:	4770      	bx	lr
