
STM32WB55-MEMSMIC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e78  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08007fb4  08007fb4  00017fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008334  08008334  00018334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000052c  20000004  0800833c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002104  20000530  08008868  00020530  2**2
                  ALLOC
  7 ._user_heap_stack 00001404  20002634  08008868  00022634  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020530  2**0
                  CONTENTS, READONLY
  9 .debug_line   00022947  00000000  00000000  00020560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0001eccb  00000000  00000000  00042ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000052d8  00000000  00000000  00061b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010b8  00000000  00000000  00066e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0011c75d  00000000  00000000  00067f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002368  00000000  00000000  00184668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000e185  00000000  00000000  001869d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e0cc  00000000  00000000  00194b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000144  00000000  00000000  001c2c21  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002e5c  00000000  00000000  001c2d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000530 	.word	0x20000530
 8000158:	00000000 	.word	0x00000000
 800015c:	08007f9c 	.word	0x08007f9c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000534 	.word	0x20000534
 8000178:	08007f9c 	.word	0x08007f9c

0800017c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800017c:	480d      	ldr	r0, [pc, #52]	; (80001b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000180:	480d      	ldr	r0, [pc, #52]	; (80001b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000182:	490e      	ldr	r1, [pc, #56]	; (80001bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000184:	4a0e      	ldr	r2, [pc, #56]	; (80001c0 <LoopForever+0xe>)
  movs r3, #0
 8000186:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000188:	e002      	b.n	8000190 <LoopCopyDataInit>

0800018a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018e:	3304      	adds	r3, #4

08000190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000194:	d3f9      	bcc.n	800018a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000196:	4a0b      	ldr	r2, [pc, #44]	; (80001c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000198:	4c0b      	ldr	r4, [pc, #44]	; (80001c8 <LoopForever+0x16>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800019c:	e001      	b.n	80001a2 <LoopFillZerobss>

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a0:	3204      	adds	r2, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001a6:	f000 fe33 	bl	8000e10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80001aa:	f007 f9b9 	bl	8007520 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80001ae:	f000 f8dd 	bl	800036c <main>

080001b2 <LoopForever>:

LoopForever:
  b LoopForever
 80001b2:	e7fe      	b.n	80001b2 <LoopForever>
  ldr   r0, =_estack
 80001b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80001b8:	20000004 	.word	0x20000004
  ldr r1, =_edata
 80001bc:	20000530 	.word	0x20000530
  ldr r2, =_sidata
 80001c0:	0800833c 	.word	0x0800833c
  ldr r2, =_sbss
 80001c4:	20000530 	.word	0x20000530
  ldr r4, =_ebss
 80001c8:	20002634 	.word	0x20002634

080001cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001cc:	e7fe      	b.n	80001cc <ADC1_IRQHandler>
	...

080001d0 <_sbrk>:
{
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;

  if (heap_end == 0)
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <_sbrk+0x2c>)
 80001d2:	6811      	ldr	r1, [r2, #0]
{
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4603      	mov	r3, r0
  if (heap_end == 0)
 80001d8:	b909      	cbnz	r1, 80001de <_sbrk+0xe>
  {
    heap_end = &end;
 80001da:	4909      	ldr	r1, [pc, #36]	; (8000200 <_sbrk+0x30>)
 80001dc:	6011      	str	r1, [r2, #0]
  }

  prev_heap_end = heap_end;
 80001de:	6810      	ldr	r0, [r2, #0]
  if (heap_end + incr > stack_ptr)
 80001e0:	4669      	mov	r1, sp
 80001e2:	4403      	add	r3, r0
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d906      	bls.n	80001f6 <_sbrk+0x26>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 80001e8:	f007 f994 	bl	8007514 <__errno>
 80001ec:	230c      	movs	r3, #12
 80001ee:	6003      	str	r3, [r0, #0]
    return (caddr_t) -1;
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }

  heap_end += incr;

  return (caddr_t) prev_heap_end;
}
 80001f4:	bd08      	pop	{r3, pc}
  heap_end += incr;
 80001f6:	6013      	str	r3, [r2, #0]
  return (caddr_t) prev_heap_end;
 80001f8:	e7fc      	b.n	80001f4 <_sbrk+0x24>
 80001fa:	bf00      	nop
 80001fc:	2000054c 	.word	0x2000054c
 8000200:	20002638 	.word	0x20002638

08000204 <AudioProcess>:
  * @param  none
  * @retval None
  */
void AudioProcess(void)
{
  if (CCA02M2_AUDIO_IN_PDMToPCM(CCA02M2_AUDIO_INSTANCE, (uint16_t *)PDM_Buffer, PCM_Buffer) != BSP_ERROR_NONE)
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <AudioProcess+0x20>)
{
 8000206:	b508      	push	{r3, lr}
  if (CCA02M2_AUDIO_IN_PDMToPCM(CCA02M2_AUDIO_INSTANCE, (uint16_t *)PDM_Buffer, PCM_Buffer) != BSP_ERROR_NONE)
 8000208:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
 800020c:	2000      	movs	r0, #0
 800020e:	f000 fcd1 	bl	8000bb4 <CCA02M2_AUDIO_IN_PDMToPCM>
 8000212:	b100      	cbz	r0, 8000216 <AudioProcess+0x12>
}


void Error_Handler(void)
{
  while (1);
 8000214:	e7fe      	b.n	8000214 <AudioProcess+0x10>
}
 8000216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Send_Audio_to_USB((int16_t *)PCM_Buffer, (AUDIO_IN_SAMPLING_FREQUENCY / 1000)*AUDIO_IN_CHANNELS * N_MS_PER_INTERRUPT);
 800021a:	4802      	ldr	r0, [pc, #8]	; (8000224 <AudioProcess+0x20>)
 800021c:	2160      	movs	r1, #96	; 0x60
 800021e:	f000 b917 	b.w	8000450 <Send_Audio_to_USB>
 8000222:	bf00      	nop
 8000224:	20000554 	.word	0x20000554

08000228 <CCA02M2_AUDIO_IN_TransferComplete_CallBack>:
  AudioProcess();
 8000228:	f7ff bfec 	b.w	8000204 <AudioProcess>

0800022c <CCA02M2_AUDIO_IN_HalfTransfer_CallBack>:
 800022c:	f7ff bfea 	b.w	8000204 <AudioProcess>

08000230 <Init_Acquisition_Peripherals>:
{
 8000230:	b508      	push	{r3, lr}
  MicParams.BitsPerSample = 16;
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <Init_Acquisition_Peripherals+0x30>)
 8000234:	2210      	movs	r2, #16
 8000236:	f8c3 26c8 	str.w	r2, [r3, #1736]	; 0x6c8
  MicParams.Device = AUDIO_IN_DIGITAL_MIC;
 800023a:	22f0      	movs	r2, #240	; 0xf0
  MicParams.ChannelsNbr = ChnlNbrIn;
 800023c:	f8c3 16cc 	str.w	r1, [r3, #1740]	; 0x6cc
  MicParams.Device = AUDIO_IN_DIGITAL_MIC;
 8000240:	f8c3 26c0 	str.w	r2, [r3, #1728]	; 0x6c0
  MicParams.SampleRate = AudioFreq;
 8000244:	f8c3 06c4 	str.w	r0, [r3, #1732]	; 0x6c4
  MicParams.Volume = AUDIO_VOLUME_INPUT;
 8000248:	2240      	movs	r2, #64	; 0x40
  if (CCA02M2_AUDIO_IN_Init(CCA02M2_AUDIO_INSTANCE, &MicParams) != BSP_ERROR_NONE)
 800024a:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 800024e:	2000      	movs	r0, #0
  MicParams.Volume = AUDIO_VOLUME_INPUT;
 8000250:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
  if (CCA02M2_AUDIO_IN_Init(CCA02M2_AUDIO_INSTANCE, &MicParams) != BSP_ERROR_NONE)
 8000254:	f000 fb64 	bl	8000920 <CCA02M2_AUDIO_IN_Init>
 8000258:	b100      	cbz	r0, 800025c <Init_Acquisition_Peripherals+0x2c>
  while (1);
 800025a:	e7fe      	b.n	800025a <Init_Acquisition_Peripherals+0x2a>
}
 800025c:	bd08      	pop	{r3, pc}
 800025e:	bf00      	nop
 8000260:	20000554 	.word	0x20000554

08000264 <Start_Acquisition>:
{
 8000264:	b508      	push	{r3, lr}
  if (CCA02M2_AUDIO_IN_Record(CCA02M2_AUDIO_INSTANCE, (uint8_t *) PDM_Buffer, AUDIO_IN_BUFFER_SIZE) != BSP_ERROR_NONE)
 8000266:	4904      	ldr	r1, [pc, #16]	; (8000278 <Start_Acquisition+0x14>)
 8000268:	2260      	movs	r2, #96	; 0x60
 800026a:	2000      	movs	r0, #0
 800026c:	f000 fcf6 	bl	8000c5c <CCA02M2_AUDIO_IN_Record>
 8000270:	b100      	cbz	r0, 8000274 <Start_Acquisition+0x10>
  while (1);
 8000272:	e7fe      	b.n	8000272 <Start_Acquisition+0xe>
}
 8000274:	bd08      	pop	{r3, pc}
 8000276:	bf00      	nop
 8000278:	20000614 	.word	0x20000614

0800027c <SystemClock_Config>:
  * @brief  System Clock Configuration
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000280:	2420      	movs	r4, #32
{
 8000282:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000284:	4622      	mov	r2, r4
 8000286:	2100      	movs	r1, #0
 8000288:	a80a      	add	r0, sp, #40	; 0x28
 800028a:	f007 f98b 	bl	80075a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	221c      	movs	r2, #28
 8000290:	2100      	movs	r1, #0
 8000292:	a801      	add	r0, sp, #4
 8000294:	f007 f986 	bl	80075a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000298:	2100      	movs	r1, #0
 800029a:	2250      	movs	r2, #80	; 0x50
 800029c:	a81a      	add	r0, sp, #104	; 0x68
 800029e:	f007 f981 	bl	80075a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a2:	4a31      	ldr	r2, [pc, #196]	; (8000368 <SystemClock_Config+0xec>)
 80002a4:	6813      	ldr	r3, [r2, #0]
 80002a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80002aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ae:	6013      	str	r3, [r2, #0]
 80002b0:	6813      	ldr	r3, [r2, #0]
 80002b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSI
                                     | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ba:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80002be:	2343      	movs	r3, #67	; 0x43
 80002c0:	e9cd 3708 	strd	r3, r7, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	2340      	movs	r3, #64	; 0x40
 80002d0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV8;
 80002d2:	2370      	movs	r3, #112	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 32;
 80002d4:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d8:	2503      	movs	r5, #3
 80002da:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002e0:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
 80002e4:	f04f 5800 	mov.w	r8, #536870912	; 0x20000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e8:	eb0d 0004 	add.w	r0, sp, r4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ec:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ee:	e9cd 6513 	strd	r6, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002f2:	e9cd 9818 	strd	r9, r8, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f002 f8c9 	bl	800248c <HAL_RCC_OscConfig>
  {
//    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 80002fa:	236f      	movs	r3, #111	; 0x6f
                                | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80002fe:	4629      	mov	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000300:	e9cd 3501 	strd	r3, r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000304:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000306:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000308:	e9cd 3406 	strd	r3, r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030c:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000310:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000312:	f002 fb83 	bl	8002a1c <HAL_RCC_ClockConfig>
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS | RCC_PERIPHCLK_SAI1
                                             | RCC_PERIPHCLK_USB;

  PeriphClkInitStruct.PLLSAI1.PLLN = 86;
 8000316:	f44f 5005 	mov.w	r0, #8512	; 0x2140
 800031a:	2356      	movs	r3, #86	; 0x56
 800031c:	e9cd 031a 	strd	r0, r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV7;
 8000320:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000324:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000326:	e9cd 391c 	strd	r3, r9, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800032a:	e9cd 871e 	strd	r8, r7, [sp, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800032e:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000332:	e9cd 642c 	strd	r6, r4, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000336:	f002 fd61 	bl	8002dfc <HAL_RCCEx_PeriphCLKConfig>
  {
//    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800033a:	f002 f897 	bl	800246c <HAL_RCC_GetHCLKFreq>
 800033e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000342:	fbb0 f0f3 	udiv	r0, r0, r3
 8000346:	f000 fe35 	bl	8000fb4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800034a:	2004      	movs	r0, #4
 800034c:	f000 fe46 	bl	8000fdc <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000350:	4622      	mov	r2, r4
 8000352:	4621      	mov	r1, r4
 8000354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000358:	f000 fdec 	bl	8000f34 <HAL_NVIC_SetPriority>
  HAL_PWREx_EnableVddUSB();
 800035c:	f001 ff64 	bl	8002228 <HAL_PWREx_EnableVddUSB>
}
 8000360:	b02f      	add	sp, #188	; 0xbc
 8000362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000366:	bf00      	nop
 8000368:	58000400 	.word	0x58000400

0800036c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800036c:	b508      	push	{r3, lr}
  /* STM32F4xx HAL library initialization:
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 800036e:	f000 fda7 	bl	8000ec0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000372:	f7ff ff83 	bl	800027c <SystemClock_Config>
  /* Initialize USB descriptor basing on channels number and sampling frequency */
  USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS);
 8000376:	480f      	ldr	r0, [pc, #60]	; (80003b4 <main+0x48>)
 8000378:	2202      	movs	r2, #2
 800037a:	f64b 3180 	movw	r1, #48000	; 0xbb80
 800037e:	f004 fa83 	bl	8004888 <USBD_AUDIO_Init_Microphone_Descriptor>
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
 8000382:	2200      	movs	r2, #0
 8000384:	490c      	ldr	r1, [pc, #48]	; (80003b8 <main+0x4c>)
 8000386:	480b      	ldr	r0, [pc, #44]	; (80003b4 <main+0x48>)
 8000388:	f004 fc22 	bl	8004bd0 <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
 800038c:	490b      	ldr	r1, [pc, #44]	; (80003bc <main+0x50>)
 800038e:	4809      	ldr	r0, [pc, #36]	; (80003b4 <main+0x48>)
 8000390:	f004 fc31 	bl	8004bf6 <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO Class */
  USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
 8000394:	490a      	ldr	r1, [pc, #40]	; (80003c0 <main+0x54>)
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <main+0x48>)
 8000398:	f004 fa70 	bl	800487c <USBD_AUDIO_RegisterInterface>
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <main+0x48>)
 800039e:	f004 fc43 	bl	8004c28 <USBD_Start>

  /* Start audio acquisition and streaming */
#ifdef DISABLE_USB_DRIVEN_ACQUISITION
  Init_Acquisition_Peripherals(AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2102      	movs	r1, #2
 80003a6:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80003aa:	f7ff ff41 	bl	8000230 <Init_Acquisition_Peripherals>
  Start_Acquisition();
 80003ae:	f7ff ff59 	bl	8000264 <Start_Acquisition>
#endif

  while (1)
 80003b2:	e7fe      	b.n	80003b2 <main+0x46>
 80003b4:	20000c28 	.word	0x20000c28
 80003b8:	20000040 	.word	0x20000040
 80003bc:	20000094 	.word	0x20000094
 80003c0:	20000004 	.word	0x20000004

080003c4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80003c4:	4770      	bx	lr

080003c6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <HardFault_Handler>

080003c8 <SVC_Handler>:
 80003c8:	4770      	bx	lr

080003ca <DebugMon_Handler>:
 80003ca:	4770      	bx	lr

080003cc <PendSV_Handler>:
 80003cc:	4770      	bx	lr

080003ce <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80003ce:	f000 bd87 	b.w	8000ee0 <HAL_IncTick>
	...

080003d4 <USB_LP_IRQHandler>:
  * @param  None
  * @retval None
  */
void USB_LP_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd);
 80003d4:	4801      	ldr	r0, [pc, #4]	; (80003dc <USB_LP_IRQHandler+0x8>)
 80003d6:	f001 b8e3 	b.w	80015a0 <HAL_PCD_IRQHandler>
 80003da:	bf00      	nop
 80003dc:	20000f08 	.word	0x20000f08

080003e0 <DMA1_Channel1_IRQHandler>:
  * @retval None
  */

void DMA1_Channel1_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInSai.hdmarx);
 80003e0:	4b02      	ldr	r3, [pc, #8]	; (80003ec <DMA1_Channel1_IRQHandler+0xc>)
 80003e2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80003e6:	f000 bf51 	b.w	800128c <HAL_DMA_IRQHandler>
 80003ea:	bf00      	nop
 80003ec:	200016b0 	.word	0x200016b0

080003f0 <Audio_Init>:
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return CCA02M2_AUDIO_IN_Init(CCA02M2_AUDIO_INSTANCE, &MicParams);
#else
  return BSP_ERROR_NONE;
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 80003f0:	2000      	movs	r0, #0
 80003f2:	4770      	bx	lr

080003f4 <Audio_DeInit>:
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_DeInit(uint32_t options)
{
  return BSP_ERROR_NONE;
}
 80003f4:	2000      	movs	r0, #0
 80003f6:	4770      	bx	lr

080003f8 <Audio_Record>:
#ifndef DISABLE_USB_DRIVEN_ACQUISITION
  return CCA02M2_AUDIO_IN_Record(CCA02M2_AUDIO_INSTANCE, (uint8_t *) PDM_Buffer, 0);
#else
  return BSP_ERROR_NONE;
#endif  /* DISABLE_USB_DRIVEN_ACQUISITION */
}
 80003f8:	2000      	movs	r0, #0
 80003fa:	4770      	bx	lr

080003fc <Audio_MuteCtl>:
  * @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
  */
static int8_t Audio_MuteCtl(uint8_t cmd)
{
  return BSP_ERROR_NONE;
}
 80003fc:	2000      	movs	r0, #0
 80003fe:	4770      	bx	lr

08000400 <Audio_VolumeCtl>:
{
 8000400:	b538      	push	{r3, r4, r5, lr}
 8000402:	4c0e      	ldr	r4, [pc, #56]	; (800043c <Audio_VolumeCtl+0x3c>)
  uint32_t j = 0;
 8000404:	2100      	movs	r1, #0
  while (j < 64 && abs(Volume - vol_table[j]) > abs(Volume - vol_table[j + 1]))
 8000406:	f9b4 2000 	ldrsh.w	r2, [r4]
 800040a:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 800040e:	1a82      	subs	r2, r0, r2
 8000410:	1ac3      	subs	r3, r0, r3
 8000412:	2a00      	cmp	r2, #0
 8000414:	bfb8      	it	lt
 8000416:	4252      	neglt	r2, r2
 8000418:	2b00      	cmp	r3, #0
 800041a:	bfb8      	it	lt
 800041c:	425b      	neglt	r3, r3
 800041e:	429a      	cmp	r2, r3
 8000420:	460d      	mov	r5, r1
 8000422:	f101 0101 	add.w	r1, r1, #1
 8000426:	dc01      	bgt.n	800042c <Audio_VolumeCtl+0x2c>
 8000428:	4629      	mov	r1, r5
 800042a:	e001      	b.n	8000430 <Audio_VolumeCtl+0x30>
 800042c:	2940      	cmp	r1, #64	; 0x40
 800042e:	d1ea      	bne.n	8000406 <Audio_VolumeCtl+0x6>
  return CCA02M2_AUDIO_IN_SetVolume(mic_instance, j);
 8000430:	2000      	movs	r0, #0
 8000432:	f000 fc35 	bl	8000ca0 <CCA02M2_AUDIO_IN_SetVolume>
}
 8000436:	b240      	sxtb	r0, r0
 8000438:	bd38      	pop	{r3, r4, r5, pc}
 800043a:	bf00      	nop
 800043c:	08007fb4 	.word	0x08007fb4

08000440 <Audio_CommandMgr>:
 8000440:	2000      	movs	r0, #0
 8000442:	4770      	bx	lr

08000444 <Audio_Stop>:
 8000444:	2000      	movs	r0, #0
 8000446:	4770      	bx	lr

08000448 <Audio_Pause>:
 8000448:	2000      	movs	r0, #0
 800044a:	4770      	bx	lr

0800044c <Audio_Resume>:
 800044c:	2000      	movs	r0, #0
 800044e:	4770      	bx	lr

08000450 <Send_Audio_to_USB>:
  *       the function. E.g.: assuming a Sampling frequency of 16 KHz and 1 channel,
  *       you can pass 16 PCM samples if the function is called each millisecond,
  *       32 samples if called every 2 milliseconds and so on.
  */
void Send_Audio_to_USB(int16_t *audioData, uint16_t PCMSamples)
{
 8000450:	460a      	mov	r2, r1
  USBD_AUDIO_Data_Transfer(&hUSBDDevice, (int16_t *)audioData, PCMSamples);
 8000452:	4601      	mov	r1, r0
 8000454:	4801      	ldr	r0, [pc, #4]	; (800045c <Send_Audio_to_USB+0xc>)
 8000456:	f004 b99d 	b.w	8004794 <USBD_AUDIO_Data_Transfer>
 800045a:	bf00      	nop
 800045c:	20000c28 	.word	0x20000c28

08000460 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8000460:	b570      	push	{r4, r5, r6, lr}
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000462:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8000466:	b088      	sub	sp, #32
 8000468:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000470:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000478:	9b02      	ldr	r3, [sp, #8]
  /* Enable the GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047a:	2500      	movs	r5, #0
 800047c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000480:	e9cd 3503 	strd	r3, r5, [sp, #12]
{
 8000484:	4606      	mov	r6, r0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000486:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000488:	a903      	add	r1, sp, #12
 800048a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800048e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000492:	f000 ff45 	bl	8001320 <HAL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000496:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800049c:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800049e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80004a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80004a4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80004a6:	9b01      	ldr	r3, [sp, #4]
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_CRS_IRQn);

#else

  if (hpcd->Init.low_power_enable == 1)
 80004a8:	69b3      	ldr	r3, [r6, #24]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d10e      	bne.n	80004cc <HAL_PCD_MspInit+0x6c>
  {
    /* Enable EXTI Line 18 for USB wakeup */
    __HAL_USB_WAKEUP_EXTI_ENABLE_IT();
 80004ae:	4a0c      	ldr	r2, [pc, #48]	; (80004e0 <HAL_PCD_MspInit+0x80>)
 80004b0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    /* USB Default Wakeup Interrupt */
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80004bc:	2014      	movs	r0, #20
 80004be:	f000 fd6b 	bl	8000f98 <HAL_NVIC_EnableIRQ>

    /* Enable USB Wake-up interrupt */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80004c2:	462a      	mov	r2, r5
 80004c4:	4629      	mov	r1, r5
 80004c6:	2014      	movs	r0, #20
 80004c8:	f000 fd34 	bl	8000f34 <HAL_NVIC_SetPriority>
  }

  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_LP_IRQn, 0x00, 0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	4611      	mov	r1, r2
 80004d0:	2014      	movs	r0, #20
 80004d2:	f000 fd2f 	bl	8000f34 <HAL_NVIC_SetPriority>

  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80004d6:	2014      	movs	r0, #20
 80004d8:	f000 fd5e 	bl	8000f98 <HAL_NVIC_EnableIRQ>
#endif
}
 80004dc:	b008      	add	sp, #32
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	58000800 	.word	0x58000800

080004e4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *) hpcd->Setup);
 80004e4:	f500 712d 	add.w	r1, r0, #692	; 0x2b4
 80004e8:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 80004ec:	f004 bbae 	b.w	8004c4c <USBD_LL_SetupStage>

080004f0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80004f0:	2328      	movs	r3, #40	; 0x28
 80004f2:	fb03 0301 	mla	r3, r3, r1, r0
 80004f6:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 80004fa:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80004fe:	f004 bbd5 	b.w	8004cac <USBD_LL_DataOutStage>

08000502 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000502:	2328      	movs	r3, #40	; 0x28
 8000504:	fb03 0301 	mla	r3, r3, r1, r0
 8000508:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 800050c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800050e:	f004 bc02 	b.w	8004d16 <USBD_LL_DataInStage>

08000512 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8000512:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 8000516:	f004 bc9c 	b.w	8004e52 <USBD_LL_SOF>

0800051a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800051a:	b510      	push	{r4, lr}
 800051c:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800051e:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 8000522:	f004 fc4f 	bl	8004dc4 <USBD_LL_Reset>

  /* Set USB Current Speed */
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8000526:	f8d4 02f4 	ldr.w	r0, [r4, #756]	; 0x2f4
 800052a:	2101      	movs	r1, #1
}
 800052c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8000530:	f004 bc77 	b.w	8004e22 <USBD_LL_SetSpeed>

08000534 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8000534:	b510      	push	{r4, lr}
 8000536:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend(hpcd->pData);
 8000538:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 800053c:	f004 fc74 	bl	8004e28 <USBD_LL_Suspend>

  /* Enter in STOP mode */
  if (hpcd->Init.low_power_enable)
 8000540:	69a3      	ldr	r3, [r4, #24]
 8000542:	b12b      	cbz	r3, 8000550 <HAL_PCD_SuspendCallback+0x1c>
  {
    HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
  }
}
 8000544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000548:	2101      	movs	r1, #1
 800054a:	2000      	movs	r0, #0
 800054c:	f001 be5a 	b.w	8002204 <HAL_PWR_EnterSTOPMode>
}
 8000550:	bd10      	pop	{r4, pc}
	...

08000554 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8000554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hpcd->Init.low_power_enable) && (remotewakeupon == 0))
 8000558:	6983      	ldr	r3, [r0, #24]
 800055a:	4f24      	ldr	r7, [pc, #144]	; (80005ec <HAL_PCD_ResumeCallback+0x98>)
{
 800055c:	b09a      	sub	sp, #104	; 0x68
 800055e:	4606      	mov	r6, r0
  if ((hpcd->Init.low_power_enable) && (remotewakeupon == 0))
 8000560:	2b00      	cmp	r3, #0
 8000562:	d03a      	beq.n	80005da <HAL_PCD_ResumeCallback+0x86>
 8000564:	683c      	ldr	r4, [r7, #0]
 8000566:	2c00      	cmp	r4, #0
 8000568:	d137      	bne.n	80005da <HAL_PCD_ResumeCallback+0x86>
static void SystemClockConfig_STOP(void)
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE |
 800056a:	2324      	movs	r3, #36	; 0x24
 800056c:	9308      	str	r3, [sp, #32]
                                     RCC_OSCILLATORTYPE_MSI;

  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800056e:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000570:	2228      	movs	r2, #40	; 0x28
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000572:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000574:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000578:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057c:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057e:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8000582:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	f04f 0802 	mov.w	r8, #2
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800058a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058c:	e9cd 1318 	strd	r1, r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000590:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000594:	e9cd 8513 	strd	r8, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000598:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 800059a:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800059c:	f001 ff76 	bl	800248c <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	200f      	movs	r0, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80005a4:	4641      	mov	r1, r8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	e9cd 0301 	strd	r0, r3, [sp, #4]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80005aa:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80005b2:	f002 fa33 	bl	8002a1c <HAL_RCC_ClockConfig>


  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80005b6:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80005b8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80005ba:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005bc:	e9cd 5412 	strd	r5, r4, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80005c0:	f001 ff64 	bl	800248c <HAL_RCC_OscConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80005c4:	f001 ff52 	bl	800246c <HAL_RCC_GetHCLKFreq>
 80005c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d0:	f000 fcf0 	bl	8000fb4 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80005d4:	2004      	movs	r0, #4
 80005d6:	f000 fd01 	bl	8000fdc <HAL_SYSTICK_CLKSourceConfig>
  USBD_LL_Resume(hpcd->pData);
 80005da:	f8d6 02f4 	ldr.w	r0, [r6, #756]	; 0x2f4
 80005de:	f004 fc2d 	bl	8004e3c <USBD_LL_Resume>
  remotewakeupon = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
}
 80005e6:	b01a      	add	sp, #104	; 0x68
 80005e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005ec:	20000f04 	.word	0x20000f04

080005f0 <USBD_LL_Init>:
{
 80005f0:	b538      	push	{r3, r4, r5, lr}
 80005f2:	4604      	mov	r4, r0
  hpcd.Init.dev_endpoints = 4;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <USBD_LL_Init+0x58>)
  hpcd.Instance = USB;
 80005f6:	4815      	ldr	r0, [pc, #84]	; (800064c <USBD_LL_Init+0x5c>)
  hpcd.Init.dev_endpoints = 4;
 80005f8:	2204      	movs	r2, #4
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005fa:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 4;
 80005fc:	e9c0 3201 	strd	r3, r2, [r0, #4]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000600:	2202      	movs	r2, #2
 8000602:	e9c0 5204 	strd	r5, r2, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8000606:	60c2      	str	r2, [r0, #12]
  hpcd.Init.low_power_enable = 0;
 8000608:	61c5      	str	r5, [r0, #28]
  hpcd.pData = pdev;
 800060a:	f8c0 42f8 	str.w	r4, [r0, #760]	; 0x2f8
  pdev->pData = &hpcd;
 800060e:	3004      	adds	r0, #4
 8000610:	f8c4 02c8 	str.w	r0, [r4, #712]	; 0x2c8
  HAL_PCD_Init(&hpcd);
 8000614:	f000 ff3a 	bl	800148c <HAL_PCD_Init>
  HAL_PCDEx_PMAConfig(pdev->pData, 0x00, PCD_SNG_BUF, 0x40);
 8000618:	462a      	mov	r2, r5
 800061a:	4629      	mov	r1, r5
 800061c:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	f001 fdb3 	bl	800218c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData, 0x80, PCD_SNG_BUF, 0x80);
 8000626:	2380      	movs	r3, #128	; 0x80
 8000628:	462a      	mov	r2, r5
 800062a:	4619      	mov	r1, r3
 800062c:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8000630:	f001 fdac 	bl	800218c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData, 0x81, PCD_DBL_BUF, 0x00C00120);
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <USBD_LL_Init+0x60>)
 8000636:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 800063a:	2201      	movs	r2, #1
 800063c:	2181      	movs	r1, #129	; 0x81
 800063e:	f001 fda5 	bl	800218c <HAL_PCDEx_PMAConfig>
}
 8000642:	4628      	mov	r0, r5
 8000644:	bd38      	pop	{r3, r4, r5, pc}
 8000646:	bf00      	nop
 8000648:	40006800 	.word	0x40006800
 800064c:	20000f04 	.word	0x20000f04
 8000650:	00c00120 	.word	0x00c00120

08000654 <USBD_LL_Start>:
{
 8000654:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8000656:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800065a:	f000 ff78 	bl	800154e <HAL_PCD_Start>
}
 800065e:	2000      	movs	r0, #0
 8000660:	bd08      	pop	{r3, pc}

08000662 <USBD_LL_OpenEP>:
{
 8000662:	b510      	push	{r4, lr}
 8000664:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000666:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 800066a:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800066c:	4623      	mov	r3, r4
 800066e:	f001 fc8b 	bl	8001f88 <HAL_PCD_EP_Open>
}
 8000672:	2000      	movs	r0, #0
 8000674:	bd10      	pop	{r4, pc}

08000676 <USBD_LL_CloseEP>:
{
 8000676:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000678:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800067c:	f001 fcba 	bl	8001ff4 <HAL_PCD_EP_Close>
}
 8000680:	2000      	movs	r0, #0
 8000682:	bd08      	pop	{r3, pc}

08000684 <USBD_LL_FlushEP>:
{
 8000684:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8000686:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800068a:	f001 fd7d 	bl	8002188 <HAL_PCD_EP_Flush>
}
 800068e:	2000      	movs	r0, #0
 8000690:	bd08      	pop	{r3, pc}

08000692 <USBD_LL_StallEP>:
{
 8000692:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000694:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8000698:	f001 fd0e 	bl	80020b8 <HAL_PCD_EP_SetStall>
}
 800069c:	2000      	movs	r0, #0
 800069e:	bd08      	pop	{r3, pc}

080006a0 <USBD_LL_ClearStallEP>:
{
 80006a0:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80006a2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80006a6:	f001 fd39 	bl	800211c <HAL_PCD_EP_ClrStall>
}
 80006aa:	2000      	movs	r0, #0
 80006ac:	bd08      	pop	{r3, pc}

080006ae <USBD_LL_IsStallEP>:
  if ((ep_addr & 0x80) == 0x80)
 80006ae:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80006b2:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if ((ep_addr & 0x80) == 0x80)
 80006b6:	f04f 0228 	mov.w	r2, #40	; 0x28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80006ba:	bf1d      	ittte	ne
 80006bc:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80006c0:	fb01 2102 	mlane	r1, r1, r2, r2
 80006c4:	185b      	addne	r3, r3, r1
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80006c6:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80006ca:	bf14      	ite	ne
 80006cc:	7998      	ldrbne	r0, [r3, #6]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80006ce:	f891 016e 	ldrbeq.w	r0, [r1, #366]	; 0x16e
}
 80006d2:	4770      	bx	lr

080006d4 <USBD_LL_SetUSBAddress>:
{
 80006d4:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80006d6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80006da:	f000 ff4d 	bl	8001578 <HAL_PCD_SetAddress>
}
 80006de:	2000      	movs	r0, #0
 80006e0:	bd08      	pop	{r3, pc}

080006e2 <USBD_LL_Transmit>:
{
 80006e2:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80006e4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80006e8:	f001 fcc7 	bl	800207a <HAL_PCD_EP_Transmit>
}
 80006ec:	2000      	movs	r0, #0
 80006ee:	bd08      	pop	{r3, pc}

080006f0 <USBD_LL_PrepareReceive>:
{
 80006f0:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80006f2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80006f6:	f001 fcaa 	bl	800204e <HAL_PCD_EP_Receive>
}
 80006fa:	2000      	movs	r0, #0
 80006fc:	bd08      	pop	{r3, pc}
	...

08000700 <USBD_AUDIO_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 8000700:	2312      	movs	r3, #18
  return hUSBDDeviceDesc;
}
 8000702:	4801      	ldr	r0, [pc, #4]	; (8000708 <USBD_AUDIO_DeviceDescriptor+0x8>)
  *length = sizeof(hUSBDDeviceDesc);
 8000704:	800b      	strh	r3, [r1, #0]
}
 8000706:	4770      	bx	lr
 8000708:	20000028 	.word	0x20000028

0800070c <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 800070c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800070e:	4801      	ldr	r0, [pc, #4]	; (8000714 <USBD_AUDIO_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8000710:	800b      	strh	r3, [r1, #0]
}
 8000712:	4770      	bx	lr
 8000714:	2000003c 	.word	0x2000003c

08000718 <USBD_AUDIO_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000718:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800071a:	4c04      	ldr	r4, [pc, #16]	; (800072c <USBD_AUDIO_ManufacturerStrDescriptor+0x14>)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <USBD_AUDIO_ManufacturerStrDescriptor+0x18>)
{
 800071e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000720:	4621      	mov	r1, r4
 8000722:	f004 fdec 	bl	80052fe <USBD_GetString>
  return USBD_StrDesc;
}
 8000726:	4620      	mov	r0, r4
 8000728:	bd10      	pop	{r4, pc}
 800072a:	bf00      	nop
 800072c:	20001214 	.word	0x20001214
 8000730:	08008290 	.word	0x08008290

08000734 <USBD_AUDIO_ProductStrDescriptor>:
{
 8000734:	460a      	mov	r2, r1
 8000736:	b508      	push	{r3, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8000738:	4904      	ldr	r1, [pc, #16]	; (800074c <USBD_AUDIO_ProductStrDescriptor+0x18>)
  if (speed == 0)
 800073a:	b920      	cbnz	r0, 8000746 <USBD_AUDIO_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <USBD_AUDIO_ProductStrDescriptor+0x1c>)
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800073e:	f004 fdde 	bl	80052fe <USBD_GetString>
}
 8000742:	4802      	ldr	r0, [pc, #8]	; (800074c <USBD_AUDIO_ProductStrDescriptor+0x18>)
 8000744:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8000746:	4803      	ldr	r0, [pc, #12]	; (8000754 <USBD_AUDIO_ProductStrDescriptor+0x20>)
 8000748:	e7f9      	b.n	800073e <USBD_AUDIO_ProductStrDescriptor+0xa>
 800074a:	bf00      	nop
 800074c:	20001214 	.word	0x20001214
 8000750:	080082a3 	.word	0x080082a3
 8000754:	080082c4 	.word	0x080082c4

08000758 <USBD_AUDIO_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000758:	460a      	mov	r2, r1
 800075a:	b508      	push	{r3, lr}
  if (speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 800075c:	4904      	ldr	r1, [pc, #16]	; (8000770 <USBD_AUDIO_SerialStrDescriptor+0x18>)
  if (speed == USBD_SPEED_HIGH)
 800075e:	b920      	cbnz	r0, 800076a <USBD_AUDIO_SerialStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <USBD_AUDIO_SerialStrDescriptor+0x1c>)
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 8000762:	f004 fdcc 	bl	80052fe <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8000766:	4802      	ldr	r0, [pc, #8]	; (8000770 <USBD_AUDIO_SerialStrDescriptor+0x18>)
 8000768:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <USBD_AUDIO_SerialStrDescriptor+0x20>)
 800076c:	e7f9      	b.n	8000762 <USBD_AUDIO_SerialStrDescriptor+0xa>
 800076e:	bf00      	nop
 8000770:	20001214 	.word	0x20001214
 8000774:	080082e5 	.word	0x080082e5
 8000778:	080082f2 	.word	0x080082f2

0800077c <USBD_AUDIO_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800077c:	b510      	push	{r4, lr}
  if (speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800077e:	4c04      	ldr	r4, [pc, #16]	; (8000790 <USBD_AUDIO_ConfigStrDescriptor+0x14>)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <USBD_AUDIO_ConfigStrDescriptor+0x18>)
{
 8000782:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8000784:	4621      	mov	r1, r4
 8000786:	f004 fdba 	bl	80052fe <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800078a:	4620      	mov	r0, r4
 800078c:	bd10      	pop	{r4, pc}
 800078e:	bf00      	nop
 8000790:	20001214 	.word	0x20001214
 8000794:	080082ff 	.word	0x080082ff

08000798 <USBD_AUDIO_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000798:	b510      	push	{r4, lr}
  if (speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800079a:	4c04      	ldr	r4, [pc, #16]	; (80007ac <USBD_AUDIO_InterfaceStrDescriptor+0x14>)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <USBD_AUDIO_InterfaceStrDescriptor+0x18>)
{
 800079e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80007a0:	4621      	mov	r1, r4
 80007a2:	f004 fdac 	bl	80052fe <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80007a6:	4620      	mov	r0, r4
 80007a8:	bd10      	pop	{r4, pc}
 80007aa:	bf00      	nop
 80007ac:	20001214 	.word	0x20001214
 80007b0:	0800830c 	.word	0x0800830c

080007b4 <LL_AHB1_GRP1_EnableClock>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80007b8:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007bc:	4302      	orrs	r2, r0
 80007be:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007c2:	4018      	ands	r0, r3
 80007c4:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80007c6:	9b01      	ldr	r3, [sp, #4]
}
 80007c8:	b002      	add	sp, #8
 80007ca:	4770      	bx	lr

080007cc <MX_SAI_ClockConfig>:
* @note   This API is called by CCA02M2_AUDIO_IN_Init() 
*         Being __weak it can be overwritten by the application     
* @retval HAL_OK if no problem during execution, HAL_ERROR otherwise
*/
__weak HAL_StatusTypeDef MX_SAI_ClockConfig(SAI_HandleTypeDef *hSai, uint32_t PDM_rate)
{ 
 80007cc:	b510      	push	{r4, lr}
 80007ce:	b094      	sub	sp, #80	; 0x50
  UNUSED(hSai);
  
  HAL_StatusTypeDef ret = HAL_OK;
  /*SAI PLL Configuration*/
  RCC_PeriphCLKInitTypeDef rccclkinit;
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit); 
 80007d0:	4668      	mov	r0, sp
{ 
 80007d2:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit); 
 80007d4:	f002 fce5 	bl	80031a2 <HAL_RCCEx_GetPeriphCLKConfig>
 80007d8:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80007dc:	fbb4 f3f1 	udiv	r3, r4, r1
 80007e0:	fb01 4413 	mls	r4, r1, r3, r4
  
  if ((PDM_rate % 1280U) == 0U)
 80007e4:	b974      	cbnz	r4, 8000804 <MX_SAI_ClockConfig+0x38>
  {
    rccclkinit.PLLSAI1.PLLN = 82;
 80007e6:	2352      	movs	r3, #82	; 0x52
 80007e8:	9301      	str	r3, [sp, #4]
    rccclkinit.PLLSAI1.PLLP = RCC_PLLP_DIV8;
 80007ea:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  }
  else
  {
    rccclkinit.PLLSAI1.PLLN = 86;   
    rccclkinit.PLLSAI1.PLLP = RCC_PLLP_DIV7;  
 80007ee:	9302      	str	r3, [sp, #8]
  }    
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
  
  if(HAL_RCCEx_PeriphCLKConfig(&rccclkinit) != HAL_OK)
 80007f0:	4668      	mov	r0, sp
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80007f2:	2340      	movs	r3, #64	; 0x40
 80007f4:	9300      	str	r3, [sp, #0]
  if(HAL_RCCEx_PeriphCLKConfig(&rccclkinit) != HAL_OK)
 80007f6:	f002 fb01 	bl	8002dfc <HAL_RCCEx_PeriphCLKConfig>
  {
    ret = HAL_ERROR;
  }  
  return ret;
}
 80007fa:	3800      	subs	r0, #0
 80007fc:	bf18      	it	ne
 80007fe:	2001      	movne	r0, #1
 8000800:	b014      	add	sp, #80	; 0x50
 8000802:	bd10      	pop	{r4, pc}
    rccclkinit.PLLSAI1.PLLN = 86;   
 8000804:	2356      	movs	r3, #86	; 0x56
 8000806:	9301      	str	r3, [sp, #4]
    rccclkinit.PLLSAI1.PLLP = RCC_PLLP_DIV7;  
 8000808:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800080c:	e7ef      	b.n	80007ee <MX_SAI_ClockConfig+0x22>
	...

08000810 <CCA02M2_AUDIO_IN_PDMToPCM_Init>:
* @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
* @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
* @retval BSP status
*/
__weak int32_t CCA02M2_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{  
 8000810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000814:	b087      	sub	sp, #28
 8000816:	4690      	mov	r8, r2
 8000818:	9303      	str	r3, [sp, #12]
  if(Instance != 0U)
 800081a:	4606      	mov	r6, r0
 800081c:	2800      	cmp	r0, #0
 800081e:	d174      	bne.n	800090a <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xfa>
    static int16_t aState_ARM[4][DECIMATOR_STATE_LENGTH];
    static int16_t aCoeffs[] = { -1406, 1634, -1943, 2386, -3080, 4325, -7223, 21690, 21690, -7223, 4325, -3080, 2386, -1943, 1634, -1406, };
#endif
    
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000820:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000824:	4d3a      	ldr	r5, [pc, #232]	; (8000910 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x100>)
 8000826:	f7ff ffc5 	bl	80007b4 <LL_AHB1_GRP1_EnableClock>
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
      PDM_FilterHandler[index].out_ptr_channels = (uint16_t)ChnlNbrOut;
      PDM_FilterHandler[index].in_ptr_channels  = (uint16_t)ChnlNbrIn;
      
      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = (uint16_t) ((AudioFreq/1000U) * N_MS_PER_INTERRUPT);
 800082a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 800082e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000832:	b28f      	uxth	r7, r1
      case 128:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_128;
        break;
      case 160:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
        PDM_FilterConfig[index].output_samples_number *= 2U;        
 8000834:	007b      	lsls	r3, r7, #1
 8000836:	fa1f f983 	uxth.w	r9, r3
 800083a:	f505 7498 	add.w	r4, r5, #304	; 0x130
        PDM_FilterHandler[index].out_ptr_channels = 1;
        (void)arm_fir_decimate_init_q15  (&ARM_Decimator_State[index], DECIMATOR_NUM_TAPS, DECIMATOR_FACTOR,
 800083e:	f505 7aa4 	add.w	sl, r5, #328	; 0x148
 8000842:	f505 7bbc 	add.w	fp, r5, #376	; 0x178
    for(index = 0; index < ChnlNbrIn; index++)
 8000846:	45b0      	cmp	r8, r6
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	d023      	beq.n	8000896 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x86>
      if (ChnlNbrIn == 1U)
 800084e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000852:	4253      	negs	r3, r2
 8000854:	4153      	adcs	r3, r2
 8000856:	806b      	strh	r3, [r5, #2]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x104>)
 800085a:	606b      	str	r3, [r5, #4]
      PDM_FilterHandler[index].out_ptr_channels = (uint16_t)ChnlNbrOut;
 800085c:	9b03      	ldr	r3, [sp, #12]
 800085e:	816b      	strh	r3, [r5, #10]
      PDM_FilterConfig[index].mic_gain = 24;
 8000860:	2318      	movs	r3, #24
 8000862:	80a3      	strh	r3, [r4, #4]
      switch (AudioInCtx[0].DecimationFactor)
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x108>)
      volatile uint32_t error = 0;
 8000866:	9005      	str	r0, [sp, #20]
      switch (AudioInCtx[0].DecimationFactor)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 800086a:	8028      	strh	r0, [r5, #0]
      switch (AudioInCtx[0].DecimationFactor)
 800086c:	2b40      	cmp	r3, #64	; 0x40
      PDM_FilterHandler[index].in_ptr_channels  = (uint16_t)ChnlNbrIn;
 800086e:	f8a5 8008 	strh.w	r8, [r5, #8]
      PDM_FilterConfig[index].output_samples_number = (uint16_t) ((AudioFreq/1000U) * N_MS_PER_INTERRUPT);
 8000872:	8067      	strh	r7, [r4, #2]
      switch (AudioInCtx[0].DecimationFactor)
 8000874:	d025      	beq.n	80008c2 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xb2>
 8000876:	d815      	bhi.n	80008a4 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x94>
 8000878:	2b20      	cmp	r3, #32
 800087a:	d020      	beq.n	80008be <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xae>
 800087c:	d80e      	bhi.n	800089c <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x8c>
 800087e:	2b10      	cmp	r3, #16
 8000880:	d018      	beq.n	80008b4 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xa4>
 8000882:	2b18      	cmp	r3, #24
 8000884:	d019      	beq.n	80008ba <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xaa>
      default:
        break;        
      }
#endif
      
      error = PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8000886:	4628      	mov	r0, r5
 8000888:	f006 fae6 	bl	8006e58 <PDM_Filter_Init>
 800088c:	9005      	str	r0, [sp, #20]
      if (error!=0U)
 800088e:	9b05      	ldr	r3, [sp, #20]
 8000890:	b37b      	cbz	r3, 80008f2 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xe2>
      {
        return  BSP_ERROR_NO_INIT;
 8000892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      }
    }    
#endif
  } 
  return BSP_ERROR_NONE;
}
 8000896:	b007      	add	sp, #28
 8000898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (AudioInCtx[0].DecimationFactor)
 800089c:	2b30      	cmp	r3, #48	; 0x30
 800089e:	d1f2      	bne.n	8000886 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x76>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_48;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e008      	b.n	80008b6 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xa6>
      switch (AudioInCtx[0].DecimationFactor)
 80008a4:	2b80      	cmp	r3, #128	; 0x80
 80008a6:	d00e      	beq.n	80008c6 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xb6>
 80008a8:	2ba0      	cmp	r3, #160	; 0xa0
 80008aa:	d00e      	beq.n	80008ca <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xba>
 80008ac:	2b50      	cmp	r3, #80	; 0x50
 80008ae:	d1ea      	bne.n	8000886 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x76>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
 80008b0:	2303      	movs	r3, #3
 80008b2:	e000      	b.n	80008b6 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xa6>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_16;
 80008b4:	2305      	movs	r3, #5
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_24;
 80008b6:	8023      	strh	r3, [r4, #0]
        break;
 80008b8:	e7e5      	b.n	8000886 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x76>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_24;
 80008ba:	2306      	movs	r3, #6
 80008bc:	e7fb      	b.n	80008b6 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xa6>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_32;
 80008be:	2307      	movs	r3, #7
 80008c0:	e7f9      	b.n	80008b6 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xa6>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80008c2:	2302      	movs	r3, #2
 80008c4:	e7f7      	b.n	80008b6 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xa6>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_128;
 80008c6:	2304      	movs	r3, #4
 80008c8:	e7f5      	b.n	80008b6 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0xa6>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
 80008ca:	2303      	movs	r3, #3
 80008cc:	8023      	strh	r3, [r4, #0]
        PDM_FilterHandler[index].out_ptr_channels = 1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	816b      	strh	r3, [r5, #10]
        (void)arm_fir_decimate_init_q15  (&ARM_Decimator_State[index], DECIMATOR_NUM_TAPS, DECIMATOR_FACTOR,
 80008d2:	233e      	movs	r3, #62	; 0x3e
 80008d4:	fb03 b306 	mla	r3, r3, r6, fp
 80008d8:	2110      	movs	r1, #16
 80008da:	200c      	movs	r0, #12
        PDM_FilterConfig[index].output_samples_number *= 2U;        
 80008dc:	f8a4 9002 	strh.w	r9, [r4, #2]
        (void)arm_fir_decimate_init_q15  (&ARM_Decimator_State[index], DECIMATOR_NUM_TAPS, DECIMATOR_FACTOR,
 80008e0:	2202      	movs	r2, #2
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	9101      	str	r1, [sp, #4]
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x10c>)
 80008e8:	fb00 a006 	mla	r0, r0, r6, sl
 80008ec:	f006 fdf6 	bl	80074dc <arm_fir_decimate_init_q15>
         break;
 80008f0:	e7c9      	b.n	8000886 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x76>
      error = PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 80008f2:	4621      	mov	r1, r4
 80008f4:	4628      	mov	r0, r5
 80008f6:	f006 fb39 	bl	8006f6c <PDM_Filter_setConfig>
 80008fa:	9005      	str	r0, [sp, #20]
      if (error!=0U)
 80008fc:	9b05      	ldr	r3, [sp, #20]
 80008fe:	354c      	adds	r5, #76	; 0x4c
 8000900:	3406      	adds	r4, #6
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1c5      	bne.n	8000892 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x82>
    for(index = 0; index < ChnlNbrIn; index++)
 8000906:	3601      	adds	r6, #1
 8000908:	e79d      	b.n	8000846 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x36>
    return  BSP_ERROR_WRONG_PARAM;
 800090a:	f06f 0001 	mvn.w	r0, #1
 800090e:	e7c2      	b.n	8000896 <CCA02M2_AUDIO_IN_PDMToPCM_Init+0x86>
 8000910:	20001440 	.word	0x20001440
 8000914:	7e809d48 	.word	0x7e809d48
 8000918:	20001314 	.word	0x20001314
 800091c:	2000005c 	.word	0x2000005c

08000920 <CCA02M2_AUDIO_IN_Init>:
{  
 8000920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8000924:	2802      	cmp	r0, #2
{  
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	4606      	mov	r6, r0
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 800092a:	d902      	bls.n	8000932 <CCA02M2_AUDIO_IN_Init+0x12>
      switch (AudioInit->SampleRate)
 800092c:	f06f 0001 	mvn.w	r0, #1
 8000930:	e123      	b.n	8000b7a <CCA02M2_AUDIO_IN_Init+0x25a>
    AudioInCtx[Instance].Device          = AudioInit->Device;
 8000932:	4c9b      	ldr	r4, [pc, #620]	; (8000ba0 <CCA02M2_AUDIO_IN_Init+0x280>)
 8000934:	680b      	ldr	r3, [r1, #0]
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8000936:	688d      	ldr	r5, [r1, #8]
    AudioInCtx[Instance].Device          = AudioInit->Device;
 8000938:	2264      	movs	r2, #100	; 0x64
 800093a:	fb02 4200 	mla	r2, r2, r0, r4
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;  
 800093e:	68c8      	ldr	r0, [r1, #12]
    AudioInCtx[Instance].Device          = AudioInit->Device;
 8000940:	6053      	str	r3, [r2, #4]
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate; 
 8000942:	684b      	ldr	r3, [r1, #4]
    AudioInCtx[Instance].Volume          = AudioInit->Volume;
 8000944:	6909      	ldr	r1, [r1, #16]
 8000946:	6211      	str	r1, [r2, #32]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 8000948:	2100      	movs	r1, #0
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;  
 800094a:	6110      	str	r0, [r2, #16]
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate; 
 800094c:	6093      	str	r3, [r2, #8]
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 800094e:	60d5      	str	r5, [r2, #12]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 8000950:	6251      	str	r1, [r2, #36]	; 0x24
    if(Instance == 0U)
 8000952:	2e00      	cmp	r6, #0
 8000954:	f040 8117 	bne.w	8000b86 <CCA02M2_AUDIO_IN_Init+0x266>
      switch (AudioInit->SampleRate)
 8000958:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800095c:	f000 8110 	beq.w	8000b80 <CCA02M2_AUDIO_IN_Init+0x260>
 8000960:	d808      	bhi.n	8000974 <CCA02M2_AUDIO_IN_Init+0x54>
 8000962:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000966:	d002      	beq.n	800096e <CCA02M2_AUDIO_IN_Init+0x4e>
 8000968:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800096c:	d1de      	bne.n	800092c <CCA02M2_AUDIO_IN_Init+0xc>
 800096e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000972:	e005      	b.n	8000980 <CCA02M2_AUDIO_IN_Init+0x60>
 8000974:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000978:	4293      	cmp	r3, r2
 800097a:	d1d7      	bne.n	800092c <CCA02M2_AUDIO_IN_Init+0xc>
        PDM_Clock_Freq = 3072;
 800097c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
      AudioInCtx[Instance].DecimationFactor = (PDM_Clock_Freq * 1000U)/AudioInit->SampleRate;
 8000980:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
      if (AudioInCtx[Instance].ChannelsNbr == 1U)
 8000984:	2801      	cmp	r0, #1
      if(MX_SAI_ClockConfig(&hAudioInSai, PDM_Clock_Freq) != HAL_OK)
 8000986:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8000bb0 <CCA02M2_AUDIO_IN_Init+0x290>
      AudioInCtx[Instance].DecimationFactor = (PDM_Clock_Freq * 1000U)/AudioInit->SampleRate;
 800098a:	fb01 f505 	mul.w	r5, r1, r5
 800098e:	fbb5 f3f3 	udiv	r3, r5, r3
 8000992:	6623      	str	r3, [r4, #96]	; 0x60
      AudioInCtx[Instance].Size = (PDM_Clock_Freq/8U) * 2U * N_MS_PER_INTERRUPT;
 8000994:	ea4f 03d1 	mov.w	r3, r1, lsr #3
 8000998:	bf14      	ite	ne
 800099a:	005b      	lslne	r3, r3, #1
        AudioInCtx[Instance].Size *= 2U;
 800099c:	009b      	lsleq	r3, r3, #2
 800099e:	61e3      	str	r3, [r4, #28]
      if(MX_SAI_ClockConfig(&hAudioInSai, PDM_Clock_Freq) != HAL_OK)
 80009a0:	4640      	mov	r0, r8
      __HAL_SAI_RESET_HANDLE_STATE(&hAudioInSai);
 80009a2:	2300      	movs	r3, #0
 80009a4:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
      if(MX_SAI_ClockConfig(&hAudioInSai, PDM_Clock_Freq) != HAL_OK)
 80009a8:	f7ff ff10 	bl	80007cc <MX_SAI_ClockConfig>
 80009ac:	2800      	cmp	r0, #0
 80009ae:	f040 80ed 	bne.w	8000b8c <CCA02M2_AUDIO_IN_Init+0x26c>
      if(HAL_SAI_GetState(&hAudioInSai) == HAL_SAI_STATE_RESET)
 80009b2:	4640      	mov	r0, r8
 80009b4:	f003 f859 	bl	8003a6a <HAL_SAI_GetState>
 80009b8:	4607      	mov	r7, r0
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d177      	bne.n	8000aae <CCA02M2_AUDIO_IN_Init+0x18e>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
   AUDIO_IN_SAI_SCK_GPIO_CLK_ENABLE();
   AUDIO_IN_SAI_SD_GPIO_CLK_ENABLE();  
   
   /* SAI pins configuration: SCK and SD pins ------------------------------*/
   GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
   GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80009c2:	2002      	movs	r0, #2
 80009c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009c6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80009ca:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80009d2:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80009d4:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009d8:	f042 0201 	orr.w	r2, r2, #1
 80009dc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009e0:	f002 0201 	and.w	r2, r2, #1
 80009e4:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80009e6:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ea:	f042 0201 	orr.w	r2, r2, #1
 80009ee:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80009f8:	9b00      	ldr	r3, [sp, #0]
 80009fa:	2301      	movs	r3, #1
 80009fc:	e9cd 0304 	strd	r0, r3, [sp, #16]
   GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	f04f 0903 	mov.w	r9, #3
   
   GPIO_InitStruct.Pin       = AUDIO_IN_SAI_SCK_PIN;
 8000a04:	f44f 7b80 	mov.w	fp, #256	; 0x100
   GPIO_InitStruct.Alternate = AUDIO_IN_SAI_SCK_AF;
   HAL_GPIO_Init(AUDIO_IN_SAI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000a08:	a903      	add	r1, sp, #12
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
   
   GPIO_InitStruct.Pin       = AUDIO_IN_SAI_SD_PIN ;
 8000a0e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
   GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	f8cd 9018 	str.w	r9, [sp, #24]
   GPIO_InitStruct.Pin       = AUDIO_IN_SAI_SCK_PIN;
 8000a16:	f8cd b00c 	str.w	fp, [sp, #12]
   GPIO_InitStruct.Alternate = AUDIO_IN_SAI_SCK_AF;
 8000a1a:	f8cd 901c 	str.w	r9, [sp, #28]
   HAL_GPIO_Init(AUDIO_IN_SAI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000a1e:	f000 fc7f 	bl	8001320 <HAL_GPIO_Init>
   GPIO_InitStruct.Alternate = AUDIO_IN_SAI_SD_AF;
   HAL_GPIO_Init(AUDIO_IN_SAI_SD_GPIO_PORT, &GPIO_InitStruct);
 8000a22:	a903      	add	r1, sp, #12
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
   GPIO_InitStruct.Pin       = AUDIO_IN_SAI_SD_PIN ;
 8000a28:	f8cd a00c 	str.w	sl, [sp, #12]
   GPIO_InitStruct.Alternate = AUDIO_IN_SAI_SD_AF;
 8000a2c:	f8cd 901c 	str.w	r9, [sp, #28]
   HAL_GPIO_Init(AUDIO_IN_SAI_SD_GPIO_PORT, &GPIO_InitStruct);
 8000a30:	f000 fc76 	bl	8001320 <HAL_GPIO_Init>
   
   GPIO_InitStruct.Pin     = AUDIO_IN_SAI_SD2_PIN ;
 8000a34:	f44f 7200 	mov.w	r2, #512	; 0x200
   GPIO_InitStruct.Alternate = AUDIO_IN_SAI_SD2_AF;
   HAL_GPIO_Init(AUDIO_IN_SAI_SD_GPIO_PORT, &GPIO_InitStruct);
 8000a38:	a903      	add	r1, sp, #12
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
   GPIO_InitStruct.Pin     = AUDIO_IN_SAI_SD2_PIN ;
 8000a3e:	9203      	str	r2, [sp, #12]
   GPIO_InitStruct.Alternate = AUDIO_IN_SAI_SD2_AF;
 8000a40:	f8cd 901c 	str.w	r9, [sp, #28]
   HAL_GPIO_Init(AUDIO_IN_SAI_SD_GPIO_PORT, &GPIO_InitStruct);
 8000a44:	f000 fc6c 	bl	8001320 <HAL_GPIO_Init>
   
   /* Enable the DMA clock */
   /* DMA controller clock enable */
   __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a48:	2004      	movs	r0, #4
 8000a4a:	f7ff feb3 	bl	80007b4 <LL_AHB1_GRP1_EnableClock>
   __HAL_RCC_DMA1_CLK_ENABLE();  
 8000a4e:	2301      	movs	r3, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff feaf 	bl	80007b4 <LL_AHB1_GRP1_EnableClock>
   
   /* Configure the hSaiDma handle parameters */
   hSaiDma.Instance = DMA1_Channel1; /*tODO DEFINES */
 8000a56:	4b53      	ldr	r3, [pc, #332]	; (8000ba4 <CCA02M2_AUDIO_IN_Init+0x284>)
 8000a58:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
   hSaiDma.Init.Request             = DMA_REQUEST_SAI1_A;
 8000a5c:	2312      	movs	r3, #18
 8000a5e:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
   hSaiDma.Init.Direction           = DMA_PERIPH_TO_MEMORY;
   hSaiDma.Init.PeriphInc           = DMA_PINC_DISABLE;
   hSaiDma.Init.MemInc              = DMA_MINC_ENABLE;
 8000a62:	2380      	movs	r3, #128	; 0x80
   hSaiDma.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000a64:	f8c4 743c 	str.w	r7, [r4, #1084]	; 0x43c
   hSaiDma.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000a68:	f8c4 7440 	str.w	r7, [r4, #1088]	; 0x440
   hSaiDma.Init.MemInc              = DMA_MINC_ENABLE;
 8000a6c:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
   hSaiDma.Init.MemDataAlignment    = AUDIO_IN_SAI_DMAx_MEM_DATA_SIZE;
   hSaiDma.Init.Mode                = DMA_CIRCULAR;
   hSaiDma.Init.Priority            = DMA_PRIORITY_HIGH;
   
   /* Associate the DMA handle */
   __HAL_LINKDMA(hsai, hdmarx, hSaiDma);    
 8000a70:	f108 0798 	add.w	r7, r8, #152	; 0x98
   hSaiDma.Init.Mode                = DMA_CIRCULAR;
 8000a74:	2320      	movs	r3, #32
 8000a76:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
   /* Deinitialize the Stream for new transfer */
   (void)HAL_DMA_DeInit(&hSaiDma);    
 8000a7a:	4638      	mov	r0, r7
   hSaiDma.Init.Priority            = DMA_PRIORITY_HIGH;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a80:	f8c4 3454 	str.w	r3, [r4, #1108]	; 0x454
   hSaiDma.Init.PeriphDataAlignment = AUDIO_IN_SAI_DMAx_PERIPH_DATA_SIZE;
 8000a84:	f8c4 b448 	str.w	fp, [r4, #1096]	; 0x448
   hSaiDma.Init.MemDataAlignment    = AUDIO_IN_SAI_DMAx_MEM_DATA_SIZE;
 8000a88:	f8c4 a44c 	str.w	sl, [r4, #1100]	; 0x44c
   __HAL_LINKDMA(hsai, hdmarx, hSaiDma);    
 8000a8c:	f8c4 7420 	str.w	r7, [r4, #1056]	; 0x420
 8000a90:	f8c4 845c 	str.w	r8, [r4, #1116]	; 0x45c
   (void)HAL_DMA_DeInit(&hSaiDma);    
 8000a94:	f000 fb60 	bl	8001158 <HAL_DMA_DeInit>
   /* Configure the DMA Stream */
   (void)HAL_DMA_Init(&hSaiDma);
 8000a98:	4638      	mov	r0, r7
 8000a9a:	f000 fae9 	bl	8001070 <HAL_DMA_Init>
   
   /* I2S DMA IRQ Channel configuration */
   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, CCA02M2_AUDIO_IN_IT_PRIORITY, CCA02M2_AUDIO_IN_IT_PRIORITY);
 8000a9e:	2205      	movs	r2, #5
 8000aa0:	200b      	movs	r0, #11
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	f000 fa46 	bl	8000f34 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aa8:	200b      	movs	r0, #11
 8000aaa:	f000 fa75 	bl	8000f98 <HAL_NVIC_EnableIRQ>
      __HAL_SAI_DISABLE(&hAudioInSai);
 8000aae:	4a3e      	ldr	r2, [pc, #248]	; (8000ba8 <CCA02M2_AUDIO_IN_Init+0x288>)
      hAudioInSai.Instance = AUDIO_IN_SAI_INSTANCE;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <CCA02M2_AUDIO_IN_Init+0x28c>)
 8000ab2:	f8c4 339c 	str.w	r3, [r4, #924]	; 0x39c
      __HAL_SAI_DISABLE(&hAudioInSai);
 8000ab6:	6853      	ldr	r3, [r2, #4]
      if (HAL_SAI_Init(&hAudioInSai) != HAL_OK)
 8000ab8:	483d      	ldr	r0, [pc, #244]	; (8000bb0 <CCA02M2_AUDIO_IN_Init+0x290>)
      __HAL_SAI_DISABLE(&hAudioInSai);
 8000aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000abe:	6053      	str	r3, [r2, #4]
      hAudioInSai.Init.DataSize = SAI_DATASIZE_16;   
 8000ac0:	2180      	movs	r1, #128	; 0x80
      hAudioInSai.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ac2:	2300      	movs	r3, #0
      hAudioInSai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ac4:	e9c4 13f9 	strd	r1, r3, [r4, #996]	; 0x3e4
      hAudioInSai.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ac8:	e9c4 33f2 	strd	r3, r3, [r4, #968]	; 0x3c8
      hAudioInSai.Init.Protocol = SAI_FREE_PROTOCOL;
 8000acc:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
      hAudioInSai.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ad0:	f8c4 33ec 	str.w	r3, [r4, #1004]	; 0x3ec
      hAudioInSai.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ad4:	f8c4 33a4 	str.w	r3, [r4, #932]	; 0x3a4
      hAudioInSai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ad8:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
      hAudioInSai.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000adc:	f8c4 33c4 	str.w	r3, [r4, #964]	; 0x3c4
      hAudioInSai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;    
 8000ae0:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
      hAudioInSai.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ae4:	f8c4 33a8 	str.w	r3, [r4, #936]	; 0x3a8
      hAudioInSai.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8000ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aec:	f8c4 33dc 	str.w	r3, [r4, #988]	; 0x3dc
      hAudioInSai.FrameInit.FrameLength = 16;
 8000af0:	2310      	movs	r3, #16
 8000af2:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
      if ( AudioInCtx[Instance].ChannelsNbr <= 2U)
 8000af6:	6923      	ldr	r3, [r4, #16]
 8000af8:	2b02      	cmp	r3, #2
      hAudioInSai.Init.AudioMode = SAI_MODEMASTER_RX;
 8000afa:	f04f 0201 	mov.w	r2, #1
        hAudioInSai.Init.PdmInit.MicPairsNbr = 2;
 8000afe:	bf88      	it	hi
 8000b00:	2302      	movhi	r3, #2
        hAudioInSai.Init.AudioFrequency = ((PDM_Clock_Freq * 1000U) / hAudioInSai.FrameInit.FrameLength ) * 2U;           
 8000b02:	ea4f 1515 	mov.w	r5, r5, lsr #4
 8000b06:	bf94      	ite	ls
 8000b08:	4095      	lslls	r5, r2
        hAudioInSai.Init.AudioFrequency = ((PDM_Clock_Freq * 1000U) / hAudioInSai.FrameInit.FrameLength ) * 4U;       
 8000b0a:	409d      	lslhi	r5, r3
      hAudioInSai.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8000b0c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
        hAudioInSai.Init.PdmInit.MicPairsNbr = 1;
 8000b10:	bf94      	ite	ls
 8000b12:	f8c4 23d8 	strls.w	r2, [r4, #984]	; 0x3d8
        hAudioInSai.Init.PdmInit.MicPairsNbr = 2;
 8000b16:	f8c4 33d8 	strhi.w	r3, [r4, #984]	; 0x3d8
      hAudioInSai.Init.AudioMode = SAI_MODEMASTER_RX;
 8000b1a:	f8c4 23a0 	str.w	r2, [r4, #928]	; 0x3a0
      hAudioInSai.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b1e:	2300      	movs	r3, #0
      hAudioInSai.Init.PdmInit.Activation = ENABLE;
 8000b20:	f884 23d4 	strb.w	r2, [r4, #980]	; 0x3d4
      hAudioInSai.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b24:	2201      	movs	r2, #1
 8000b26:	e9c4 23fd 	strd	r2, r3, [r4, #1012]	; 0x3f4
      hAudioInSai.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8000b2a:	f8c4 13b4 	str.w	r1, [r4, #948]	; 0x3b4
      hAudioInSai.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000b2e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
      hAudioInSai.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000b32:	f44f 3100 	mov.w	r1, #131072	; 0x20000
      hAudioInSai.SlotInit.FirstBitOffset = 0;
 8000b36:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
      hAudioInSai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000b3a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
      hAudioInSai.SlotInit.SlotActive = 0x00000003;
 8000b3e:	2303      	movs	r3, #3
        hAudioInSai.Init.AudioFrequency = ((PDM_Clock_Freq * 1000U) / hAudioInSai.FrameInit.FrameLength ) * 4U;       
 8000b40:	f8c4 53bc 	str.w	r5, [r4, #956]	; 0x3bc
      hAudioInSai.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000b44:	f8c4 13fc 	str.w	r1, [r4, #1020]	; 0x3fc
      hAudioInSai.SlotInit.SlotNumber = 1; 
 8000b48:	f8c4 240c 	str.w	r2, [r4, #1036]	; 0x40c
      hAudioInSai.SlotInit.SlotActive = 0x00000003;
 8000b4c:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
      if (HAL_SAI_Init(&hAudioInSai) != HAL_OK)
 8000b50:	f002 fe0e 	bl	8003770 <HAL_SAI_Init>
 8000b54:	b9e8      	cbnz	r0, 8000b92 <CCA02M2_AUDIO_IN_Init+0x272>
      __HAL_SAI_ENABLE(&hAudioInSai);
 8000b56:	f8d4 239c 	ldr.w	r2, [r4, #924]	; 0x39c
      if (CCA02M2_AUDIO_IN_PDMToPCM_Init(Instance, AudioInCtx[0].SampleRate, AudioInCtx[0].ChannelsNbr, AudioInCtx[0].ChannelsNbr)!= BSP_ERROR_NONE)
 8000b5a:	68a1      	ldr	r1, [r4, #8]
      __HAL_SAI_ENABLE(&hAudioInSai);
 8000b5c:	6813      	ldr	r3, [r2, #0]
 8000b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b62:	6013      	str	r3, [r2, #0]
      if (CCA02M2_AUDIO_IN_PDMToPCM_Init(Instance, AudioInCtx[0].SampleRate, AudioInCtx[0].ChannelsNbr, AudioInCtx[0].ChannelsNbr)!= BSP_ERROR_NONE)
 8000b64:	6923      	ldr	r3, [r4, #16]
 8000b66:	461a      	mov	r2, r3
 8000b68:	f7ff fe52 	bl	8000810 <CCA02M2_AUDIO_IN_PDMToPCM_Init>
 8000b6c:	b9a0      	cbnz	r0, 8000b98 <CCA02M2_AUDIO_IN_Init+0x278>
    AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP; 
 8000b6e:	2064      	movs	r0, #100	; 0x64
 8000b70:	fb00 4406 	mla	r4, r0, r6, r4
 8000b74:	2302      	movs	r3, #2
 8000b76:	6263      	str	r3, [r4, #36]	; 0x24
  return BSP_ERROR_NONE;
 8000b78:	2000      	movs	r0, #0
}
 8000b7a:	b009      	add	sp, #36	; 0x24
 8000b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PDM_Clock_Freq = 2048;
 8000b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b84:	e6fc      	b.n	8000980 <CCA02M2_AUDIO_IN_Init+0x60>
    else if(Instance == 1U)
 8000b86:	2e01      	cmp	r6, #1
 8000b88:	d1f1      	bne.n	8000b6e <CCA02M2_AUDIO_IN_Init+0x24e>
 8000b8a:	e6cf      	b.n	800092c <CCA02M2_AUDIO_IN_Init+0xc>
        return  BSP_ERROR_CLOCK_FAILURE;
 8000b8c:	f06f 0008 	mvn.w	r0, #8
 8000b90:	e7f3      	b.n	8000b7a <CCA02M2_AUDIO_IN_Init+0x25a>
        return  BSP_ERROR_PERIPH_FAILURE;
 8000b92:	f06f 0003 	mvn.w	r0, #3
 8000b96:	e7f0      	b.n	8000b7a <CCA02M2_AUDIO_IN_Init+0x25a>
        return  BSP_ERROR_NO_INIT;
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b9c:	e7ed      	b.n	8000b7a <CCA02M2_AUDIO_IN_Init+0x25a>
 8000b9e:	bf00      	nop
 8000ba0:	20001314 	.word	0x20001314
 8000ba4:	40020008 	.word	0x40020008
 8000ba8:	40015400 	.word	0x40015400
 8000bac:	40015404 	.word	0x40015404
 8000bb0:	200016b0 	.word	0x200016b0

08000bb4 <CCA02M2_AUDIO_IN_PDMToPCM>:
{    
 8000bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bb8:	4617      	mov	r7, r2
 8000bba:	b08d      	sub	sp, #52	; 0x34
  if(Instance != 0U)
 8000bbc:	4604      	mov	r4, r0
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	d147      	bne.n	8000c52 <CCA02M2_AUDIO_IN_PDMToPCM+0x9e>
 8000bc2:	4e25      	ldr	r6, [pc, #148]	; (8000c58 <CCA02M2_AUDIO_IN_PDMToPCM+0xa4>)
 8000bc4:	460d      	mov	r5, r1
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8000bc6:	f5a6 7896 	sub.w	r8, r6, #300	; 0x12c
        (void)arm_fir_decimate_q15 (&ARM_Decimator_State[index], (q15_t *)&(PDM_Filter_Out), (q15_t*)&(Decimate_Out), DECIMATOR_BLOCK_SIZE);
 8000bca:	f506 79a4 	add.w	r9, r6, #328	; 0x148
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8000bce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8000bd2:	42a3      	cmp	r3, r4
 8000bd4:	d803      	bhi.n	8000bde <CCA02M2_AUDIO_IN_PDMToPCM+0x2a>
  return BSP_ERROR_NONE;
 8000bd6:	2000      	movs	r0, #0
}
 8000bd8:	b00d      	add	sp, #52	; 0x34
 8000bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (AudioInCtx[Instance].SampleRate == 8000U)
 8000bde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000be2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000be6:	d120      	bne.n	8000c2a <CCA02M2_AUDIO_IN_PDMToPCM+0x76>
        (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], PDM_Filter_Out, &PDM_FilterHandler[index]);
 8000be8:	4632      	mov	r2, r6
 8000bea:	a904      	add	r1, sp, #16
 8000bec:	4628      	mov	r0, r5
 8000bee:	f006 faaf 	bl	8007150 <PDM_Filter>
        (void)arm_fir_decimate_q15 (&ARM_Decimator_State[index], (q15_t *)&(PDM_Filter_Out), (q15_t*)&(Decimate_Out), DECIMATOR_BLOCK_SIZE);
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	200c      	movs	r0, #12
 8000bf6:	eb0d 0103 	add.w	r1, sp, r3
 8000bfa:	466a      	mov	r2, sp
 8000bfc:	fb00 9004 	mla	r0, r0, r4, r9
 8000c00:	f006 fb00 	bl	8007204 <arm_fir_decimate_q15>
        for (ii=0; ii<(8U*N_MS_PER_INTERRUPT); ii++)
 8000c04:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8000c08:	466b      	mov	r3, sp
 8000c0a:	0050      	lsls	r0, r2, #1
 8000c0c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
 8000c10:	2200      	movs	r2, #0
 8000c12:	3201      	adds	r2, #1
          PCMBuf[(ii * AudioInCtx[Instance].ChannelsNbr) + index] = Decimate_Out[ii];
 8000c14:	f833 cb02 	ldrh.w	ip, [r3], #2
 8000c18:	f8a1 c000 	strh.w	ip, [r1]
        for (ii=0; ii<(8U*N_MS_PER_INTERRUPT); ii++)
 8000c1c:	2a08      	cmp	r2, #8
 8000c1e:	4401      	add	r1, r0
 8000c20:	d1f7      	bne.n	8000c12 <CCA02M2_AUDIO_IN_PDMToPCM+0x5e>
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8000c22:	3401      	adds	r4, #1
 8000c24:	3501      	adds	r5, #1
 8000c26:	364c      	adds	r6, #76	; 0x4c
 8000c28:	e7d1      	b.n	8000bce <CCA02M2_AUDIO_IN_PDMToPCM+0x1a>
        switch(AudioInCtx[Instance].BitsPerSample)
 8000c2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000c2e:	2b18      	cmp	r3, #24
 8000c30:	d007      	beq.n	8000c42 <CCA02M2_AUDIO_IN_PDMToPCM+0x8e>
 8000c32:	2b20      	cmp	r3, #32
 8000c34:	d001      	beq.n	8000c3a <CCA02M2_AUDIO_IN_PDMToPCM+0x86>
 8000c36:	2b10      	cmp	r3, #16
 8000c38:	d1f3      	bne.n	8000c22 <CCA02M2_AUDIO_IN_PDMToPCM+0x6e>
          (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint32_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);          
 8000c3a:	4632      	mov	r2, r6
 8000c3c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
 8000c40:	e003      	b.n	8000c4a <CCA02M2_AUDIO_IN_PDMToPCM+0x96>
          (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], &((uint8_t*)(PCMBuf))[3U*index], &PDM_FilterHandler[index]);          
 8000c42:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8000c46:	4632      	mov	r2, r6
 8000c48:	4439      	add	r1, r7
          (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint32_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);          
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	f006 fa80 	bl	8007150 <PDM_Filter>
          break;
 8000c50:	e7e7      	b.n	8000c22 <CCA02M2_AUDIO_IN_PDMToPCM+0x6e>
    return  BSP_ERROR_WRONG_PARAM;
 8000c52:	f06f 0001 	mvn.w	r0, #1
 8000c56:	e7bf      	b.n	8000bd8 <CCA02M2_AUDIO_IN_PDMToPCM+0x24>
 8000c58:	20001440 	.word	0x20001440

08000c5c <CCA02M2_AUDIO_IN_Record>:
  if(Instance >= (AUDIO_IN_INSTANCES_NBR - 1U) )
 8000c5c:	2801      	cmp	r0, #1
{  
 8000c5e:	b510      	push	{r4, lr}
  if(Instance >= (AUDIO_IN_INSTANCES_NBR - 1U) )
 8000c60:	d902      	bls.n	8000c68 <CCA02M2_AUDIO_IN_Record+0xc>
    return BSP_ERROR_WRONG_PARAM;
 8000c62:	f06f 0001 	mvn.w	r0, #1
}
 8000c66:	bd10      	pop	{r4, pc}
    AudioInCtx[Instance].pBuff = (uint16_t*)pBuf;
 8000c68:	4c0c      	ldr	r4, [pc, #48]	; (8000c9c <CCA02M2_AUDIO_IN_Record+0x40>)
 8000c6a:	2364      	movs	r3, #100	; 0x64
 8000c6c:	fb03 4300 	mla	r3, r3, r0, r4
 8000c70:	6159      	str	r1, [r3, #20]
    if(Instance == 0U)
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d1f5      	bne.n	8000c62 <CCA02M2_AUDIO_IN_Record+0x6>
      if(HAL_SAI_Receive_DMA(&hAudioInSai, (uint8_t *)SAI_InternalBuffer, (uint16_t)(AudioInCtx[Instance].Size/2U * AudioInCtx[Instance].ChannelsNbr)) != HAL_OK)
 8000c76:	69e2      	ldr	r2, [r4, #28]
 8000c78:	6923      	ldr	r3, [r4, #16]
 8000c7a:	0852      	lsrs	r2, r2, #1
 8000c7c:	fb12 f203 	smulbb	r2, r2, r3
 8000c80:	b292      	uxth	r2, r2
 8000c82:	f204 4194 	addw	r1, r4, #1172	; 0x494
 8000c86:	f504 7067 	add.w	r0, r4, #924	; 0x39c
 8000c8a:	f002 fe5f 	bl	800394c <HAL_SAI_Receive_DMA>
 8000c8e:	b910      	cbnz	r0, 8000c96 <CCA02M2_AUDIO_IN_Record+0x3a>
      AudioInCtx[Instance].State = AUDIO_IN_STATE_RECORDING;           
 8000c90:	2301      	movs	r3, #1
 8000c92:	6263      	str	r3, [r4, #36]	; 0x24
  return BSP_ERROR_NONE;
 8000c94:	e7e7      	b.n	8000c66 <CCA02M2_AUDIO_IN_Record+0xa>
        return BSP_ERROR_PERIPH_FAILURE;
 8000c96:	f06f 0003 	mvn.w	r0, #3
 8000c9a:	e7e4      	b.n	8000c66 <CCA02M2_AUDIO_IN_Record+0xa>
 8000c9c:	20001314 	.word	0x20001314

08000ca0 <CCA02M2_AUDIO_IN_SetVolume>:
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8000ca0:	2802      	cmp	r0, #2
{
 8000ca2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	460f      	mov	r7, r1
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8000caa:	d822      	bhi.n	8000cf2 <CCA02M2_AUDIO_IN_SetVolume+0x52>
  else if (Instance == 0U)
 8000cac:	4d12      	ldr	r5, [pc, #72]	; (8000cf8 <CCA02M2_AUDIO_IN_SetVolume+0x58>)
 8000cae:	b9d8      	cbnz	r0, 8000ce8 <CCA02M2_AUDIO_IN_SetVolume+0x48>
      if (PDM_FilterConfig[index].mic_gain != VolumeGain[Volume])
 8000cb0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8000cfc <CCA02M2_AUDIO_IN_SetVolume+0x5c>
 8000cb4:	f505 7617 	add.w	r6, r5, #604	; 0x25c
 8000cb8:	f505 7896 	add.w	r8, r5, #300	; 0x12c
    for (index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8000cbc:	692b      	ldr	r3, [r5, #16]
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	d802      	bhi.n	8000cc8 <CCA02M2_AUDIO_IN_SetVolume+0x28>
  return BSP_ERROR_NONE;  
 8000cc2:	2000      	movs	r0, #0
}
 8000cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (PDM_FilterConfig[index].mic_gain != VolumeGain[Volume])
 8000cc8:	f939 3017 	ldrsh.w	r3, [r9, r7, lsl #1]
 8000ccc:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d004      	beq.n	8000cde <CCA02M2_AUDIO_IN_SetVolume+0x3e>
        PDM_FilterConfig[index].mic_gain = VolumeGain[Volume];
 8000cd4:	80b3      	strh	r3, [r6, #4]
        (void)PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8000cd6:	4631      	mov	r1, r6
 8000cd8:	4640      	mov	r0, r8
 8000cda:	f006 f947 	bl	8006f6c <PDM_Filter_setConfig>
    for (index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8000cde:	3401      	adds	r4, #1
 8000ce0:	3606      	adds	r6, #6
 8000ce2:	f108 084c 	add.w	r8, r8, #76	; 0x4c
 8000ce6:	e7e9      	b.n	8000cbc <CCA02M2_AUDIO_IN_SetVolume+0x1c>
    AudioInCtx[Instance].Volume = Volume;
 8000ce8:	2064      	movs	r0, #100	; 0x64
 8000cea:	fb00 5404 	mla	r4, r0, r4, r5
 8000cee:	6221      	str	r1, [r4, #32]
 8000cf0:	e7e7      	b.n	8000cc2 <CCA02M2_AUDIO_IN_SetVolume+0x22>
    return BSP_ERROR_WRONG_PARAM;
 8000cf2:	f06f 0001 	mvn.w	r0, #1
 8000cf6:	e7e5      	b.n	8000cc4 <CCA02M2_AUDIO_IN_SetVolume+0x24>
 8000cf8:	20001314 	.word	0x20001314
 8000cfc:	08008036 	.word	0x08008036

08000d00 <HAL_SAI_RxCpltCallback>:
  switch(AudioInCtx[0].ChannelsNbr)
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <HAL_SAI_RxCpltCallback+0x8c>)
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	2a02      	cmp	r2, #2
{
 8000d06:	b510      	push	{r4, lr}
  switch(AudioInCtx[0].ChannelsNbr)
 8000d08:	d022      	beq.n	8000d50 <HAL_SAI_RxCpltCallback+0x50>
 8000d0a:	2a04      	cmp	r2, #4
 8000d0c:	d02e      	beq.n	8000d6c <HAL_SAI_RxCpltCallback+0x6c>
 8000d0e:	2a01      	cmp	r2, #1
 8000d10:	d110      	bne.n	8000d34 <HAL_SAI_RxCpltCallback+0x34>
      uint8_t * DataTempSAI = &(((uint8_t *)SAI_InternalBuffer)[AudioInCtx[0].Size/2U]) ;
 8000d12:	69da      	ldr	r2, [r3, #28]
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]);
 8000d14:	f203 4494 	addw	r4, r3, #1172	; 0x494
      for(index = 0; index < (AudioInCtx[0].Size/4U) ; index++)
 8000d18:	2000      	movs	r0, #0
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]);
 8000d1a:	eb04 0452 	add.w	r4, r4, r2, lsr #1
      for(index = 0; index < (AudioInCtx[0].Size/4U) ; index++)
 8000d1e:	69d9      	ldr	r1, [r3, #28]
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]);
 8000d20:	695a      	ldr	r2, [r3, #20]
      for(index = 0; index < (AudioInCtx[0].Size/4U) ; index++)
 8000d22:	ebb0 0f91 	cmp.w	r0, r1, lsr #2
 8000d26:	d309      	bcc.n	8000d3c <HAL_SAI_RxCpltCallback+0x3c>
      for(index = 0; index < (AudioInCtx[0].Size/8U) ; index++)
 8000d28:	08c9      	lsrs	r1, r1, #3
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d108      	bne.n	8000d46 <HAL_SAI_RxCpltCallback+0x46>
  CCA02M2_AUDIO_IN_TransferComplete_CallBack(0);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fa77 	bl	8000228 <CCA02M2_AUDIO_IN_TransferComplete_CallBack>
}
 8000d3a:	bd10      	pop	{r4, pc}
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]);
 8000d3c:	f814 1010 	ldrb.w	r1, [r4, r0, lsl #1]
 8000d40:	5411      	strb	r1, [r2, r0]
      for(index = 0; index < (AudioInCtx[0].Size/4U) ; index++)
 8000d42:	3001      	adds	r0, #1
 8000d44:	e7eb      	b.n	8000d1e <HAL_SAI_RxCpltCallback+0x1e>
        ((uint16_t *)(AudioInCtx[0].pBuff))[index] = HTONS(((uint16_t *)(AudioInCtx[0].pBuff))[index]);
 8000d46:	881a      	ldrh	r2, [r3, #0]
 8000d48:	ba52      	rev16	r2, r2
 8000d4a:	f823 2b02 	strh.w	r2, [r3], #2
      for(index = 0; index < (AudioInCtx[0].Size/8U) ; index++)
 8000d4e:	e7ef      	b.n	8000d30 <HAL_SAI_RxCpltCallback+0x30>
      for(index = 0; index < (AudioInCtx[0].Size) ; index++)
 8000d50:	69da      	ldr	r2, [r3, #28]
 8000d52:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8000d56:	4411      	add	r1, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	69d8      	ldr	r0, [r3, #28]
 8000d5c:	4290      	cmp	r0, r2
 8000d5e:	d9e9      	bls.n	8000d34 <HAL_SAI_RxCpltCallback+0x34>
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[index]);
 8000d60:	6958      	ldr	r0, [r3, #20]
 8000d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d66:	5484      	strb	r4, [r0, r2]
      for(index = 0; index < (AudioInCtx[0].Size) ; index++)
 8000d68:	3201      	adds	r2, #1
 8000d6a:	e7f6      	b.n	8000d5a <HAL_SAI_RxCpltCallback+0x5a>
      uint8_t * DataTempSAI = &(((uint8_t *)SAI_InternalBuffer)[AudioInCtx[0].Size  * 2U]) ;
 8000d6c:	69da      	ldr	r2, [r3, #28]
 8000d6e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8000d72:	eb01 0142 	add.w	r1, r1, r2, lsl #1
      for(index = 0; index < (AudioInCtx[0].Size * 2U) ; index++)
 8000d76:	2200      	movs	r2, #0
 8000d78:	69d8      	ldr	r0, [r3, #28]
 8000d7a:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
 8000d7e:	d2d9      	bcs.n	8000d34 <HAL_SAI_RxCpltCallback+0x34>
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[index]);
 8000d80:	6958      	ldr	r0, [r3, #20]
 8000d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d86:	5484      	strb	r4, [r0, r2]
      for(index = 0; index < (AudioInCtx[0].Size * 2U) ; index++)
 8000d88:	3201      	adds	r2, #1
 8000d8a:	e7f5      	b.n	8000d78 <HAL_SAI_RxCpltCallback+0x78>
 8000d8c:	20001314 	.word	0x20001314

08000d90 <HAL_SAI_RxHalfCpltCallback>:
  switch(AudioInCtx[0].ChannelsNbr)
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_SAI_RxHalfCpltCallback+0x7c>)
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	2a02      	cmp	r2, #2
{
 8000d96:	b510      	push	{r4, lr}
  switch(AudioInCtx[0].ChannelsNbr)
 8000d98:	d014      	beq.n	8000dc4 <HAL_SAI_RxHalfCpltCallback+0x34>
 8000d9a:	2a04      	cmp	r2, #4
 8000d9c:	d005      	beq.n	8000daa <HAL_SAI_RxHalfCpltCallback+0x1a>
 8000d9e:	2a01      	cmp	r2, #1
 8000da0:	d12b      	bne.n	8000dfa <HAL_SAI_RxHalfCpltCallback+0x6a>
 8000da2:	2000      	movs	r0, #0
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]); 
 8000da4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8000da8:	e01c      	b.n	8000de4 <HAL_SAI_RxHalfCpltCallback+0x54>
 8000daa:	f203 4194 	addw	r1, r3, #1172	; 0x494
      for(index = 0; index < (AudioInCtx[0].Size * 2U); index++)
 8000dae:	2200      	movs	r2, #0
 8000db0:	69d8      	ldr	r0, [r3, #28]
 8000db2:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
 8000db6:	d220      	bcs.n	8000dfa <HAL_SAI_RxHalfCpltCallback+0x6a>
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[index]); 
 8000db8:	6958      	ldr	r0, [r3, #20]
 8000dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000dbe:	5484      	strb	r4, [r0, r2]
      for(index = 0; index < (AudioInCtx[0].Size * 2U); index++)
 8000dc0:	3201      	adds	r2, #1
 8000dc2:	e7f5      	b.n	8000db0 <HAL_SAI_RxHalfCpltCallback+0x20>
 8000dc4:	f203 4194 	addw	r1, r3, #1172	; 0x494
      for(index = 0; index < (AudioInCtx[0].Size); index++)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	69d8      	ldr	r0, [r3, #28]
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	d914      	bls.n	8000dfa <HAL_SAI_RxHalfCpltCallback+0x6a>
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[index]); 
 8000dd0:	6958      	ldr	r0, [r3, #20]
 8000dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000dd6:	5484      	strb	r4, [r0, r2]
      for(index = 0; index < (AudioInCtx[0].Size); index++)
 8000dd8:	3201      	adds	r2, #1
 8000dda:	e7f6      	b.n	8000dca <HAL_SAI_RxHalfCpltCallback+0x3a>
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]); 
 8000ddc:	f814 1010 	ldrb.w	r1, [r4, r0, lsl #1]
 8000de0:	5411      	strb	r1, [r2, r0]
      for(index = 0; index < (AudioInCtx[0].Size/4U) ; index++)
 8000de2:	3001      	adds	r0, #1
 8000de4:	69d9      	ldr	r1, [r3, #28]
        ((uint8_t *)(AudioInCtx[0].pBuff))[index] = (DataTempSAI[2U*index]); 
 8000de6:	695a      	ldr	r2, [r3, #20]
      for(index = 0; index < (AudioInCtx[0].Size/4U) ; index++)
 8000de8:	ebb0 0f91 	cmp.w	r0, r1, lsr #2
 8000dec:	d3f6      	bcc.n	8000ddc <HAL_SAI_RxHalfCpltCallback+0x4c>
      for(index = 0; index < (AudioInCtx[0].Size/8U) ; index++)
 8000dee:	08c9      	lsrs	r1, r1, #3
 8000df0:	4613      	mov	r3, r2
 8000df2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d103      	bne.n	8000e02 <HAL_SAI_RxHalfCpltCallback+0x72>
  CCA02M2_AUDIO_IN_HalfTransfer_CallBack(0);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fa16 	bl	800022c <CCA02M2_AUDIO_IN_HalfTransfer_CallBack>
}
 8000e00:	bd10      	pop	{r4, pc}
        ((uint16_t *)(AudioInCtx[0].pBuff))[index] = HTONS(((uint16_t *)(AudioInCtx[0].pBuff))[index]);
 8000e02:	881a      	ldrh	r2, [r3, #0]
 8000e04:	ba52      	rev16	r2, r2
 8000e06:	f823 2b02 	strh.w	r2, [r3], #2
      for(index = 0; index < (AudioInCtx[0].Size/8U) ; index++)
 8000e0a:	e7f4      	b.n	8000df6 <HAL_SAI_RxHalfCpltCallback+0x66>
 8000e0c:	20001314 	.word	0x20001314

08000e10 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <SystemInit+0x60>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000e16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e1a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e26:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	f042 0201 	orr.w	r2, r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8000e32:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e36:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8000e3e:	4462      	add	r2, ip
 8000e40:	4002      	ands	r2, r0
 8000e42:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e44:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000e48:	f022 0205 	bic.w	r2, r2, #5
 8000e4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e50:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000e54:	f022 0201 	bic.w	r2, r2, #1
 8000e58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000e5c:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <SystemInit+0x64>)
 8000e5e:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000e60:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e68:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e6a:	6199      	str	r1, [r3, #24]
}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00
 8000e74:	22041000 	.word	0x22041000

08000e78 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{   
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000e78:	4770      	bx	lr
	...

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 8000e7e:	4e0f      	ldr	r6, [pc, #60]	; (8000ebc <HAL_InitTick+0x40>)
 8000e80:	7833      	ldrb	r3, [r6, #0]
{
 8000e82:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000e84:	b90b      	cbnz	r3, 8000e8a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e86:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000e88:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e8a:	f001 faef 	bl	800246c <HAL_RCC_GetHCLKFreq>
 8000e8e:	7832      	ldrb	r2, [r6, #0]
 8000e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e98:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e9c:	f000 f88a 	bl	8000fb4 <HAL_SYSTICK_Config>
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	2800      	cmp	r0, #0
 8000ea4:	d1ef      	bne.n	8000e86 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	2d0f      	cmp	r5, #15
 8000ea8:	d8ed      	bhi.n	8000e86 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eaa:	4602      	mov	r2, r0
 8000eac:	4629      	mov	r1, r5
 8000eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb2:	f000 f83f 	bl	8000f34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb6:	6075      	str	r5, [r6, #4]
 8000eb8:	4620      	mov	r0, r4
 8000eba:	e7e5      	b.n	8000e88 <HAL_InitTick+0xc>
 8000ebc:	20000080 	.word	0x20000080

08000ec0 <HAL_Init>:
{
 8000ec0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	f000 f824 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec8:	200f      	movs	r0, #15
 8000eca:	f7ff ffd7 	bl	8000e7c <HAL_InitTick>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	b918      	cbnz	r0, 8000eda <HAL_Init+0x1a>
    HAL_MspInit();
 8000ed2:	f7ff ffd1 	bl	8000e78 <HAL_MspInit>
}
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000eda:	2401      	movs	r4, #1
 8000edc:	e7fb      	b.n	8000ed6 <HAL_Init+0x16>
	...

08000ee0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000ee0:	4a03      	ldr	r2, [pc, #12]	; (8000ef0 <HAL_IncTick+0x10>)
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <HAL_IncTick+0x14>)
 8000ee4:	6811      	ldr	r1, [r2, #0]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	440b      	add	r3, r1
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200023c0 	.word	0x200023c0
 8000ef4:	20000080 	.word	0x20000080

08000ef8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ef8:	4b01      	ldr	r3, [pc, #4]	; (8000f00 <HAL_GetTick+0x8>)
 8000efa:	6818      	ldr	r0, [r3, #0]
}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	200023c0 	.word	0x200023c0

08000f04 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8000f04:	4b01      	ldr	r3, [pc, #4]	; (8000f0c <HAL_GetTickPrio+0x8>)
 8000f06:	6858      	ldr	r0, [r3, #4]
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000080 	.word	0x20000080

08000f10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f12:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f20:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000f2c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f36:	b530      	push	{r4, r5, lr}
 8000f38:	68dc      	ldr	r4, [r3, #12]
 8000f3a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	2d04      	cmp	r5, #4
 8000f46:	bf28      	it	cs
 8000f48:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f50:	bf8c      	ite	hi
 8000f52:	3c03      	subhi	r4, #3
 8000f54:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f56:	fa03 f505 	lsl.w	r5, r3, r5
 8000f5a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5e:	40a3      	lsls	r3, r4
 8000f60:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000f66:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	bfac      	ite	ge
 8000f6e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	4a08      	ldrlt	r2, [pc, #32]	; (8000f94 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	bfb8      	it	lt
 8000f7a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	bfaa      	itet	ge
 8000f82:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f8c:	bd30      	pop	{r4, r5, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00
 8000f94:	e000ed14 	.word	0xe000ed14

08000f98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	db08      	blt.n	8000fae <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	0942      	lsrs	r2, r0, #5
 8000fa0:	f000 001f 	and.w	r0, r0, #31
 8000fa4:	fa03 f000 	lsl.w	r0, r3, r0
 8000fa8:	4b01      	ldr	r3, [pc, #4]	; (8000fb0 <HAL_NVIC_EnableIRQ+0x18>)
 8000faa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fba:	d20b      	bcs.n	8000fd4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	21f0      	movs	r1, #240	; 0xf0
 8000fc6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fca:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fcc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fce:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fd4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000fdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000fe0:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	bf0c      	ite	eq
 8000fe6:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000fea:	f022 0204 	bicne.w	r2, r2, #4
 8000fee:	611a      	str	r2, [r3, #16]
  }
}
 8000ff0:	4770      	bx	lr

08000ff2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ff2:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ff4:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 8000ff8:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000ffa:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8000ffc:	b114      	cbz	r4, 8001004 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ffe:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 8001002:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001004:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
 8001008:	f004 061c 	and.w	r6, r4, #28
 800100c:	2401      	movs	r4, #1
 800100e:	40b4      	lsls	r4, r6
 8001010:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001012:	6804      	ldr	r4, [r0, #0]
 8001014:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001016:	6883      	ldr	r3, [r0, #8]
 8001018:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800101a:	bf0b      	itete	eq
 800101c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800101e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001020:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001022:	60e2      	strne	r2, [r4, #12]
  }
}
 8001024:	bd70      	pop	{r4, r5, r6, pc}
	...

08001028 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001028:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 800102a:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800102c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800102e:	4293      	cmp	r3, r2
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001030:	bf88      	it	hi
 8001032:	4a0d      	ldrhi	r2, [pc, #52]	; (8001068 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001034:	f021 0103 	bic.w	r1, r1, #3
 8001038:	bf9a      	itte	ls
 800103a:	f101 4280 	addls.w	r2, r1, #1073741824	; 0x40000000
 800103e:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001042:	1852      	addhi	r2, r2, r1
 8001044:	6482      	str	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001046:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800104a:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800104c:	3b08      	subs	r3, #8
 800104e:	2214      	movs	r2, #20
 8001050:	fbb3 f3f2 	udiv	r3, r3, r2

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001054:	2201      	movs	r2, #1
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40020407 	.word	0x40020407
 8001068:	4002081c 	.word	0x4002081c
 800106c:	40020880 	.word	0x40020880

08001070 <HAL_DMA_Init>:
{
 8001070:	b510      	push	{r4, lr}
  if (hdma == NULL)
 8001072:	2800      	cmp	r0, #0
 8001074:	d05f      	beq.n	8001136 <HAL_DMA_Init+0xc6>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001076:	6801      	ldr	r1, [r0, #0]
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <HAL_DMA_Init+0xcc>)
 800107a:	4299      	cmp	r1, r3
 800107c:	f04f 0414 	mov.w	r4, #20
 8001080:	d84c      	bhi.n	800111c <HAL_DMA_Init+0xac>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001082:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <HAL_DMA_Init+0xd0>)
 8001084:	440a      	add	r2, r1
 8001086:	fbb2 f2f4 	udiv	r2, r2, r4
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800108e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001092:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001094:	2302      	movs	r3, #2
 8001096:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800109a:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
 800109e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a0:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 80010a2:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a4:	4323      	orrs	r3, r4
 80010a6:	6944      	ldr	r4, [r0, #20]
 80010a8:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010aa:	6984      	ldr	r4, [r0, #24]
 80010ac:	4323      	orrs	r3, r4
 80010ae:	69c4      	ldr	r4, [r0, #28]
 80010b0:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b2:	6a04      	ldr	r4, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010b4:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80010b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80010bc:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80010be:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80010c0:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80010c2:	f7ff ffb1 	bl	8001028 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80010c6:	6883      	ldr	r3, [r0, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80010c8:	6c81      	ldr	r1, [r0, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80010ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80010ce:	bf04      	itt	eq
 80010d0:	2300      	moveq	r3, #0
 80010d2:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80010d4:	6842      	ldr	r2, [r0, #4]
 80010d6:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80010da:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010dc:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80010e0:	3a01      	subs	r2, #1
 80010e2:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010e4:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80010e6:	d821      	bhi.n	800112c <HAL_DMA_Init+0xbc>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80010e8:	4a16      	ldr	r2, [pc, #88]	; (8001144 <HAL_DMA_Init+0xd4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80010ea:	4917      	ldr	r1, [pc, #92]	; (8001148 <HAL_DMA_Init+0xd8>)
 80010ec:	6581      	str	r1, [r0, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80010ee:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80010f0:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80010f2:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80010f4:	2101      	movs	r1, #1
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80010fe:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001100:	6542      	str	r2, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001102:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001104:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001106:	4a11      	ldr	r2, [pc, #68]	; (800114c <HAL_DMA_Init+0xdc>)
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800110a:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800110c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800110e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001110:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001114:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 8001118:	4618      	mov	r0, r3
}
 800111a:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_DMA_Init+0xe0>)
 800111e:	440b      	add	r3, r1
 8001120:	fbb3 f3f4 	udiv	r3, r3, r4
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_DMA_Init+0xe4>)
 800112a:	e7b2      	b.n	8001092 <HAL_DMA_Init+0x22>
    hdma->DMAmuxRequestGen = 0U;
 800112c:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 800112e:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001132:	65c3      	str	r3, [r0, #92]	; 0x5c
 8001134:	e7e9      	b.n	800110a <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 8001136:	2001      	movs	r0, #1
 8001138:	e7ef      	b.n	800111a <HAL_DMA_Init+0xaa>
 800113a:	bf00      	nop
 800113c:	40020407 	.word	0x40020407
 8001140:	bffdfff8 	.word	0xbffdfff8
 8001144:	1000823f 	.word	0x1000823f
 8001148:	40020940 	.word	0x40020940
 800114c:	40020900 	.word	0x40020900
 8001150:	bffdfbf8 	.word	0xbffdfbf8
 8001154:	40020400 	.word	0x40020400

08001158 <HAL_DMA_DeInit>:
{
 8001158:	b538      	push	{r3, r4, r5, lr}
  if (NULL == hdma)
 800115a:	2800      	cmp	r0, #0
 800115c:	d045      	beq.n	80011ea <HAL_DMA_DeInit+0x92>
  __HAL_DMA_DISABLE(hdma);
 800115e:	6801      	ldr	r1, [r0, #0]
 8001160:	680b      	ldr	r3, [r1, #0]
 8001162:	f023 0301 	bic.w	r3, r3, #1
 8001166:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <HAL_DMA_DeInit+0x98>)
 800116a:	4299      	cmp	r1, r3
 800116c:	f04f 0414 	mov.w	r4, #20
 8001170:	d833      	bhi.n	80011da <HAL_DMA_DeInit+0x82>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001172:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <HAL_DMA_DeInit+0x9c>)
 8001174:	440a      	add	r2, r1
 8001176:	fbb2 f2f4 	udiv	r2, r2, r4
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800117e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001182:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001184:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 8001188:	2401      	movs	r4, #1
 800118a:	f003 031c 	and.w	r3, r3, #28
 800118e:	fa04 f303 	lsl.w	r3, r4, r3
  hdma->Instance->CCR  = 0U;
 8001192:	2500      	movs	r5, #0
 8001194:	600d      	str	r5, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001196:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001198:	f7ff ff46 	bl	8001028 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800119c:	6c83      	ldr	r3, [r0, #72]	; 0x48
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800119e:	6841      	ldr	r1, [r0, #4]
  hdma->DMAmuxChannel->CCR = 0U;
 80011a0:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011a2:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 80011a6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80011a8:	1e4a      	subs	r2, r1, #1
 80011aa:	2a03      	cmp	r2, #3
 80011ac:	d806      	bhi.n	80011bc <HAL_DMA_DeInit+0x64>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_DMA_DeInit+0xa0>)
 80011b0:	440b      	add	r3, r1
 80011b2:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80011b4:	4094      	lsls	r4, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011b6:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_DMA_DeInit+0xa4>)
 80011ba:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->DMAmuxRequestGen = 0U;
 80011bc:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011be:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->DMAmuxRequestGenStatus = 0U;
 80011c0:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  hdma->XferHalfCpltCallback = NULL;
 80011c4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hdma->XferAbortCallback = NULL;
 80011c8:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80011cc:	65c3      	str	r3, [r0, #92]	; 0x5c
  hdma->State = HAL_DMA_STATE_RESET;
 80011ce:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80011d2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  return HAL_OK;
 80011d6:	4618      	mov	r0, r3
}
 80011d8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_DMA_DeInit+0xa8>)
 80011dc:	440b      	add	r3, r1
 80011de:	fbb3 f3f4 	udiv	r3, r3, r4
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_DMA_DeInit+0xac>)
 80011e8:	e7cb      	b.n	8001182 <HAL_DMA_DeInit+0x2a>
    return HAL_ERROR;
 80011ea:	2001      	movs	r0, #1
 80011ec:	e7f4      	b.n	80011d8 <HAL_DMA_DeInit+0x80>
 80011ee:	bf00      	nop
 80011f0:	40020407 	.word	0x40020407
 80011f4:	bffdfff8 	.word	0xbffdfff8
 80011f8:	1000823f 	.word	0x1000823f
 80011fc:	40020900 	.word	0x40020900
 8001200:	bffdfbf8 	.word	0xbffdfbf8
 8001204:	40020400 	.word	0x40020400

08001208 <HAL_DMA_Start_IT>:
{
 8001208:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800120a:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 800120e:	2d01      	cmp	r5, #1
{
 8001210:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001212:	d039      	beq.n	8001288 <HAL_DMA_Start_IT+0x80>
 8001214:	2501      	movs	r5, #1
 8001216:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800121a:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 800121e:	2d01      	cmp	r5, #1
 8001220:	f04f 0600 	mov.w	r6, #0
 8001224:	f04f 0502 	mov.w	r5, #2
 8001228:	d12c      	bne.n	8001284 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800122a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800122e:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001230:	6806      	ldr	r6, [r0, #0]
 8001232:	6835      	ldr	r5, [r6, #0]
 8001234:	f025 0501 	bic.w	r5, r5, #1
 8001238:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800123a:	f7ff feda 	bl	8000ff2 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800123e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001240:	6803      	ldr	r3, [r0, #0]
 8001242:	b1ba      	cbz	r2, 8001274 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800124a:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800124c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800124e:	6811      	ldr	r1, [r2, #0]
 8001250:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001252:	bf42      	ittt	mi
 8001254:	6811      	ldrmi	r1, [r2, #0]
 8001256:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 800125a:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800125c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800125e:	b11a      	cbz	r2, 8001268 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001260:	6811      	ldr	r1, [r2, #0]
 8001262:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001266:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001270:	2000      	movs	r0, #0
}
 8001272:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	f022 0204 	bic.w	r2, r2, #4
 800127a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	f042 020a 	orr.w	r2, r2, #10
 8001282:	e7e2      	b.n	800124a <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8001284:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001288:	2002      	movs	r0, #2
 800128a:	e7f2      	b.n	8001272 <HAL_DMA_Start_IT+0x6a>

0800128c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800128c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800128e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001290:	6803      	ldr	r3, [r0, #0]
{
 8001292:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001294:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001298:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800129a:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800129c:	2404      	movs	r4, #4
 800129e:	4094      	lsls	r4, r2
 80012a0:	4234      	tst	r4, r6
 80012a2:	d00e      	beq.n	80012c2 <HAL_DMA_IRQHandler+0x36>
 80012a4:	f015 0f04 	tst.w	r5, #4
 80012a8:	d00b      	beq.n	80012c2 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012ae:	bf5e      	ittt	pl
 80012b0:	681a      	ldrpl	r2, [r3, #0]
 80012b2:	f022 0204 	bicpl.w	r2, r2, #4
 80012b6:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80012b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ba:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80012bc:	b373      	cbz	r3, 800131c <HAL_DMA_IRQHandler+0x90>
}
 80012be:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80012c0:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012c2:	2402      	movs	r4, #2
 80012c4:	4094      	lsls	r4, r2
 80012c6:	4234      	tst	r4, r6
 80012c8:	d012      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x64>
 80012ca:	f015 0f02 	tst.w	r5, #2
 80012ce:	d00f      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	0695      	lsls	r5, r2, #26
 80012d4:	d406      	bmi.n	80012e4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	f022 020a 	bic.w	r2, r2, #10
 80012dc:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80012de:	2301      	movs	r3, #1
 80012e0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80012e4:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80012e6:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80012e8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80012ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80012ee:	e7e5      	b.n	80012bc <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80012f0:	2408      	movs	r4, #8
 80012f2:	4094      	lsls	r4, r2
 80012f4:	4234      	tst	r4, r6
 80012f6:	d011      	beq.n	800131c <HAL_DMA_IRQHandler+0x90>
 80012f8:	072c      	lsls	r4, r5, #28
 80012fa:	d50f      	bpl.n	800131c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012fc:	681c      	ldr	r4, [r3, #0]
 80012fe:	f024 040e 	bic.w	r4, r4, #14
 8001302:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001304:	2301      	movs	r3, #1
 8001306:	fa03 f202 	lsl.w	r2, r3, r2
 800130a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800130c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800130e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001312:	2300      	movs	r3, #0
 8001314:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001318:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800131a:	e7cf      	b.n	80012bc <HAL_DMA_IRQHandler+0x30>
}
 800131c:	bc70      	pop	{r4, r5, r6}
 800131e:	4770      	bx	lr

08001320 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001324:	4c57      	ldr	r4, [pc, #348]	; (8001484 <HAL_GPIO_Init+0x164>)
  uint32_t position = 0x00u;
 8001326:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001328:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132c:	680a      	ldr	r2, [r1, #0]
 800132e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001332:	d101      	bne.n	8001338 <HAL_GPIO_Init+0x18>
      }
    }

    position++;
  }
}
 8001334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001338:	2501      	movs	r5, #1
 800133a:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 800133e:	ea18 0202 	ands.w	r2, r8, r2
 8001342:	f000 8094 	beq.w	800146e <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001346:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001348:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800134a:	f006 0503 	and.w	r5, r6, #3
 800134e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001352:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001356:	1e6f      	subs	r7, r5, #1
 8001358:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800135a:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800135e:	d832      	bhi.n	80013c6 <HAL_GPIO_Init+0xa6>
        temp = GPIOx->OSPEEDR;
 8001360:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001362:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001366:	68cf      	ldr	r7, [r1, #12]
 8001368:	fa07 f70e 	lsl.w	r7, r7, lr
 800136c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001370:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001372:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001374:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001378:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800137c:	409f      	lsls	r7, r3
 800137e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001382:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001384:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001386:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800138a:	688f      	ldr	r7, [r1, #8]
 800138c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001390:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001394:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8001396:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001398:	d117      	bne.n	80013ca <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3u];
 800139a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800139e:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013a2:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80013a6:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013aa:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80013ae:	fa09 fb0a 	lsl.w	fp, r9, sl
 80013b2:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b6:	690f      	ldr	r7, [r1, #16]
 80013b8:	fa07 f70a 	lsl.w	r7, r7, sl
 80013bc:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 80013c0:	f8c8 7020 	str.w	r7, [r8, #32]
 80013c4:	e001      	b.n	80013ca <HAL_GPIO_Init+0xaa>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c6:	2d03      	cmp	r5, #3
 80013c8:	d1dc      	bne.n	8001384 <HAL_GPIO_Init+0x64>
      temp = GPIOx->MODER;
 80013ca:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013cc:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013d0:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d4:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d6:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 80013da:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013dc:	d047      	beq.n	800146e <HAL_GPIO_Init+0x14e>
        temp = SYSCFG->EXTICR[position >> 2u];
 80013de:	f023 0703 	bic.w	r7, r3, #3
 80013e2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80013e6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ea:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80013ee:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013f0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80013f4:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013fc:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001400:	d037      	beq.n	8001472 <HAL_GPIO_Init+0x152>
 8001402:	4d21      	ldr	r5, [pc, #132]	; (8001488 <HAL_GPIO_Init+0x168>)
 8001404:	42a8      	cmp	r0, r5
 8001406:	d036      	beq.n	8001476 <HAL_GPIO_Init+0x156>
 8001408:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800140c:	42a8      	cmp	r0, r5
 800140e:	d034      	beq.n	800147a <HAL_GPIO_Init+0x15a>
 8001410:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001414:	42a8      	cmp	r0, r5
 8001416:	d032      	beq.n	800147e <HAL_GPIO_Init+0x15e>
 8001418:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800141c:	42a8      	cmp	r0, r5
 800141e:	bf0c      	ite	eq
 8001420:	2504      	moveq	r5, #4
 8001422:	2507      	movne	r5, #7
 8001424:	fa05 f50c 	lsl.w	r5, r5, ip
 8001428:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800142c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 800142e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001430:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001432:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001436:	bf0c      	ite	eq
 8001438:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800143a:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 800143c:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800143e:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001440:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001444:	bf0c      	ite	eq
 8001446:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001448:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 800144a:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 800144c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001450:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001454:	bf0c      	ite	eq
 8001456:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001458:	4315      	orrne	r5, r2
        EXTI->IMR1 = temp;
 800145a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        temp = EXTI->EMR1;
 800145e:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001462:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 8001464:	bf54      	ite	pl
 8001466:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001468:	4315      	orrmi	r5, r2
        EXTI->EMR1 = temp;
 800146a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    position++;
 800146e:	3301      	adds	r3, #1
 8001470:	e75c      	b.n	800132c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001472:	2500      	movs	r5, #0
 8001474:	e7d6      	b.n	8001424 <HAL_GPIO_Init+0x104>
 8001476:	2501      	movs	r5, #1
 8001478:	e7d4      	b.n	8001424 <HAL_GPIO_Init+0x104>
 800147a:	2502      	movs	r5, #2
 800147c:	e7d2      	b.n	8001424 <HAL_GPIO_Init+0x104>
 800147e:	2503      	movs	r5, #3
 8001480:	e7d0      	b.n	8001424 <HAL_GPIO_Init+0x104>
 8001482:	bf00      	nop
 8001484:	58000800 	.word	0x58000800
 8001488:	48000400 	.word	0x48000400

0800148c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800148e:	4604      	mov	r4, r0
{
 8001490:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001492:	2800      	cmp	r0, #0
 8001494:	d058      	beq.n	8001548 <HAL_PCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001496:	f890 32ad 	ldrb.w	r3, [r0, #685]	; 0x2ad
 800149a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800149e:	b91b      	cbnz	r3, 80014a8 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014a0:	f880 22ac 	strb.w	r2, [r0, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014a4:	f7fe ffdc 	bl	8000460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014a8:	2303      	movs	r3, #3

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80014aa:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_BUSY;
 80014ac:	f884 32ad 	strb.w	r3, [r4, #685]	; 0x2ad
  hpcd->Init.dma_enable = 0U;
 80014b0:	6265      	str	r5, [r4, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014b2:	6820      	ldr	r0, [r4, #0]
 80014b4:	f002 fae5 	bl	8003a82 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b8:	462b      	mov	r3, r5
 80014ba:	6866      	ldr	r6, [r4, #4]
 80014bc:	2528      	movs	r5, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014be:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014c0:	4618      	mov	r0, r3
 80014c2:	b2d9      	uxtb	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c4:	428e      	cmp	r6, r1
 80014c6:	f103 0301 	add.w	r3, r3, #1
 80014ca:	d823      	bhi.n	8001514 <HAL_PCD_Init+0x88>
 80014cc:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014ce:	2528      	movs	r5, #40	; 0x28
 80014d0:	4619      	mov	r1, r3
 80014d2:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d4:	4286      	cmp	r6, r0
 80014d6:	f103 0301 	add.w	r3, r3, #1
 80014da:	d828      	bhi.n	800152e <HAL_PCD_Init+0xa2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014dc:	f104 0610 	add.w	r6, r4, #16
 80014e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014e2:	466d      	mov	r5, sp
 80014e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80014ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ee:	1d23      	adds	r3, r4, #4
 80014f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f2:	6820      	ldr	r0, [r4, #0]
 80014f4:	f002 facf 	bl	8003a96 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014f8:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80014fa:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80014fc:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8001500:	f884 32ad 	strb.w	r3, [r4, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001504:	69e3      	ldr	r3, [r4, #28]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <HAL_PCD_Init+0x84>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800150a:	4620      	mov	r0, r4
 800150c:	f000 fe5a 	bl	80021c4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001510:	4628      	mov	r0, r5
 8001512:	e01a      	b.n	800154a <HAL_PCD_Init+0xbe>
    hpcd->IN_ep[i].is_in = 1U;
 8001514:	fb05 4201 	mla	r2, r5, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001518:	e9c2 000f 	strd	r0, r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].is_in = 1U;
 800151c:	f882 702d 	strb.w	r7, [r2, #45]	; 0x2d
    hpcd->IN_ep[i].num = i;
 8001520:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001524:	8751      	strh	r1, [r2, #58]	; 0x3a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001526:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
    hpcd->IN_ep[i].xfer_len = 0U;
 800152a:	6450      	str	r0, [r2, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152c:	e7c9      	b.n	80014c2 <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].is_in = 0U;
 800152e:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001532:	e9c2 115f 	strd	r1, r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].is_in = 0U;
 8001536:	f882 116d 	strb.w	r1, [r2, #365]	; 0x16d
    hpcd->OUT_ep[i].num = i;
 800153a:	f882 016c 	strb.w	r0, [r2, #364]	; 0x16c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800153e:	f882 116f 	strb.w	r1, [r2, #367]	; 0x16f
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001542:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001546:	e7c4      	b.n	80014d2 <HAL_PCD_Init+0x46>
    return HAL_ERROR;
 8001548:	2001      	movs	r0, #1
}
 800154a:	b007      	add	sp, #28
 800154c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800154e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800154e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001550:	f890 32ac 	ldrb.w	r3, [r0, #684]	; 0x2ac
 8001554:	2b01      	cmp	r3, #1
{
 8001556:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001558:	d00c      	beq.n	8001574 <HAL_PCD_Start+0x26>
 800155a:	2301      	movs	r3, #1
 800155c:	f880 32ac 	strb.w	r3, [r0, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 8001560:	6800      	ldr	r0, [r0, #0]
 8001562:	f002 fa85 	bl	8003a70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001566:	6820      	ldr	r0, [r4, #0]
 8001568:	f002 fd48 	bl	8003ffc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800156c:	2000      	movs	r0, #0
 800156e:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac

  return HAL_OK;
}
 8001572:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001574:	2002      	movs	r0, #2
 8001576:	e7fc      	b.n	8001572 <HAL_PCD_Start+0x24>

08001578 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001578:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800157a:	f890 22ac 	ldrb.w	r2, [r0, #684]	; 0x2ac
 800157e:	2a01      	cmp	r2, #1
{
 8001580:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001582:	d00b      	beq.n	800159c <HAL_PCD_SetAddress+0x24>
 8001584:	2201      	movs	r2, #1
 8001586:	f880 22ac 	strb.w	r2, [r0, #684]	; 0x2ac
  hpcd->USB_Address = address;
 800158a:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800158e:	6800      	ldr	r0, [r0, #0]
 8001590:	f002 fd2e 	bl	8003ff0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001594:	2000      	movs	r0, #0
 8001596:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac

  return HAL_OK;
}
 800159a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800159c:	2002      	movs	r0, #2
 800159e:	e7fc      	b.n	800159a <HAL_PCD_SetAddress+0x22>

080015a0 <HAL_PCD_IRQHandler>:
{
 80015a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a4:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80015a6:	6800      	ldr	r0, [r0, #0]
 80015a8:	f002 fd33 	bl	8004012 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80015ac:	f410 4100 	ands.w	r1, r0, #32768	; 0x8000
 80015b0:	f000 8433 	beq.w	8001e1a <HAL_PCD_IRQHandler+0x87a>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80015b4:	f8df 8318 	ldr.w	r8, [pc, #792]	; 80018d0 <HAL_PCD_IRQHandler+0x330>
 80015b8:	4fc4      	ldr	r7, [pc, #784]	; (80018cc <HAL_PCD_IRQHandler+0x32c>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015ba:	6820      	ldr	r0, [r4, #0]
 80015bc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	d402      	bmi.n	80015ca <HAL_PCD_IRQHandler+0x2a>
}
 80015c4:	b003      	add	sp, #12
 80015c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80015ca:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 80015ce:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 80015d0:	f015 050f 	ands.w	r5, r5, #15
 80015d4:	f040 80be 	bne.w	8001754 <HAL_PCD_IRQHandler+0x1b4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80015d8:	f011 0110 	ands.w	r1, r1, #16
 80015dc:	d12a      	bne.n	8001634 <HAL_PCD_IRQHandler+0x94>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015de:	8803      	ldrh	r3, [r0, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	ea03 0308 	and.w	r3, r3, r8
 80015e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ea:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015ec:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015f0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80015f4:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80015f8:	fa10 f383 	uxtah	r3, r0, r3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015fc:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015fe:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8001602:	6c22      	ldr	r2, [r4, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001608:	64a3      	str	r3, [r4, #72]	; 0x48
        ep->xfer_buff += ep->xfer_count;
 800160a:	4413      	add	r3, r2
 800160c:	6423      	str	r3, [r4, #64]	; 0x40
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800160e:	f7fe ff78 	bl	8000502 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001612:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0cf      	beq.n	80015ba <HAL_PCD_IRQHandler+0x1a>
 800161a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800161c:	2a00      	cmp	r2, #0
 800161e:	d1cc      	bne.n	80015ba <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001620:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001624:	6821      	ldr	r1, [r4, #0]
 8001626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800162e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 8001632:	e7c2      	b.n	80015ba <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001634:	8805      	ldrh	r5, [r0, #0]
 8001636:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001638:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 800163c:	d020      	beq.n	8001680 <HAL_PCD_IRQHandler+0xe0>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800163e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001642:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
 8001646:	f200 4106 	addw	r1, r0, #1030	; 0x406
 800164a:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800164e:	f504 712d 	add.w	r1, r4, #692	; 0x2b4
 8001652:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001656:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
 800165a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800165e:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001662:	f002 ff07 	bl	8004474 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001666:	6822      	ldr	r2, [r4, #0]
 8001668:	8813      	ldrh	r3, [r2, #0]
 800166a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800166e:	051b      	lsls	r3, r3, #20
 8001670:	0d1b      	lsrs	r3, r3, #20
 8001672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001676:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001678:	4620      	mov	r0, r4
 800167a:	f7fe ff33 	bl	80004e4 <HAL_PCD_SetupStageCallback>
 800167e:	e79c      	b.n	80015ba <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001680:	0419      	lsls	r1, r3, #16
 8001682:	d59a      	bpl.n	80015ba <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001684:	8803      	ldrh	r3, [r0, #0]
 8001686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800168a:	051b      	lsls	r3, r3, #20
 800168c:	0d1b      	lsrs	r3, r3, #20
 800168e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001692:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001694:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001698:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
 800169c:	f200 4106 	addw	r1, r0, #1030	; 0x406
 80016a0:	fa11 f383 	uxtah	r3, r1, r3
 80016a4:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 80016a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016ac:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80016b0:	b18b      	cbz	r3, 80016d6 <HAL_PCD_IRQHandler+0x136>
 80016b2:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 80016b6:	b171      	cbz	r1, 80016d6 <HAL_PCD_IRQHandler+0x136>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016b8:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
 80016bc:	f002 feda 	bl	8004474 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80016c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80016c4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 80016c8:	4413      	add	r3, r2
 80016ca:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80016ce:	4629      	mov	r1, r5
 80016d0:	4620      	mov	r0, r4
 80016d2:	f7fe ff0d 	bl	80004f0 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016d6:	6821      	ldr	r1, [r4, #0]
 80016d8:	880a      	ldrh	r2, [r1, #0]
 80016da:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80016dc:	0512      	lsls	r2, r2, #20
 80016de:	f53f af6c 	bmi.w	80015ba <HAL_PCD_IRQHandler+0x1a>
 80016e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80016e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80016ea:	f43f af66 	beq.w	80015ba <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016ee:	f8d4 517c 	ldr.w	r5, [r4, #380]	; 0x17c
 80016f2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80016f6:	2d3e      	cmp	r5, #62	; 0x3e
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	f201 4006 	addw	r0, r1, #1030	; 0x406
 80016fe:	d908      	bls.n	8001712 <HAL_PCD_IRQHandler+0x172>
 8001700:	096a      	lsrs	r2, r5, #5
 8001702:	06ee      	lsls	r6, r5, #27
 8001704:	bf08      	it	eq
 8001706:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800170a:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 800170e:	b292      	uxth	r2, r2
 8001710:	e00a      	b.n	8001728 <HAL_PCD_IRQHandler+0x188>
 8001712:	b9cd      	cbnz	r5, 8001748 <HAL_PCD_IRQHandler+0x1a8>
 8001714:	5ac2      	ldrh	r2, [r0, r3]
 8001716:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800171a:	0412      	lsls	r2, r2, #16
 800171c:	0c12      	lsrs	r2, r2, #16
 800171e:	52c2      	strh	r2, [r0, r3]
 8001720:	5ac2      	ldrh	r2, [r0, r3]
 8001722:	b292      	uxth	r2, r2
 8001724:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001728:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800172a:	880b      	ldrh	r3, [r1, #0]
 800172c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	0c1b      	lsrs	r3, r3, #16
 8001738:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800173c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	800b      	strh	r3, [r1, #0]
 8001746:	e738      	b.n	80015ba <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001748:	086a      	lsrs	r2, r5, #1
 800174a:	07ed      	lsls	r5, r5, #31
 800174c:	bf48      	it	mi
 800174e:	3201      	addmi	r2, #1
 8001750:	0292      	lsls	r2, r2, #10
 8001752:	e7dc      	b.n	800170e <HAL_PCD_IRQHandler+0x16e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001754:	fa0f f985 	sxth.w	r9, r5
 8001758:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800175c:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800175e:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001760:	f140 80f6 	bpl.w	8001950 <HAL_PCD_IRQHandler+0x3b0>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001764:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8001768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800176c:	051b      	lsls	r3, r3, #20
 800176e:	0d1b      	lsrs	r3, r3, #20
 8001770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8001774:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001776:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0U)
 800177a:	fb01 4105 	mla	r1, r1, r5, r4
 800177e:	f891 3178 	ldrb.w	r3, [r1, #376]	; 0x178
 8001782:	b9bb      	cbnz	r3, 80017b4 <HAL_PCD_IRQHandler+0x214>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001784:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001788:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
 800178c:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8001790:	fa1c f383 	uxtah	r3, ip, r3
 8001794:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8001798:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 800179c:	f1ba 0f00 	cmp.w	sl, #0
 80017a0:	f000 80ba 	beq.w	8001918 <HAL_PCD_IRQHandler+0x378>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017a4:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80017a8:	4653      	mov	r3, sl
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017aa:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 80017ae:	f002 fe61 	bl	8004474 <USB_ReadPMA>
 80017b2:	e0b1      	b.n	8001918 <HAL_PCD_IRQHandler+0x378>
          if (ep->type == EP_TYPE_BULK)
 80017b4:	f891 316f 	ldrb.w	r3, [r1, #367]	; 0x16f
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	f891 316c 	ldrb.w	r3, [r1, #364]	; 0x16c
 80017be:	f040 8089 	bne.w	80018d4 <HAL_PCD_IRQHandler+0x334>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017c2:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50

    if (ep->xfer_len >= count)
 80017c6:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80017ca:	f416 4b80 	ands.w	fp, r6, #16384	; 0x4000
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017ce:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017d2:	fa10 fc8c 	uxtah	ip, r0, ip
 80017d6:	f006 0e40 	and.w	lr, r6, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80017da:	d03b      	beq.n	8001854 <HAL_PCD_IRQHandler+0x2b4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017dc:	44e2      	add	sl, ip
 80017de:	f8ba a402 	ldrh.w	sl, [sl, #1026]	; 0x402
 80017e2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 80017e6:	4592      	cmp	sl, r2
 80017e8:	d913      	bls.n	8001812 <HAL_PCD_IRQHandler+0x272>
 80017ea:	2200      	movs	r2, #0
 80017ec:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017f0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017fc:	0412      	lsls	r2, r2, #16
 80017fe:	0c12      	lsrs	r2, r2, #16
 8001800:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001804:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001808:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800180c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001810:	e005      	b.n	800181e <HAL_PCD_IRQHandler+0x27e>
      ep->xfer_len -= count;
 8001812:	eba2 020a 	sub.w	r2, r2, sl
 8001816:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    if (ep->xfer_len == 0U)
 800181a:	2a00      	cmp	r2, #0
 800181c:	d0e8      	beq.n	80017f0 <HAL_PCD_IRQHandler+0x250>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800181e:	f1be 0f00 	cmp.w	lr, #0
 8001822:	d00d      	beq.n	8001840 <HAL_PCD_IRQHandler+0x2a0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001824:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001828:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800182c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001830:	0412      	lsls	r2, r2, #16
 8001832:	0c12      	lsrs	r2, r2, #16
 8001834:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001838:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800183c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8001840:	f1ba 0f00 	cmp.w	sl, #0
 8001844:	d068      	beq.n	8001918 <HAL_PCD_IRQHandler+0x378>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001846:	2128      	movs	r1, #40	; 0x28
 8001848:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800184c:	f8b1 2174 	ldrh.w	r2, [r1, #372]	; 0x174
 8001850:	4653      	mov	r3, sl
 8001852:	e7aa      	b.n	80017aa <HAL_PCD_IRQHandler+0x20a>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001854:	44d4      	add	ip, sl
 8001856:	f8bc a406 	ldrh.w	sl, [ip, #1030]	; 0x406
 800185a:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 800185e:	4592      	cmp	sl, r2
 8001860:	d912      	bls.n	8001888 <HAL_PCD_IRQHandler+0x2e8>
 8001862:	f8c1 b184 	str.w	fp, [r1, #388]	; 0x184
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001866:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800186a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800186e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001872:	0412      	lsls	r2, r2, #16
 8001874:	0c12      	lsrs	r2, r2, #16
 8001876:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800187a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800187e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001882:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001886:	e005      	b.n	8001894 <HAL_PCD_IRQHandler+0x2f4>
      ep->xfer_len -= count;
 8001888:	eba2 020a 	sub.w	r2, r2, sl
 800188c:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    if (ep->xfer_len == 0U)
 8001890:	2a00      	cmp	r2, #0
 8001892:	d0e8      	beq.n	8001866 <HAL_PCD_IRQHandler+0x2c6>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001894:	f1be 0f00 	cmp.w	lr, #0
 8001898:	d10d      	bne.n	80018b6 <HAL_PCD_IRQHandler+0x316>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800189a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800189e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80018a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018a6:	0412      	lsls	r2, r2, #16
 80018a8:	0c12      	lsrs	r2, r2, #16
 80018aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ae:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80018b2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80018b6:	f1ba 0f00 	cmp.w	sl, #0
 80018ba:	d02d      	beq.n	8001918 <HAL_PCD_IRQHandler+0x378>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018bc:	2128      	movs	r1, #40	; 0x28
 80018be:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018c2:	f8b1 2176 	ldrh.w	r2, [r1, #374]	; 0x176
 80018c6:	4653      	mov	r3, sl
 80018c8:	e76f      	b.n	80017aa <HAL_PCD_IRQHandler+0x20a>
 80018ca:	bf00      	nop
 80018cc:	ffff8000 	.word	0xffff8000
 80018d0:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80018d4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80018d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80018dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018e0:	0412      	lsls	r2, r2, #16
 80018e2:	0c12      	lsrs	r2, r2, #16
 80018e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018e8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80018ec:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018f0:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
 80018f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018f8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018fc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001900:	d062      	beq.n	80019c8 <HAL_PCD_IRQHandler+0x428>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001902:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8001906:	fa1c f383 	uxtah	r3, ip, r3
 800190a:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 800190e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001912:	f1ba 0f00 	cmp.w	sl, #0
 8001916:	d199      	bne.n	800184c <HAL_PCD_IRQHandler+0x2ac>
        ep->xfer_count += count;
 8001918:	2128      	movs	r1, #40	; 0x28
 800191a:	fb01 4305 	mla	r3, r1, r5, r4
 800191e:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 8001922:	4452      	add	r2, sl
 8001924:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        ep->xfer_buff += count;
 8001928:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800192c:	4452      	add	r2, sl
 800192e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001932:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001936:	b11a      	cbz	r2, 8001940 <HAL_PCD_IRQHandler+0x3a0>
 8001938:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800193c:	459a      	cmp	sl, r3
 800193e:	d24f      	bcs.n	80019e0 <HAL_PCD_IRQHandler+0x440>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001940:	2328      	movs	r3, #40	; 0x28
 8001942:	fb03 4305 	mla	r3, r3, r5, r4
 8001946:	4620      	mov	r0, r4
 8001948:	f893 116c 	ldrb.w	r1, [r3, #364]	; 0x16c
 800194c:	f7fe fdd0 	bl	80004f0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001950:	0632      	lsls	r2, r6, #24
 8001952:	f57f ae32 	bpl.w	80015ba <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001956:	6820      	ldr	r0, [r4, #0]
 8001958:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 800195c:	b29b      	uxth	r3, r3
 800195e:	ea03 0308 	and.w	r3, r3, r8
 8001962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001966:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 800196a:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800196e:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 8001972:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8001976:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
 800197a:	2b01      	cmp	r3, #1
 800197c:	d15b      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x496>
          ep->xfer_len = 0U;
 800197e:	fb0c 4c05 	mla	ip, ip, r5, r4
 8001982:	2500      	movs	r5, #0
          if (ep->doublebuffer != 0U)
 8001984:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
          ep->xfer_len = 0U;
 8001988:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
          if (ep->doublebuffer != 0U)
 800198c:	2b00      	cmp	r3, #0
 800198e:	d03a      	beq.n	8001a06 <HAL_PCD_IRQHandler+0x466>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001990:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8001994:	f899 302d 	ldrb.w	r3, [r9, #45]	; 0x2d
 8001998:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
 800199c:	d039      	beq.n	8001a12 <HAL_PCD_IRQHandler+0x472>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800199e:	bb3b      	cbnz	r3, 80019f0 <HAL_PCD_IRQHandler+0x450>
 80019a0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019a4:	f200 4002 	addw	r0, r0, #1026	; 0x402
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019a8:	fa10 f083 	uxtah	r0, r0, r3
 80019ac:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80019b0:	8803      	ldrh	r3, [r0, #0]
 80019b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019b6:	041b      	lsls	r3, r3, #16
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	8003      	strh	r3, [r0, #0]
 80019bc:	8803      	ldrh	r3, [r0, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c4:	8003      	strh	r3, [r0, #0]
 80019c6:	e01e      	b.n	8001a06 <HAL_PCD_IRQHandler+0x466>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019c8:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 80019cc:	fa1c f383 	uxtah	r3, ip, r3
 80019d0:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 80019d4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80019d8:	f1ba 0f00 	cmp.w	sl, #0
 80019dc:	d09c      	beq.n	8001918 <HAL_PCD_IRQHandler+0x378>
 80019de:	e770      	b.n	80018c2 <HAL_PCD_IRQHandler+0x322>
        ep = &hpcd->OUT_ep[epindex];
 80019e0:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80019e4:	6820      	ldr	r0, [r4, #0]
 80019e6:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
 80019ea:	f002 fb25 	bl	8004038 <USB_EPStartXfer>
 80019ee:	e7af      	b.n	8001950 <HAL_PCD_IRQHandler+0x3b0>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d108      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x466>
 80019f4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80019f8:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80019fc:	fa10 f082 	uxtah	r0, r0, r2
 8001a00:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8001a04:	8005      	strh	r5, [r0, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a06:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7fe fd79 	bl	8000502 <HAL_PCD_DataInStageCallback>
 8001a10:	e5d3      	b.n	80015ba <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a12:	b923      	cbnz	r3, 8001a1e <HAL_PCD_IRQHandler+0x47e>
 8001a14:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a18:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8001a1c:	e7c4      	b.n	80019a8 <HAL_PCD_IRQHandler+0x408>
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d1f1      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x466>
 8001a22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a26:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8001a2a:	fa10 f383 	uxtah	r3, r0, r3
 8001a2e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 8001a32:	8006      	strh	r6, [r0, #0]
 8001a34:	e7e7      	b.n	8001a06 <HAL_PCD_IRQHandler+0x466>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a36:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
            if (ep->xfer_len > TxPctSize)
 8001a3a:	fb0c 4e05 	mla	lr, ip, r5, r4
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a3e:	f416 7a80 	ands.w	sl, r6, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 8001a42:	f8de 3044 	ldr.w	r3, [lr, #68]	; 0x44
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a46:	460a      	mov	r2, r1
 8001a48:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a4c:	d122      	bne.n	8001a94 <HAL_PCD_IRQHandler+0x4f4>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a4e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001a52:	fa1b fb82 	uxtah	fp, fp, r2
 8001a56:	4483      	add	fp, r0
 8001a58:	f8bb 6402 	ldrh.w	r6, [fp, #1026]	; 0x402
            if (ep->xfer_len > TxPctSize)
 8001a5c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8001a60:	429e      	cmp	r6, r3
 8001a62:	d302      	bcc.n	8001a6a <HAL_PCD_IRQHandler+0x4ca>
 8001a64:	f8ce a044 	str.w	sl, [lr, #68]	; 0x44
 8001a68:	e7cf      	b.n	8001a0a <HAL_PCD_IRQHandler+0x46a>
              ep->xfer_len -= TxPctSize;
 8001a6a:	1b9b      	subs	r3, r3, r6
              ep->xfer_buff += TxPctSize;
 8001a6c:	f8de 2040 	ldr.w	r2, [lr, #64]	; 0x40
 8001a70:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
              ep->xfer_count += TxPctSize;
 8001a74:	f8de 3048 	ldr.w	r3, [lr, #72]	; 0x48
        ep = &hpcd->IN_ep[epindex];
 8001a78:	fb05 cc0c 	mla	ip, r5, ip, ip
              ep->xfer_buff += TxPctSize;
 8001a7c:	4432      	add	r2, r6
              ep->xfer_count += TxPctSize;
 8001a7e:	4433      	add	r3, r6
        ep = &hpcd->IN_ep[epindex];
 8001a80:	f10c 0104 	add.w	r1, ip, #4
              ep->xfer_buff += TxPctSize;
 8001a84:	f8ce 2040 	str.w	r2, [lr, #64]	; 0x40
              ep->xfer_count += TxPctSize;
 8001a88:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a8c:	4421      	add	r1, r4
 8001a8e:	f002 fad3 	bl	8004038 <USB_EPStartXfer>
 8001a92:	e592      	b.n	80015ba <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a94:	f016 0a40 	ands.w	sl, r6, #64	; 0x40
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a98:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8001a9c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001aa0:	f000 80dc 	beq.w	8001c5c <HAL_PCD_IRQHandler+0x6bc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aa4:	f200 4e02 	addw	lr, r0, #1026	; 0x402
 8001aa8:	fa1e fc8c 	uxtah	ip, lr, ip
 8001aac:	f04f 0a28 	mov.w	sl, #40	; 0x28
 8001ab0:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]

    if (ep->xfer_len > TxPctSize)
 8001ab4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001ab8:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxPctSize;
 8001aba:	fb0a 4a05 	mla	sl, sl, r5, r4
 8001abe:	bf34      	ite	cc
 8001ac0:	eba3 030c 	subcc.w	r3, r3, ip
    }
    else
    {
      ep->xfer_len = 0U;
 8001ac4:	2300      	movcs	r3, #0
 8001ac6:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001aca:	b2b6      	uxth	r6, r6
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d154      	bne.n	8001b7a <HAL_PCD_IRQHandler+0x5da>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ad0:	f899 502d 	ldrb.w	r5, [r9, #45]	; 0x2d
 8001ad4:	2d00      	cmp	r5, #0
 8001ad6:	d13f      	bne.n	8001b58 <HAL_PCD_IRQHandler+0x5b8>
 8001ad8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001adc:	fa1e fe83 	uxtah	lr, lr, r3
 8001ae0:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8001ae4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	0c1b      	lsrs	r3, r3, #16
 8001aec:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
 8001af0:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001afa:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001afe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b02:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8001b06:	fa10 f083 	uxtah	r0, r0, r3
 8001b0a:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8001b0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b12:	041b      	lsls	r3, r3, #16
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 8001b1a:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b24:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f7fe fcea 	bl	8000502 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b2e:	2e00      	cmp	r6, #0
 8001b30:	f000 80dd 	beq.w	8001cee <HAL_PCD_IRQHandler+0x74e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b34:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
 8001b38:	6822      	ldr	r2, [r4, #0]
 8001b3a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b52:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001b56:	e0ca      	b.n	8001cee <HAL_PCD_IRQHandler+0x74e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b58:	2d01      	cmp	r5, #1
 8001b5a:	d1e5      	bne.n	8001b28 <HAL_PCD_IRQHandler+0x588>
 8001b5c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8001b60:	fa1e fe85 	uxtah	lr, lr, r5
 8001b64:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b68:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8001b6c:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8001b70:	fa10 f585 	uxtah	r5, r0, r5
 8001b74:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
 8001b78:	e7d6      	b.n	8001b28 <HAL_PCD_IRQHandler+0x588>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b7a:	b16e      	cbz	r6, 8001b98 <HAL_PCD_IRQHandler+0x5f8>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b7c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b94:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001b98:	2628      	movs	r6, #40	; 0x28
 8001b9a:	fb06 4605 	mla	r6, r6, r5, r4
 8001b9e:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	f040 80a3 	bne.w	8001cee <HAL_PCD_IRQHandler+0x74e>
        ep->xfer_count += TxPctSize;
 8001ba8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8001baa:	6c31      	ldr	r1, [r6, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8001bac:	f8d6 a04c 	ldr.w	sl, [r6, #76]	; 0x4c
        ep->xfer_count += TxPctSize;
 8001bb0:	4463      	add	r3, ip
 8001bb2:	64b3      	str	r3, [r6, #72]	; 0x48
        if (ep->xfer_len_db >= ep->maxpacket)
 8001bb4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff += TxPctSize;
 8001bb6:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001bb8:	459a      	cmp	sl, r3
        ep->xfer_buff += TxPctSize;
 8001bba:	6431      	str	r1, [r6, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8001bbc:	d31a      	bcc.n	8001bf4 <HAL_PCD_IRQHandler+0x654>
          ep->xfer_len_db -= len;
 8001bbe:	ebaa 0a03 	sub.w	sl, sl, r3
 8001bc2:	f8c6 a04c 	str.w	sl, [r6, #76]	; 0x4c
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001bc6:	f899 602d 	ldrb.w	r6, [r9, #45]	; 0x2d
 8001bca:	fa1f fc83 	uxth.w	ip, r3
 8001bce:	2e00      	cmp	r6, #0
 8001bd0:	d13b      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x6aa>
 8001bd2:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8001bd8:	fa1e fe86 	uxtah	lr, lr, r6
 8001bdc:	d917      	bls.n	8001c0e <HAL_PCD_IRQHandler+0x66e>
 8001bde:	095e      	lsrs	r6, r3, #5
 8001be0:	06db      	lsls	r3, r3, #27
 8001be2:	bf08      	it	eq
 8001be4:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8001be8:	ea47 2686 	orr.w	r6, r7, r6, lsl #10
 8001bec:	b2b6      	uxth	r6, r6
 8001bee:	f82e 6032 	strh.w	r6, [lr, r2, lsl #3]
 8001bf2:	e01c      	b.n	8001c2e <HAL_PCD_IRQHandler+0x68e>
        else if (ep->xfer_len_db == 0U)
 8001bf4:	f1ba 0f00 	cmp.w	sl, #0
 8001bf8:	d103      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x662>
          ep->xfer_fill_db = 0U;
 8001bfa:	f886 a050 	strb.w	sl, [r6, #80]	; 0x50
    if (ep->xfer_len > TxPctSize)
 8001bfe:	4663      	mov	r3, ip
 8001c00:	e7e1      	b.n	8001bc6 <HAL_PCD_IRQHandler+0x626>
          ep->xfer_fill_db = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001c08:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001c0a:	4653      	mov	r3, sl
 8001c0c:	e7db      	b.n	8001bc6 <HAL_PCD_IRQHandler+0x626>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c0e:	b9b3      	cbnz	r3, 8001c3e <HAL_PCD_IRQHandler+0x69e>
 8001c10:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 8001c14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c18:	041b      	lsls	r3, r3, #16
 8001c1a:	0c1b      	lsrs	r3, r3, #16
 8001c1c:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
 8001c20:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2a:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001c2e:	2328      	movs	r3, #40	; 0x28
 8001c30:	fb03 4505 	mla	r5, r3, r5, r4
 8001c34:	4663      	mov	r3, ip
 8001c36:	8eaa      	ldrh	r2, [r5, #52]	; 0x34

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001c38:	f002 f9ef 	bl	800401a <USB_WritePMA>
 8001c3c:	e057      	b.n	8001cee <HAL_PCD_IRQHandler+0x74e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c3e:	085e      	lsrs	r6, r3, #1
 8001c40:	07db      	lsls	r3, r3, #31
 8001c42:	bf48      	it	mi
 8001c44:	3601      	addmi	r6, #1
 8001c46:	02b6      	lsls	r6, r6, #10
 8001c48:	e7d0      	b.n	8001bec <HAL_PCD_IRQHandler+0x64c>
 8001c4a:	2e01      	cmp	r6, #1
 8001c4c:	bf02      	ittt	eq
 8001c4e:	f8b0 3050 	ldrheq.w	r3, [r0, #80]	; 0x50
 8001c52:	fa1e fe83 	uxtaheq	lr, lr, r3
 8001c56:	f82e c032 	strheq.w	ip, [lr, r2, lsl #3]
 8001c5a:	e7e8      	b.n	8001c2e <HAL_PCD_IRQHandler+0x68e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c5c:	f200 4e06 	addw	lr, r0, #1030	; 0x406
 8001c60:	fa1e fc8c 	uxtah	ip, lr, ip
 8001c64:	b2b6      	uxth	r6, r6
 8001c66:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]
    if (ep->xfer_len >= TxPctSize)
 8001c6a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001c6e:	459c      	cmp	ip, r3
      ep->xfer_len = 0U;
 8001c70:	bf88      	it	hi
 8001c72:	4653      	movhi	r3, sl
 8001c74:	f04f 0a28 	mov.w	sl, #40	; 0x28
 8001c78:	fb0a 4a05 	mla	sl, sl, r5, r4
      ep->xfer_len -= TxPctSize;
 8001c7c:	bf98      	it	ls
 8001c7e:	eba3 030c 	subls.w	r3, r3, ip
 8001c82:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    if (ep->xfer_len == 0U)
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d153      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x792>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c8a:	f899 502d 	ldrb.w	r5, [r9, #45]	; 0x2d
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	d140      	bne.n	8001d14 <HAL_PCD_IRQHandler+0x774>
 8001c92:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8001c96:	f200 4302 	addw	r3, r0, #1026	; 0x402
 8001c9a:	fa13 f585 	uxtah	r5, r3, r5
 8001c9e:	f835 3031 	ldrh.w	r3, [r5, r1, lsl #3]
 8001ca2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ca6:	041b      	lsls	r3, r3, #16
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
 8001cae:	f835 3031 	ldrh.w	r3, [r5, r1, lsl #3]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb8:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cbc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001cc0:	fa1e fe83 	uxtah	lr, lr, r3
 8001cc4:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8001cc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ccc:	041b      	lsls	r3, r3, #16
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	f82e 3031 	strh.w	r3, [lr, r1, lsl #3]
 8001cd4:	f83e 3031 	ldrh.w	r3, [lr, r1, lsl #3]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cde:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f7fe fc0d 	bl	8000502 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ce8:	2e00      	cmp	r6, #0
 8001cea:	f43f af23 	beq.w	8001b34 <HAL_PCD_IRQHandler+0x594>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001cee:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
 8001cf2:	6822      	ldr	r2, [r4, #0]
 8001cf4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d02:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001d12:	e452      	b.n	80015ba <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d14:	2d01      	cmp	r5, #1
 8001d16:	d1e4      	bne.n	8001ce2 <HAL_PCD_IRQHandler+0x742>
 8001d18:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8001d1c:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8001d20:	fa1c f585 	uxtah	r5, ip, r5
 8001d24:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d28:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8001d2c:	fa1e fe80 	uxtah	lr, lr, r0
 8001d30:	e7d5      	b.n	8001cde <HAL_PCD_IRQHandler+0x73e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001d32:	b96e      	cbnz	r6, 8001d50 <HAL_PCD_IRQHandler+0x7b0>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001d34:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	0c1b      	lsrs	r3, r3, #16
 8001d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001d50:	2628      	movs	r6, #40	; 0x28
 8001d52:	fb06 4605 	mla	r6, r6, r5, r4
 8001d56:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d1c7      	bne.n	8001cee <HAL_PCD_IRQHandler+0x74e>
        ep->xfer_count += TxPctSize;
 8001d5e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8001d60:	6c31      	ldr	r1, [r6, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d62:	f8d6 a04c 	ldr.w	sl, [r6, #76]	; 0x4c
        ep->xfer_count += TxPctSize;
 8001d66:	4463      	add	r3, ip
 8001d68:	64b3      	str	r3, [r6, #72]	; 0x48
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d6a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff += TxPctSize;
 8001d6c:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d6e:	459a      	cmp	sl, r3
        ep->xfer_buff += TxPctSize;
 8001d70:	6431      	str	r1, [r6, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d72:	d31c      	bcc.n	8001dae <HAL_PCD_IRQHandler+0x80e>
          ep->xfer_len_db -= len;
 8001d74:	ebaa 0a03 	sub.w	sl, sl, r3
 8001d78:	f8c6 a04c 	str.w	sl, [r6, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d7c:	f899 c02d 	ldrb.w	ip, [r9, #45]	; 0x2d
 8001d80:	b29e      	uxth	r6, r3
 8001d82:	f1bc 0f00 	cmp.w	ip, #0
 8001d86:	d13e      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x866>
 8001d88:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8001d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8001d8e:	fa1e fe8c 	uxtah	lr, lr, ip
 8001d92:	d919      	bls.n	8001dc8 <HAL_PCD_IRQHandler+0x828>
 8001d94:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8001d98:	06db      	lsls	r3, r3, #27
 8001d9a:	bf08      	it	eq
 8001d9c:	f10c 3cff 	addeq.w	ip, ip, #4294967295	; 0xffffffff
 8001da0:	ea47 2c8c 	orr.w	ip, r7, ip, lsl #10
 8001da4:	fa1f fc8c 	uxth.w	ip, ip
 8001da8:	f82e c032 	strh.w	ip, [lr, r2, lsl #3]
 8001dac:	e01c      	b.n	8001de8 <HAL_PCD_IRQHandler+0x848>
        else if (ep->xfer_len_db == 0U)
 8001dae:	f1ba 0f00 	cmp.w	sl, #0
 8001db2:	d103      	bne.n	8001dbc <HAL_PCD_IRQHandler+0x81c>
          ep->xfer_fill_db = 0U;
 8001db4:	f886 a050 	strb.w	sl, [r6, #80]	; 0x50
    if (ep->xfer_len >= TxPctSize)
 8001db8:	4663      	mov	r3, ip
 8001dba:	e7df      	b.n	8001d7c <HAL_PCD_IRQHandler+0x7dc>
          ep->xfer_len_db = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	64f3      	str	r3, [r6, #76]	; 0x4c
          ep->xfer_fill_db = 0;
 8001dc0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8001dc4:	4653      	mov	r3, sl
 8001dc6:	e7d9      	b.n	8001d7c <HAL_PCD_IRQHandler+0x7dc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001dc8:	b9a3      	cbnz	r3, 8001df4 <HAL_PCD_IRQHandler+0x854>
 8001dca:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 8001dce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
 8001dda:	f83e 3032 	ldrh.w	r3, [lr, r2, lsl #3]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de4:	f82e 3032 	strh.w	r3, [lr, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001de8:	2328      	movs	r3, #40	; 0x28
 8001dea:	fb03 4505 	mla	r5, r3, r5, r4
 8001dee:	4633      	mov	r3, r6
 8001df0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8001df2:	e721      	b.n	8001c38 <HAL_PCD_IRQHandler+0x698>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001df4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8001df8:	07db      	lsls	r3, r3, #31
 8001dfa:	bf48      	it	mi
 8001dfc:	f10c 0c01 	addmi.w	ip, ip, #1
 8001e00:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8001e04:	e7ce      	b.n	8001da4 <HAL_PCD_IRQHandler+0x804>
 8001e06:	f1bc 0f01 	cmp.w	ip, #1
 8001e0a:	bf02      	ittt	eq
 8001e0c:	f8b0 3050 	ldrheq.w	r3, [r0, #80]	; 0x50
 8001e10:	fa1e fe83 	uxtaheq	lr, lr, r3
 8001e14:	f82e 6032 	strheq.w	r6, [lr, r2, lsl #3]
 8001e18:	e7e6      	b.n	8001de8 <HAL_PCD_IRQHandler+0x848>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e1a:	0543      	lsls	r3, r0, #21
 8001e1c:	d513      	bpl.n	8001e46 <HAL_PCD_IRQHandler+0x8a6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e1e:	6822      	ldr	r2, [r4, #0]
 8001e20:	9101      	str	r1, [sp, #4]
 8001e22:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e2a:	041b      	lsls	r3, r3, #16
 8001e2c:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8001e2e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e30:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001e34:	f7fe fb71 	bl	800051a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e38:	9901      	ldr	r1, [sp, #4]
 8001e3a:	4620      	mov	r0, r4
}
 8001e3c:	b003      	add	sp, #12
 8001e3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e42:	f7ff bb99 	b.w	8001578 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e46:	0447      	lsls	r7, r0, #17
 8001e48:	d50a      	bpl.n	8001e60 <HAL_PCD_IRQHandler+0x8c0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e4a:	6822      	ldr	r2, [r4, #0]
 8001e4c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	0c1b      	lsrs	r3, r3, #16
 8001e58:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8001e5c:	f7ff bbb2 	b.w	80015c4 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e60:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 8001e64:	d005      	beq.n	8001e72 <HAL_PCD_IRQHandler+0x8d2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e70:	e7f0      	b.n	8001e54 <HAL_PCD_IRQHandler+0x8b4>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e72:	04c6      	lsls	r6, r0, #19
 8001e74:	d522      	bpl.n	8001ebc <HAL_PCD_IRQHandler+0x91c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	041b      	lsls	r3, r3, #16
 8001e82:	0c1b      	lsrs	r3, r3, #16
 8001e84:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e88:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e8c:	f023 0308 	bic.w	r3, r3, #8
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	0c1b      	lsrs	r3, r3, #16
 8001e94:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8001e98:	f894 32e4 	ldrb.w	r3, [r4, #740]	; 0x2e4
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d104      	bne.n	8001eaa <HAL_PCD_IRQHandler+0x90a>
      hpcd->LPM_State = LPM_L0;
 8001ea0:	f884 12e4 	strb.w	r1, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f000 f9a4 	bl	80021f2 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7fe fb52 	bl	8000554 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001eb0:	6822      	ldr	r2, [r4, #0]
 8001eb2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eba:	e7cb      	b.n	8001e54 <HAL_PCD_IRQHandler+0x8b4>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001ebc:	0505      	lsls	r5, r0, #20
 8001ebe:	d51b      	bpl.n	8001ef8 <HAL_PCD_IRQHandler+0x958>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ec0:	6822      	ldr	r2, [r4, #0]
 8001ec2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ed0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	0c1b      	lsrs	r3, r3, #16
 8001edc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ee0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      HAL_PCD_SuspendCallback(hpcd);
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7fe fb20 	bl	8000534 <HAL_PCD_SuspendCallback>
 8001ef4:	f7ff bb66 	b.w	80015c4 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001ef8:	0601      	lsls	r1, r0, #24
 8001efa:	d52b      	bpl.n	8001f54 <HAL_PCD_IRQHandler+0x9b4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f06:	0412      	lsls	r2, r2, #16
 8001f08:	0c12      	lsrs	r2, r2, #16
 8001f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f0e:	f894 22e4 	ldrb.w	r2, [r4, #740]	; 0x2e4
 8001f12:	2a00      	cmp	r2, #0
 8001f14:	d1eb      	bne.n	8001eee <HAL_PCD_IRQHandler+0x94e>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f16:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001f1a:	b292      	uxth	r2, r2
 8001f1c:	f042 0204 	orr.w	r2, r2, #4
 8001f20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f24:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	f042 0208 	orr.w	r2, r2, #8
      hpcd->LPM_State = LPM_L1;
 8001f2e:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8001f34:	f884 12e4 	strb.w	r1, [r4, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f38:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f3c:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8001f40:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f44:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f46:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
}
 8001f4a:	b003      	add	sp, #12
 8001f4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f50:	f000 b94f 	b.w	80021f2 <HAL_PCDEx_LPM_Callback>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001f54:	0582      	lsls	r2, r0, #22
 8001f56:	d50d      	bpl.n	8001f74 <HAL_PCD_IRQHandler+0x9d4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f58:	6822      	ldr	r2, [r4, #0]
 8001f5a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f62:	041b      	lsls	r3, r3, #16
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f7fe fad1 	bl	8000512 <HAL_PCD_SOFCallback>
    return;
 8001f70:	f7ff bb28 	b.w	80015c4 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001f74:	05c3      	lsls	r3, r0, #23
 8001f76:	f57f ab25 	bpl.w	80015c4 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f7a:	6822      	ldr	r2, [r4, #0]
 8001f7c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f84:	e766      	b.n	8001e54 <HAL_PCD_IRQHandler+0x8b4>
 8001f86:	bf00      	nop

08001f88 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001f88:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001f8c:	b570      	push	{r4, r5, r6, lr}
 8001f8e:	4605      	mov	r5, r0
 8001f90:	f04f 0428 	mov.w	r4, #40	; 0x28
 8001f94:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8001f98:	d020      	beq.n	8001fdc <HAL_PCD_EP_Open+0x54>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9a:	fb00 4104 	mla	r1, r0, r4, r4
    ep->is_in = 1U;
 8001f9e:	fb00 4404 	mla	r4, r0, r4, r4
 8001fa2:	442c      	add	r4, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa4:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001fa6:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa8:	4429      	add	r1, r5
    ep->is_in = 1U;
 8001faa:	7166      	strb	r6, [r4, #5]
  ep->maxpacket = ep_mps;
 8001fac:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8001fae:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb0:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8001fb2:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001fb4:	b102      	cbz	r2, 8001fb8 <HAL_PCD_EP_Open+0x30>
    ep->tx_fifo_num = ep->num;
 8001fb6:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8001fb8:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001fba:	bf04      	itt	eq
 8001fbc:	2300      	moveq	r3, #0
 8001fbe:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001fc0:	f895 32ac 	ldrb.w	r3, [r5, #684]	; 0x2ac
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d013      	beq.n	8001ff0 <HAL_PCD_EP_Open+0x68>
 8001fc8:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fca:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8001fcc:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fd0:	f001 fd76 	bl	8003ac0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f885 02ac 	strb.w	r0, [r5, #684]	; 0x2ac
}
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fdc:	fb04 5100 	mla	r1, r4, r0, r5
    ep->is_in = 0U;
 8001fe0:	fb04 5400 	mla	r4, r4, r0, r5
 8001fe4:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe6:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 8001fea:	f884 616d 	strb.w	r6, [r4, #365]	; 0x16d
 8001fee:	e7dd      	b.n	8001fac <HAL_PCD_EP_Open+0x24>
  __HAL_LOCK(hpcd);
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	e7f2      	b.n	8001fda <HAL_PCD_EP_Open+0x52>

08001ff4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001ff4:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001ff8:	b510      	push	{r4, lr}
 8001ffa:	f001 0207 	and.w	r2, r1, #7
 8001ffe:	4604      	mov	r4, r0
 8002000:	f04f 0328 	mov.w	r3, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8002004:	d017      	beq.n	8002036 <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002006:	fb02 3103 	mla	r1, r2, r3, r3
    ep->is_in = 1U;
 800200a:	fb02 3303 	mla	r3, r2, r3, r3
 800200e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002010:	3104      	adds	r1, #4
 8002012:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002014:	2001      	movs	r0, #1
 8002016:	7158      	strb	r0, [r3, #5]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002018:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800201a:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 800201e:	2b01      	cmp	r3, #1
 8002020:	d013      	beq.n	800204a <HAL_PCD_EP_Close+0x56>
 8002022:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002024:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002026:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800202a:	f001 fea7 	bl	8003d7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800202e:	2000      	movs	r0, #0
 8002030:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 8002034:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002036:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 800203a:	fb03 0302 	mla	r3, r3, r2, r0
 800203e:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002040:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 8002044:	f883 016d 	strb.w	r0, [r3, #365]	; 0x16d
 8002048:	e7e6      	b.n	8002018 <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 800204a:	2002      	movs	r0, #2
 800204c:	e7f2      	b.n	8002034 <HAL_PCD_EP_Close+0x40>

0800204e <HAL_PCD_EP_Receive>:
{
 800204e:	b570      	push	{r4, r5, r6, lr}
 8002050:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002054:	2628      	movs	r6, #40	; 0x28
 8002056:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 800205a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800205c:	f884 116c 	strb.w	r1, [r4, #364]	; 0x16c
  ep->xfer_len = len;
 8002060:	e9c4 2360 	strd	r2, r3, [r4, #384]	; 0x180
  ep->xfer_count = 0U;
 8002064:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
  ep->is_in = 0U;
 8002068:	f884 516d 	strb.w	r5, [r4, #365]	; 0x16d
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800206c:	f504 71b6 	add.w	r1, r4, #364	; 0x16c
 8002070:	6800      	ldr	r0, [r0, #0]
 8002072:	f001 ffe1 	bl	8004038 <USB_EPStartXfer>
}
 8002076:	4628      	mov	r0, r5
 8002078:	bd70      	pop	{r4, r5, r6, pc}

0800207a <HAL_PCD_EP_Transmit>:
{
 800207a:	b570      	push	{r4, r5, r6, lr}
 800207c:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002080:	2428      	movs	r4, #40	; 0x28
 8002082:	fb04 0501 	mla	r5, r4, r1, r0
  ep->xfer_len = len;
 8002086:	e9c5 2310 	strd	r2, r3, [r5, #64]	; 0x40
  ep->xfer_len_db = len;
 800208a:	64eb      	str	r3, [r5, #76]	; 0x4c
 800208c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002090:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  ep->xfer_fill_db = 1U;
 8002094:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 8002096:	2600      	movs	r6, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002098:	fb01 4404 	mla	r4, r1, r4, r4
  ep->xfer_fill_db = 1U;
 800209c:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 80020a0:	64ae      	str	r6, [r5, #72]	; 0x48
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a2:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020a6:	1d21      	adds	r1, r4, #4
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020a8:	4401      	add	r1, r0
  ep->is_in = 1U;
 80020aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ae:	6800      	ldr	r0, [r0, #0]
 80020b0:	f001 ffc2 	bl	8004038 <USB_EPStartXfer>
}
 80020b4:	4630      	mov	r0, r6
 80020b6:	bd70      	pop	{r4, r5, r6, pc}

080020b8 <HAL_PCD_EP_SetStall>:
{
 80020b8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020ba:	6843      	ldr	r3, [r0, #4]
 80020bc:	f001 0507 	and.w	r5, r1, #7
 80020c0:	429d      	cmp	r5, r3
{
 80020c2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020c4:	d826      	bhi.n	8002114 <HAL_PCD_EP_SetStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80020c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80020ca:	f04f 0228 	mov.w	r2, #40	; 0x28
 80020ce:	d018      	beq.n	8002102 <HAL_PCD_EP_SetStall+0x4a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d0:	fb05 2102 	mla	r1, r5, r2, r2
    ep->is_in = 1U;
 80020d4:	fb05 2202 	mla	r2, r5, r2, r2
 80020d8:	4422      	add	r2, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020da:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80020dc:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020de:	4421      	add	r1, r4
    ep->is_in = 1U;
 80020e0:	7153      	strb	r3, [r2, #5]
  ep->is_stall = 1U;
 80020e2:	2301      	movs	r3, #1
 80020e4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020e6:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80020e8:	f894 22ac 	ldrb.w	r2, [r4, #684]	; 0x2ac
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d013      	beq.n	8002118 <HAL_PCD_EP_SetStall+0x60>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020f0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80020f2:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020f6:	f001 ff12 	bl	8003f1e <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 8002100:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8002102:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8002106:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8002108:	f503 71b6 	add.w	r1, r3, #364	; 0x16c
    ep->is_in = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	f882 316d 	strb.w	r3, [r2, #365]	; 0x16d
 8002112:	e7e6      	b.n	80020e2 <HAL_PCD_EP_SetStall+0x2a>
    return HAL_ERROR;
 8002114:	2001      	movs	r0, #1
 8002116:	e7f3      	b.n	8002100 <HAL_PCD_EP_SetStall+0x48>
  __HAL_LOCK(hpcd);
 8002118:	2002      	movs	r0, #2
 800211a:	e7f1      	b.n	8002100 <HAL_PCD_EP_SetStall+0x48>

0800211c <HAL_PCD_EP_ClrStall>:
{
 800211c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800211e:	6843      	ldr	r3, [r0, #4]
 8002120:	f001 020f 	and.w	r2, r1, #15
 8002124:	429a      	cmp	r2, r3
{
 8002126:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002128:	d82a      	bhi.n	8002180 <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 800212a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800212e:	f001 0207 	and.w	r2, r1, #7
 8002132:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002136:	d019      	beq.n	800216c <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002138:	fb02 3103 	mla	r1, r2, r3, r3
    ep->is_in = 1U;
 800213c:	fb02 3303 	mla	r3, r2, r3, r3
 8002140:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002142:	3104      	adds	r1, #4
 8002144:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002146:	2001      	movs	r0, #1
 8002148:	7158      	strb	r0, [r3, #5]
  ep->is_stall = 0U;
 800214a:	2500      	movs	r5, #0
 800214c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800214e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002150:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 8002154:	2b01      	cmp	r3, #1
 8002156:	d015      	beq.n	8002184 <HAL_PCD_EP_ClrStall+0x68>
 8002158:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800215a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800215c:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002160:	f001 fefd 	bl	8003f5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002164:	f884 52ac 	strb.w	r5, [r4, #684]	; 0x2ac
  return HAL_OK;
 8002168:	4628      	mov	r0, r5
}
 800216a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800216c:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 8002170:	fb03 0302 	mla	r3, r3, r2, r0
 8002174:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002176:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 800217a:	f883 016d 	strb.w	r0, [r3, #365]	; 0x16d
 800217e:	e7e4      	b.n	800214a <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 8002180:	2001      	movs	r0, #1
 8002182:	e7f2      	b.n	800216a <HAL_PCD_EP_ClrStall+0x4e>
  __HAL_LOCK(hpcd);
 8002184:	2002      	movs	r0, #2
 8002186:	e7f0      	b.n	800216a <HAL_PCD_EP_ClrStall+0x4e>

08002188 <HAL_PCD_EP_Flush>:
}
 8002188:	2000      	movs	r0, #0
 800218a:	4770      	bx	lr

0800218c <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800218c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002190:	bf18      	it	ne
 8002192:	f001 0107 	andne.w	r1, r1, #7
{
 8002196:	b510      	push	{r4, lr}
 8002198:	f04f 0428 	mov.w	r4, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219c:	bf1b      	ittet	ne
 800219e:	fb01 4104 	mlane	r1, r1, r4, r4
 80021a2:	3104      	addne	r1, #4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021a4:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a8:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80021aa:	bf08      	it	eq
 80021ac:	f500 70b6 	addeq.w	r0, r0, #364	; 0x16c
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80021b0:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80021b2:	b91a      	cbnz	r2, 80021bc <HAL_PCDEx_PMAConfig+0x30>
    ep->doublebuffer = 0U;
 80021b4:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80021b6:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80021b8:	2000      	movs	r0, #0
 80021ba:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80021bc:	2201      	movs	r2, #1
 80021be:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80021c0:	6083      	str	r3, [r0, #8]
 80021c2:	e7f9      	b.n	80021b8 <HAL_PCDEx_PMAConfig+0x2c>

080021c4 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 80021c4:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80021c6:	2100      	movs	r1, #0
 80021c8:	f880 12e4 	strb.w	r1, [r0, #740]	; 0x2e4
  hpcd->lpm_active = 1U;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80021d2:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80021e0:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80021ee:	4608      	mov	r0, r1
 80021f0:	4770      	bx	lr

080021f2 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80021f2:	4770      	bx	lr

080021f4 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f4:	4a02      	ldr	r2, [pc, #8]	; (8002200 <HAL_PWR_EnableBkUpAccess+0xc>)
 80021f6:	6813      	ldr	r3, [r2, #0]
 80021f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fc:	6013      	str	r3, [r2, #0]
}
 80021fe:	4770      	bx	lr
 8002200:	58000400 	.word	0x58000400

08002204 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002204:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8002206:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 800220a:	4608      	mov	r0, r1
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 800220c:	d101      	bne.n	8002212 <HAL_PWR_EnterSTOPMode+0xe>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 800220e:	f000 b82d 	b.w	800226c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8002212:	f000 b811 	b.w	8002238 <HAL_PWREx_EnterSTOP0Mode>
	...

08002218 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002218:	4b02      	ldr	r3, [pc, #8]	; (8002224 <HAL_PWREx_GetVoltageRange+0xc>)
 800221a:	6818      	ldr	r0, [r3, #0]
}
 800221c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	58000400 	.word	0x58000400

08002228 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002228:	4a02      	ldr	r2, [pc, #8]	; (8002234 <HAL_PWREx_EnableVddUSB+0xc>)
 800222a:	6853      	ldr	r3, [r2, #4]
 800222c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002230:	6053      	str	r3, [r2, #4]
}
 8002232:	4770      	bx	lr
 8002234:	58000400 	.word	0x58000400

08002238 <HAL_PWREx_EnterSTOP0Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <HAL_PWREx_EnterSTOP0Mode+0x2c>)
 800223a:	6813      	ldr	r3, [r2, #0]
 800223c:	f023 0307 	bic.w	r3, r3, #7
 8002240:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_PWREx_EnterSTOP0Mode+0x30>)
 8002244:	691a      	ldr	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002246:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002248:	f042 0204 	orr.w	r2, r2, #4
 800224c:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800224e:	d105      	bne.n	800225c <HAL_PWREx_EnterSTOP0Mode+0x24>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002250:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	f022 0204 	bic.w	r2, r2, #4
 8002258:	611a      	str	r2, [r3, #16]
}
 800225a:	4770      	bx	lr
    __SEV();
 800225c:	bf40      	sev
    __WFE();
 800225e:	bf20      	wfe
    __WFE();
 8002260:	bf20      	wfe
 8002262:	e7f6      	b.n	8002252 <HAL_PWREx_EnterSTOP0Mode+0x1a>
 8002264:	58000400 	.word	0x58000400
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <HAL_PWREx_EnterSTOP1Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800226c:	4a0b      	ldr	r2, [pc, #44]	; (800229c <HAL_PWREx_EnterSTOP1Mode+0x30>)
 800226e:	6813      	ldr	r3, [r2, #0]
 8002270:	f023 0307 	bic.w	r3, r3, #7
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_PWREx_EnterSTOP1Mode+0x34>)
 800227c:	691a      	ldr	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800227e:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002280:	f042 0204 	orr.w	r2, r2, #4
 8002284:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002286:	d105      	bne.n	8002294 <HAL_PWREx_EnterSTOP1Mode+0x28>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002288:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	f022 0204 	bic.w	r2, r2, #4
 8002290:	611a      	str	r2, [r3, #16]
}
 8002292:	4770      	bx	lr
    __SEV();
 8002294:	bf40      	sev
    __WFE();
 8002296:	bf20      	wfe
    __WFE();
 8002298:	bf20      	wfe
 800229a:	e7f6      	b.n	800228a <HAL_PWREx_EnterSTOP1Mode+0x1e>
 800229c:	58000400 	.word	0x58000400
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80022a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a8:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 80022ac:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80022b0:	4770      	bx	lr

080022b2 <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	6818      	ldr	r0, [r3, #0]
}
 80022b8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80022bc:	4770      	bx	lr

080022be <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80022be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c2:	6813      	ldr	r3, [r2, #0]
 80022c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c8:	4318      	orrs	r0, r3
 80022ca:	6010      	str	r0, [r2, #0]
}
 80022cc:	4770      	bx	lr

080022ce <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80022ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d2:	6853      	ldr	r3, [r2, #4]
 80022d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022d8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80022dc:	6050      	str	r0, [r2, #4]
}
 80022de:	4770      	bx	lr

080022e0 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80022e0:	28b0      	cmp	r0, #176	; 0xb0
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80022e4:	4a33      	ldr	r2, [pc, #204]	; (80023b4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80022e6:	bf98      	it	ls
 80022e8:	0900      	lsrls	r0, r0, #4
{
 80022ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80022ec:	bf8c      	ite	hi
 80022ee:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80022f0:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80022f4:	4c30      	ldr	r4, [pc, #192]	; (80023b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80022f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002300:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002304:	466e      	mov	r6, sp
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800230e:	f7ff ff83 	bl	8002218 <HAL_PWREx_GetVoltageRange>
 8002312:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002314:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002318:	3410      	adds	r4, #16
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800231a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800231e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002322:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002326:	ac08      	add	r4, sp, #32
 8002328:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800232c:	d020      	beq.n	8002370 <RCC_SetFlashLatencyFromMSIRange+0x90>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8002330:	429d      	cmp	r5, r3
 8002332:	d32f      	bcc.n	8002394 <RCC_SetFlashLatencyFromMSIRange+0xb4>
 8002334:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 8002338:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 800233c:	429d      	cmp	r5, r3
 800233e:	d92b      	bls.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0xb8>
 8002340:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 8002344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002348:	429d      	cmp	r5, r3
 800234a:	d927      	bls.n	800239c <RCC_SetFlashLatencyFromMSIRange+0xbc>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800234c:	2400      	movs	r4, #0
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800234e:	4d1c      	ldr	r5, [pc, #112]	; (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 8002350:	682b      	ldr	r3, [r5, #0]
 8002352:	f023 0307 	bic.w	r3, r3, #7
 8002356:	4323      	orrs	r3, r4
 8002358:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800235a:	f7fe fdcd 	bl	8000ef8 <HAL_GetTick>
 800235e:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	429c      	cmp	r4, r3
 8002368:	d11a      	bne.n	80023a0 <RCC_SetFlashLatencyFromMSIRange+0xc0>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800236a:	2000      	movs	r0, #0
}
 800236c:	b009      	add	sp, #36	; 0x24
 800236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 8002372:	fbb5 f5f3 	udiv	r5, r5, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002376:	2300      	movs	r3, #0
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002378:	f856 2b04 	ldr.w	r2, [r6], #4
 800237c:	4295      	cmp	r5, r2
 800237e:	d805      	bhi.n	800238c <RCC_SetFlashLatencyFromMSIRange+0xac>
        latency = FLASH_LATENCY_RANGE[index];
 8002380:	aa08      	add	r2, sp, #32
 8002382:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002386:	f853 4c10 	ldr.w	r4, [r3, #-16]
        break;
 800238a:	e7e0      	b.n	800234e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800238c:	3301      	adds	r3, #1
 800238e:	2b04      	cmp	r3, #4
 8002390:	d1f2      	bne.n	8002378 <RCC_SetFlashLatencyFromMSIRange+0x98>
 8002392:	e7db      	b.n	800234c <RCC_SetFlashLatencyFromMSIRange+0x6c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002394:	2300      	movs	r3, #0
 8002396:	e7f3      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8002398:	2301      	movs	r3, #1
 800239a:	e7f1      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 800239c:	2302      	movs	r3, #2
 800239e:	e7ef      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0xa0>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023a0:	f7fe fdaa 	bl	8000ef8 <HAL_GetTick>
 80023a4:	1b80      	subs	r0, r0, r6
 80023a6:	2802      	cmp	r0, #2
 80023a8:	d9da      	bls.n	8002360 <RCC_SetFlashLatencyFromMSIRange+0x80>
      return HAL_TIMEOUT;
 80023aa:	2003      	movs	r0, #3
 80023ac:	e7de      	b.n	800236c <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80023ae:	bf00      	nop
 80023b0:	08008138 	.word	0x08008138
 80023b4:	08008178 	.word	0x08008178
 80023b8:	08008238 	.word	0x08008238
 80023bc:	006acfc0 	.word	0x006acfc0
 80023c0:	58004000 	.word	0x58004000
 80023c4:	000f4240 	.word	0x000f4240

080023c8 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	689a      	ldr	r2, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023ce:	f012 020c 	ands.w	r2, r2, #12
 80023d2:	d10a      	bne.n	80023ea <HAL_RCC_GetSysClockFreq+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80023d4:	681b      	ldr	r3, [r3, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80023d6:	4a22      	ldr	r2, [pc, #136]	; (8002460 <HAL_RCC_GetSysClockFreq+0x98>)
 80023d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023dc:	2bb0      	cmp	r3, #176	; 0xb0
 80023de:	bf28      	it	cs
 80023e0:	23b0      	movcs	r3, #176	; 0xb0
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80023e8:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ea:	2a04      	cmp	r2, #4
 80023ec:	d035      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x92>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ee:	2a08      	cmp	r2, #8
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x3a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80023f2:	681b      	ldr	r3, [r3, #0]
      sysclockfreq = HSE_VALUE;
 80023f4:	481b      	ldr	r0, [pc, #108]	; (8002464 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023f6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023fc:	bf08      	it	eq
 80023fe:	4618      	moveq	r0, r3
 8002400:	4770      	bx	lr
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002408:	2a02      	cmp	r2, #2
 800240a:	d024      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x8e>
 800240c:	2a03      	cmp	r2, #3
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	d117      	bne.n	8002442 <HAL_RCC_GetSysClockFreq+0x7a>
          pllinputfreq = HSE_VALUE / 2U;
 8002412:	4815      	ldr	r0, [pc, #84]	; (8002468 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002414:	4913      	ldr	r1, [pc, #76]	; (8002464 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002416:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800241a:	bf08      	it	eq
 800241c:	4601      	moveq	r1, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	68d8      	ldr	r0, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002424:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002426:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002428:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800242c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002430:	0f5b      	lsrs	r3, r3, #29
 8002432:	4348      	muls	r0, r1
 8002434:	3201      	adds	r2, #1
 8002436:	3301      	adds	r3, #1
 8002438:	fbb0 f0f2 	udiv	r0, r0, r2
 800243c:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002440:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002446:	2bb0      	cmp	r3, #176	; 0xb0
 8002448:	bf28      	it	cs
 800244a:	23b0      	movcs	r3, #176	; 0xb0
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_RCC_GetSysClockFreq+0x98>)
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
        break;
 8002454:	e7e3      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x56>
    switch (pllsource)
 8002456:	4903      	ldr	r1, [pc, #12]	; (8002464 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002458:	e7e1      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x56>
    sysclockfreq = HSI_VALUE;
 800245a:	4802      	ldr	r0, [pc, #8]	; (8002464 <HAL_RCC_GetSysClockFreq+0x9c>)
}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	08008138 	.word	0x08008138
 8002464:	00f42400 	.word	0x00f42400
 8002468:	01e84800 	.word	0x01e84800

0800246c <HAL_RCC_GetHCLKFreq>:
{
 800246c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800246e:	f7ff ffab 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002476:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_RCC_GetHCLKFreq+0x1c>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002482:	fbb0 f0f3 	udiv	r0, r0, r3
 8002486:	bd08      	pop	{r3, pc}
 8002488:	08008178 	.word	0x08008178

0800248c <HAL_RCC_OscConfig>:
{
 800248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 800248e:	4604      	mov	r4, r0
 8002490:	b908      	cbnz	r0, 8002496 <HAL_RCC_OscConfig+0xa>
          return HAL_ERROR;
 8002492:	2001      	movs	r0, #1
 8002494:	e0b3      	b.n	80025fe <HAL_RCC_OscConfig+0x172>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002496:	6803      	ldr	r3, [r0, #0]
 8002498:	069a      	lsls	r2, r3, #26
 800249a:	d530      	bpl.n	80024fe <HAL_RCC_OscConfig+0x72>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800249c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a0:	69c1      	ldr	r1, [r0, #28]
 80024a2:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80024a4:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80024a6:	f013 030c 	ands.w	r3, r3, #12
 80024aa:	d007      	beq.n	80024bc <HAL_RCC_OscConfig+0x30>
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	f040 808c 	bne.w	80025ca <HAL_RCC_OscConfig+0x13e>
 80024b2:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	f040 8087 	bne.w	80025ca <HAL_RCC_OscConfig+0x13e>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80024bc:	2900      	cmp	r1, #0
 80024be:	d0e8      	beq.n	8002492 <HAL_RCC_OscConfig+0x6>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80024c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024cc:	2bb0      	cmp	r3, #176	; 0xb0
 80024ce:	bf28      	it	cs
 80024d0:	23b0      	movcs	r3, #176	; 0xb0
 80024d2:	4298      	cmp	r0, r3
 80024d4:	d96e      	bls.n	80025b4 <HAL_RCC_OscConfig+0x128>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024d6:	f7ff ff03 	bl	80022e0 <RCC_SetFlashLatencyFromMSIRange>
 80024da:	2800      	cmp	r0, #0
 80024dc:	d1d9      	bne.n	8002492 <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80024e0:	f7ff feed 	bl	80022be <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024e4:	6a20      	ldr	r0, [r4, #32]
 80024e6:	f7ff fef2 	bl	80022ce <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024ea:	f7ff ffbf 	bl	800246c <HAL_RCC_GetHCLKFreq>
 80024ee:	4bb1      	ldr	r3, [pc, #708]	; (80027b4 <HAL_RCC_OscConfig+0x328>)
 80024f0:	6018      	str	r0, [r3, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024f2:	4bb1      	ldr	r3, [pc, #708]	; (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	f7fe fcc1 	bl	8000e7c <HAL_InitTick>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d1c9      	bne.n	8002492 <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	07db      	lsls	r3, r3, #31
 8002502:	d511      	bpl.n	8002528 <HAL_RCC_OscConfig+0x9c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002508:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800250a:	68d1      	ldr	r1, [r2, #12]
 800250c:	6862      	ldr	r2, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800250e:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002512:	2b08      	cmp	r3, #8
 8002514:	d006      	beq.n	8002524 <HAL_RCC_OscConfig+0x98>
 8002516:	2b0c      	cmp	r3, #12
 8002518:	f040 8083 	bne.w	8002622 <HAL_RCC_OscConfig+0x196>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800251c:	f001 0303 	and.w	r3, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002520:	2b03      	cmp	r3, #3
 8002522:	d17e      	bne.n	8002622 <HAL_RCC_OscConfig+0x196>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002524:	2a00      	cmp	r2, #0
 8002526:	d0b4      	beq.n	8002492 <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	0799      	lsls	r1, r3, #30
 800252c:	d51b      	bpl.n	8002566 <HAL_RCC_OscConfig+0xda>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800252e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002532:	68e1      	ldr	r1, [r4, #12]
 8002534:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002536:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002538:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800253c:	2b04      	cmp	r3, #4
 800253e:	d007      	beq.n	8002550 <HAL_RCC_OscConfig+0xc4>
 8002540:	2b0c      	cmp	r3, #12
 8002542:	f040 8098 	bne.w	8002676 <HAL_RCC_OscConfig+0x1ea>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002546:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800254a:	2b02      	cmp	r3, #2
 800254c:	f040 8093 	bne.w	8002676 <HAL_RCC_OscConfig+0x1ea>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002550:	2900      	cmp	r1, #0
 8002552:	d09e      	beq.n	8002492 <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002558:	6921      	ldr	r1, [r4, #16]
 800255a:	6853      	ldr	r3, [r2, #4]
 800255c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002560:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002564:	6053      	str	r3, [r2, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	f013 0f18 	tst.w	r3, #24
 800256c:	f040 80ae 	bne.w	80026cc <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	075f      	lsls	r7, r3, #29
 8002574:	f100 8149 	bmi.w	800280a <HAL_RCC_OscConfig+0x37e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	065a      	lsls	r2, r3, #25
 800257c:	f140 81ae 	bpl.w	80028dc <HAL_RCC_OscConfig+0x450>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002580:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002582:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8195 	beq.w	80028b6 <HAL_RCC_OscConfig+0x42a>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800258c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002598:	f7fe fcae 	bl	8000ef8 <HAL_GetTick>
 800259c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800259e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80025a2:	079b      	lsls	r3, r3, #30
 80025a4:	f100 819a 	bmi.w	80028dc <HAL_RCC_OscConfig+0x450>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a8:	f7fe fca6 	bl	8000ef8 <HAL_GetTick>
 80025ac:	1b83      	subs	r3, r0, r6
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d9f5      	bls.n	800259e <HAL_RCC_OscConfig+0x112>
 80025b2:	e023      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b4:	f7ff fe83 	bl	80022be <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b8:	6a20      	ldr	r0, [r4, #32]
 80025ba:	f7ff fe88 	bl	80022ce <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80025c0:	f7ff fe8e 	bl	80022e0 <RCC_SetFlashLatencyFromMSIRange>
 80025c4:	2800      	cmp	r0, #0
 80025c6:	d090      	beq.n	80024ea <HAL_RCC_OscConfig+0x5e>
 80025c8:	e763      	b.n	8002492 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	b1b1      	cbz	r1, 8002600 <HAL_RCC_OscConfig+0x174>
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025d8:	f7fe fc8e 	bl	8000ef8 <HAL_GetTick>
 80025dc:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 80025de:	f7ff fe68 	bl	80022b2 <LL_RCC_MSI_IsReady>
 80025e2:	b130      	cbz	r0, 80025f2 <HAL_RCC_OscConfig+0x166>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80025e6:	f7ff fe6a 	bl	80022be <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ea:	6a20      	ldr	r0, [r4, #32]
 80025ec:	f7ff fe6f 	bl	80022ce <LL_RCC_MSI_SetCalibTrimming>
 80025f0:	e785      	b.n	80024fe <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f2:	f7fe fc81 	bl	8000ef8 <HAL_GetTick>
 80025f6:	1b40      	subs	r0, r0, r5
 80025f8:	2802      	cmp	r0, #2
 80025fa:	d9f0      	bls.n	80025de <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 80025fc:	2003      	movs	r0, #3
}
 80025fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002606:	f7fe fc77 	bl	8000ef8 <HAL_GetTick>
 800260a:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 800260c:	f7ff fe51 	bl	80022b2 <LL_RCC_MSI_IsReady>
 8002610:	2800      	cmp	r0, #0
 8002612:	f43f af74 	beq.w	80024fe <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002616:	f7fe fc6f 	bl	8000ef8 <HAL_GetTick>
 800261a:	1b40      	subs	r0, r0, r5
 800261c:	2802      	cmp	r0, #2
 800261e:	d9f5      	bls.n	800260c <HAL_RCC_OscConfig+0x180>
 8002620:	e7ec      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002622:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002626:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800262a:	682b      	ldr	r3, [r5, #0]
 800262c:	d111      	bne.n	8002652 <HAL_RCC_OscConfig+0x1c6>
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002634:	f7fe fc60 	bl	8000ef8 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002638:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800263c:	4605      	mov	r5, r0
 800263e:	6833      	ldr	r3, [r6, #0]
 8002640:	039f      	lsls	r7, r3, #14
 8002642:	f53f af71 	bmi.w	8002528 <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002646:	f7fe fc57 	bl	8000ef8 <HAL_GetTick>
 800264a:	1b43      	subs	r3, r0, r5
 800264c:	2b64      	cmp	r3, #100	; 0x64
 800264e:	d9f6      	bls.n	800263e <HAL_RCC_OscConfig+0x1b2>
 8002650:	e7d4      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002656:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002658:	2a00      	cmp	r2, #0
 800265a:	d1eb      	bne.n	8002634 <HAL_RCC_OscConfig+0x1a8>
        tickstart = HAL_GetTick();
 800265c:	f7fe fc4c 	bl	8000ef8 <HAL_GetTick>
 8002660:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002662:	682b      	ldr	r3, [r5, #0]
 8002664:	0398      	lsls	r0, r3, #14
 8002666:	f57f af5f 	bpl.w	8002528 <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800266a:	f7fe fc45 	bl	8000ef8 <HAL_GetTick>
 800266e:	1b83      	subs	r3, r0, r6
 8002670:	2b64      	cmp	r3, #100	; 0x64
 8002672:	d9f6      	bls.n	8002662 <HAL_RCC_OscConfig+0x1d6>
 8002674:	e7c2      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002676:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800267a:	682b      	ldr	r3, [r5, #0]
 800267c:	b1b1      	cbz	r1, 80026ac <HAL_RCC_OscConfig+0x220>
 800267e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002682:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002684:	f7fe fc38 	bl	8000ef8 <HAL_GetTick>
 8002688:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800268a:	682b      	ldr	r3, [r5, #0]
 800268c:	055a      	lsls	r2, r3, #21
 800268e:	d405      	bmi.n	800269c <HAL_RCC_OscConfig+0x210>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe fc32 	bl	8000ef8 <HAL_GetTick>
 8002694:	1b83      	subs	r3, r0, r6
 8002696:	2b02      	cmp	r3, #2
 8002698:	d9f7      	bls.n	800268a <HAL_RCC_OscConfig+0x1fe>
 800269a:	e7af      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800269c:	686b      	ldr	r3, [r5, #4]
 800269e:	6922      	ldr	r2, [r4, #16]
 80026a0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80026a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80026a8:	606b      	str	r3, [r5, #4]
}
 80026aa:	e75c      	b.n	8002566 <HAL_RCC_OscConfig+0xda>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80026ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026b2:	f7fe fc21 	bl	8000ef8 <HAL_GetTick>
 80026b6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80026b8:	682b      	ldr	r3, [r5, #0]
 80026ba:	055b      	lsls	r3, r3, #21
 80026bc:	f57f af53 	bpl.w	8002566 <HAL_RCC_OscConfig+0xda>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c0:	f7fe fc1a 	bl	8000ef8 <HAL_GetTick>
 80026c4:	1b83      	subs	r3, r0, r6
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d9f6      	bls.n	80026b8 <HAL_RCC_OscConfig+0x22c>
 80026ca:	e797      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026cc:	6962      	ldr	r2, [r4, #20]
 80026ce:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80026d2:	2a00      	cmp	r2, #0
 80026d4:	d072      	beq.n	80027bc <HAL_RCC_OscConfig+0x330>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80026d6:	06de      	lsls	r6, r3, #27
 80026d8:	d547      	bpl.n	800276a <HAL_RCC_OscConfig+0x2de>
        if (LL_RCC_LSI1_IsReady() == 0U)
 80026da:	f7ff fde3 	bl	80022a4 <LL_RCC_LSI1_IsReady>
 80026de:	b1a0      	cbz	r0, 800270a <HAL_RCC_OscConfig+0x27e>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80026e0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80026e4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 80026f0:	f7fe fc02 	bl	8000ef8 <HAL_GetTick>
 80026f4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80026f6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80026fa:	0718      	lsls	r0, r3, #28
 80026fc:	d418      	bmi.n	8002730 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80026fe:	f7fe fbfb 	bl	8000ef8 <HAL_GetTick>
 8002702:	1b83      	subs	r3, r0, r6
 8002704:	2b03      	cmp	r3, #3
 8002706:	d9f6      	bls.n	80026f6 <HAL_RCC_OscConfig+0x26a>
 8002708:	e778      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800270a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8002716:	f7fe fbef 	bl	8000ef8 <HAL_GetTick>
 800271a:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 800271c:	f7ff fdc2 	bl	80022a4 <LL_RCC_LSI1_IsReady>
 8002720:	2800      	cmp	r0, #0
 8002722:	d1dd      	bne.n	80026e0 <HAL_RCC_OscConfig+0x254>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002724:	f7fe fbe8 	bl	8000ef8 <HAL_GetTick>
 8002728:	1b40      	subs	r0, r0, r5
 800272a:	2802      	cmp	r0, #2
 800272c:	d9f6      	bls.n	800271c <HAL_RCC_OscConfig+0x290>
 800272e:	e765      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002730:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002734:	69a2      	ldr	r2, [r4, #24]
 8002736:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800273a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800273e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002742:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800274e:	f7fe fbd3 	bl	8000ef8 <HAL_GetTick>
 8002752:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002754:	f7ff fda6 	bl	80022a4 <LL_RCC_LSI1_IsReady>
 8002758:	2800      	cmp	r0, #0
 800275a:	f43f af09 	beq.w	8002570 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800275e:	f7fe fbcb 	bl	8000ef8 <HAL_GetTick>
 8002762:	1b40      	subs	r0, r0, r5
 8002764:	2802      	cmp	r0, #2
 8002766:	d9f5      	bls.n	8002754 <HAL_RCC_OscConfig+0x2c8>
 8002768:	e748      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800276a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002776:	f7fe fbbf 	bl	8000ef8 <HAL_GetTick>
 800277a:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 800277c:	f7ff fd92 	bl	80022a4 <LL_RCC_LSI1_IsReady>
 8002780:	b190      	cbz	r0, 80027a8 <HAL_RCC_OscConfig+0x31c>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002782:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002786:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800278a:	f023 0304 	bic.w	r3, r3, #4
 800278e:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002792:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002796:	0719      	lsls	r1, r3, #28
 8002798:	f57f aeea 	bpl.w	8002570 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800279c:	f7fe fbac 	bl	8000ef8 <HAL_GetTick>
 80027a0:	1b40      	subs	r0, r0, r5
 80027a2:	2803      	cmp	r0, #3
 80027a4:	d9f5      	bls.n	8002792 <HAL_RCC_OscConfig+0x306>
 80027a6:	e729      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80027a8:	f7fe fba6 	bl	8000ef8 <HAL_GetTick>
 80027ac:	1b40      	subs	r0, r0, r5
 80027ae:	2802      	cmp	r0, #2
 80027b0:	d9e4      	bls.n	800277c <HAL_RCC_OscConfig+0x2f0>
 80027b2:	e723      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
 80027b4:	2000007c 	.word	0x2000007c
 80027b8:	20000084 	.word	0x20000084
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80027bc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80027c0:	f023 0304 	bic.w	r3, r3, #4
 80027c4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80027c8:	f7fe fb96 	bl	8000ef8 <HAL_GetTick>
 80027cc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80027ce:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80027d2:	071a      	lsls	r2, r3, #28
 80027d4:	d413      	bmi.n	80027fe <HAL_RCC_OscConfig+0x372>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80027d6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80027e2:	f7fe fb89 	bl	8000ef8 <HAL_GetTick>
 80027e6:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 80027e8:	f7ff fd5c 	bl	80022a4 <LL_RCC_LSI1_IsReady>
 80027ec:	2800      	cmp	r0, #0
 80027ee:	f43f aebf 	beq.w	8002570 <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80027f2:	f7fe fb81 	bl	8000ef8 <HAL_GetTick>
 80027f6:	1b40      	subs	r0, r0, r5
 80027f8:	2802      	cmp	r0, #2
 80027fa:	d9f5      	bls.n	80027e8 <HAL_RCC_OscConfig+0x35c>
 80027fc:	e6fe      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80027fe:	f7fe fb7b 	bl	8000ef8 <HAL_GetTick>
 8002802:	1b83      	subs	r3, r0, r6
 8002804:	2b03      	cmp	r3, #3
 8002806:	d9e2      	bls.n	80027ce <HAL_RCC_OscConfig+0x342>
 8002808:	e6f8      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280a:	4e81      	ldr	r6, [pc, #516]	; (8002a10 <HAL_RCC_OscConfig+0x584>)
 800280c:	6833      	ldr	r3, [r6, #0]
 800280e:	05db      	lsls	r3, r3, #23
 8002810:	d51c      	bpl.n	800284c <HAL_RCC_OscConfig+0x3c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002812:	68a3      	ldr	r3, [r4, #8]
 8002814:	2b01      	cmp	r3, #1
 8002816:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800281a:	d125      	bne.n	8002868 <HAL_RCC_OscConfig+0x3dc>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800281c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002828:	f7fe fb66 	bl	8000ef8 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800282c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002830:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f241 3688 	movw	r6, #5000	; 0x1388
 8002836:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800283a:	0798      	lsls	r0, r3, #30
 800283c:	f53f ae9c 	bmi.w	8002578 <HAL_RCC_OscConfig+0xec>
 8002840:	f7fe fb5a 	bl	8000ef8 <HAL_GetTick>
 8002844:	1b43      	subs	r3, r0, r5
 8002846:	42b3      	cmp	r3, r6
 8002848:	d9f5      	bls.n	8002836 <HAL_RCC_OscConfig+0x3aa>
 800284a:	e6d7      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
      HAL_PWR_EnableBkUpAccess();
 800284c:	f7ff fcd2 	bl	80021f4 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8002850:	f7fe fb52 	bl	8000ef8 <HAL_GetTick>
 8002854:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002856:	6833      	ldr	r3, [r6, #0]
 8002858:	05df      	lsls	r7, r3, #23
 800285a:	d4da      	bmi.n	8002812 <HAL_RCC_OscConfig+0x386>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285c:	f7fe fb4c 	bl	8000ef8 <HAL_GetTick>
 8002860:	1b40      	subs	r0, r0, r5
 8002862:	2802      	cmp	r0, #2
 8002864:	d9f7      	bls.n	8002856 <HAL_RCC_OscConfig+0x3ca>
 8002866:	e6c9      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002868:	2b05      	cmp	r3, #5
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x3ee>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800286c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8002878:	e7d0      	b.n	800281c <HAL_RCC_OscConfig+0x390>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800287a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002886:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800288a:	f022 0204 	bic.w	r2, r2, #4
 800288e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1c8      	bne.n	8002828 <HAL_RCC_OscConfig+0x39c>
      tickstart = HAL_GetTick();
 8002896:	f7fe fb2f 	bl	8000ef8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800289e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028a0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80028a4:	0799      	lsls	r1, r3, #30
 80028a6:	f57f ae67 	bpl.w	8002578 <HAL_RCC_OscConfig+0xec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe fb25 	bl	8000ef8 <HAL_GetTick>
 80028ae:	1b83      	subs	r3, r0, r6
 80028b0:	42bb      	cmp	r3, r7
 80028b2:	d9f5      	bls.n	80028a0 <HAL_RCC_OscConfig+0x414>
 80028b4:	e6a2      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80028b6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80028c2:	f7fe fb19 	bl	8000ef8 <HAL_GetTick>
 80028c6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80028c8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80028cc:	079f      	lsls	r7, r3, #30
 80028ce:	d505      	bpl.n	80028dc <HAL_RCC_OscConfig+0x450>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028d0:	f7fe fb12 	bl	8000ef8 <HAL_GetTick>
 80028d4:	1b83      	subs	r3, r0, r6
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d9f6      	bls.n	80028c8 <HAL_RCC_OscConfig+0x43c>
 80028da:	e68f      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80028de:	b909      	cbnz	r1, 80028e4 <HAL_RCC_OscConfig+0x458>
  return HAL_OK;
 80028e0:	2000      	movs	r0, #0
 80028e2:	e68c      	b.n	80025fe <HAL_RCC_OscConfig+0x172>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80028e4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028e8:	2902      	cmp	r1, #2
 80028ea:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80028ec:	68eb      	ldr	r3, [r5, #12]
 80028ee:	f002 020c 	and.w	r2, r2, #12
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028f2:	d174      	bne.n	80029de <HAL_RCC_OscConfig+0x552>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80028f6:	f003 0103 	and.w	r1, r3, #3
 80028fa:	4281      	cmp	r1, r0
 80028fc:	d118      	bne.n	8002930 <HAL_RCC_OscConfig+0x4a4>
 80028fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002900:	f003 0170 	and.w	r1, r3, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002904:	4281      	cmp	r1, r0
 8002906:	d113      	bne.n	8002930 <HAL_RCC_OscConfig+0x4a4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002908:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800290a:	f3c3 2106 	ubfx	r1, r3, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800290e:	4281      	cmp	r1, r0
 8002910:	d10e      	bne.n	8002930 <HAL_RCC_OscConfig+0x4a4>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002912:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002914:	f403 1178 	and.w	r1, r3, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002918:	4281      	cmp	r1, r0
 800291a:	d109      	bne.n	8002930 <HAL_RCC_OscConfig+0x4a4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800291c:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800291e:	f003 6160 	and.w	r1, r3, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002922:	4281      	cmp	r1, r0
 8002924:	d104      	bne.n	8002930 <HAL_RCC_OscConfig+0x4a4>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002926:	6c61      	ldr	r1, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002928:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800292c:	428b      	cmp	r3, r1
 800292e:	d03f      	beq.n	80029b0 <HAL_RCC_OscConfig+0x524>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002930:	2a0c      	cmp	r2, #12
 8002932:	f43f adae 	beq.w	8002492 <HAL_RCC_OscConfig+0x6>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002936:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800293a:	682b      	ldr	r3, [r5, #0]
 800293c:	015e      	lsls	r6, r3, #5
 800293e:	f53f ada8 	bmi.w	8002492 <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002942:	682b      	ldr	r3, [r5, #0]
 8002944:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002948:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800294a:	f7fe fad5 	bl	8000ef8 <HAL_GetTick>
 800294e:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	0198      	lsls	r0, r3, #6
 8002954:	d426      	bmi.n	80029a4 <HAL_RCC_OscConfig+0x518>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002956:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 800295a:	68e9      	ldr	r1, [r5, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	4a2d      	ldr	r2, [pc, #180]	; (8002a14 <HAL_RCC_OscConfig+0x588>)
 8002960:	400a      	ands	r2, r1
 8002962:	4313      	orrs	r3, r2
 8002964:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002966:	4313      	orrs	r3, r2
 8002968:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800296a:	4313      	orrs	r3, r2
 800296c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800296e:	4313      	orrs	r3, r2
 8002970:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002972:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002976:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002978:	682b      	ldr	r3, [r5, #0]
 800297a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800297e:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002980:	68eb      	ldr	r3, [r5, #12]
 8002982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002986:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8002988:	f7fe fab6 	bl	8000ef8 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8002990:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002992:	682b      	ldr	r3, [r5, #0]
 8002994:	0199      	lsls	r1, r3, #6
 8002996:	d4a3      	bmi.n	80028e0 <HAL_RCC_OscConfig+0x454>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe faae 	bl	8000ef8 <HAL_GetTick>
 800299c:	1b00      	subs	r0, r0, r4
 800299e:	2802      	cmp	r0, #2
 80029a0:	d9f7      	bls.n	8002992 <HAL_RCC_OscConfig+0x506>
 80029a2:	e62b      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe faa8 	bl	8000ef8 <HAL_GetTick>
 80029a8:	1b80      	subs	r0, r0, r6
 80029aa:	2802      	cmp	r0, #2
 80029ac:	d9d0      	bls.n	8002950 <HAL_RCC_OscConfig+0x4c4>
 80029ae:	e625      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	019a      	lsls	r2, r3, #6
 80029b4:	d494      	bmi.n	80028e0 <HAL_RCC_OscConfig+0x454>
 80029b6:	682b      	ldr	r3, [r5, #0]
 80029b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029bc:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029be:	68eb      	ldr	r3, [r5, #12]
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 80029c6:	f7fe fa97 	bl	8000ef8 <HAL_GetTick>
 80029ca:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029cc:	682b      	ldr	r3, [r5, #0]
 80029ce:	019b      	lsls	r3, r3, #6
 80029d0:	d486      	bmi.n	80028e0 <HAL_RCC_OscConfig+0x454>
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d2:	f7fe fa91 	bl	8000ef8 <HAL_GetTick>
 80029d6:	1b00      	subs	r0, r0, r4
 80029d8:	2802      	cmp	r0, #2
 80029da:	d9f7      	bls.n	80029cc <HAL_RCC_OscConfig+0x540>
 80029dc:	e60e      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029de:	2a0c      	cmp	r2, #12
 80029e0:	f43f ad57 	beq.w	8002492 <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80029e4:	682b      	ldr	r3, [r5, #0]
 80029e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80029ec:	f7fe fa84 	bl	8000ef8 <HAL_GetTick>
 80029f0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f2:	682b      	ldr	r3, [r5, #0]
 80029f4:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80029f8:	d104      	bne.n	8002a04 <HAL_RCC_OscConfig+0x578>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80029fa:	68e9      	ldr	r1, [r5, #12]
 80029fc:	4a06      	ldr	r2, [pc, #24]	; (8002a18 <HAL_RCC_OscConfig+0x58c>)
 80029fe:	400a      	ands	r2, r1
 8002a00:	60ea      	str	r2, [r5, #12]
 8002a02:	e76d      	b.n	80028e0 <HAL_RCC_OscConfig+0x454>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a04:	f7fe fa78 	bl	8000ef8 <HAL_GetTick>
 8002a08:	1b00      	subs	r0, r0, r4
 8002a0a:	2802      	cmp	r0, #2
 8002a0c:	d9f1      	bls.n	80029f2 <HAL_RCC_OscConfig+0x566>
 8002a0e:	e5f5      	b.n	80025fc <HAL_RCC_OscConfig+0x170>
 8002a10:	58000400 	.word	0x58000400
 8002a14:	11c1808c 	.word	0x11c1808c
 8002a18:	eefefffc 	.word	0xeefefffc

08002a1c <HAL_RCC_ClockConfig>:
{
 8002a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a20:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002a22:	4604      	mov	r4, r0
 8002a24:	b910      	cbnz	r0, 8002a2c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002a26:	2001      	movs	r0, #1
}
 8002a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4e79      	ldr	r6, [pc, #484]	; (8002c14 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2e:	6833      	ldr	r3, [r6, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	428b      	cmp	r3, r1
 8002a36:	d316      	bcc.n	8002a66 <HAL_RCC_ClockConfig+0x4a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	079a      	lsls	r2, r3, #30
 8002a3c:	d527      	bpl.n	8002a8e <HAL_RCC_ClockConfig+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a3e:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002a42:	68a2      	ldr	r2, [r4, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002a4e:	f7fe fa53 	bl	8000ef8 <HAL_GetTick>
 8002a52:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	03db      	lsls	r3, r3, #15
 8002a58:	d419      	bmi.n	8002a8e <HAL_RCC_ClockConfig+0x72>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a5a:	f7fe fa4d 	bl	8000ef8 <HAL_GetTick>
 8002a5e:	1b83      	subs	r3, r0, r6
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d9f7      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x38>
 8002a64:	e011      	b.n	8002a8a <HAL_RCC_ClockConfig+0x6e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	6833      	ldr	r3, [r6, #0]
 8002a68:	f023 0307 	bic.w	r3, r3, #7
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002a70:	f7fe fa42 	bl	8000ef8 <HAL_GetTick>
 8002a74:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	6833      	ldr	r3, [r6, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	42ab      	cmp	r3, r5
 8002a7e:	d0db      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a80:	f7fe fa3a 	bl	8000ef8 <HAL_GetTick>
 8002a84:	1bc0      	subs	r0, r0, r7
 8002a86:	2802      	cmp	r0, #2
 8002a88:	d9f5      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x5a>
        return HAL_TIMEOUT;
 8002a8a:	2003      	movs	r0, #3
 8002a8c:	e7cc      	b.n	8002a28 <HAL_RCC_ClockConfig+0xc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	0698      	lsls	r0, r3, #26
 8002a92:	d516      	bpl.n	8002ac2 <HAL_RCC_ClockConfig+0xa6>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002a94:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002a98:	6962      	ldr	r2, [r4, #20]
 8002a9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002aa8:	f7fe fa26 	bl	8000ef8 <HAL_GetTick>
 8002aac:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002aae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ab2:	0399      	lsls	r1, r3, #14
 8002ab4:	d405      	bmi.n	8002ac2 <HAL_RCC_ClockConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ab6:	f7fe fa1f 	bl	8000ef8 <HAL_GetTick>
 8002aba:	1b83      	subs	r3, r0, r6
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d9f6      	bls.n	8002aae <HAL_RCC_ClockConfig+0x92>
 8002ac0:	e7e3      	b.n	8002a8a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	065a      	lsls	r2, r3, #25
 8002ac6:	d517      	bpl.n	8002af8 <HAL_RCC_ClockConfig+0xdc>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002ac8:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002acc:	69a2      	ldr	r2, [r4, #24]
 8002ace:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ad2:	f023 030f 	bic.w	r3, r3, #15
 8002ad6:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8002ada:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002ade:	f7fe fa0b 	bl	8000ef8 <HAL_GetTick>
 8002ae2:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ae4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ae8:	03db      	lsls	r3, r3, #15
 8002aea:	d405      	bmi.n	8002af8 <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aec:	f7fe fa04 	bl	8000ef8 <HAL_GetTick>
 8002af0:	1b83      	subs	r3, r0, r6
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d9f6      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0xc8>
 8002af6:	e7c8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	075e      	lsls	r6, r3, #29
 8002afc:	d513      	bpl.n	8002b26 <HAL_RCC_ClockConfig+0x10a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002afe:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002b02:	68e2      	ldr	r2, [r4, #12]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002b0e:	f7fe f9f3 	bl	8000ef8 <HAL_GetTick>
 8002b12:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	0398      	lsls	r0, r3, #14
 8002b18:	d405      	bmi.n	8002b26 <HAL_RCC_ClockConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b1a:	f7fe f9ed 	bl	8000ef8 <HAL_GetTick>
 8002b1e:	1b83      	subs	r3, r0, r6
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d9f7      	bls.n	8002b14 <HAL_RCC_ClockConfig+0xf8>
 8002b24:	e7b1      	b.n	8002a8a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	0719      	lsls	r1, r3, #28
 8002b2a:	d514      	bpl.n	8002b56 <HAL_RCC_ClockConfig+0x13a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b2c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b30:	6922      	ldr	r2, [r4, #16]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002b38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002b3c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002b3e:	f7fe f9db 	bl	8000ef8 <HAL_GetTick>
 8002b42:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	035a      	lsls	r2, r3, #13
 8002b48:	d405      	bmi.n	8002b56 <HAL_RCC_ClockConfig+0x13a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b4a:	f7fe f9d5 	bl	8000ef8 <HAL_GetTick>
 8002b4e:	1b83      	subs	r3, r0, r6
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d9f7      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x128>
 8002b54:	e799      	b.n	8002a8a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	07db      	lsls	r3, r3, #31
 8002b5a:	d40f      	bmi.n	8002b7c <HAL_RCC_ClockConfig+0x160>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5c:	4c2d      	ldr	r4, [pc, #180]	; (8002c14 <HAL_RCC_ClockConfig+0x1f8>)
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	42ab      	cmp	r3, r5
 8002b66:	d841      	bhi.n	8002bec <HAL_RCC_ClockConfig+0x1d0>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b68:	f7ff fc80 	bl	800246c <HAL_RCC_GetHCLKFreq>
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_RCC_ClockConfig+0x1fc>)
 8002b6e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 8002b70:	f7fe f9c8 	bl	8000f04 <HAL_GetTickPrio>
}
 8002b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8002b78:	f7fe b980 	b.w	8000e7c <HAL_InitTick>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7c:	6863      	ldr	r3, [r4, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d120      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1a8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b8c:	f43f af4b 	beq.w	8002a26 <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002b90:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002b94:	6862      	ldr	r2, [r4, #4]
 8002b96:	68b3      	ldr	r3, [r6, #8]
 8002b98:	f023 0303 	bic.w	r3, r3, #3
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002ba0:	f7fe f9aa 	bl	8000ef8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002ba8:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002baa:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bac:	6862      	ldr	r2, [r4, #4]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002bb6:	d0d1      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7fe f99e 	bl	8000ef8 <HAL_GetTick>
 8002bbc:	1bc0      	subs	r0, r0, r7
 8002bbe:	4540      	cmp	r0, r8
 8002bc0:	d9f3      	bls.n	8002baa <HAL_RCC_ClockConfig+0x18e>
 8002bc2:	e762      	b.n	8002a8a <HAL_RCC_ClockConfig+0x6e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x1b8>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bd2:	e7db      	b.n	8002b8c <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bd4:	b923      	cbnz	r3, 8002be0 <HAL_RCC_ClockConfig+0x1c4>
      if (LL_RCC_MSI_IsReady() == 0U)
 8002bd6:	f7ff fb6c 	bl	80022b2 <LL_RCC_MSI_IsReady>
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d1d8      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x174>
 8002bde:	e722      	b.n	8002a26 <HAL_RCC_ClockConfig+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002bea:	e7cf      	b.n	8002b8c <HAL_RCC_ClockConfig+0x170>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	f023 0307 	bic.w	r3, r3, #7
 8002bf2:	432b      	orrs	r3, r5
 8002bf4:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002bf6:	f7fe f97f 	bl	8000ef8 <HAL_GetTick>
 8002bfa:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	42ab      	cmp	r3, r5
 8002c04:	d0b0      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x14c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c06:	f7fe f977 	bl	8000ef8 <HAL_GetTick>
 8002c0a:	1b80      	subs	r0, r0, r6
 8002c0c:	2802      	cmp	r0, #2
 8002c0e:	d9f5      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x1e0>
 8002c10:	e73b      	b.n	8002a8a <HAL_RCC_ClockConfig+0x6e>
 8002c12:	bf00      	nop
 8002c14:	58004000 	.word	0x58004000
 8002c18:	2000007c 	.word	0x2000007c

08002c1c <LL_RCC_HSE_IsEnabledDiv2>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c20:	6818      	ldr	r0, [r3, #0]
}
 8002c22:	f3c0 5000 	ubfx	r0, r0, #20, #1
 8002c26:	4770      	bx	lr

08002c28 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2c:	6818      	ldr	r0, [r3, #0]
}
 8002c2e:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8002c32:	4770      	bx	lr

08002c34 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c38:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002c3c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002c40:	4770      	bx	lr

08002c42 <LL_RCC_LSI1_IsReady>:
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8002c4a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002c4e:	4770      	bx	lr

08002c50 <LL_RCC_LSI2_IsReady>:
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c54:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8002c58:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8002c5c:	4770      	bx	lr

08002c5e <LL_RCC_MSI_GetRange>:
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 8002c68:	28b0      	cmp	r0, #176	; 0xb0
 8002c6a:	bf28      	it	cs
 8002c6c:	20b0      	movcs	r0, #176	; 0xb0
 8002c6e:	4770      	bx	lr

08002c70 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002c70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c74:	0902      	lsrs	r2, r0, #4
 8002c76:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c7a:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8002c7e:	0100      	lsls	r0, r0, #4
 8002c80:	ea23 0302 	bic.w	r3, r3, r2
 8002c84:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8002c88:	4318      	orrs	r0, r3
 8002c8a:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
}
 8002c8e:	4770      	bx	lr

08002c90 <LL_RCC_PLL_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c94:	6818      	ldr	r0, [r3, #0]
}
 8002c96:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8002c9a:	4770      	bx	lr

08002c9c <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca0:	6813      	ldr	r3, [r2, #0]
 8002ca2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ca6:	6013      	str	r3, [r2, #0]
}
 8002ca8:	4770      	bx	lr

08002caa <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cae:	6813      	ldr	r3, [r2, #0]
 8002cb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cb4:	6013      	str	r3, [r2, #0]
}
 8002cb6:	4770      	bx	lr

08002cb8 <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbc:	6818      	ldr	r0, [r3, #0]
}
 8002cbe:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8002cc2:	4770      	bx	lr

08002cc4 <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8002cc4:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d023      	beq.n	8002d1c <RCC_PLL_GetFreqDomain_Q+0x58>
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d019      	beq.n	8002d0c <RCC_PLL_GetFreqDomain_Q+0x48>
      }

      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002cd8:	f7ff ffc1 	bl	8002c5e <LL_RCC_MSI_GetRange>
 8002cdc:	4a10      	ldr	r2, [pc, #64]	; (8002d20 <RCC_PLL_GetFreqDomain_Q+0x5c>)
 8002cde:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002ce2:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002ce6:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002cea:	68c3      	ldr	r3, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002cec:	68c1      	ldr	r1, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8002cee:	68c0      	ldr	r0, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cf0:	f3c3 2306 	ubfx	r3, r3, #8, #7
      break;
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002cf4:	4353      	muls	r3, r2
 8002cf6:	f3c0 6042 	ubfx	r0, r0, #25, #3
 8002cfa:	f3c1 1202 	ubfx	r2, r1, #4, #3
 8002cfe:	3201      	adds	r2, #1
 8002d00:	3001      	adds	r0, #1
 8002d02:	fbb3 f3f2 	udiv	r3, r3, r2
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8002d06:	fbb3 f0f0 	udiv	r0, r3, r0
 8002d0a:	bd08      	pop	{r3, pc}
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d0c:	f7ff ff86 	bl	8002c1c <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <RCC_PLL_GetFreqDomain_Q+0x60>)
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <RCC_PLL_GetFreqDomain_Q+0x64>)
 8002d14:	2801      	cmp	r0, #1
 8002d16:	bf08      	it	eq
 8002d18:	461a      	moveq	r2, r3
 8002d1a:	e7e4      	b.n	8002ce6 <RCC_PLL_GetFreqDomain_Q+0x22>
  switch (pllsource)
 8002d1c:	4a02      	ldr	r2, [pc, #8]	; (8002d28 <RCC_PLL_GetFreqDomain_Q+0x64>)
 8002d1e:	e7e2      	b.n	8002ce6 <RCC_PLL_GetFreqDomain_Q+0x22>
 8002d20:	08008138 	.word	0x08008138
 8002d24:	01e84800 	.word	0x01e84800
 8002d28:	00f42400 	.word	0x00f42400

08002d2c <RCC_PLL_GetFreqDomain_P>:
{
 8002d2c:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d023      	beq.n	8002d84 <RCC_PLL_GetFreqDomain_P+0x58>
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d019      	beq.n	8002d74 <RCC_PLL_GetFreqDomain_P+0x48>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002d40:	f7ff ff8d 	bl	8002c5e <LL_RCC_MSI_GetRange>
 8002d44:	4a10      	ldr	r2, [pc, #64]	; (8002d88 <RCC_PLL_GetFreqDomain_P+0x5c>)
 8002d46:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002d4a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d4e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002d52:	68c3      	ldr	r3, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d54:	68c1      	ldr	r1, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002d56:	68c0      	ldr	r0, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d58:	f3c3 2306 	ubfx	r3, r3, #8, #7
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d5c:	4353      	muls	r3, r2
 8002d5e:	f3c0 4044 	ubfx	r0, r0, #17, #5
 8002d62:	f3c1 1202 	ubfx	r2, r1, #4, #3
 8002d66:	3201      	adds	r2, #1
 8002d68:	3001      	adds	r0, #1
 8002d6a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8002d6e:	fbb3 f0f0 	udiv	r0, r3, r0
 8002d72:	bd08      	pop	{r3, pc}
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d74:	f7ff ff52 	bl	8002c1c <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 8002d78:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <RCC_PLL_GetFreqDomain_P+0x60>)
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <RCC_PLL_GetFreqDomain_P+0x64>)
 8002d7c:	2801      	cmp	r0, #1
 8002d7e:	bf08      	it	eq
 8002d80:	461a      	moveq	r2, r3
 8002d82:	e7e4      	b.n	8002d4e <RCC_PLL_GetFreqDomain_P+0x22>
  switch (pllsource)
 8002d84:	4a02      	ldr	r2, [pc, #8]	; (8002d90 <RCC_PLL_GetFreqDomain_P+0x64>)
 8002d86:	e7e2      	b.n	8002d4e <RCC_PLL_GetFreqDomain_P+0x22>
 8002d88:	08008138 	.word	0x08008138
 8002d8c:	01e84800 	.word	0x01e84800
 8002d90:	00f42400 	.word	0x00f42400

08002d94 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8002d94:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0303 	and.w	r3, r3, #3

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d023      	beq.n	8002dec <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d019      	beq.n	8002ddc <RCC_PLLSAI1_GetFreqDomain_Q+0x48>
        pllinputfreq = HSE_VALUE;
      }
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002da8:	f7ff ff59 	bl	8002c5e <LL_RCC_MSI_GetRange>
 8002dac:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <RCC_PLLSAI1_GetFreqDomain_Q+0x5c>)
 8002dae:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002db2:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8002db6:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002dba:	6903      	ldr	r3, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002dbc:	68c1      	ldr	r1, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8002dbe:	6900      	ldr	r0, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8002dc0:	f3c3 2306 	ubfx	r3, r3, #8, #7
      break;
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002dc4:	4353      	muls	r3, r2
 8002dc6:	f3c0 6042 	ubfx	r0, r0, #25, #3
 8002dca:	f3c1 1202 	ubfx	r2, r1, #4, #3
 8002dce:	3201      	adds	r2, #1
 8002dd0:	3001      	adds	r0, #1
 8002dd2:	fbb3 f3f2 	udiv	r3, r3, r2
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8002dd6:	fbb3 f0f0 	udiv	r0, r3, r0
 8002dda:	bd08      	pop	{r3, pc}
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ddc:	f7ff ff1e 	bl	8002c1c <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 8002de0:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <RCC_PLLSAI1_GetFreqDomain_Q+0x60>)
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <RCC_PLLSAI1_GetFreqDomain_Q+0x64>)
 8002de4:	2801      	cmp	r0, #1
 8002de6:	bf08      	it	eq
 8002de8:	461a      	moveq	r2, r3
 8002dea:	e7e4      	b.n	8002db6 <RCC_PLLSAI1_GetFreqDomain_Q+0x22>
  switch (pllsource)
 8002dec:	4a02      	ldr	r2, [pc, #8]	; (8002df8 <RCC_PLLSAI1_GetFreqDomain_Q+0x64>)
 8002dee:	e7e2      	b.n	8002db6 <RCC_PLLSAI1_GetFreqDomain_Q+0x22>
 8002df0:	08008138 	.word	0x08008138
 8002df4:	01e84800 	.word	0x01e84800
 8002df8:	00f42400 	.word	0x00f42400

08002dfc <HAL_RCCEx_PeriphCLKConfig>:
{
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dfe:	6805      	ldr	r5, [r0, #0]
 8002e00:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8002e04:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e06:	d00a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e08:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e0e:	f000 80d9 	beq.w	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002e12:	f200 80c5 	bhi.w	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80db 	beq.w	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8002e1c:	2501      	movs	r5, #1
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	0518      	lsls	r0, r3, #20
 8002e22:	d515      	bpl.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x54>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002e24:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002e28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e2a:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8002e2e:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8002e32:	42bb      	cmp	r3, r7
 8002e34:	d00c      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x54>
      HAL_PWR_EnableBkUpAccess();
 8002e36:	f7ff f9dd 	bl	80021f4 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e3a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002e3e:	2f00      	cmp	r7, #0
 8002e40:	f040 80fb 	bne.w	800303a <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8002e44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	07da      	lsls	r2, r3, #31
 8002e54:	d509      	bpl.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5a:	69a0      	ldr	r0, [r4, #24]
 8002e5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e60:	f022 0203 	bic.w	r2, r2, #3
 8002e64:	4302      	orrs	r2, r0
 8002e66:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e6a:	079f      	lsls	r7, r3, #30
 8002e6c:	d509      	bpl.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x86>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e72:	69e0      	ldr	r0, [r4, #28]
 8002e74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e7c:	4302      	orrs	r2, r0
 8002e7e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e82:	06de      	lsls	r6, r3, #27
 8002e84:	d50c      	bpl.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e88:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002e8c:	0c31      	lsrs	r1, r6, #16
 8002e8e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002e92:	0409      	lsls	r1, r1, #16
 8002e94:	ea22 0201 	bic.w	r2, r2, r1
 8002e98:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8002e9c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ea0:	0698      	lsls	r0, r3, #26
 8002ea2:	d50c      	bpl.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ea6:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002eaa:	0c31      	lsrs	r1, r6, #16
 8002eac:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002eb0:	0409      	lsls	r1, r1, #16
 8002eb2:	ea22 0201 	bic.w	r2, r2, r1
 8002eb6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8002eba:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ebe:	0759      	lsls	r1, r3, #29
 8002ec0:	d502      	bpl.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ec2:	6a20      	ldr	r0, [r4, #32]
 8002ec4:	f7ff fed4 	bl	8002c70 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	071a      	lsls	r2, r3, #28
 8002ecc:	d502      	bpl.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ece:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002ed0:	f7ff fece 	bl	8002c70 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	05db      	lsls	r3, r3, #23
 8002ed8:	d511      	bpl.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x102>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ede:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ee0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ee4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002ee8:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eea:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8002eee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002ef2:	f040 80ca 	bne.w	800308a <HAL_RCCEx_PeriphCLKConfig+0x28e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002ef6:	68d3      	ldr	r3, [r2, #12]
 8002ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efc:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002efe:	6826      	ldr	r6, [r4, #0]
 8002f00:	05b7      	lsls	r7, r6, #22
 8002f02:	d51a      	bpl.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002f06:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	d003      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002f10:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 8002f14:	f040 80f1 	bne.w	80030fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002f18:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8002f1c:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8002f20:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f22:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002f26:	bf08      	it	eq
 8002f28:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002f2c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8002f30:	bf02      	ittt	eq
 8002f32:	68d3      	ldreq	r3, [r2, #12]
 8002f34:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8002f38:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f3a:	0570      	lsls	r0, r6, #21
 8002f3c:	d511      	bpl.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f42:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002f44:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f48:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002f4c:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002f4e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002f52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002f56:	f040 80de 	bne.w	8003116 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f5a:	68d3      	ldr	r3, [r2, #12]
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002f62:	6822      	ldr	r2, [r4, #0]
 8002f64:	04d1      	lsls	r1, r2, #19
 8002f66:	d509      	bpl.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x180>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f6c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002f6e:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8002f72:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f76:	4303      	orrs	r3, r0
 8002f78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002f7c:	0493      	lsls	r3, r2, #18
 8002f7e:	d50d      	bpl.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f84:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002f86:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002f88:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f90:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002f92:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002f94:	f023 0303 	bic.w	r3, r3, #3
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->Sai1ClockSelection)
 8002fa0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002fa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fa8:	f47f af38 	bne.w	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x20>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002fb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002fb6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	e72c      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x22>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc8:	68d3      	ldr	r3, [r2, #12]
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fce:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 8002fd0:	e7ec      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  __HAL_RCC_PLLSAI1_DISABLE();
 8002fd2:	f7ff fe6a 	bl	8002caa <LL_RCC_PLLSAI1_Disable>
  tickstart = HAL_GetTick();
 8002fd6:	f7fd ff8f 	bl	8000ef8 <HAL_GetTick>
 8002fda:	4605      	mov	r5, r0
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fdc:	f7ff fe6c 	bl	8002cb8 <LL_RCC_PLLSAI1_IsReady>
 8002fe0:	b9a0      	cbnz	r0, 800300c <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe6:	6861      	ldr	r1, [r4, #4]
 8002fe8:	6913      	ldr	r3, [r2, #16]
 8002fea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ff2:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002ff4:	6913      	ldr	r3, [r2, #16]
 8002ff6:	68a1      	ldr	r1, [r4, #8]
 8002ff8:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 8003000:	f7ff fe4c 	bl	8002c9c <LL_RCC_PLLSAI1_Enable>
    tickstart = HAL_GetTick();
 8003004:	f7fd ff78 	bl	8000ef8 <HAL_GetTick>
 8003008:	4605      	mov	r5, r0
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800300a:	e00b      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x228>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800300c:	f7fd ff74 	bl	8000ef8 <HAL_GetTick>
 8003010:	1b40      	subs	r0, r0, r5
 8003012:	2802      	cmp	r0, #2
 8003014:	d9e2      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
{
 8003016:	2503      	movs	r5, #3
 8003018:	e701      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x22>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800301a:	f7fd ff6d 	bl	8000ef8 <HAL_GetTick>
 800301e:	1b40      	subs	r0, r0, r5
 8003020:	2802      	cmp	r0, #2
 8003022:	d8f8      	bhi.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003024:	f7ff fe48 	bl	8002cb8 <LL_RCC_PLLSAI1_IsReady>
 8003028:	2801      	cmp	r0, #1
 800302a:	d1f6      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800302c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003030:	6961      	ldr	r1, [r4, #20]
 8003032:	6913      	ldr	r3, [r2, #16]
 8003034:	430b      	orrs	r3, r1
 8003036:	6113      	str	r3, [r2, #16]
    if (ret == HAL_OK)
 8003038:	e7b8      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800303a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800303e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003042:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003046:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800304a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800304e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003052:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003058:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 800305a:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800305e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003062:	07d9      	lsls	r1, r3, #31
 8003064:	f57f aef4 	bpl.w	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x54>
          tickstart = HAL_GetTick();
 8003068:	f7fd ff46 	bl	8000ef8 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f241 3788 	movw	r7, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8003070:	4606      	mov	r6, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8003072:	f7ff fddf 	bl	8002c34 <LL_RCC_LSE_IsReady>
 8003076:	2801      	cmp	r0, #1
 8003078:	f43f aeea 	beq.w	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x54>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fd ff3c 	bl	8000ef8 <HAL_GetTick>
 8003080:	1b80      	subs	r0, r0, r6
 8003082:	42b8      	cmp	r0, r7
 8003084:	d9f5      	bls.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x276>
              ret = HAL_TIMEOUT;
 8003086:	2503      	movs	r5, #3
 8003088:	e6e2      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x54>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800308a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800308e:	f47f af36 	bne.w	8002efe <HAL_RCCEx_PeriphCLKConfig+0x102>
  __HAL_RCC_PLLSAI1_DISABLE();
 8003092:	f7ff fe0a 	bl	8002caa <LL_RCC_PLLSAI1_Disable>
  tickstart = HAL_GetTick();
 8003096:	f7fd ff2f 	bl	8000ef8 <HAL_GetTick>
 800309a:	4606      	mov	r6, r0
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800309c:	f7ff fe0c 	bl	8002cb8 <LL_RCC_PLLSAI1_IsReady>
 80030a0:	b9a0      	cbnz	r0, 80030cc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80030a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a6:	6861      	ldr	r1, [r4, #4]
 80030a8:	6913      	ldr	r3, [r2, #16]
 80030aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80030b2:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80030b4:	6913      	ldr	r3, [r2, #16]
 80030b6:	68e1      	ldr	r1, [r4, #12]
 80030b8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80030bc:	430b      	orrs	r3, r1
 80030be:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 80030c0:	f7ff fdec 	bl	8002c9c <LL_RCC_PLLSAI1_Enable>
    tickstart = HAL_GetTick();
 80030c4:	f7fd ff18 	bl	8000ef8 <HAL_GetTick>
 80030c8:	4606      	mov	r6, r0
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030ca:	e00b      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030cc:	f7fd ff14 	bl	8000ef8 <HAL_GetTick>
 80030d0:	1b80      	subs	r0, r0, r6
 80030d2:	2802      	cmp	r0, #2
 80030d4:	d9e2      	bls.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
              ret = HAL_TIMEOUT;
 80030d6:	2503      	movs	r5, #3
 80030d8:	e711      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x102>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030da:	f7fd ff0d 	bl	8000ef8 <HAL_GetTick>
 80030de:	1b80      	subs	r0, r0, r6
 80030e0:	2802      	cmp	r0, #2
 80030e2:	d8f8      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030e4:	f7ff fde8 	bl	8002cb8 <LL_RCC_PLLSAI1_IsReady>
 80030e8:	2801      	cmp	r0, #1
 80030ea:	d1f6      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2de>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f0:	6961      	ldr	r1, [r4, #20]
 80030f2:	6913      	ldr	r3, [r2, #16]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6113      	str	r3, [r2, #16]
      if (ret != HAL_OK)
 80030f8:	e701      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x102>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80030fa:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80030fe:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8003102:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003106:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800310a:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800310e:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 8003112:	4301      	orrs	r1, r0
 8003114:	e705      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x126>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003116:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800311a:	f47f af22 	bne.w	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  __HAL_RCC_PLLSAI1_DISABLE();
 800311e:	f7ff fdc4 	bl	8002caa <LL_RCC_PLLSAI1_Disable>
  tickstart = HAL_GetTick();
 8003122:	f7fd fee9 	bl	8000ef8 <HAL_GetTick>
 8003126:	4606      	mov	r6, r0
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003128:	f7ff fdc6 	bl	8002cb8 <LL_RCC_PLLSAI1_IsReady>
 800312c:	b9a0      	cbnz	r0, 8003158 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800312e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003132:	6861      	ldr	r1, [r4, #4]
 8003134:	6913      	ldr	r3, [r2, #16]
 8003136:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800313a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800313e:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003140:	6913      	ldr	r3, [r2, #16]
 8003142:	6921      	ldr	r1, [r4, #16]
 8003144:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8003148:	430b      	orrs	r3, r1
 800314a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 800314c:	f7ff fda6 	bl	8002c9c <LL_RCC_PLLSAI1_Enable>
    tickstart = HAL_GetTick();
 8003150:	f7fd fed2 	bl	8000ef8 <HAL_GetTick>
 8003154:	4606      	mov	r6, r0
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003156:	e00b      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x374>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003158:	f7fd fece 	bl	8000ef8 <HAL_GetTick>
 800315c:	1b80      	subs	r0, r0, r6
 800315e:	2802      	cmp	r0, #2
 8003160:	d9e2      	bls.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x32c>
              ret = HAL_TIMEOUT;
 8003162:	2503      	movs	r5, #3
 8003164:	e6fd      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x166>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003166:	f7fd fec7 	bl	8000ef8 <HAL_GetTick>
 800316a:	1b80      	subs	r0, r0, r6
 800316c:	2802      	cmp	r0, #2
 800316e:	d8f8      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x366>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003170:	f7ff fda2 	bl	8002cb8 <LL_RCC_PLLSAI1_IsReady>
 8003174:	2801      	cmp	r0, #1
 8003176:	d1f6      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800317c:	6961      	ldr	r1, [r4, #20]
 800317e:	6913      	ldr	r3, [r2, #16]
 8003180:	430b      	orrs	r3, r1
 8003182:	6113      	str	r3, [r2, #16]
      if (ret != HAL_OK)
 8003184:	e6ed      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x166>

08003186 <HAL_RCCEx_GetRngCLKSource>:
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 800318e:	f010 4040 	ands.w	r0, r0, #3221225472	; 0xc0000000
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8003192:	bf02      	ittt	eq
 8003194:	f8d3 0088 	ldreq.w	r0, [r3, #136]	; 0x88
 8003198:	f000 6040 	andeq.w	r0, r0, #201326592	; 0xc000000
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 800319c:	f040 5080 	orreq.w	r0, r0, #268435456	; 0x10000000
}
 80031a0:	4770      	bx	lr

080031a2 <HAL_RCCEx_GetPeriphCLKConfig>:
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 80031a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
{
 80031a6:	b508      	push	{r3, lr}
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SMPS;
 80031a8:	f643 737f 	movw	r3, #16255	; 0x3f7f
 80031ac:	6003      	str	r3, [r0, #0]
 80031ae:	690b      	ldr	r3, [r1, #16]
 80031b0:	f3c3 2306 	ubfx	r3, r3, #8, #7
  PeriphClkInit->PLLSAI1.PLLN = LL_RCC_PLLSAI1_GetN();
 80031b4:	6043      	str	r3, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 80031b6:	690b      	ldr	r3, [r1, #16]
 80031b8:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
  PeriphClkInit->PLLSAI1.PLLP = LL_RCC_PLLSAI1_GetP();
 80031bc:	6083      	str	r3, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 80031be:	690b      	ldr	r3, [r1, #16]
 80031c0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
  PeriphClkInit->PLLSAI1.PLLR = LL_RCC_PLLSAI1_GetR();
 80031c4:	6103      	str	r3, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 80031c6:	690b      	ldr	r3, [r1, #16]
 80031c8:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
  PeriphClkInit->PLLSAI1.PLLQ = LL_RCC_PLLSAI1_GetQ();
 80031cc:	60c3      	str	r3, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80031ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80031d2:	f003 0303 	and.w	r3, r3, #3
  PeriphClkInit->Usart1ClockSelection   = __HAL_RCC_GET_USART1_SOURCE();
 80031d6:	6183      	str	r3, [r0, #24]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80031d8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80031dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
  PeriphClkInit->Lpuart1ClockSelection  = __HAL_RCC_GET_LPUART1_SOURCE();
 80031e0:	61c3      	str	r3, [r0, #28]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 80031e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ec:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
  PeriphClkInit->I2c1ClockSelection     = __HAL_RCC_GET_I2C1_SOURCE();
 80031f0:	6203      	str	r3, [r0, #32]
 80031f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  PeriphClkInit->I2c3ClockSelection     = __HAL_RCC_GET_I2C3_SOURCE();
 8003200:	6243      	str	r3, [r0, #36]	; 0x24
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8003202:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003206:	0c1b      	lsrs	r3, r3, #16
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
  PeriphClkInit->Lptim1ClockSelection   = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003210:	6283      	str	r3, [r0, #40]	; 0x28
 8003212:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003216:	0c1b      	lsrs	r3, r3, #16
 8003218:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800321c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  PeriphClkInit->Lptim2ClockSelection   = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003220:	62c3      	str	r3, [r0, #44]	; 0x2c
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8003222:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003226:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
  PeriphClkInit->Sai1ClockSelection     = __HAL_RCC_GET_SAI1_SOURCE();
 800322a:	6303      	str	r3, [r0, #48]	; 0x30
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800322c:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 8003230:	f403 7340 	and.w	r3, r3, #768	; 0x300
  PeriphClkInit->RTCClockSelection      = __HAL_RCC_GET_RTC_SOURCE();
 8003234:	6403      	str	r3, [r0, #64]	; 0x40
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8003236:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800323a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
  PeriphClkInit->UsbClockSelection      = __HAL_RCC_GET_USB_SOURCE();
 800323e:	6343      	str	r3, [r0, #52]	; 0x34
{
 8003240:	4602      	mov	r2, r0
  PeriphClkInit->RngClockSelection      = HAL_RCCEx_GetRngCLKSource();
 8003242:	f7ff ffa0 	bl	8003186 <HAL_RCCEx_GetRngCLKSource>
 8003246:	6390      	str	r0, [r2, #56]	; 0x38
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8003248:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800324c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  PeriphClkInit->AdcClockSelection      = __HAL_RCC_GET_ADC_SOURCE();
 8003250:	63d3      	str	r3, [r2, #60]	; 0x3c
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 8003252:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8003256:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  PeriphClkInit->RFWakeUpClockSelection = __HAL_RCC_GET_RFWAKEUP_SOURCE();
 800325a:	6453      	str	r3, [r2, #68]	; 0x44
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 800325c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800325e:	f003 0330 	and.w	r3, r3, #48	; 0x30
  PeriphClkInit->SmpsDivSelection       = __HAL_RCC_GET_SMPS_DIV();
 8003262:	64d3      	str	r3, [r2, #76]	; 0x4c
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL));
 8003264:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003266:	f003 0303 	and.w	r3, r3, #3
  PeriphClkInit->SmpsClockSelection     = __HAL_RCC_GET_SMPS_SOURCE();
 800326a:	6493      	str	r3, [r2, #72]	; 0x48
}
 800326c:	bd08      	pop	{r3, pc}
	...

08003270 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8003270:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 8003272:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003276:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800327a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800327c:	d122      	bne.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800327e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003282:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 8003286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800328a:	d108      	bne.n	800329e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      if (LL_RCC_LSE_IsReady() == 1U)
 800328c:	f7ff fcd2 	bl	8002c34 <LL_RCC_LSE_IsReady>
 8003290:	2801      	cmp	r0, #1
 8003292:	d001      	beq.n	8003298 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 8003294:	2000      	movs	r0, #0
 8003296:	e001      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
        frequency = LSE_VALUE;
 8003298:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
 800329c:	bd10      	pop	{r4, pc}
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 800329e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a2:	d10a      	bne.n	80032ba <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80032a4:	f7ff fccd 	bl	8002c42 <LL_RCC_LSI1_IsReady>
 80032a8:	4602      	mov	r2, r0
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80032aa:	f7ff fcd1 	bl	8002c50 <LL_RCC_LSI2_IsReady>
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80032ae:	2a01      	cmp	r2, #1
 80032b0:	f040 81a5 	bne.w	80035fe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
        frequency = LSI_VALUE;
 80032b4:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 80032b8:	e7f0      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 80032ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032be:	d1e9      	bne.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      frequency = HSE_VALUE / 32U;
 80032c0:	48ac      	ldr	r0, [pc, #688]	; (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80032c2:	e7eb      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80032c4:	2840      	cmp	r0, #64	; 0x40
 80032c6:	d13c      	bne.n	8003342 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 80032c8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80032cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 80032d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d4:	f000 811d 	beq.w	8003512 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80032d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032dc:	f000 816e 	beq.w	80035bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80032e0:	b113      	cbz	r3, 80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 80032e2:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80032e6:	e7d9      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80032e8:	f7ff fce6 	bl	8002cb8 <LL_RCC_PLLSAI1_IsReady>
 80032ec:	2801      	cmp	r0, #1
 80032ee:	d1d1      	bne.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80032f0:	68e3      	ldr	r3, [r4, #12]
 80032f2:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d021      	beq.n	800333e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d017      	beq.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80032fe:	f7ff fcae 	bl	8002c5e <LL_RCC_MSI_GetRange>
 8003302:	4a9d      	ldr	r2, [pc, #628]	; (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003304:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003308:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 800330c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003310:	6910      	ldr	r0, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003312:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8003314:	6912      	ldr	r2, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003316:	f3c0 2006 	ubfx	r0, r0, #8, #7
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800331a:	4358      	muls	r0, r3
 800331c:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8003320:	3301      	adds	r3, #1
 8003322:	fbb0 f0f3 	udiv	r0, r0, r3
 8003326:	f3c2 4344 	ubfx	r3, r2, #17, #5
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800332a:	3301      	adds	r3, #1
 800332c:	e01e      	b.n	800336c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800332e:	f7ff fc75 	bl	8002c1c <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 8003332:	4a92      	ldr	r2, [pc, #584]	; (800357c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8003334:	4b92      	ldr	r3, [pc, #584]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8003336:	2801      	cmp	r0, #1
 8003338:	bf18      	it	ne
 800333a:	4613      	movne	r3, r2
 800333c:	e7e6      	b.n	800330c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  switch (pllsource)
 800333e:	4b90      	ldr	r3, [pc, #576]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8003340:	e7e4      	b.n	800330c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8003342:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003346:	d134      	bne.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 8003348:	f7ff ff1d 	bl	8003186 <HAL_RCCEx_GetRngCLKSource>
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 800334c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003350:	d0a8      	beq.n	80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 8003352:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8003356:	d099      	beq.n	800328c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 8003358:	f1b0 5fc0 	cmp.w	r0, #402653184	; 0x18000000
 800335c:	d109      	bne.n	8003372 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      if (LL_RCC_PLL_IsReady() == 1U)
 800335e:	f7ff fc97 	bl	8002c90 <LL_RCC_PLL_IsReady>
 8003362:	2801      	cmp	r0, #1
 8003364:	d196      	bne.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 8003366:	f7ff fcad 	bl	8002cc4 <RCC_PLL_GetFreqDomain_Q>
 800336a:	2303      	movs	r3, #3
 800336c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003370:	e794      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 8003372:	f1b0 5fe0 	cmp.w	r0, #469762048	; 0x1c000000
 8003376:	d10a      	bne.n	800338e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	079c      	lsls	r4, r3, #30
 800337c:	d58a      	bpl.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 800337e:	f7ff fc6e 	bl	8002c5e <LL_RCC_MSI_GetRange>
 8003382:	4b7d      	ldr	r3, [pc, #500]	; (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003384:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003388:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800338c:	e7ed      	b.n	800336a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 800338e:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
 8003392:	d108      	bne.n	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8003394:	f7ff fc90 	bl	8002cb8 <LL_RCC_PLLSAI1_IsReady>
 8003398:	2801      	cmp	r0, #1
 800339a:	f47f af7b 	bne.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
}
 800339e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 80033a2:	f7ff bcf7 	b.w	8002d94 <RCC_PLLSAI1_GetFreqDomain_Q>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80033a6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80033aa:	0798      	lsls	r0, r3, #30
 80033ac:	f100 810b 	bmi.w	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80033b0:	e770      	b.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 80033b2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80033b6:	d128      	bne.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 80033b8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80033bc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 80033c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033c4:	d00c      	beq.n	80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80033c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80033ca:	d012      	beq.n	80033f2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80033cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033d0:	d0e0      	beq.n	8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80033d2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80033d6:	079a      	lsls	r2, r3, #30
 80033d8:	f57f af5c 	bpl.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = HSI48_VALUE;
 80033dc:	4869      	ldr	r0, [pc, #420]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 80033de:	e75d      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
        if (LL_RCC_PLL_IsReady() == 1U)
 80033e0:	f7ff fc56 	bl	8002c90 <LL_RCC_PLL_IsReady>
 80033e4:	2801      	cmp	r0, #1
 80033e6:	f47f af55 	bne.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
}
 80033ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          frequency = RCC_PLL_GetFreqDomain_Q();
 80033ee:	f7ff bc69 	b.w	8002cc4 <RCC_PLL_GetFreqDomain_Q>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	0799      	lsls	r1, r3, #30
 80033f6:	f57f af4d 	bpl.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80033fa:	f7ff fc30 	bl	8002c5e <LL_RCC_MSI_GetRange>
 80033fe:	4b5e      	ldr	r3, [pc, #376]	; (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003400:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003404:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003408:	e748      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800340a:	2801      	cmp	r0, #1
 800340c:	d123      	bne.n	8003456 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800340e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003412:	f003 0303 	and.w	r3, r3, #3
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 8003416:	2b02      	cmp	r3, #2
 8003418:	f000 80d0 	beq.w	80035bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800341c:	2b03      	cmp	r3, #3
 800341e:	f43f af35 	beq.w	800328c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8003422:	2b01      	cmp	r3, #1
 8003424:	d103      	bne.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
}
 8003426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        frequency = HAL_RCC_GetSysClockFreq();
 800342a:	f7fe bfcd 	b.w	80023c8 <HAL_RCC_GetSysClockFreq>
        frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 800342e:	f7fe ffcb 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003432:	68a2      	ldr	r2, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003434:	68a3      	ldr	r3, [r4, #8]
 8003436:	4954      	ldr	r1, [pc, #336]	; (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8003438:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800343c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003440:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003444:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8003448:	4a50      	ldr	r2, [pc, #320]	; (800358c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 800344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	40d8      	lsrs	r0, r3
        break;
 8003454:	e722      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8003456:	2802      	cmp	r0, #2
 8003458:	d11c      	bne.n	8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800345a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800345e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 8003462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003466:	f000 80a9 	beq.w	80035bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800346a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800346e:	f43f af0d 	beq.w	800328c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003476:	d0d6      	beq.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8003478:	f7fe ffa6 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800347c:	68a2      	ldr	r2, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800347e:	68a3      	ldr	r3, [r4, #8]
 8003480:	4941      	ldr	r1, [pc, #260]	; (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8003482:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003486:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800348a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800348e:	fbb0 f0f2 	udiv	r0, r0, r2
 8003492:	e7d9      	b.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003494:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003498:	d144      	bne.n	8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 800349a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800349e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 80034a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a6:	d034      	beq.n	8003512 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80034a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034ac:	d0bb      	beq.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80034ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b2:	f47f aeef 	bne.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80034b6:	f7ff fbff 	bl	8002cb8 <LL_RCC_PLLSAI1_IsReady>
 80034ba:	2801      	cmp	r0, #1
 80034bc:	f47f aeea 	bne.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80034c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d01f      	beq.n	800350e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d015      	beq.n	80034fe <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80034d2:	f7ff fbc4 	bl	8002c5e <LL_RCC_MSI_GetRange>
 80034d6:	4a28      	ldr	r2, [pc, #160]	; (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80034d8:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80034dc:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 80034e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e4:	6910      	ldr	r0, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80034e6:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 80034e8:	6912      	ldr	r2, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 80034ea:	f3c0 2006 	ubfx	r0, r0, #8, #7
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80034ee:	4358      	muls	r0, r3
 80034f0:	f3c1 1302 	ubfx	r3, r1, #4, #3
 80034f4:	3301      	adds	r3, #1
 80034f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80034fa:	0f53      	lsrs	r3, r2, #29
 80034fc:	e715      	b.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80034fe:	f7ff fb8d 	bl	8002c1c <LL_RCC_HSE_IsEnabledDiv2>
        pllinputfreq = HSE_VALUE;
 8003502:	4a1e      	ldr	r2, [pc, #120]	; (800357c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8003506:	2801      	cmp	r0, #1
 8003508:	bf18      	it	ne
 800350a:	4613      	movne	r3, r2
 800350c:	e7e8      	b.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
  switch (pllsource)
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8003510:	e7e6      	b.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
        if (LL_RCC_PLL_IsReady() == 1U)
 8003512:	f7ff fbbd 	bl	8002c90 <LL_RCC_PLL_IsReady>
 8003516:	2801      	cmp	r0, #1
 8003518:	f47f aebc 	bne.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
}
 800351c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          frequency = RCC_PLL_GetFreqDomain_P();
 8003520:	f7ff bc04 	b.w	8002d2c <RCC_PLL_GetFreqDomain_P>
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8003524:	2804      	cmp	r0, #4
 8003526:	d115      	bne.n	8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8003528:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 800352e:	091b      	lsrs	r3, r3, #4
 8003530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003534:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8003538:	4293      	cmp	r3, r2
 800353a:	f43f af74 	beq.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 800353e:	f502 7280 	add.w	r2, r2, #256	; 0x100
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 8003542:	4293      	cmp	r3, r2
 8003544:	d03a      	beq.n	80035bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8003546:	f7fe ff3f 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800354a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354e:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	e795      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8003554:	2808      	cmp	r0, #8
 8003556:	d11f      	bne.n	8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8003558:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 800355c:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003564:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003568:	4293      	cmp	r3, r2
 800356a:	f43f af5c 	beq.w	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 800356e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003572:	e7e6      	b.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003574:	000f4240 	.word	0x000f4240
 8003578:	08008138 	.word	0x08008138
 800357c:	01e84800 	.word	0x01e84800
 8003580:	00f42400 	.word	0x00f42400
 8003584:	02dc6c00 	.word	0x02dc6c00
 8003588:	08008178 	.word	0x08008178
 800358c:	08008218 	.word	0x08008218
 8003590:	00030100 	.word	0x00030100
 8003594:	00301000 	.word	0x00301000
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8003598:	2810      	cmp	r0, #16
 800359a:	d11b      	bne.n	80035d4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 800359c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 80035a0:	4a4f      	ldr	r2, [pc, #316]	; (80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>)
 80035a2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80035a6:	0c1b      	lsrs	r3, r3, #16
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80035b0:	4293      	cmp	r3, r2
 80035b2:	f43f ae77 	beq.w	80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 80035b6:	4a4b      	ldr	r2, [pc, #300]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d106      	bne.n	80035ca <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        if (LL_RCC_HSI_IsReady() == 1U)
 80035bc:	f7ff fb34 	bl	8002c28 <LL_RCC_HSI_IsReady>
 80035c0:	2801      	cmp	r0, #1
 80035c2:	f47f ae67 	bne.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = HSI_VALUE;
 80035c6:	4848      	ldr	r0, [pc, #288]	; (80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 80035c8:	e668      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 80035ca:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 80035ce:	f47f af53 	bne.w	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80035d2:	e65b      	b.n	800328c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80035d4:	2820      	cmp	r0, #32
 80035d6:	d116      	bne.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80035d8:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 80035dc:	4a43      	ldr	r2, [pc, #268]	; (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80035de:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80035ec:	4293      	cmp	r3, r2
 80035ee:	f43f ae59 	beq.w	80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 80035f2:	4a3f      	ldr	r2, [pc, #252]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d0e1      	beq.n	80035bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 80035f8:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80035fc:	e7e7      	b.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80035fe:	2801      	cmp	r0, #1
 8003600:	f47f ae48 	bne.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8003604:	e656      	b.n	80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 8003606:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800360a:	d110      	bne.n	800362e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 8003618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800361c:	f43f ae36 	beq.w	800328c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 8003620:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003624:	f47f ae36 	bne.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      frequency = HSE_VALUE / 1024U;
 8003628:	f647 2012 	movw	r0, #31250	; 0x7a12
  return (frequency);
 800362c:	e636      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 800362e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003632:	f47f ae2f 	bne.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8003636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 800363a:	f3c2 1201 	ubfx	r2, r2, #4, #2
 800363e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 8003640:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003644:	d10c      	bne.n	8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
      if (LL_RCC_HSI_IsReady() == 1U)
 8003646:	f7ff faef 	bl	8002c28 <LL_RCC_HSI_IsReady>
 800364a:	2801      	cmp	r0, #1
 800364c:	f47f ae22 	bne.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8003650:	2318      	movs	r3, #24
 8003652:	435a      	muls	r2, r3
 8003654:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003656:	4824      	ldr	r0, [pc, #144]	; (80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>)
 8003658:	589b      	ldr	r3, [r3, r2]
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 800365a:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800365e:	e01b      	b.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8003660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003664:	d10a      	bne.n	800367c <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003666:	680b      	ldr	r3, [r1, #0]
 8003668:	039b      	lsls	r3, r3, #14
 800366a:	f57f ae13 	bpl.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 800366e:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003670:	4821      	ldr	r0, [pc, #132]	; (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003672:	2118      	movs	r1, #24
 8003674:	fb01 3202 	mla	r2, r1, r2, r3
 8003678:	6953      	ldr	r3, [r2, #20]
 800367a:	e7ee      	b.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 800367c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003680:	f47f ae08 	bne.w	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      switch (LL_RCC_MSI_GetRange())
 8003684:	f7ff faeb 	bl	8002c5e <LL_RCC_MSI_GetRange>
 8003688:	28a0      	cmp	r0, #160	; 0xa0
 800368a:	d021      	beq.n	80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800368c:	d806      	bhi.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 800368e:	2880      	cmp	r0, #128	; 0x80
 8003690:	d00e      	beq.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8003692:	2890      	cmp	r0, #144	; 0x90
 8003694:	d014      	beq.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003696:	2000      	movs	r0, #0
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8003698:	0840      	lsrs	r0, r0, #1
 800369a:	e5ff      	b.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
      switch (LL_RCC_MSI_GetRange())
 800369c:	28b0      	cmp	r0, #176	; 0xb0
 800369e:	d1fa      	bne.n	8003696 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 80036a0:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80036a2:	2118      	movs	r1, #24
 80036a4:	fb01 3202 	mla	r2, r1, r2, r3
 80036a8:	4914      	ldr	r1, [pc, #80]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80036aa:	6853      	ldr	r3, [r2, #4]
 80036ac:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80036ae:	e7d4      	b.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 80036b0:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80036b2:	2118      	movs	r1, #24
 80036b4:	fb01 3202 	mla	r2, r1, r2, r3
 80036b8:	4910      	ldr	r1, [pc, #64]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80036ba:	6913      	ldr	r3, [r2, #16]
 80036bc:	6a08      	ldr	r0, [r1, #32]
 80036be:	e7cc      	b.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80036c2:	2118      	movs	r1, #24
 80036c4:	fb01 3202 	mla	r2, r1, r2, r3
 80036c8:	490c      	ldr	r1, [pc, #48]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80036ca:	68d3      	ldr	r3, [r2, #12]
 80036cc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80036ce:	e7c4      	b.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80036d2:	2118      	movs	r1, #24
 80036d4:	fb01 3202 	mla	r2, r1, r2, r3
 80036d8:	4908      	ldr	r1, [pc, #32]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80036da:	6893      	ldr	r3, [r2, #8]
 80036dc:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80036de:	e7bc      	b.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 80036e0:	000c0004 	.word	0x000c0004
 80036e4:	000c0008 	.word	0x000c0008
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	00300010 	.word	0x00300010
 80036f0:	00300020 	.word	0x00300020
 80036f4:	080081b8 	.word	0x080081b8
 80036f8:	01e84800 	.word	0x01e84800
 80036fc:	08008138 	.word	0x08008138

08003700 <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
  {
    tmpIT |= SAI_IT_FREQ;
 8003700:	2901      	cmp	r1, #1
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003702:	6c41      	ldr	r1, [r0, #68]	; 0x44
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003704:	6842      	ldr	r2, [r0, #4]
    tmpIT |= SAI_IT_FREQ;
 8003706:	bf14      	ite	ne
 8003708:	2301      	movne	r3, #1
 800370a:	2309      	moveq	r3, #9
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800370c:	2908      	cmp	r1, #8
 800370e:	d105      	bne.n	800371c <SAI_InterruptFlag+0x1c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003710:	f022 0102 	bic.w	r1, r2, #2
 8003714:	2901      	cmp	r1, #1
  {
    tmpIT |= SAI_IT_CNRDY;
 8003716:	bf08      	it	eq
 8003718:	f043 0310 	orreq.w	r3, r3, #16
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800371c:	3a02      	subs	r2, #2
 800371e:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8003720:	bf94      	ite	ls
 8003722:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8003726:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 800372a:	4770      	bx	lr

0800372c <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800372e:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	f641 3358 	movw	r3, #7000	; 0x1b58
 8003736:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 800373a:	680b      	ldr	r3, [r1, #0]
 800373c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003740:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8003742:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8003744:	b93a      	cbnz	r2, 8003756 <SAI_Disable+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003746:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800374a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 8003752:	2003      	movs	r0, #3
      break;
 8003754:	4770      	bx	lr
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8003756:	680b      	ldr	r3, [r1, #0]
 8003758:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    count--;
 800375c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8003760:	d1f0      	bne.n	8003744 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003762:	4618      	mov	r0, r3

  return status;
}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	2000007c 	.word	0x2000007c

0800376c <HAL_SAI_MspInit>:
}
 800376c:	4770      	bx	lr
	...

08003770 <HAL_SAI_Init>:
{
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hsai == NULL)
 8003772:	4604      	mov	r4, r0
 8003774:	b910      	cbnz	r0, 800377c <HAL_SAI_Init+0xc>
    return HAL_ERROR;
 8003776:	2501      	movs	r5, #1
}
 8003778:	4628      	mov	r0, r5
 800377a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800377c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003780:	2b01      	cmp	r3, #1
 8003782:	d109      	bne.n	8003798 <HAL_SAI_Init+0x28>
    if ((hsai->Instance != SAI1_Block_A) ||
 8003784:	6802      	ldr	r2, [r0, #0]
 8003786:	4b6d      	ldr	r3, [pc, #436]	; (800393c <HAL_SAI_Init+0x1cc>)
 8003788:	429a      	cmp	r2, r3
 800378a:	d1f4      	bne.n	8003776 <HAL_SAI_Init+0x6>
 800378c:	6843      	ldr	r3, [r0, #4]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d1f1      	bne.n	8003776 <HAL_SAI_Init+0x6>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8003792:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ee      	bne.n	8003776 <HAL_SAI_Init+0x6>
  if (hsai->State == HAL_SAI_STATE_RESET)
 8003798:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800379c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037a0:	b923      	cbnz	r3, 80037ac <HAL_SAI_Init+0x3c>
    hsai->Lock = HAL_UNLOCKED;
 80037a2:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 80037a6:	4620      	mov	r0, r4
 80037a8:	f7ff ffe0 	bl	800376c <HAL_SAI_MspInit>
  if (SAI_Disable(hsai) != HAL_OK)
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7ff ffbd 	bl	800372c <SAI_Disable>
 80037b2:	4605      	mov	r5, r0
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d1de      	bne.n	8003776 <HAL_SAI_Init+0x6>
  hsai->State = HAL_SAI_STATE_BUSY;
 80037b8:	2302      	movs	r3, #2
 80037ba:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.Synchro)
 80037be:	68a3      	ldr	r3, [r4, #8]
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80037c0:	2b01      	cmp	r3, #1
  SAI1->GCR = 0;
 80037c2:	4b5f      	ldr	r3, [pc, #380]	; (8003940 <HAL_SAI_Init+0x1d0>)
 80037c4:	6018      	str	r0, [r3, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80037c6:	6a23      	ldr	r3, [r4, #32]
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80037c8:	bf14      	ite	ne
 80037ca:	2600      	movne	r6, #0
 80037cc:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80037d0:	b323      	cbz	r3, 800381c <HAL_SAI_Init+0xac>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80037d2:	2040      	movs	r0, #64	; 0x40
 80037d4:	f7ff fd4c 	bl	8003270 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80037d8:	69a3      	ldr	r3, [r4, #24]
 80037da:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80037dc:	6a21      	ldr	r1, [r4, #32]
 80037de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037e2:	f040 809a 	bne.w	800391a <HAL_SAI_Init+0x1aa>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80037e6:	2a04      	cmp	r2, #4
        tmpframelength = hsai->FrameInit.FrameLength;
 80037e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80037ea:	f000 8094 	beq.w	8003916 <HAL_SAI_Init+0x1a6>
        tmpframelength = 256U;
 80037ee:	2a08      	cmp	r2, #8
 80037f0:	bf08      	it	eq
 80037f2:	f44f 7380 	moveq.w	r3, #256	; 0x100
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80037f6:	270a      	movs	r7, #10
 80037f8:	4378      	muls	r0, r7
 80037fa:	434b      	muls	r3, r1
    hsai->Init.Mckdiv = tmpval / 10U;
 80037fc:	210a      	movs	r1, #10
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80037fe:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8003802:	fbb0 f3f1 	udiv	r3, r0, r1
    if ((tmpval % 10U) > 8U)
 8003806:	fb01 0013 	mls	r0, r1, r3, r0
 800380a:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1U;
 800380c:	bf08      	it	eq
 800380e:	3301      	addeq	r3, #1
 8003810:	6263      	str	r3, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003812:	2a04      	cmp	r2, #4
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003814:	bf02      	ittt	eq
 8003816:	6a63      	ldreq	r3, [r4, #36]	; 0x24
 8003818:	085b      	lsreq	r3, r3, #1
 800381a:	6263      	streq	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800381c:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800381e:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003820:	f033 0102 	bics.w	r1, r3, #2
 8003824:	f040 8084 	bne.w	8003930 <HAL_SAI_Init+0x1c0>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003828:	2a01      	cmp	r2, #1
 800382a:	bf18      	it	ne
 800382c:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003830:	6822      	ldr	r2, [r4, #0]
 8003832:	4844      	ldr	r0, [pc, #272]	; (8003944 <HAL_SAI_Init+0x1d4>)
 8003834:	6817      	ldr	r7, [r2, #0]
 8003836:	4038      	ands	r0, r7
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003838:	6c67      	ldr	r7, [r4, #68]	; 0x44
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800383a:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800383c:	433b      	orrs	r3, r7
 800383e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8003840:	6810      	ldr	r0, [r2, #0]
 8003842:	433b      	orrs	r3, r7
 8003844:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8003846:	433b      	orrs	r3, r7
 8003848:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800384a:	433b      	orrs	r3, r7
 800384c:	6967      	ldr	r7, [r4, #20]
 800384e:	433b      	orrs	r3, r7
 8003850:	69a7      	ldr	r7, [r4, #24]
 8003852:	433b      	orrs	r3, r7
 8003854:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003856:	433b      	orrs	r3, r7
 8003858:	6927      	ldr	r7, [r4, #16]
 800385a:	433b      	orrs	r3, r7
 800385c:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800385e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003860:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8003864:	4333      	orrs	r3, r6
 8003866:	430b      	orrs	r3, r1
 8003868:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800386a:	6853      	ldr	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800386c:	6b20      	ldr	r0, [r4, #48]	; 0x30
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800386e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003872:	f023 030f 	bic.w	r3, r3, #15
 8003876:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003878:	69e3      	ldr	r3, [r4, #28]
 800387a:	6851      	ldr	r1, [r2, #4]
 800387c:	4303      	orrs	r3, r0
 800387e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003880:	4303      	orrs	r3, r0
 8003882:	430b      	orrs	r3, r1
 8003884:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003886:	6891      	ldr	r1, [r2, #8]
 8003888:	4b2f      	ldr	r3, [pc, #188]	; (8003948 <HAL_SAI_Init+0x1d8>)
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800388a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800388c:	400b      	ands	r3, r1
 800388e:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003892:	6891      	ldr	r1, [r2, #8]
 8003894:	4303      	orrs	r3, r0
 8003896:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003898:	4303      	orrs	r3, r0
 800389a:	430b      	orrs	r3, r1
 800389c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800389e:	3901      	subs	r1, #1
 80038a0:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80038a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80038a4:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80038a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038aa:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80038ac:	68d3      	ldr	r3, [r2, #12]
 80038ae:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80038b2:	f023 030f 	bic.w	r3, r3, #15
 80038b6:	041b      	lsls	r3, r3, #16
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80038bc:	68d1      	ldr	r1, [r2, #12]
 80038be:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
 80038c2:	4303      	orrs	r3, r0
 80038c4:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80038c6:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80038c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80038cc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80038ce:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80038d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038d4:	60d3      	str	r3, [r2, #12]
  if (hsai->Instance == SAI1_Block_A)
 80038d6:	4b19      	ldr	r3, [pc, #100]	; (800393c <HAL_SAI_Init+0x1cc>)
 80038d8:	429a      	cmp	r2, r3
 80038da:	d113      	bne.n	8003904 <HAL_SAI_Init+0x194>
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80038dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80038e4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80038e8:	2a01      	cmp	r2, #1
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80038ea:	f1a3 0304 	sub.w	r3, r3, #4
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80038ee:	d109      	bne.n	8003904 <HAL_SAI_Init+0x194>
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80038f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80038f2:	1e51      	subs	r1, r2, #1
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80038f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80038f6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80038fa:	645a      	str	r2, [r3, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80038fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003904:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8003906:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003908:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  __HAL_UNLOCK(hsai);
 800390c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 8003910:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  return HAL_OK;
 8003914:	e730      	b.n	8003778 <HAL_SAI_Init+0x8>
        tmpframelength = 64U;
 8003916:	2340      	movs	r3, #64	; 0x40
 8003918:	e76d      	b.n	80037f6 <HAL_SAI_Init+0x86>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800391a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800391c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003920:	bf0c      	ite	eq
 8003922:	2302      	moveq	r3, #2
 8003924:	2301      	movne	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8003926:	270a      	movs	r7, #10
 8003928:	434b      	muls	r3, r1
 800392a:	4378      	muls	r0, r7
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	e765      	b.n	80037fc <HAL_SAI_Init+0x8c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003930:	2a01      	cmp	r2, #1
 8003932:	bf14      	ite	ne
 8003934:	2100      	movne	r1, #0
 8003936:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800393a:	e779      	b.n	8003830 <HAL_SAI_Init+0xc0>
 800393c:	40015404 	.word	0x40015404
 8003940:	40015400 	.word	0x40015400
 8003944:	f005c010 	.word	0xf005c010
 8003948:	fff88000 	.word	0xfff88000

0800394c <HAL_SAI_Receive_DMA>:
{
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	4613      	mov	r3, r2
 8003950:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8003952:	460a      	mov	r2, r1
 8003954:	2900      	cmp	r1, #0
 8003956:	d042      	beq.n	80039de <HAL_SAI_Receive_DMA+0x92>
 8003958:	2b00      	cmp	r3, #0
 800395a:	d040      	beq.n	80039de <HAL_SAI_Receive_DMA+0x92>
  if (hsai->State == HAL_SAI_STATE_READY)
 800395c:	f890 1091 	ldrb.w	r1, [r0, #145]	; 0x91
 8003960:	2901      	cmp	r1, #1
 8003962:	b2cd      	uxtb	r5, r1
 8003964:	d13d      	bne.n	80039e2 <HAL_SAI_Receive_DMA+0x96>
    __HAL_LOCK(hsai);
 8003966:	f890 1090 	ldrb.w	r1, [r0, #144]	; 0x90
 800396a:	2901      	cmp	r1, #1
 800396c:	d039      	beq.n	80039e2 <HAL_SAI_Receive_DMA+0x96>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800396e:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003970:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
 8003972:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003976:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
    hsai->pBuffPtr = pData;
 800397a:	6782      	str	r2, [r0, #120]	; 0x78
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800397c:	f880 1091 	strb.w	r1, [r0, #145]	; 0x91
    hsai->XferSize = Size;
 8003980:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 8003984:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003988:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800398c:	4916      	ldr	r1, [pc, #88]	; (80039e8 <HAL_SAI_Receive_DMA+0x9c>)
 800398e:	6301      	str	r1, [r0, #48]	; 0x30
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8003990:	4916      	ldr	r1, [pc, #88]	; (80039ec <HAL_SAI_Receive_DMA+0xa0>)
 8003992:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8003994:	4916      	ldr	r1, [pc, #88]	; (80039f0 <HAL_SAI_Receive_DMA+0xa4>)
    hsai->hdmarx->XferAbortCallback = NULL;
 8003996:	e9c0 160d 	strd	r1, r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800399a:	6821      	ldr	r1, [r4, #0]
 800399c:	311c      	adds	r1, #28
 800399e:	f7fd fc33 	bl	8001208 <HAL_DMA_Start_IT>
 80039a2:	4601      	mov	r1, r0
 80039a4:	b118      	cbz	r0, 80039ae <HAL_SAI_Receive_DMA+0x62>
      __HAL_UNLOCK(hsai);
 80039a6:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
}
 80039aa:	4628      	mov	r0, r5
 80039ac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80039ae:	4620      	mov	r0, r4
 80039b0:	f7ff fea6 	bl	8003700 <SAI_InterruptFlag>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	4310      	orrs	r0, r2
 80039ba:	6118      	str	r0, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80039c2:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	03d2      	lsls	r2, r2, #15
      __HAL_SAI_ENABLE(hsai);
 80039c8:	bf58      	it	pl
 80039ca:	681a      	ldrpl	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80039cc:	f04f 0500 	mov.w	r5, #0
      __HAL_SAI_ENABLE(hsai);
 80039d0:	bf5c      	itt	pl
 80039d2:	f442 3280 	orrpl.w	r2, r2, #65536	; 0x10000
 80039d6:	601a      	strpl	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80039d8:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    return HAL_OK;
 80039dc:	e7e5      	b.n	80039aa <HAL_SAI_Receive_DMA+0x5e>
    return  HAL_ERROR;
 80039de:	2501      	movs	r5, #1
 80039e0:	e7e3      	b.n	80039aa <HAL_SAI_Receive_DMA+0x5e>
    return HAL_BUSY;
 80039e2:	2502      	movs	r5, #2
 80039e4:	e7e1      	b.n	80039aa <HAL_SAI_Receive_DMA+0x5e>
 80039e6:	bf00      	nop
 80039e8:	08003a2b 	.word	0x08003a2b
 80039ec:	080039f5 	.word	0x080039f5
 80039f0:	08003a37 	.word	0x08003a37

080039f4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80039f4:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80039f6:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039f8:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d011      	beq.n	8003a22 <SAI_DMARxCplt+0x2e>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80039fe:	6825      	ldr	r5, [r4, #0]
 8003a00:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
 8003a02:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003a04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a08:	602b      	str	r3, [r5, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003a0a:	4620      	mov	r0, r4
    hsai->XferCount = 0;
 8003a0c:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003a10:	f7ff fe76 	bl	8003700 <SAI_InterruptFlag>
 8003a14:	692b      	ldr	r3, [r5, #16]
 8003a16:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
 8003a1a:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003a1c:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8003a1e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8003a22:	4620      	mov	r0, r4
 8003a24:	f7fd f96c 	bl	8000d00 <HAL_SAI_RxCpltCallback>
#endif
}
 8003a28:	bd38      	pop	{r3, r4, r5, pc}

08003a2a <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a2a:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8003a2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003a2e:	f7fd f9af 	bl	8000d90 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8003a32:	bd08      	pop	{r3, pc}

08003a34 <HAL_SAI_ErrorCallback>:
 8003a34:	4770      	bx	lr

08003a36 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a36:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a38:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003a3a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003a3e:	6822      	ldr	r2, [r4, #0]
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a44:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003a48:	6813      	ldr	r3, [r2, #0]
 8003a4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a4e:	6013      	str	r3, [r2, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8003a50:	4620      	mov	r0, r4
 8003a52:	f7ff fe6b 	bl	800372c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7ff ffe6 	bl	8003a34 <HAL_SAI_ErrorCallback>
#endif
}
 8003a68:	bd10      	pop	{r4, pc}

08003a6a <HAL_SAI_GetState>:
  return hsai->State;
 8003a6a:	f890 0091 	ldrb.w	r0, [r0, #145]	; 0x91
}
 8003a6e:	4770      	bx	lr

08003a70 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a70:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003a72:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 8003a76:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8003a7a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	4770      	bx	lr

08003a82 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a82:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003a86:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8003a8a:	045b      	lsls	r3, r3, #17
 8003a8c:	0c5b      	lsrs	r3, r3, #17
 8003a8e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003a92:	2000      	movs	r0, #0
 8003a94:	4770      	bx	lr

08003a96 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a96:	b084      	sub	sp, #16
 8003a98:	b510      	push	{r4, lr}
 8003a9a:	ac03      	add	r4, sp, #12
 8003a9c:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8003aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8003ab0:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 8003ab2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ab6:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	4770      	bx	lr
	...

08003ac0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ac2:	780f      	ldrb	r7, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003ac4:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ac6:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8003aca:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8003ace:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ad2:	0412      	lsls	r2, r2, #16
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8003ad8:	2d03      	cmp	r5, #3
 8003ada:	d851      	bhi.n	8003b80 <USB_ActivateEndpoint+0xc0>
 8003adc:	e8df f005 	tbb	[pc, r5]
 8003ae0:	494b4d02 	.word	0x494b4d02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003ae8:	462c      	mov	r4, r5
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003aea:	f248 0c80 	movw	ip, #32896	; 0x8080
 8003aee:	ea42 020c 	orr.w	r2, r2, ip
 8003af2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003af6:	f830 6023 	ldrh.w	r6, [r0, r3, lsl #2]
 8003afa:	f8df e27c 	ldr.w	lr, [pc, #636]	; 8003d78 <USB_ActivateEndpoint+0x2b8>
 8003afe:	b2b6      	uxth	r6, r6
 8003b00:	ea06 060e 	and.w	r6, r6, lr
 8003b04:	433e      	orrs	r6, r7
 8003b06:	ea4c 0606 	orr.w	r6, ip, r6
 8003b0a:	f820 6023 	strh.w	r6, [r0, r3, lsl #2]

  if (ep->doublebuffer == 0U)
 8003b0e:	7b0a      	ldrb	r2, [r1, #12]
 8003b10:	eb00 06c7 	add.w	r6, r0, r7, lsl #3
 8003b14:	2a00      	cmp	r2, #0
 8003b16:	f040 8081 	bne.w	8003c1c <USB_ActivateEndpoint+0x15c>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b1a:	88ca      	ldrh	r2, [r1, #6]
    if (ep->is_in != 0U)
 8003b1c:	f891 c001 	ldrb.w	ip, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b20:	0852      	lsrs	r2, r2, #1
 8003b22:	0052      	lsls	r2, r2, #1
    if (ep->is_in != 0U)
 8003b24:	f1bc 0f00 	cmp.w	ip, #0
 8003b28:	d02c      	beq.n	8003b84 <USB_ActivateEndpoint+0xc4>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b2a:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003b2e:	fa16 f681 	uxtah	r6, r6, r1
 8003b32:	f8a6 2400 	strh.w	r2, [r6, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b36:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003b3a:	0651      	lsls	r1, r2, #25
 8003b3c:	d50a      	bpl.n	8003b54 <USB_ActivateEndpoint+0x94>
 8003b3e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003b42:	b292      	uxth	r2, r2
 8003b44:	ea02 020e 	and.w	r2, r2, lr
 8003b48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b4c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003b50:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b54:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003b58:	4984      	ldr	r1, [pc, #528]	; (8003d6c <USB_ActivateEndpoint+0x2ac>)
 8003b5a:	b292      	uxth	r2, r2
      if (ep->type != EP_TYPE_ISOC)
 8003b5c:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b5e:	ea02 0201 	and.w	r2, r2, r1
      if (ep->type != EP_TYPE_ISOC)
 8003b62:	d001      	beq.n	8003b68 <USB_ActivateEndpoint+0xa8>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b64:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b70:	e0b2      	b.n	8003cd8 <USB_ActivateEndpoint+0x218>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003b72:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003b76:	2400      	movs	r4, #0
      break;
 8003b78:	e7b7      	b.n	8003aea <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003b7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 8003b7e:	e7fa      	b.n	8003b76 <USB_ActivateEndpoint+0xb6>
  switch (ep->type)
 8003b80:	2401      	movs	r4, #1
 8003b82:	e7b2      	b.n	8003aea <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b84:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b88:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b8a:	fa16 f585 	uxtah	r5, r6, r5
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b8e:	293e      	cmp	r1, #62	; 0x3e
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b90:	f8a5 2404 	strh.w	r2, [r5, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b94:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b98:	fa16 f682 	uxtah	r6, r6, r2
 8003b9c:	d925      	bls.n	8003bea <USB_ActivateEndpoint+0x12a>
 8003b9e:	094d      	lsrs	r5, r1, #5
 8003ba0:	06ca      	lsls	r2, r1, #27
 8003ba2:	4a73      	ldr	r2, [pc, #460]	; (8003d70 <USB_ActivateEndpoint+0x2b0>)
 8003ba4:	bf08      	it	eq
 8003ba6:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 8003baa:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	f8a6 2406 	strh.w	r2, [r6, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bb4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003bb8:	0452      	lsls	r2, r2, #17
 8003bba:	d50d      	bpl.n	8003bd8 <USB_ActivateEndpoint+0x118>
 8003bbc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003bc0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003bc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003bc8:	0412      	lsls	r2, r2, #16
 8003bca:	0c12      	lsrs	r2, r2, #16
 8003bcc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003bd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bd4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bd8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003bdc:	4965      	ldr	r1, [pc, #404]	; (8003d74 <USB_ActivateEndpoint+0x2b4>)
 8003bde:	b292      	uxth	r2, r2
 8003be0:	400a      	ands	r2, r1
      if (ep->num == 0U)
 8003be2:	b9c7      	cbnz	r7, 8003c16 <USB_ActivateEndpoint+0x156>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003be4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003be8:	e7be      	b.n	8003b68 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003bea:	b971      	cbnz	r1, 8003c0a <USB_ActivateEndpoint+0x14a>
 8003bec:	f8b6 2406 	ldrh.w	r2, [r6, #1030]	; 0x406
 8003bf0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003bf4:	0412      	lsls	r2, r2, #16
 8003bf6:	0c12      	lsrs	r2, r2, #16
 8003bf8:	f8a6 2406 	strh.w	r2, [r6, #1030]	; 0x406
 8003bfc:	f8b6 2406 	ldrh.w	r2, [r6, #1030]	; 0x406
 8003c00:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003c04:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003c08:	e7d1      	b.n	8003bae <USB_ActivateEndpoint+0xee>
 8003c0a:	084a      	lsrs	r2, r1, #1
 8003c0c:	07c9      	lsls	r1, r1, #31
 8003c0e:	bf48      	it	mi
 8003c10:	3201      	addmi	r2, #1
 8003c12:	0292      	lsls	r2, r2, #10
 8003c14:	e7cb      	b.n	8003bae <USB_ActivateEndpoint+0xee>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003c16:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8003c1a:	e7a5      	b.n	8003b68 <USB_ActivateEndpoint+0xa8>
    if (ep->type == EP_TYPE_BULK)
 8003c1c:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003c1e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8003c22:	d15d      	bne.n	8003ce0 <USB_ActivateEndpoint+0x220>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003c24:	b292      	uxth	r2, r2
 8003c26:	ea02 020e 	and.w	r2, r2, lr
 8003c2a:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003c32:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c36:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003c3a:	890a      	ldrh	r2, [r1, #8]
 8003c3c:	fa16 f787 	uxtah	r7, r6, r7
 8003c40:	0852      	lsrs	r2, r2, #1
 8003c42:	0052      	lsls	r2, r2, #1
 8003c44:	f8a7 2400 	strh.w	r2, [r7, #1024]	; 0x400
 8003c48:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003c4c:	fa16 f682 	uxtah	r6, r6, r2
 8003c50:	894a      	ldrh	r2, [r1, #10]
 8003c52:	0852      	lsrs	r2, r2, #1
 8003c54:	0052      	lsls	r2, r2, #1
 8003c56:	f8a6 2404 	strh.w	r2, [r6, #1028]	; 0x404
    if (ep->is_in == 0U)
 8003c5a:	784a      	ldrb	r2, [r1, #1]
 8003c5c:	2a00      	cmp	r2, #0
 8003c5e:	d148      	bne.n	8003cf2 <USB_ActivateEndpoint+0x232>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c60:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c64:	0456      	lsls	r6, r2, #17
 8003c66:	d50d      	bpl.n	8003c84 <USB_ActivateEndpoint+0x1c4>
 8003c68:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c74:	0412      	lsls	r2, r2, #16
 8003c76:	0c12      	lsrs	r2, r2, #16
 8003c78:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003c7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c80:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c84:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c88:	0655      	lsls	r5, r2, #25
 8003c8a:	d50d      	bpl.n	8003ca8 <USB_ActivateEndpoint+0x1e8>
 8003c8c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003c90:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c98:	0412      	lsls	r2, r2, #16
 8003c9a:	0c12      	lsrs	r2, r2, #16
 8003c9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ca0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003ca4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ca8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cb4:	0412      	lsls	r2, r2, #16
 8003cb6:	0c12      	lsrs	r2, r2, #16
 8003cb8:	f248 0180 	movw	r1, #32896	; 0x8080
 8003cbc:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cc6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd2:	0412      	lsls	r2, r2, #16
 8003cd4:	0c12      	lsrs	r2, r2, #16
 8003cd6:	430a      	orrs	r2, r1
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cd8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8003cdc:	4620      	mov	r0, r4
 8003cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003ce0:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8003ce4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ce8:	0412      	lsls	r2, r2, #16
 8003cea:	0c12      	lsrs	r2, r2, #16
 8003cec:	ea4c 0202 	orr.w	r2, ip, r2
 8003cf0:	e79f      	b.n	8003c32 <USB_ActivateEndpoint+0x172>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cf2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cf6:	0451      	lsls	r1, r2, #17
 8003cf8:	d50d      	bpl.n	8003d16 <USB_ActivateEndpoint+0x256>
 8003cfa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cfe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d06:	0412      	lsls	r2, r2, #16
 8003d08:	0c12      	lsrs	r2, r2, #16
 8003d0a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d12:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d16:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d1a:	0652      	lsls	r2, r2, #25
 8003d1c:	d50d      	bpl.n	8003d3a <USB_ActivateEndpoint+0x27a>
 8003d1e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d22:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d2a:	0412      	lsls	r2, r2, #16
 8003d2c:	0c12      	lsrs	r2, r2, #16
 8003d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d32:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003d36:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d3a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d3e:	490b      	ldr	r1, [pc, #44]	; (8003d6c <USB_ActivateEndpoint+0x2ac>)
 8003d40:	b292      	uxth	r2, r2
 8003d42:	400a      	ands	r2, r1
      if (ep->type != EP_TYPE_ISOC)
 8003d44:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d46:	bf18      	it	ne
 8003d48:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d54:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d58:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d64:	0412      	lsls	r2, r2, #16
 8003d66:	0c12      	lsrs	r2, r2, #16
 8003d68:	e6fe      	b.n	8003b68 <USB_ActivateEndpoint+0xa8>
 8003d6a:	bf00      	nop
 8003d6c:	ffff8fbf 	.word	0xffff8fbf
 8003d70:	ffff8000 	.word	0xffff8000
 8003d74:	ffffbf8f 	.word	0xffffbf8f
 8003d78:	ffff8f8f 	.word	0xffff8f8f

08003d7c <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8003d7c:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d7e:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8003d80:	7b09      	ldrb	r1, [r1, #12]
 8003d82:	bbd9      	cbnz	r1, 8003dfc <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8003d84:	b30a      	cbz	r2, 8003dca <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d86:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d8a:	0651      	lsls	r1, r2, #25
 8003d8c:	d50d      	bpl.n	8003daa <USB_DeactivateEndpoint+0x2e>
 8003d8e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d92:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d9a:	0412      	lsls	r2, r2, #16
 8003d9c:	0c12      	lsrs	r2, r2, #16
 8003d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003da6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003daa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003dae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003db6:	0412      	lsls	r2, r2, #16
 8003db8:	0c12      	lsrs	r2, r2, #16
 8003dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dc2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003dce:	0452      	lsls	r2, r2, #17
 8003dd0:	d50d      	bpl.n	8003dee <USB_DeactivateEndpoint+0x72>
 8003dd2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003dd6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003dda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003dde:	0412      	lsls	r2, r2, #16
 8003de0:	0c12      	lsrs	r2, r2, #16
 8003de2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dea:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003df2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003df6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003dfa:	e7dc      	b.n	8003db6 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8003dfc:	2a00      	cmp	r2, #0
 8003dfe:	d148      	bne.n	8003e92 <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e00:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e04:	0451      	lsls	r1, r2, #17
 8003e06:	d50d      	bpl.n	8003e24 <USB_DeactivateEndpoint+0xa8>
 8003e08:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e0c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e14:	0412      	lsls	r2, r2, #16
 8003e16:	0c12      	lsrs	r2, r2, #16
 8003e18:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003e1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e20:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e24:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e28:	0652      	lsls	r2, r2, #25
 8003e2a:	d50d      	bpl.n	8003e48 <USB_DeactivateEndpoint+0xcc>
 8003e2c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e30:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e38:	0412      	lsls	r2, r2, #16
 8003e3a:	0c12      	lsrs	r2, r2, #16
 8003e3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e40:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003e44:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003e48:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e4c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e54:	0412      	lsls	r2, r2, #16
 8003e56:	0c12      	lsrs	r2, r2, #16
 8003e58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e5c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003e60:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e64:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e70:	0412      	lsls	r2, r2, #16
 8003e72:	0c12      	lsrs	r2, r2, #16
 8003e74:	f248 0180 	movw	r1, #32896	; 0x8080
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e7e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e82:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e8a:	0412      	lsls	r2, r2, #16
 8003e8c:	0c12      	lsrs	r2, r2, #16
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	e797      	b.n	8003dc2 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e92:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e96:	0451      	lsls	r1, r2, #17
 8003e98:	d50d      	bpl.n	8003eb6 <USB_DeactivateEndpoint+0x13a>
 8003e9a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e9e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003ea2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ea6:	0412      	lsls	r2, r2, #16
 8003ea8:	0c12      	lsrs	r2, r2, #16
 8003eaa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003eae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eb2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eb6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003eba:	0652      	lsls	r2, r2, #25
 8003ebc:	d50d      	bpl.n	8003eda <USB_DeactivateEndpoint+0x15e>
 8003ebe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003ec2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003ec6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003eca:	0412      	lsls	r2, r2, #16
 8003ecc:	0c12      	lsrs	r2, r2, #16
 8003ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003ed6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003eda:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003ede:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003ee2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ee6:	0412      	lsls	r2, r2, #16
 8003ee8:	0c12      	lsrs	r2, r2, #16
 8003eea:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003eee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ef2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ef6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003efa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f02:	0412      	lsls	r2, r2, #16
 8003f04:	0c12      	lsrs	r2, r2, #16
 8003f06:	f248 0180 	movw	r1, #32896	; 0x8080
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f10:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f1c:	e7b5      	b.n	8003e8a <USB_DeactivateEndpoint+0x10e>

08003f1e <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003f1e:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003f20:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8003f22:	b18b      	cbz	r3, 8003f48 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003f24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f30:	041b      	lsls	r3, r3, #16
 8003f32:	0c1b      	lsrs	r3, r3, #16
 8003f34:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003f44:	2000      	movs	r0, #0
 8003f46:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003f48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f5c:	e7ec      	b.n	8003f38 <USB_EPSetStall+0x1a>

08003f5e <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003f5e:	7b0b      	ldrb	r3, [r1, #12]
 8003f60:	bb3b      	cbnz	r3, 8003fb2 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8003f62:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f64:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8003f66:	b333      	cbz	r3, 8003fb6 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f6c:	065b      	lsls	r3, r3, #25
 8003f6e:	d50d      	bpl.n	8003f8c <USB_EPClearStall+0x2e>
 8003f70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7c:	041b      	lsls	r3, r3, #16
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f88:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003f8c:	78cb      	ldrb	r3, [r1, #3]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d00f      	beq.n	8003fb2 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fb6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003fba:	045b      	lsls	r3, r3, #17
 8003fbc:	d50d      	bpl.n	8003fda <USB_EPClearStall+0x7c>
 8003fbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fda:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	041b      	lsls	r3, r3, #16
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003fee:	e7da      	b.n	8003fa6 <USB_EPClearStall+0x48>

08003ff0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003ff0:	b911      	cbnz	r1, 8003ff8 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	4770      	bx	lr

08003ffc <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8003ffc:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8004000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004008:	b29b      	uxth	r3, r3
 800400a:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 800400e:	2000      	movs	r0, #0
 8004010:	4770      	bx	lr

08004012 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004012:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8004016:	b280      	uxth	r0, r0
 8004018:	4770      	bx	lr

0800401a <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800401a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800401e:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004020:	4410      	add	r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004028:	1a40      	subs	r0, r0, r1

  for (count = n; count != 0U; count--)
 800402a:	428b      	cmp	r3, r1
 800402c:	d100      	bne.n	8004030 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 800402e:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004030:	880a      	ldrh	r2, [r1, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8004032:	5242      	strh	r2, [r0, r1]
    pBuf++;
 8004034:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8004036:	e7f8      	b.n	800402a <USB_WritePMA+0x10>

08004038 <USB_EPStartXfer>:
{
 8004038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800403c:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800403e:	7849      	ldrb	r1, [r1, #1]
    if (ep->doublebuffer == 0U)
 8004040:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8004042:	2901      	cmp	r1, #1
{
 8004044:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8004046:	f040 811f 	bne.w	8004288 <USB_EPStartXfer+0x250>
    if (ep->xfer_len > ep->maxpacket)
 800404a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800404e:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004050:	6961      	ldr	r1, [r4, #20]
 8004052:	4566      	cmp	r6, ip
 8004054:	bf28      	it	cs
 8004056:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 8004058:	bb12      	cbnz	r2, 80040a0 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800405a:	b2b6      	uxth	r6, r6
 800405c:	88e2      	ldrh	r2, [r4, #6]
 800405e:	4633      	mov	r3, r6
 8004060:	f7ff ffdb 	bl	800401a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004064:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004068:	7823      	ldrb	r3, [r4, #0]
 800406a:	f205 4102 	addw	r1, r5, #1026	; 0x402
 800406e:	fa11 f282 	uxtah	r2, r1, r2
 8004072:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004076:	8016      	strh	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004078:	7822      	ldrb	r2, [r4, #0]
 800407a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800407e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800408e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004096:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800409a:	2000      	movs	r0, #0
}
 800409c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 80040a0:	78e2      	ldrb	r2, [r4, #3]
        if (ep->xfer_len_db > ep->maxpacket)
 80040a2:	6a23      	ldr	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80040a4:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 80040a6:	2a02      	cmp	r2, #2
 80040a8:	f040 80d7 	bne.w	800425a <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 80040ac:	459c      	cmp	ip, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80040ae:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 80040b2:	f080 80bb 	bcs.w	800422c <USB_EPStartXfer+0x1f4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80040b6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80040ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040be:	0412      	lsls	r2, r2, #16
 80040c0:	0c12      	lsrs	r2, r2, #16
 80040c2:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80040c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040ca:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040ce:	f830 8027 	ldrh.w	r8, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80040d2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 80040d6:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040d8:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 80040dc:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80040de:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040e0:	d053      	beq.n	800418a <USB_EPStartXfer+0x152>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80040e2:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 80040e6:	fa1c f282 	uxtah	r2, ip, r2
 80040ea:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040ee:	8962      	ldrh	r2, [r4, #10]
 80040f0:	f7ff ff93 	bl	800401a <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80040f4:	6a22      	ldr	r2, [r4, #32]
 80040f6:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80040f8:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80040fa:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 80040fc:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 80040fe:	bf8c      	ite	hi
 8004100:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8004102:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 8004104:	4431      	add	r1, r6
 8004106:	bf88      	it	hi
 8004108:	4632      	movhi	r2, r6
 800410a:	6223      	str	r3, [r4, #32]
 800410c:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800410e:	b293      	uxth	r3, r2
 8004110:	bb70      	cbnz	r0, 8004170 <USB_EPStartXfer+0x138>
 8004112:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8004116:	7820      	ldrb	r0, [r4, #0]
 8004118:	f205 4702 	addw	r7, r5, #1026	; 0x402
 800411c:	fa17 f686 	uxtah	r6, r7, r6
 8004120:	2a3e      	cmp	r2, #62	; 0x3e
 8004122:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 8004126:	d90e      	bls.n	8004146 <USB_EPStartXfer+0x10e>
 8004128:	0950      	lsrs	r0, r2, #5
 800412a:	06d7      	lsls	r7, r2, #27
 800412c:	4aaa      	ldr	r2, [pc, #680]	; (80043d8 <USB_EPStartXfer+0x3a0>)
 800412e:	bf08      	it	eq
 8004130:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8004134:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8004138:	b292      	uxth	r2, r2
 800413a:	8032      	strh	r2, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800413c:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800413e:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004140:	f7ff ff6b 	bl	800401a <USB_WritePMA>
 8004144:	e798      	b.n	8004078 <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004146:	b95a      	cbnz	r2, 8004160 <USB_EPStartXfer+0x128>
 8004148:	8832      	ldrh	r2, [r6, #0]
 800414a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800414e:	0412      	lsls	r2, r2, #16
 8004150:	0c12      	lsrs	r2, r2, #16
 8004152:	8032      	strh	r2, [r6, #0]
 8004154:	8832      	ldrh	r2, [r6, #0]
 8004156:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800415a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800415e:	e7eb      	b.n	8004138 <USB_EPStartXfer+0x100>
 8004160:	0850      	lsrs	r0, r2, #1
 8004162:	07d2      	lsls	r2, r2, #31
 8004164:	bf48      	it	mi
 8004166:	3001      	addmi	r0, #1
 8004168:	0280      	lsls	r0, r0, #10
 800416a:	b280      	uxth	r0, r0
 800416c:	8030      	strh	r0, [r6, #0]
 800416e:	e7e5      	b.n	800413c <USB_EPStartXfer+0x104>
 8004170:	2801      	cmp	r0, #1
 8004172:	d1e3      	bne.n	800413c <USB_EPStartXfer+0x104>
 8004174:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004178:	7820      	ldrb	r0, [r4, #0]
 800417a:	f205 4602 	addw	r6, r5, #1026	; 0x402
 800417e:	fa16 f282 	uxtah	r2, r6, r2
 8004182:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004186:	8013      	strh	r3, [r2, #0]
 8004188:	e7d8      	b.n	800413c <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800418a:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 800418e:	fa1c f282 	uxtah	r2, ip, r2
 8004192:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004196:	8922      	ldrh	r2, [r4, #8]
 8004198:	f7ff ff3f 	bl	800401a <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800419c:	6a22      	ldr	r2, [r4, #32]
 800419e:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80041a0:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80041a2:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 80041a4:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 80041a6:	bf8c      	ite	hi
 80041a8:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 80041aa:	4643      	movls	r3, r8
            ep->xfer_buff += len;
 80041ac:	4431      	add	r1, r6
 80041ae:	bf88      	it	hi
 80041b0:	4632      	movhi	r2, r6
 80041b2:	6223      	str	r3, [r4, #32]
 80041b4:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80041b6:	b293      	uxth	r3, r2
 80041b8:	bb58      	cbnz	r0, 8004212 <USB_EPStartXfer+0x1da>
 80041ba:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 80041be:	7820      	ldrb	r0, [r4, #0]
 80041c0:	f205 4706 	addw	r7, r5, #1030	; 0x406
 80041c4:	fa17 f686 	uxtah	r6, r7, r6
 80041c8:	2a3e      	cmp	r2, #62	; 0x3e
 80041ca:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 80041ce:	d90b      	bls.n	80041e8 <USB_EPStartXfer+0x1b0>
 80041d0:	0950      	lsrs	r0, r2, #5
 80041d2:	06d7      	lsls	r7, r2, #27
 80041d4:	4a80      	ldr	r2, [pc, #512]	; (80043d8 <USB_EPStartXfer+0x3a0>)
 80041d6:	bf08      	it	eq
 80041d8:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 80041dc:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80041e0:	b292      	uxth	r2, r2
 80041e2:	8032      	strh	r2, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041e4:	8962      	ldrh	r2, [r4, #10]
 80041e6:	e7aa      	b.n	800413e <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80041e8:	b95a      	cbnz	r2, 8004202 <USB_EPStartXfer+0x1ca>
 80041ea:	8832      	ldrh	r2, [r6, #0]
 80041ec:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80041f0:	0412      	lsls	r2, r2, #16
 80041f2:	0c12      	lsrs	r2, r2, #16
 80041f4:	8032      	strh	r2, [r6, #0]
 80041f6:	8832      	ldrh	r2, [r6, #0]
 80041f8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80041fc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004200:	e7ee      	b.n	80041e0 <USB_EPStartXfer+0x1a8>
 8004202:	0850      	lsrs	r0, r2, #1
 8004204:	07d2      	lsls	r2, r2, #31
 8004206:	bf48      	it	mi
 8004208:	3001      	addmi	r0, #1
 800420a:	0280      	lsls	r0, r0, #10
 800420c:	b280      	uxth	r0, r0
 800420e:	8030      	strh	r0, [r6, #0]
 8004210:	e7e8      	b.n	80041e4 <USB_EPStartXfer+0x1ac>
 8004212:	2801      	cmp	r0, #1
 8004214:	d1e6      	bne.n	80041e4 <USB_EPStartXfer+0x1ac>
 8004216:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800421a:	7820      	ldrb	r0, [r4, #0]
 800421c:	f205 4606 	addw	r6, r5, #1030	; 0x406
 8004220:	fa16 f282 	uxtah	r2, r6, r2
 8004224:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004228:	8013      	strh	r3, [r2, #0]
 800422a:	e7db      	b.n	80041e4 <USB_EPStartXfer+0x1ac>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800422c:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8004230:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004234:	0412      	lsls	r2, r2, #16
 8004236:	0c12      	lsrs	r2, r2, #16
 8004238:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800423c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004240:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004244:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004248:	f200 4602 	addw	r6, r0, #1026	; 0x402
 800424c:	fa16 f282 	uxtah	r2, r6, r2
 8004250:	b29b      	uxth	r3, r3
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004252:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004256:	8922      	ldrh	r2, [r4, #8]
 8004258:	e772      	b.n	8004140 <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800425a:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 800425e:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004260:	f012 0f40 	tst.w	r2, #64	; 0x40
        ep->xfer_len_db -= len;
 8004264:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004266:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800426a:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800426c:	d007      	beq.n	800427e <USB_EPStartXfer+0x246>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800426e:	f200 4606 	addw	r6, r0, #1030	; 0x406
 8004272:	fa16 f282 	uxtah	r2, r6, r2
 8004276:	f822 3037 	strh.w	r3, [r2, r7, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800427a:	8962      	ldrh	r2, [r4, #10]
 800427c:	e760      	b.n	8004140 <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800427e:	f200 4602 	addw	r6, r0, #1026	; 0x402
 8004282:	fa16 f282 	uxtah	r2, r6, r2
 8004286:	e7e4      	b.n	8004252 <USB_EPStartXfer+0x21a>
    if (ep->doublebuffer == 0U)
 8004288:	bb7a      	cbnz	r2, 80042ea <USB_EPStartXfer+0x2b2>
      if (ep->xfer_len > ep->maxpacket)
 800428a:	69a3      	ldr	r3, [r4, #24]
 800428c:	6921      	ldr	r1, [r4, #16]
 800428e:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8004290:	bf88      	it	hi
 8004292:	1a5a      	subhi	r2, r3, r1
 8004294:	61a2      	str	r2, [r4, #24]
 8004296:	bf88      	it	hi
 8004298:	460b      	movhi	r3, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800429a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800429e:	7822      	ldrb	r2, [r4, #0]
 80042a0:	f205 4006 	addw	r0, r5, #1030	; 0x406
 80042a4:	fa10 f181 	uxtah	r1, r0, r1
 80042a8:	2b3e      	cmp	r3, #62	; 0x3e
 80042aa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80042ae:	f200 80cb 	bhi.w	8004448 <USB_EPStartXfer+0x410>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 80d1 	bne.w	800445a <USB_EPStartXfer+0x422>
 80042b8:	880b      	ldrh	r3, [r1, #0]
 80042ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	800b      	strh	r3, [r1, #0]
 80042c4:	880b      	ldrh	r3, [r1, #0]
 80042c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	800b      	strh	r3, [r1, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042d2:	7822      	ldrb	r2, [r4, #0]
 80042d4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80042d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	0c1b      	lsrs	r3, r3, #16
 80042e4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80042e8:	e6d1      	b.n	800408e <USB_EPStartXfer+0x56>
      if (ep->type == EP_TYPE_BULK)
 80042ea:	78e3      	ldrb	r3, [r4, #3]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d175      	bne.n	80043dc <USB_EPStartXfer+0x3a4>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80042f0:	2900      	cmp	r1, #0
 80042f2:	d14b      	bne.n	800438c <USB_EPStartXfer+0x354>
 80042f4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80042f8:	7823      	ldrb	r3, [r4, #0]
 80042fa:	f200 4202 	addw	r2, r0, #1026	; 0x402
 80042fe:	fa12 f181 	uxtah	r1, r2, r1
 8004302:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	2b3e      	cmp	r3, #62	; 0x3e
 800430a:	d922      	bls.n	8004352 <USB_EPStartXfer+0x31a>
 800430c:	0958      	lsrs	r0, r3, #5
 800430e:	4a32      	ldr	r2, [pc, #200]	; (80043d8 <USB_EPStartXfer+0x3a0>)
 8004310:	06df      	lsls	r7, r3, #27
 8004312:	bf08      	it	eq
 8004314:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8004318:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800431c:	b292      	uxth	r2, r2
 800431e:	800a      	strh	r2, [r1, #0]
 8004320:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8004324:	7822      	ldrb	r2, [r4, #0]
 8004326:	f205 4006 	addw	r0, r5, #1030	; 0x406
 800432a:	fa10 f181 	uxtah	r1, r0, r1
 800432e:	2b3e      	cmp	r3, #62	; 0x3e
 8004330:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8004334:	d820      	bhi.n	8004378 <USB_EPStartXfer+0x340>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d145      	bne.n	80043c6 <USB_EPStartXfer+0x38e>
 800433a:	880b      	ldrh	r3, [r1, #0]
 800433c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004340:	041b      	lsls	r3, r3, #16
 8004342:	0c1b      	lsrs	r3, r3, #16
 8004344:	800b      	strh	r3, [r1, #0]
 8004346:	880b      	ldrh	r3, [r1, #0]
 8004348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800434c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004350:	e01a      	b.n	8004388 <USB_EPStartXfer+0x350>
 8004352:	b95b      	cbnz	r3, 800436c <USB_EPStartXfer+0x334>
 8004354:	880a      	ldrh	r2, [r1, #0]
 8004356:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800435a:	0412      	lsls	r2, r2, #16
 800435c:	0c12      	lsrs	r2, r2, #16
 800435e:	800a      	strh	r2, [r1, #0]
 8004360:	880a      	ldrh	r2, [r1, #0]
 8004362:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004366:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800436a:	e7d7      	b.n	800431c <USB_EPStartXfer+0x2e4>
 800436c:	085a      	lsrs	r2, r3, #1
 800436e:	07de      	lsls	r6, r3, #31
 8004370:	bf48      	it	mi
 8004372:	3201      	addmi	r2, #1
 8004374:	0292      	lsls	r2, r2, #10
 8004376:	e7d1      	b.n	800431c <USB_EPStartXfer+0x2e4>
 8004378:	095a      	lsrs	r2, r3, #5
 800437a:	06d8      	lsls	r0, r3, #27
 800437c:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <USB_EPStartXfer+0x3a0>)
 800437e:	bf08      	it	eq
 8004380:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8004384:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8004388:	b29b      	uxth	r3, r3
 800438a:	800b      	strh	r3, [r1, #0]
        if (ep->xfer_count != 0U)
 800438c:	69e3      	ldr	r3, [r4, #28]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d09f      	beq.n	80042d2 <USB_EPStartXfer+0x29a>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004392:	7822      	ldrb	r2, [r4, #0]
 8004394:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004398:	f244 0340 	movw	r3, #16448	; 0x4040
 800439c:	ea03 0001 	and.w	r0, r3, r1
 80043a0:	438b      	bics	r3, r1
 80043a2:	d001      	beq.n	80043a8 <USB_EPStartXfer+0x370>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d194      	bne.n	80042d2 <USB_EPStartXfer+0x29a>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80043a8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80043ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	0c1b      	lsrs	r3, r3, #16
 80043b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043c0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80043c4:	e785      	b.n	80042d2 <USB_EPStartXfer+0x29a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80043c6:	085a      	lsrs	r2, r3, #1
 80043c8:	07db      	lsls	r3, r3, #31
 80043ca:	bf48      	it	mi
 80043cc:	3201      	addmi	r2, #1
 80043ce:	0292      	lsls	r2, r2, #10
 80043d0:	b292      	uxth	r2, r2
 80043d2:	800a      	strh	r2, [r1, #0]
 80043d4:	e7da      	b.n	800438c <USB_EPStartXfer+0x354>
 80043d6:	bf00      	nop
 80043d8:	ffff8000 	.word	0xffff8000
      else if (ep->type == EP_TYPE_ISOC)
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d144      	bne.n	800446a <USB_EPStartXfer+0x432>
        if (ep->xfer_len > ep->maxpacket)
 80043e0:	69a3      	ldr	r3, [r4, #24]
 80043e2:	6922      	ldr	r2, [r4, #16]
 80043e4:	4293      	cmp	r3, r2
          ep->xfer_len -= len;
 80043e6:	bf8a      	itet	hi
 80043e8:	1a98      	subhi	r0, r3, r2
          ep->xfer_len = 0U;
 80043ea:	2000      	movls	r0, #0
 80043ec:	4613      	movhi	r3, r2
 80043ee:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80043f0:	2900      	cmp	r1, #0
 80043f2:	f47f af6e 	bne.w	80042d2 <USB_EPStartXfer+0x29a>
 80043f6:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80043fa:	7822      	ldrb	r2, [r4, #0]
 80043fc:	f205 4002 	addw	r0, r5, #1026	; 0x402
 8004400:	fa10 f181 	uxtah	r1, r0, r1
 8004404:	2b3e      	cmp	r3, #62	; 0x3e
 8004406:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800440a:	d90a      	bls.n	8004422 <USB_EPStartXfer+0x3ea>
 800440c:	0958      	lsrs	r0, r3, #5
 800440e:	4a18      	ldr	r2, [pc, #96]	; (8004470 <USB_EPStartXfer+0x438>)
 8004410:	06df      	lsls	r7, r3, #27
 8004412:	bf08      	it	eq
 8004414:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8004418:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800441c:	b292      	uxth	r2, r2
 800441e:	800a      	strh	r2, [r1, #0]
 8004420:	e73b      	b.n	800429a <USB_EPStartXfer+0x262>
 8004422:	b95b      	cbnz	r3, 800443c <USB_EPStartXfer+0x404>
 8004424:	880a      	ldrh	r2, [r1, #0]
 8004426:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800442a:	0412      	lsls	r2, r2, #16
 800442c:	0c12      	lsrs	r2, r2, #16
 800442e:	800a      	strh	r2, [r1, #0]
 8004430:	880a      	ldrh	r2, [r1, #0]
 8004432:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004436:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800443a:	e7ef      	b.n	800441c <USB_EPStartXfer+0x3e4>
 800443c:	085a      	lsrs	r2, r3, #1
 800443e:	07de      	lsls	r6, r3, #31
 8004440:	bf48      	it	mi
 8004442:	3201      	addmi	r2, #1
 8004444:	0292      	lsls	r2, r2, #10
 8004446:	e7e9      	b.n	800441c <USB_EPStartXfer+0x3e4>
 8004448:	095a      	lsrs	r2, r3, #5
 800444a:	06d8      	lsls	r0, r3, #27
 800444c:	4b08      	ldr	r3, [pc, #32]	; (8004470 <USB_EPStartXfer+0x438>)
 800444e:	bf08      	it	eq
 8004450:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8004454:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8004458:	e739      	b.n	80042ce <USB_EPStartXfer+0x296>
 800445a:	085a      	lsrs	r2, r3, #1
 800445c:	07db      	lsls	r3, r3, #31
 800445e:	bf48      	it	mi
 8004460:	3201      	addmi	r2, #1
 8004462:	0292      	lsls	r2, r2, #10
 8004464:	b292      	uxth	r2, r2
 8004466:	800a      	strh	r2, [r1, #0]
 8004468:	e733      	b.n	80042d2 <USB_EPStartXfer+0x29a>
        return HAL_ERROR;
 800446a:	2001      	movs	r0, #1
 800446c:	e616      	b.n	800409c <USB_EPStartXfer+0x64>
 800446e:	bf00      	nop
 8004470:	ffff8000 	.word	0xffff8000

08004474 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004474:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8004478:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800447a:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 800447c:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 800447e:	460c      	mov	r4, r1
 8004480:	462e      	mov	r6, r5
 8004482:	1a47      	subs	r7, r0, r1
 8004484:	193a      	adds	r2, r7, r4
 8004486:	3402      	adds	r4, #2
 8004488:	b936      	cbnz	r6, 8004498 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800448a:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 800448c:	bf44      	itt	mi
 800448e:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004492:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8004496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8004498:	8812      	ldrh	r2, [r2, #0]
 800449a:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800449c:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80044a0:	0a12      	lsrs	r2, r2, #8
 80044a2:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 80044a6:	3e01      	subs	r6, #1
 80044a8:	e7ec      	b.n	8004484 <USB_ReadPMA+0x10>
	...

080044ac <USBD_AUDIO_GetCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_AUDIO_CfgDesc);
 80044ac:	2376      	movs	r3, #118	; 0x76
 80044ae:	8003      	strh	r3, [r0, #0]
  return USBD_AUDIO_CfgDesc;
}
 80044b0:	4800      	ldr	r0, [pc, #0]	; (80044b4 <USBD_AUDIO_GetCfgDesc+0x8>)
 80044b2:	4770      	bx	lr
 80044b4:	200023c4 	.word	0x200023c4

080044b8 <USBD_AUDIO_EP0_RxReady>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{  
 80044b8:	b510      	push	{r4, lr}
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 80044ba:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 80044be:	7f23      	ldrb	r3, [r4, #28]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d114      	bne.n	80044ee <USBD_AUDIO_EP0_RxReady+0x36>
  {    
    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 80044c4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d110      	bne.n	80044ee <USBD_AUDIO_EP0_RxReady+0x36>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->VolumeCtl(VOL_CUR);    
 80044cc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80044d0:	4a08      	ldr	r2, [pc, #32]	; (80044f4 <USBD_AUDIO_EP0_RxReady+0x3c>)
 80044d2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80044d6:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 80044da:	f9b2 0076 	ldrsh.w	r0, [r2, #118]	; 0x76
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4798      	blx	r3
      
      haudio->control.cmd = 0;
      haudio->control.len = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      haudio->control.unit = 0;
 80044e8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
      haudio->control.cmd = 0;
 80044ec:	83a3      	strh	r3, [r4, #28]
      haudio->control.data[0]=0;
      haudio->control.data[0]=0;
    }
  }    
  return USBD_OK;
}
 80044ee:	2000      	movs	r0, #0
 80044f0:	bd10      	pop	{r4, pc}
 80044f2:	bf00      	nop
 80044f4:	200023c4 	.word	0x200023c4

080044f8 <USBD_AUDIO_EP0_TxReady>:
*/
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
  /* Only OUT control data are processed */
  return USBD_OK;
}
 80044f8:	2000      	movs	r0, #0
 80044fa:	4770      	bx	lr

080044fc <USBD_AUDIO_DataOut>:
*/
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev, 
                                    uint8_t epnum)
{  
  return USBD_OK;
}
 80044fc:	2000      	movs	r0, #0
 80044fe:	4770      	bx	lr

08004500 <USBD_AUDIO_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 8004500:	230a      	movs	r3, #10
 8004502:	8003      	strh	r3, [r0, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
}
 8004504:	4800      	ldr	r0, [pc, #0]	; (8004508 <USBD_AUDIO_GetDeviceQualifierDesc+0x8>)
 8004506:	4770      	bx	lr
 8004508:	20000088 	.word	0x20000088

0800450c <USBD_AUDIO_DataIn>:
{
 800450c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  haudio = pdev->pClassData;
 8004510:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  haudio->timeout=0;
 8004514:	2300      	movs	r3, #0
  if (epnum == (AUDIO_IN_EP & 0x7F))
 8004516:	2901      	cmp	r1, #1
  uint16_t IsocInWr_app = haudio->wr_ptr;
 8004518:	8b25      	ldrh	r5, [r4, #24]
  uint16_t true_dim = haudio->buffer_length;
 800451a:	89e7      	ldrh	r7, [r4, #14]
  uint16_t packet_dim = haudio->paketDimension;
 800451c:	f8b4 9012 	ldrh.w	r9, [r4, #18]
  uint16_t channels = haudio->channels;
 8004520:	f894 a004 	ldrb.w	sl, [r4, #4]
  haudio->timeout=0;
 8004524:	81a3      	strh	r3, [r4, #12]
{
 8004526:	4606      	mov	r6, r0
  if (epnum == (AUDIO_IN_EP & 0x7F))
 8004528:	d145      	bne.n	80045b6 <USBD_AUDIO_DataIn+0xaa>
    if (haudio->state == STATE_USB_IDLE) 
 800452a:	7d23      	ldrb	r3, [r4, #20]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d109      	bne.n	8004544 <USBD_AUDIO_DataIn+0x38>
      haudio->state=STATE_USB_REQUESTS_STARTED;
 8004530:	2302      	movs	r3, #2
 8004532:	7523      	strb	r3, [r4, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Record();      
 8004534:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8004538:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800453c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	4798      	blx	r3
    if (haudio->state == STATE_USB_BUFFER_WRITE_STARTED)   
 8004544:	7d23      	ldrb	r3, [r4, #20]
 8004546:	2b03      	cmp	r3, #3
  length_usb_pck = packet_dim;  
 8004548:	46c8      	mov	r8, r9
    if (haudio->state == STATE_USB_BUFFER_WRITE_STARTED)   
 800454a:	d13f      	bne.n	80045cc <USBD_AUDIO_DataIn+0xc0>
      haudio->rd_ptr = haudio->rd_ptr % (true_dim);              
 800454c:	8ae2      	ldrh	r2, [r4, #22]
 800454e:	fbb2 f3f7 	udiv	r3, r2, r7
 8004552:	fb07 2213 	mls	r2, r7, r3, r2
 8004556:	b292      	uxth	r2, r2
      if(IsocInWr_app<haudio->rd_ptr){
 8004558:	42aa      	cmp	r2, r5
        app = ((true_dim) - haudio->rd_ptr) +  IsocInWr_app;
 800455a:	bf88      	it	hi
 800455c:	19ed      	addhi	r5, r5, r7
      if(app >= (packet_dim*haudio->upper_treshold)){       
 800455e:	7ea3      	ldrb	r3, [r4, #26]
      haudio->rd_ptr = haudio->rd_ptr % (true_dim);              
 8004560:	82e2      	strh	r2, [r4, #22]
        app = IsocInWr_app - haudio->rd_ptr;
 8004562:	1aad      	subs	r5, r5, r2
 8004564:	b2ad      	uxth	r5, r5
      if(app >= (packet_dim*haudio->upper_treshold)){       
 8004566:	fb09 f303 	mul.w	r3, r9, r3
 800456a:	429d      	cmp	r5, r3
 800456c:	db26      	blt.n	80045bc <USBD_AUDIO_DataIn+0xb0>
        length_usb_pck += channels*2;
 800456e:	eb09 084a 	add.w	r8, r9, sl, lsl #1
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 8004572:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004574:	4643      	mov	r3, r8
 8004576:	440a      	add	r2, r1
 8004578:	4630      	mov	r0, r6
 800457a:	2181      	movs	r1, #129	; 0x81
 800457c:	f7fc f8b1 	bl	80006e2 <USBD_LL_Transmit>
      haudio->rd_ptr += length_usb_pck;      
 8004580:	8ae3      	ldrh	r3, [r4, #22]
 8004582:	4443      	add	r3, r8
 8004584:	82e3      	strh	r3, [r4, #22]
      if(app < haudio->buffer_length/10)
 8004586:	220a      	movs	r2, #10
 8004588:	89e3      	ldrh	r3, [r4, #14]
 800458a:	fbb3 f3f2 	udiv	r3, r3, r2
 800458e:	42ab      	cmp	r3, r5
 8004590:	d911      	bls.n	80045b6 <USBD_AUDIO_DataIn+0xaa>
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Stop();
 8004592:	f8d6 02d4 	ldr.w	r0, [r6, #724]	; 0x2d4
 8004596:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800459a:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	4798      	blx	r3
        haudio->state = STATE_USB_IDLE; 
 80045a2:	2301      	movs	r3, #1
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 80045a4:	89e2      	ldrh	r2, [r4, #14]
        haudio->state = STATE_USB_IDLE; 
 80045a6:	7523      	strb	r3, [r4, #20]
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 80045a8:	8a23      	ldrh	r3, [r4, #16]
 80045aa:	6e20      	ldr	r0, [r4, #96]	; 0x60
        haudio->timeout=0;
 80045ac:	2100      	movs	r1, #0
 80045ae:	81a1      	strh	r1, [r4, #12]
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 80045b0:	441a      	add	r2, r3
 80045b2:	f002 fff7 	bl	80075a4 <memset>
}
 80045b6:	2000      	movs	r0, #0
 80045b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }else if(app <= (packet_dim*haudio->lower_treshold)){
 80045bc:	7ee3      	ldrb	r3, [r4, #27]
 80045be:	fb09 f303 	mul.w	r3, r9, r3
 80045c2:	429d      	cmp	r5, r3
        length_usb_pck -= channels*2;
 80045c4:	bfd8      	it	le
 80045c6:	eba9 084a 	suble.w	r8, r9, sl, lsl #1
 80045ca:	e7d2      	b.n	8004572 <USBD_AUDIO_DataIn+0x66>
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 80045cc:	4a03      	ldr	r2, [pc, #12]	; (80045dc <USBD_AUDIO_DataIn+0xd0>)
 80045ce:	464b      	mov	r3, r9
 80045d0:	2181      	movs	r1, #129	; 0x81
 80045d2:	4630      	mov	r0, r6
 80045d4:	f7fc f885 	bl	80006e2 <USBD_LL_Transmit>
 80045d8:	e7ed      	b.n	80045b6 <USBD_AUDIO_DataIn+0xaa>
 80045da:	bf00      	nop
 80045dc:	2000243c 	.word	0x2000243c

080045e0 <USBD_AUDIO_DeInit>:
{
 80045e0:	b510      	push	{r4, lr}
 80045e2:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,AUDIO_IN_EP);  
 80045e4:	2181      	movs	r1, #129	; 0x81
 80045e6:	f7fc f846 	bl	8000676 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80045ea:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80045ee:	b163      	cbz	r3, 800460a <USBD_AUDIO_DeInit+0x2a>
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0);
 80045f0:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
 80045f4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80045f8:	2000      	movs	r0, #0
 80045fa:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4798      	blx	r3
    haudioInstance.state = STATE_USB_WAITING_FOR_INIT; 
 8004602:	4b03      	ldr	r3, [pc, #12]	; (8004610 <USBD_AUDIO_DeInit+0x30>)
 8004604:	2200      	movs	r2, #0
 8004606:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 800460a:	2000      	movs	r0, #0
 800460c:	bd10      	pop	{r4, pc}
 800460e:	bf00      	nop
 8004610:	200023c4 	.word	0x200023c4

08004614 <USBD_AUDIO_Init>:
{
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(haudioInstance.state!=STATE_USB_WAITING_FOR_INIT)
 8004616:	4c1f      	ldr	r4, [pc, #124]	; (8004694 <USBD_AUDIO_Init+0x80>)
 8004618:	f894 620c 	ldrb.w	r6, [r4, #524]	; 0x20c
{
 800461c:	4605      	mov	r5, r0
  if(haudioInstance.state!=STATE_USB_WAITING_FOR_INIT)
 800461e:	bbbe      	cbnz	r6, 8004690 <USBD_AUDIO_Init+0x7c>
  pdev->pClassData = &haudioInstance;
 8004620:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
  uint16_t packet_dim = haudio->paketDimension;
 8004624:	f8b4 720a 	ldrh.w	r7, [r4, #522]	; 0x20a
  pdev->pClassData = &haudioInstance;
 8004628:	f8c0 32bc 	str.w	r3, [r0, #700]	; 0x2bc
  uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * haudio->dataAmount / haudio->paketDimension;
 800462c:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->frequency,0,haudio->channels);
 8004630:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
  haudio->rd_ptr = 0;
 8004634:	f8a4 620e 	strh.w	r6, [r4, #526]	; 0x20e
  uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * haudio->dataAmount / haudio->paketDimension;
 8004638:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800463c:	fbb3 f3f7 	udiv	r3, r3, r7
  haudio->wr_ptr=wr_rd_offset * packet_dim;
 8004640:	fb13 f307 	smulbb	r3, r3, r7
 8004644:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->frequency,0,haudio->channels);
 8004648:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
  haudio->timeout = 0;
 800464c:	f8a4 6204 	strh.w	r6, [r4, #516]	; 0x204
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->frequency,0,haudio->channels);
 8004650:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004654:	4631      	mov	r1, r6
 8004656:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800465a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4798      	blx	r3
  USBD_LL_OpenEP(pdev,
 8004662:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004666:	2201      	movs	r2, #1
 8004668:	2181      	movs	r1, #129	; 0x81
 800466a:	4628      	mov	r0, r5
 800466c:	f7fb fff9 	bl	8000662 <USBD_LL_OpenEP>
  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 8004670:	2181      	movs	r1, #129	; 0x81
 8004672:	4628      	mov	r0, r5
 8004674:	f7fc f806 	bl	8000684 <USBD_LL_FlushEP>
  USBD_LL_Transmit(pdev, AUDIO_IN_EP,
 8004678:	463b      	mov	r3, r7
 800467a:	f104 0278 	add.w	r2, r4, #120	; 0x78
 800467e:	2181      	movs	r1, #129	; 0x81
 8004680:	4628      	mov	r0, r5
 8004682:	f7fc f82e 	bl	80006e2 <USBD_LL_Transmit>
  haudio->state=STATE_USB_IDLE;
 8004686:	2301      	movs	r3, #1
 8004688:	f884 320c 	strb.w	r3, [r4, #524]	; 0x20c
}
 800468c:	4630      	mov	r0, r6
 800468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL; 
 8004690:	2603      	movs	r6, #3
 8004692:	e7fb      	b.n	800468c <USBD_AUDIO_Init+0x78>
 8004694:	200023c4 	.word	0x200023c4

08004698 <USBD_AUDIO_IsoINIncomplete>:
 8004698:	2000      	movs	r0, #0
 800469a:	4770      	bx	lr

0800469c <USBD_AUDIO_Setup>:
{
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	780c      	ldrb	r4, [r1, #0]
  haudio = pdev->pClassData;
 80046a0:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046a4:	f014 0460 	ands.w	r4, r4, #96	; 0x60
{
 80046a8:	4684      	mov	ip, r0
 80046aa:	460f      	mov	r7, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046ac:	d049      	beq.n	8004742 <USBD_AUDIO_Setup+0xa6>
 80046ae:	2c20      	cmp	r4, #32
 80046b0:	d12a      	bne.n	8004708 <USBD_AUDIO_Setup+0x6c>
    switch (req->bRequest)
 80046b2:	784d      	ldrb	r5, [r1, #1]
 80046b4:	2d01      	cmp	r5, #1
 80046b6:	d019      	beq.n	80046ec <USBD_AUDIO_Setup+0x50>
 80046b8:	f105 037f 	add.w	r3, r5, #127	; 0x7f
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d838      	bhi.n	8004734 <USBD_AUDIO_Setup+0x98>
 80046c2:	3d81      	subs	r5, #129	; 0x81
 80046c4:	2d03      	cmp	r5, #3
 80046c6:	d835      	bhi.n	8004734 <USBD_AUDIO_Setup+0x98>
 80046c8:	e8df f005 	tbb	[pc, r5]
 80046cc:	2f252002 	.word	0x2f252002
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
  
  (haudio->control.data)[0] = (uint16_t)VOL_CUR & 0xFF;
 80046d0:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <USBD_AUDIO_Setup+0xe4>)
 80046d2:	88ca      	ldrh	r2, [r1, #6]
 80046d4:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80046d8:	7773      	strb	r3, [r6, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_CUR & 0xFF00 ) >> 8;
 80046da:	f3c3 2307 	ubfx	r3, r3, #8, #8
  (haudio->control.data)[1] = ((uint16_t)VOL_MIN & 0xFF00 ) >> 8;
 80046de:	77b3      	strb	r3, [r6, #30]
  USBD_CtlSendData (pdev, 
 80046e0:	f106 011d 	add.w	r1, r6, #29
 80046e4:	4660      	mov	r0, ip
 80046e6:	f000 fe26 	bl	8005336 <USBD_CtlSendData>
 80046ea:	e00d      	b.n	8004708 <USBD_AUDIO_Setup+0x6c>
*/
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{ 
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
  if (req->wLength)
 80046ec:	88ca      	ldrh	r2, [r1, #6]
 80046ee:	2a00      	cmp	r2, #0
 80046f0:	d043      	beq.n	800477a <USBD_AUDIO_Setup+0xde>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx (pdev,
 80046f2:	4924      	ldr	r1, [pc, #144]	; (8004784 <USBD_AUDIO_Setup+0xe8>)
 80046f4:	f000 fe34 	bl	8005360 <USBD_CtlPrepareRx>
                       (uint8_t *)&VOL_CUR,
                       req->wLength);
    
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80046f8:	7735      	strb	r5, [r6, #28]
    haudio->control.len = req->wLength;          /* Set the request data length */
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8004700:	88bb      	ldrh	r3, [r7, #4]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	f886 305e 	strb.w	r3, [r6, #94]	; 0x5e
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004708:	2400      	movs	r4, #0
 800470a:	e018      	b.n	800473e <USBD_AUDIO_Setup+0xa2>
  (haudio->control.data)[0] = (uint16_t)VOL_MIN & 0xFF;
 800470c:	23e0      	movs	r3, #224	; 0xe0
 800470e:	88ca      	ldrh	r2, [r1, #6]
 8004710:	7773      	strb	r3, [r6, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MIN & 0xFF00 ) >> 8;
 8004712:	23db      	movs	r3, #219	; 0xdb
 8004714:	e7e3      	b.n	80046de <USBD_AUDIO_Setup+0x42>
  (haudio->control.data)[0] = (uint16_t)VOL_MAX & 0xFF;
 8004716:	2400      	movs	r4, #0
 8004718:	88ca      	ldrh	r2, [r1, #6]
 800471a:	7774      	strb	r4, [r6, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_RES & 0xFF00 ) >> 8;  
 800471c:	77b4      	strb	r4, [r6, #30]
  USBD_CtlSendData (pdev, 
 800471e:	f106 011d 	add.w	r1, r6, #29
 8004722:	4660      	mov	r0, ip
      USBD_CtlSendData (pdev,
 8004724:	f000 fe07 	bl	8005336 <USBD_CtlSendData>
      break;
 8004728:	e009      	b.n	800473e <USBD_AUDIO_Setup+0xa2>
  (haudio->control.data)[0] = (uint16_t)VOL_RES & 0xFF;
 800472a:	2323      	movs	r3, #35	; 0x23
 800472c:	88ca      	ldrh	r2, [r1, #6]
 800472e:	7773      	strb	r3, [r6, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_RES & 0xFF00 ) >> 8;  
 8004730:	2400      	movs	r4, #0
 8004732:	e7f3      	b.n	800471c <USBD_AUDIO_Setup+0x80>
      USBD_CtlError (pdev, req);
 8004734:	4639      	mov	r1, r7
 8004736:	4660      	mov	r0, ip
 8004738:	f000 fdd6 	bl	80052e8 <USBD_CtlError>
      return USBD_FAIL;
 800473c:	2403      	movs	r4, #3
}
 800473e:	4620      	mov	r0, r4
 8004740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 8004742:	784b      	ldrb	r3, [r1, #1]
 8004744:	2b0a      	cmp	r3, #10
 8004746:	d00d      	beq.n	8004764 <USBD_AUDIO_Setup+0xc8>
 8004748:	2b0b      	cmp	r3, #11
 800474a:	d00e      	beq.n	800476a <USBD_AUDIO_Setup+0xce>
 800474c:	2b06      	cmp	r3, #6
 800474e:	d1f6      	bne.n	800473e <USBD_AUDIO_Setup+0xa2>
      if( (req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8004750:	884b      	ldrh	r3, [r1, #2]
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	2b21      	cmp	r3, #33	; 0x21
 8004756:	d1f2      	bne.n	800473e <USBD_AUDIO_Setup+0xa2>
        len = MIN(USB_AUDIO_DESC_SIZ , req->wLength);   
 8004758:	88ca      	ldrh	r2, [r1, #6]
        USBD_CtlSendData (pdev, 
 800475a:	490b      	ldr	r1, [pc, #44]	; (8004788 <USBD_AUDIO_Setup+0xec>)
 800475c:	2a09      	cmp	r2, #9
 800475e:	bf28      	it	cs
 8004760:	2209      	movcs	r2, #9
 8004762:	e7df      	b.n	8004724 <USBD_AUDIO_Setup+0x88>
                        (uint8_t *)haudio->alt_setting,
 8004764:	6831      	ldr	r1, [r6, #0]
      USBD_CtlSendData (pdev,
 8004766:	2201      	movs	r2, #1
 8004768:	e7dc      	b.n	8004724 <USBD_AUDIO_Setup+0x88>
      if ((uint8_t)(req->wValue) < USBD_MAX_NUM_INTERFACES)
 800476a:	788b      	ldrb	r3, [r1, #2]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d801      	bhi.n	8004774 <USBD_AUDIO_Setup+0xd8>
        haudio->alt_setting = (uint8_t)(req->wValue);
 8004770:	6033      	str	r3, [r6, #0]
 8004772:	e7e4      	b.n	800473e <USBD_AUDIO_Setup+0xa2>
        USBD_CtlError (pdev, req);
 8004774:	f000 fdb8 	bl	80052e8 <USBD_CtlError>
 8004778:	e7e1      	b.n	800473e <USBD_AUDIO_Setup+0xa2>
  return ret;
 800477a:	4614      	mov	r4, r2
 800477c:	e7df      	b.n	800473e <USBD_AUDIO_Setup+0xa2>
 800477e:	bf00      	nop
 8004780:	200023c4 	.word	0x200023c4
 8004784:	2000243a 	.word	0x2000243a
 8004788:	200023d6 	.word	0x200023d6

0800478c <USBD_AUDIO_IsoOutIncomplete>:
 800478c:	2000      	movs	r0, #0
 800478e:	4770      	bx	lr

08004790 <USBD_AUDIO_SOF>:
 8004790:	2000      	movs	r0, #0
 8004792:	4770      	bx	lr

08004794 <USBD_AUDIO_Data_Transfer>:
*       you can pass 16 PCM samples if the function is called each millisecond, 
*       32 samples if called every 2 milliseconds and so on. 
* @retval status
*/
uint8_t  USBD_AUDIO_Data_Transfer(USBD_HandleTypeDef *pdev, int16_t * audioData, uint16_t PCMSamples)
{
 8004794:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
  
  if(haudioInstance.state==STATE_USB_WAITING_FOR_INIT){    
 8004796:	4b38      	ldr	r3, [pc, #224]	; (8004878 <USBD_AUDIO_Data_Transfer+0xe4>)
 8004798:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d067      	beq.n	8004870 <USBD_AUDIO_Data_Transfer+0xdc>
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80047a0:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  uint16_t dataAmount = PCMSamples * 2; /*Bytes*/
  uint16_t true_dim = haudio->buffer_length;
  uint16_t current_data_Amount = haudio->dataAmount;
  uint16_t packet_dim = haudio->paketDimension;
  
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 80047a4:	7d2b      	ldrb	r3, [r5, #20]
  uint16_t dataAmount = PCMSamples * 2; /*Bytes*/
 80047a6:	0054      	lsls	r4, r2, #1
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 80047a8:	2b02      	cmp	r3, #2
  uint16_t dataAmount = PCMSamples * 2; /*Bytes*/
 80047aa:	b2a4      	uxth	r4, r4
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 80047ac:	d002      	beq.n	80047b4 <USBD_AUDIO_Data_Transfer+0x20>
 80047ae:	8a2a      	ldrh	r2, [r5, #16]
 80047b0:	42a2      	cmp	r2, r4
 80047b2:	d02e      	beq.n	8004812 <USBD_AUDIO_Data_Transfer+0x7e>
  uint16_t packet_dim = haudio->paketDimension;
 80047b4:	8a6a      	ldrh	r2, [r5, #18]
    
    /*USB parameters definition, based on the amount of data passed*/
    haudio->dataAmount=dataAmount;                  
 80047b6:	822c      	strh	r4, [r5, #16]
    uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * dataAmount / packet_dim; 
 80047b8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    haudio->wr_ptr=wr_rd_offset * packet_dim;
    haudio->rd_ptr = 0;
    haudio->upper_treshold = wr_rd_offset + 1;
    haudio->lower_treshold = wr_rd_offset - 1;
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 80047bc:	fbb4 f4f2 	udiv	r4, r4, r2
    uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * dataAmount / packet_dim; 
 80047c0:	fbb3 f3f2 	udiv	r3, r3, r2
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 80047c4:	fb14 f402 	smulbb	r4, r4, r2
    haudio->wr_ptr=wr_rd_offset * packet_dim;
 80047c8:	fb13 f102 	smulbb	r1, r3, r2
 80047cc:	8329      	strh	r1, [r5, #24]
    haudio->upper_treshold = wr_rd_offset + 1;
 80047ce:	b2db      	uxtb	r3, r3
    haudio->rd_ptr = 0;
 80047d0:	2100      	movs	r1, #0
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 80047d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    
    /*Memory allocation for data buffer, depending (also) on data amount passed to the transfer function*/
    if(haudio->buffer != NULL)
 80047d6:	6e28      	ldr	r0, [r5, #96]	; 0x60
    haudio->rd_ptr = 0;
 80047d8:	82e9      	strh	r1, [r5, #22]
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 80047da:	0064      	lsls	r4, r4, #1
    haudio->upper_treshold = wr_rd_offset + 1;
 80047dc:	1c59      	adds	r1, r3, #1
    haudio->lower_treshold = wr_rd_offset - 1;
 80047de:	3b01      	subs	r3, #1
    haudio->upper_treshold = wr_rd_offset + 1;
 80047e0:	76a9      	strb	r1, [r5, #26]
    haudio->lower_treshold = wr_rd_offset - 1;
 80047e2:	76eb      	strb	r3, [r5, #27]
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 80047e4:	81ec      	strh	r4, [r5, #14]
    if(haudio->buffer != NULL)
 80047e6:	b108      	cbz	r0, 80047ec <USBD_AUDIO_Data_Transfer+0x58>
    {
      USBD_free(haudio->buffer);      
 80047e8:	f002 fec6 	bl	8007578 <free>
    }
    haudio->buffer = USBD_malloc(haudio->buffer_length + haudio->dataAmount);
 80047ec:	89ea      	ldrh	r2, [r5, #14]
 80047ee:	8a2b      	ldrh	r3, [r5, #16]
 80047f0:	441a      	add	r2, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	9201      	str	r2, [sp, #4]
 80047f6:	f002 feb7 	bl	8007568 <malloc>
 80047fa:	2403      	movs	r4, #3
 80047fc:	6628      	str	r0, [r5, #96]	; 0x60
    if(haudio->buffer == NULL)
 80047fe:	2800      	cmp	r0, #0
 8004800:	d038      	beq.n	8004874 <USBD_AUDIO_Data_Transfer+0xe0>
    {
      return USBD_FAIL;       
    }
    memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 8004802:	9a01      	ldr	r2, [sp, #4]
 8004804:	2100      	movs	r1, #0
 8004806:	f002 fecd 	bl	80075a4 <memset>
    haudio->state=STATE_USB_BUFFER_WRITE_STARTED;
 800480a:	752c      	strb	r4, [r5, #20]
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
    if((haudio->wr_ptr-dataAmount) == 0){
      memcpy((uint8_t *)(((uint8_t *)haudio->buffer)+true_dim),(uint8_t *)haudio->buffer, dataAmount);
    }
  }
  return USBD_OK;  
 800480c:	2000      	movs	r0, #0
}
 800480e:	b002      	add	sp, #8
 8004810:	bd70      	pop	{r4, r5, r6, pc}
  }else if(haudio->state==STATE_USB_BUFFER_WRITE_STARTED){
 8004812:	2b03      	cmp	r3, #3
 8004814:	d1fa      	bne.n	800480c <USBD_AUDIO_Data_Transfer+0x78>
    if(haudio->timeout++==TIMEOUT_VALUE){
 8004816:	89ab      	ldrh	r3, [r5, #12]
  uint16_t true_dim = haudio->buffer_length;
 8004818:	89ee      	ldrh	r6, [r5, #14]
    if(haudio->timeout++==TIMEOUT_VALUE){
 800481a:	b21a      	sxth	r2, r3
 800481c:	3301      	adds	r3, #1
 800481e:	b21b      	sxth	r3, r3
 8004820:	2ac8      	cmp	r2, #200	; 0xc8
 8004822:	81ab      	strh	r3, [r5, #12]
 8004824:	d10d      	bne.n	8004842 <USBD_AUDIO_Data_Transfer+0xae>
      haudio->state=STATE_USB_IDLE;
 8004826:	2301      	movs	r3, #1
 8004828:	752b      	strb	r3, [r5, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Stop();   
 800482a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800482e:	9101      	str	r1, [sp, #4]
 8004830:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004834:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	4798      	blx	r3
     haudio->timeout=0;
 800483c:	2300      	movs	r3, #0
 800483e:	9901      	ldr	r1, [sp, #4]
 8004840:	81ab      	strh	r3, [r5, #12]
    memcpy((uint8_t * )&haudio->buffer[haudio->wr_ptr], (uint8_t *)(audioData), dataAmount);    
 8004842:	8b2b      	ldrh	r3, [r5, #24]
 8004844:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8004846:	4622      	mov	r2, r4
 8004848:	4418      	add	r0, r3
 800484a:	f002 fe9d 	bl	8007588 <memcpy>
    haudio->wr_ptr += dataAmount;
 800484e:	8b2b      	ldrh	r3, [r5, #24]
 8004850:	4423      	add	r3, r4
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
 8004852:	b29b      	uxth	r3, r3
 8004854:	fbb3 f2f6 	udiv	r2, r3, r6
 8004858:	fb06 3312 	mls	r3, r6, r2, r3
 800485c:	b29b      	uxth	r3, r3
    if((haudio->wr_ptr-dataAmount) == 0){
 800485e:	42a3      	cmp	r3, r4
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
 8004860:	832b      	strh	r3, [r5, #24]
    if((haudio->wr_ptr-dataAmount) == 0){
 8004862:	d1d3      	bne.n	800480c <USBD_AUDIO_Data_Transfer+0x78>
      memcpy((uint8_t *)(((uint8_t *)haudio->buffer)+true_dim),(uint8_t *)haudio->buffer, dataAmount);
 8004864:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8004866:	4622      	mov	r2, r4
 8004868:	1988      	adds	r0, r1, r6
 800486a:	f002 fe8d 	bl	8007588 <memcpy>
 800486e:	e7cd      	b.n	800480c <USBD_AUDIO_Data_Transfer+0x78>
    return USBD_BUSY;    
 8004870:	2001      	movs	r0, #1
 8004872:	e7cc      	b.n	800480e <USBD_AUDIO_Data_Transfer+0x7a>
      return USBD_FAIL;       
 8004874:	4620      	mov	r0, r4
 8004876:	e7ca      	b.n	800480e <USBD_AUDIO_Data_Transfer+0x7a>
 8004878:	200023c4 	.word	0x200023c4

0800487c <USBD_AUDIO_RegisterInterface>:
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_AUDIO_ItfTypeDef *fops)
{
  if(fops != NULL)
 800487c:	b109      	cbz	r1, 8004882 <USBD_AUDIO_RegisterInterface+0x6>
  {
    pdev->pUserData[0]= fops;
 800487e:	f8c0 12c4 	str.w	r1, [r0, #708]	; 0x2c4
  }
  return 0;}
 8004882:	2000      	movs	r0, #0
 8004884:	4770      	bx	lr
	...

08004888 <USBD_AUDIO_Init_Microphone_Descriptor>:
*/
void USBD_AUDIO_Init_Microphone_Descriptor(USBD_HandleTypeDef   *pdev, uint32_t samplingFrequency, uint8_t Channels)
{
  uint16_t index;
  uint8_t AUDIO_CONTROLS;   
  USBD_AUDIO_CfgDesc[0] = 0x09;                                                /* bLength */
 8004888:	4bca      	ldr	r3, [pc, #808]	; (8004bb4 <USBD_AUDIO_Init_Microphone_Descriptor+0x32c>)
 800488a:	f240 2009 	movw	r0, #521	; 0x209
{
 800488e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USBD_AUDIO_CfgDesc[0] = 0x09;                                                /* bLength */
 8004892:	8018      	strh	r0, [r3, #0]
  USBD_AUDIO_CfgDesc[1] = 0x02;                                                /* bDescriptorType */
  USBD_AUDIO_CfgDesc[2] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)&0xff);       /* wTotalLength */
 8004894:	f102 006c 	add.w	r0, r2, #108	; 0x6c
 8004898:	7098      	strb	r0, [r3, #2]
  USBD_AUDIO_CfgDesc[3] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)>>8);
 800489a:	1200      	asrs	r0, r0, #8
  USBD_AUDIO_CfgDesc[4] = 0x02;                                                /* bNumInterfaces */
  USBD_AUDIO_CfgDesc[5] = 0x01;                                                /* bConfigurationValue */
  USBD_AUDIO_CfgDesc[6] = 0x00;                                                /* iConfiguration */
  USBD_AUDIO_CfgDesc[7] = 0x80;                                                /* bmAttributes  BUS Powered*/
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 800489c:	4cc6      	ldr	r4, [pc, #792]	; (8004bb8 <USBD_AUDIO_Init_Microphone_Descriptor+0x330>)
  USBD_AUDIO_CfgDesc[3] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)>>8);
 800489e:	70d8      	strb	r0, [r3, #3]
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 80048a0:	48c6      	ldr	r0, [pc, #792]	; (8004bbc <USBD_AUDIO_Init_Microphone_Descriptor+0x334>)
  USBD_AUDIO_CfgDesc[11] = 0x00;                                               /* bInterfaceNumber */
  USBD_AUDIO_CfgDesc[12] = 0x00;                                               /* bAlternateSetting */
  USBD_AUDIO_CfgDesc[13] = 0x00;                                               /* bNumEndpoints */
  USBD_AUDIO_CfgDesc[14] = USB_DEVICE_CLASS_AUDIO;                             /* bInterfaceClass */
  USBD_AUDIO_CfgDesc[15] = AUDIO_SUBCLASS_AUDIOCONTROL;                        /* bInterfaceSubClass */
  USBD_AUDIO_CfgDesc[16] = AUDIO_PROTOCOL_UNDEFINED;                           /* bInterfaceProtocol */
 80048a2:	4dc7      	ldr	r5, [pc, #796]	; (8004bc0 <USBD_AUDIO_Init_Microphone_Descriptor+0x338>)
  USBD_AUDIO_CfgDesc[29] = AUDIO_CONTROL_INPUT_TERMINAL;                       /* bDescriptorSubtype */
  USBD_AUDIO_CfgDesc[30] = 0x01;                                               /* bTerminalID */
  USBD_AUDIO_CfgDesc[31] = 0x01;                                               /* wTerminalType AUDIO_TERMINAL_USB_MICROPHONE   0x0201 */
  USBD_AUDIO_CfgDesc[32] = 0x02;
  USBD_AUDIO_CfgDesc[33] = 0x00;                                               /* bAssocTerminal */
  USBD_AUDIO_CfgDesc[34] = Channels;                                           /* bNrChannels */   
 80048a4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 80048a8:	e9c3 4001 	strd	r4, r0, [r3, #4]
  USBD_AUDIO_CfgDesc[16] = AUDIO_PROTOCOL_UNDEFINED;                           /* bInterfaceProtocol */
 80048ac:	48c5      	ldr	r0, [pc, #788]	; (8004bc4 <USBD_AUDIO_Init_Microphone_Descriptor+0x33c>)
 80048ae:	e9c3 5003 	strd	r5, r0, [r3, #12]
  USBD_AUDIO_CfgDesc[20] = AUDIO_CONTROL_HEADER;                               /* bDescriptorSubtype */
 80048b2:	2001      	movs	r0, #1
 80048b4:	8298      	strh	r0, [r3, #20]
  USBD_AUDIO_CfgDesc[22] = 0x01;
 80048b6:	7598      	strb	r0, [r3, #22]
  USBD_AUDIO_CfgDesc[23] = 0x25+Channels;                                      /* wTotalLength = 37+AUDIO_CHANNELS*/
 80048b8:	f102 0025 	add.w	r0, r2, #37	; 0x25
 80048bc:	75d8      	strb	r0, [r3, #23]
  USBD_AUDIO_CfgDesc[24] = 0x00;
 80048be:	48c2      	ldr	r0, [pc, #776]	; (8004bc8 <USBD_AUDIO_Init_Microphone_Descriptor+0x340>)
 80048c0:	6198      	str	r0, [r3, #24]
  USBD_AUDIO_CfgDesc[28] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 80048c2:	f100 4075 	add.w	r0, r0, #4110417920	; 0xf5000000
 80048c6:	f500 7092 	add.w	r0, r0, #292	; 0x124
 80048ca:	61d8      	str	r0, [r3, #28]
  USBD_AUDIO_CfgDesc[32] = 0x02;
 80048cc:	2002      	movs	r0, #2
  if(Channels != 2)
 80048ce:	4282      	cmp	r2, r0
    USBD_AUDIO_CfgDesc[35] = 0x00;                                             /* wChannelConfig 0x0000  Mono */
    USBD_AUDIO_CfgDesc[36] = 0x00;
  }
  else
  {
    USBD_AUDIO_CfgDesc[35] = 0x03;                                             /* wChannelConfig 0x0003  Stereo */
 80048d0:	bf04      	itt	eq
 80048d2:	2403      	moveq	r4, #3
 80048d4:	f883 4023 	strbeq.w	r4, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
  }   
  USBD_AUDIO_CfgDesc[37] = 0x00;                                               /* iChannelNames */
  USBD_AUDIO_CfgDesc[38] = 0x00;                                               /* iTerminal */   
  /* USB Microphone Audio Feature Unit Descriptor */
  USBD_AUDIO_CfgDesc[39] = 0x07+Channels+1;                                    /* bLength */
 80048d8:	f102 0408 	add.w	r4, r2, #8
 80048dc:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
  USBD_AUDIO_CfgDesc[40] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 80048e0:	4cba      	ldr	r4, [pc, #744]	; (8004bcc <USBD_AUDIO_Init_Microphone_Descriptor+0x344>)
  USBD_AUDIO_CfgDesc[32] = 0x02;
 80048e2:	8418      	strh	r0, [r3, #32]
  USBD_AUDIO_CfgDesc[40] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 80048e4:	629c      	str	r4, [r3, #40]	; 0x28
 80048e6:	f04f 0000 	mov.w	r0, #0
  USBD_AUDIO_CfgDesc[41] = AUDIO_CONTROL_FEATURE_UNIT;                         /* bDescriptorSubtype */
  USBD_AUDIO_CfgDesc[42] = 0x02;                                               /* bUnitID */
  USBD_AUDIO_CfgDesc[43] = 0x01;                                               /* bSourceID */
  USBD_AUDIO_CfgDesc[44] = 0x01;                                               /* bControlSize */   
 80048ea:	f04f 0401 	mov.w	r4, #1
    USBD_AUDIO_CfgDesc[35] = 0x00;                                             /* wChannelConfig 0x0000  Mono */
 80048ee:	bf18      	it	ne
 80048f0:	f883 0023 	strbne.w	r0, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 80048f4:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  index = 47;   
  if(Channels == 1)
 80048f8:	42a2      	cmp	r2, r4
  USBD_AUDIO_CfgDesc[37] = 0x00;                                               /* iChannelNames */
 80048fa:	f04f 0000 	mov.w	r0, #0
 80048fe:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
  USBD_AUDIO_CfgDesc[38] = 0x00;                                               /* iTerminal */   
 8004902:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
  USBD_AUDIO_CfgDesc[44] = 0x01;                                               /* bControlSize */   
 8004906:	f883 402c 	strb.w	r4, [r3, #44]	; 0x2c
  if(Channels == 1)
 800490a:	f040 8126 	bne.w	8004b5a <USBD_AUDIO_Init_Microphone_Descriptor+0x2d2>
  {
    AUDIO_CONTROLS = (0x02);     
    USBD_AUDIO_CfgDesc[45] = AUDIO_CONTROLS;
 800490e:	2402      	movs	r4, #2
    USBD_AUDIO_CfgDesc[46] = 0x00;     
 8004910:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
    USBD_AUDIO_CfgDesc[45] = AUDIO_CONTROLS;
 8004914:	f883 402d 	strb.w	r4, [r3, #45]	; 0x2d
  index = 47;   
 8004918:	202f      	movs	r0, #47	; 0x2f
    index++;
  }   
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
  index++;   
  /*USB Microphone Output Terminal Descriptor */
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 800491a:	1c45      	adds	r5, r0, #1
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
 800491c:	2400      	movs	r4, #0
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 800491e:	2709      	movs	r7, #9
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
 8004920:	541c      	strb	r4, [r3, r0]
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 8004922:	555f      	strb	r7, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8004924:	1c85      	adds	r5, r0, #2
 8004926:	f04f 0c24 	mov.w	ip, #36	; 0x24
 800492a:	f803 c005 	strb.w	ip, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_CONTROL_OUTPUT_TERMINAL;                 /* bDescriptorSubtype */
 800492e:	1cc5      	adds	r5, r0, #3
 8004930:	f04f 0803 	mov.w	r8, #3
 8004934:	f803 8005 	strb.w	r8, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalID */
 8004938:	1d05      	adds	r5, r0, #4
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wTerminalType AUDIO_TERMINAL_USB_STREAMING 0x0101*/
 800493a:	1d46      	adds	r6, r0, #5
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalID */
 800493c:	f803 8005 	strb.w	r8, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wTerminalType AUDIO_TERMINAL_USB_STREAMING 0x0101*/
 8004940:	2501      	movs	r5, #1
 8004942:	559d      	strb	r5, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x01;
 8004944:	1d86      	adds	r6, r0, #6
  USBD_AUDIO_CfgDesc[index++] = 0x00;
  USBD_AUDIO_CfgDesc[index++] = 0x02;
 8004946:	f100 0e08 	add.w	lr, r0, #8
  USBD_AUDIO_CfgDesc[index++] = 0x01;
 800494a:	559d      	strb	r5, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x00;
 800494c:	1dc6      	adds	r6, r0, #7
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Zero Bandwith */
  /* Interface 1, Alternate Setting 0                                             */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 800494e:	f100 090b 	add.w	r9, r0, #11
  USBD_AUDIO_CfgDesc[index++] = 0x00;
 8004952:	559c      	strb	r4, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x02;
 8004954:	2602      	movs	r6, #2
 8004956:	f803 600e 	strb.w	r6, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 800495a:	eb00 0e07 	add.w	lr, r0, r7
 800495e:	f803 400e 	strb.w	r4, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 8004962:	f100 0e0a 	add.w	lr, r0, #10
 8004966:	f803 700e 	strb.w	r7, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 800496a:	f04f 0e04 	mov.w	lr, #4
 800496e:	f803 e009 	strb.w	lr, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 8004972:	f100 090c 	add.w	r9, r0, #12
 8004976:	f803 5009 	strb.w	r5, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bAlternateSetting */
 800497a:	f100 090d 	add.w	r9, r0, #13
 800497e:	f803 4009 	strb.w	r4, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bNumEndpoints */
 8004982:	f100 090e 	add.w	r9, r0, #14
 8004986:	f803 4009 	strb.w	r4, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 800498a:	f100 090f 	add.w	r9, r0, #15
 800498e:	f803 5009 	strb.w	r5, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 8004992:	f100 0910 	add.w	r9, r0, #16
 8004996:	f803 6009 	strb.w	r6, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 800499a:	f100 0911 	add.w	r9, r0, #17
 800499e:	f803 4009 	strb.w	r4, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 80049a2:	f100 0912 	add.w	r9, r0, #18
 80049a6:	f803 4009 	strb.w	r4, [r3, r9]
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Operational */
  /* Interface 1, Alternate Setting 1                                           */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 80049aa:	f100 0913 	add.w	r9, r0, #19
 80049ae:	f803 7009 	strb.w	r7, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 80049b2:	f100 0914 	add.w	r9, r0, #20
 80049b6:	f803 e009 	strb.w	lr, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 80049ba:	f100 0e15 	add.w	lr, r0, #21
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* iInterface */   
  /* USB Microphone Audio Streaming Interface Descriptor */
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_INTERFACE_DESC_SIZE;           /* bLength */
 80049be:	f100 091c 	add.w	r9, r0, #28
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 80049c2:	f803 500e 	strb.w	r5, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bAlternateSetting */
 80049c6:	f100 0e16 	add.w	lr, r0, #22
 80049ca:	f803 500e 	strb.w	r5, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bNumEndpoints */
 80049ce:	f100 0e17 	add.w	lr, r0, #23
 80049d2:	f803 500e 	strb.w	r5, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 80049d6:	f100 0e18 	add.w	lr, r0, #24
 80049da:	f803 500e 	strb.w	r5, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 80049de:	f100 0e19 	add.w	lr, r0, #25
 80049e2:	f803 600e 	strb.w	r6, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 80049e6:	f100 0e1a 	add.w	lr, r0, #26
 80049ea:	f803 400e 	strb.w	r4, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* iInterface */   
 80049ee:	f100 0e1b 	add.w	lr, r0, #27
 80049f2:	f803 400e 	strb.w	r4, [r3, lr]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_INTERFACE_DESC_SIZE;           /* bLength */
 80049f6:	f04f 0e07 	mov.w	lr, #7
 80049fa:	f803 e009 	strb.w	lr, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 80049fe:	f100 091d 	add.w	r9, r0, #29
 8004a02:	f803 c009 	strb.w	ip, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_GENERAL;                       /* bDescriptorSubtype */
 8004a06:	f100 091e 	add.w	r9, r0, #30
 8004a0a:	f803 5009 	strb.w	r5, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalLink */
 8004a0e:	f100 091f 	add.w	r9, r0, #31
 8004a12:	f803 8009 	strb.w	r8, [r3, r9]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bDelay */
 8004a16:	f100 0820 	add.w	r8, r0, #32
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
  USBD_AUDIO_CfgDesc[index++] = 0x00;                
  /* USB Microphone Audio Type I Format Interface Descriptor */                
  USBD_AUDIO_CfgDesc[index++] = 0x0B;                                          /* bLength */
 8004a1a:	f04f 090b 	mov.w	r9, #11
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bDelay */
 8004a1e:	f803 5008 	strb.w	r5, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
 8004a22:	f100 0821 	add.w	r8, r0, #33	; 0x21
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bLockDelayUnits */
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
    
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*2);
  haudioInstance.frequency=samplingFrequency;
 8004a26:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
 8004a2a:	f803 5008 	strb.w	r5, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                
 8004a2e:	f100 0822 	add.w	r8, r0, #34	; 0x22
 8004a32:	f803 4008 	strb.w	r4, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = 0x0B;                                          /* bLength */
 8004a36:	f100 0823 	add.w	r8, r0, #35	; 0x23
 8004a3a:	f803 9008 	strb.w	r9, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8004a3e:	eb00 080c 	add.w	r8, r0, ip
 8004a42:	f803 c008 	strb.w	ip, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_FORMAT_TYPE;                   /* bDescriptorSubtype */
 8004a46:	f100 0c25 	add.w	ip, r0, #37	; 0x25
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)&0xFF;  /* wMaxPacketSize */ 
 8004a4a:	f100 0832 	add.w	r8, r0, #50	; 0x32
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_FORMAT_TYPE;                   /* bDescriptorSubtype */
 8004a4e:	f803 600c 	strb.w	r6, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_FORMAT_TYPE_I;                           /* bFormatType */
 8004a52:	f100 0c26 	add.w	ip, r0, #38	; 0x26
 8004a56:	f803 500c 	strb.w	r5, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = Channels;                                      /* bNrChannels */
 8004a5a:	f100 0c27 	add.w	ip, r0, #39	; 0x27
 8004a5e:	f803 200c 	strb.w	r2, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 0x02;                                          /* bSubFrameSize */
 8004a62:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8004a66:	f803 600c 	strb.w	r6, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 16;                                            /* bBitResolution */
 8004a6a:	f100 0629 	add.w	r6, r0, #41	; 0x29
 8004a6e:	f04f 0c10 	mov.w	ip, #16
 8004a72:	f803 c006 	strb.w	ip, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                           /* bSamFreqType */
 8004a76:	f100 062a 	add.w	r6, r0, #42	; 0x2a
  USBD_AUDIO_CfgDesc[index++] = (samplingFrequency>>8)&0xff;
 8004a7a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                           /* bSamFreqType */
 8004a7e:	559d      	strb	r5, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency&0xff;                        /* tSamFreq 8000 = 0x1F40 */
 8004a80:	f100 062b 	add.w	r6, r0, #43	; 0x2b
 8004a84:	5599      	strb	r1, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = (samplingFrequency>>8)&0xff;
 8004a86:	f100 062c 	add.w	r6, r0, #44	; 0x2c
 8004a8a:	f803 c006 	strb.w	ip, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency>>16;   
 8004a8e:	f100 062d 	add.w	r6, r0, #45	; 0x2d
 8004a92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004a96:	f803 c006 	strb.w	ip, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] =  AUDIO_STANDARD_ENDPOINT_DESC_SIZE;            /* bLength */
 8004a9a:	f100 062e 	add.w	r6, r0, #46	; 0x2e
  USBD_AUDIO_CfgDesc[index++] = AUDIO_IN_EP;                                   /* bEndpointAddress 1 in endpoint*/
 8004a9e:	f04f 0c81 	mov.w	ip, #129	; 0x81
  USBD_AUDIO_CfgDesc[index++] =  AUDIO_STANDARD_ENDPOINT_DESC_SIZE;            /* bLength */
 8004aa2:	559f      	strb	r7, [r3, r6]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bDescriptorType */
 8004aa4:	f100 072f 	add.w	r7, r0, #47	; 0x2f
 8004aa8:	2605      	movs	r6, #5
 8004aaa:	55de      	strb	r6, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_IN_EP;                                   /* bEndpointAddress 1 in endpoint*/
 8004aac:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8004ab0:	f803 c007 	strb.w	ip, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bmAttributes */
 8004ab4:	f100 0731 	add.w	r7, r0, #49	; 0x31
 8004ab8:	55de      	strb	r6, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)&0xFF;  /* wMaxPacketSize */ 
 8004aba:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004abe:	fbb1 f6f6 	udiv	r6, r1, r6
 8004ac2:	1cb7      	adds	r7, r6, #2
 8004ac4:	fb17 fc02 	smulbb	ip, r7, r2
 8004ac8:	fa0c fc05 	lsl.w	ip, ip, r5
 8004acc:	f803 c008 	strb.w	ip, [r3, r8]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)>>8; 
 8004ad0:	4357      	muls	r7, r2
 8004ad2:	f100 0c33 	add.w	ip, r0, #51	; 0x33
 8004ad6:	f3c7 17d7 	ubfx	r7, r7, #7, #24
 8004ada:	f803 700c 	strb.w	r7, [r3, ip]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterval */
 8004ade:	f100 0734 	add.w	r7, r0, #52	; 0x34
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_DESCRIPTOR_TYPE;                /* bDescriptorType */
 8004ae2:	f04f 0c25 	mov.w	ip, #37	; 0x25
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterval */
 8004ae6:	55dd      	strb	r5, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bRefresh */
 8004ae8:	f100 0735 	add.w	r7, r0, #53	; 0x35
 8004aec:	55dc      	strb	r4, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bSynchAddress */   
 8004aee:	f100 0736 	add.w	r7, r0, #54	; 0x36
 8004af2:	55dc      	strb	r4, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_ENDPOINT_DESC_SIZE;            /* bLength */
 8004af4:	f100 0737 	add.w	r7, r0, #55	; 0x37
 8004af8:	f803 e007 	strb.w	lr, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_DESCRIPTOR_TYPE;                /* bDescriptorType */
 8004afc:	f100 0738 	add.w	r7, r0, #56	; 0x38
 8004b00:	f803 c007 	strb.w	ip, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_GENERAL;                        /* bDescriptor */
 8004b04:	f100 0739 	add.w	r7, r0, #57	; 0x39
 8004b08:	55dd      	strb	r5, [r3, r7]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bmAttributes */
 8004b0a:	f100 053a 	add.w	r5, r0, #58	; 0x3a
 8004b0e:	555c      	strb	r4, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bLockDelayUnits */
 8004b10:	f100 053b 	add.w	r5, r0, #59	; 0x3b
 8004b14:	555c      	strb	r4, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
 8004b16:	f100 053c 	add.w	r5, r0, #60	; 0x3c
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
 8004b1a:	303d      	adds	r0, #61	; 0x3d
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
 8004b1c:	555c      	strb	r4, [r3, r5]
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
 8004b1e:	541c      	strb	r4, [r3, r0]
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*2);
 8004b20:	fb16 f002 	smulbb	r0, r6, r2
 8004b24:	b280      	uxth	r0, r0
 8004b26:	0045      	lsls	r5, r0, #1
  haudioInstance.buffer_length = haudioInstance.paketDimension * AUDIO_IN_PACKET_NUM;
 8004b28:	1941      	adds	r1, r0, r5
 8004b2a:	0088      	lsls	r0, r1, #2
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*2);
 8004b2c:	f8a3 520a 	strh.w	r5, [r3, #522]	; 0x20a
  haudioInstance.buffer_length = haudioInstance.paketDimension * AUDIO_IN_PACKET_NUM;
 8004b30:	f8a3 0206 	strh.w	r0, [r3, #518]	; 0x206
  haudioInstance.channels=Channels;  
 8004b34:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  haudioInstance.upper_treshold = 5;
 8004b38:	f240 2205 	movw	r2, #517	; 0x205
  haudioInstance.lower_treshold = 2;
  haudioInstance.state = STATE_USB_WAITING_FOR_INIT;
  haudioInstance.wr_ptr = 3 * haudioInstance.paketDimension;
 8004b3c:	0049      	lsls	r1, r1, #1
  haudioInstance.upper_treshold = 5;
 8004b3e:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
  haudioInstance.state = STATE_USB_WAITING_FOR_INIT;
 8004b42:	f883 420c 	strb.w	r4, [r3, #524]	; 0x20c
  haudioInstance.wr_ptr = 3 * haudioInstance.paketDimension;
 8004b46:	f8a3 1210 	strh.w	r1, [r3, #528]	; 0x210
  haudioInstance.rd_ptr = 0;  
 8004b4a:	f8a3 420e 	strh.w	r4, [r3, #526]	; 0x20e
  haudioInstance.dataAmount=0;
 8004b4e:	f8a3 4208 	strh.w	r4, [r3, #520]	; 0x208
  haudioInstance.buffer = 0;
 8004b52:	f8c3 4258 	str.w	r4, [r3, #600]	; 0x258
}
 8004b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    USBD_AUDIO_CfgDesc[45] = 0x00;
 8004b5a:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
  if(Channels > 2)
 8004b5e:	2a02      	cmp	r2, #2
    USBD_AUDIO_CfgDesc[46] = AUDIO_CONTROLS;
 8004b60:	f240 2002 	movw	r0, #514	; 0x202
 8004b64:	85d8      	strh	r0, [r3, #46]	; 0x2e
  if(Channels > 2)
 8004b66:	d918      	bls.n	8004b9a <USBD_AUDIO_Init_Microphone_Descriptor+0x312>
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b68:	2002      	movs	r0, #2
  if(Channels > 3)
 8004b6a:	2a03      	cmp	r2, #3
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b6c:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
  if(Channels > 3)
 8004b70:	d015      	beq.n	8004b9e <USBD_AUDIO_Init_Microphone_Descriptor+0x316>
  if(Channels > 4)
 8004b72:	2a04      	cmp	r2, #4
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b74:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
  if(Channels > 4)
 8004b78:	d013      	beq.n	8004ba2 <USBD_AUDIO_Init_Microphone_Descriptor+0x31a>
  if(Channels > 5)
 8004b7a:	2a05      	cmp	r2, #5
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b7c:	f883 0032 	strb.w	r0, [r3, #50]	; 0x32
  if(Channels > 5)
 8004b80:	d011      	beq.n	8004ba6 <USBD_AUDIO_Init_Microphone_Descriptor+0x31e>
  if(Channels > 6)
 8004b82:	2a06      	cmp	r2, #6
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b84:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33
  if(Channels > 6)
 8004b88:	d00f      	beq.n	8004baa <USBD_AUDIO_Init_Microphone_Descriptor+0x322>
  if(Channels > 7)
 8004b8a:	2a07      	cmp	r2, #7
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b8c:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
  if(Channels > 7)
 8004b90:	d00d      	beq.n	8004bae <USBD_AUDIO_Init_Microphone_Descriptor+0x326>
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8004b92:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
    index++;
 8004b96:	2036      	movs	r0, #54	; 0x36
 8004b98:	e6bf      	b.n	800491a <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8004b9a:	2030      	movs	r0, #48	; 0x30
 8004b9c:	e6bd      	b.n	800491a <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8004b9e:	2031      	movs	r0, #49	; 0x31
 8004ba0:	e6bb      	b.n	800491a <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8004ba2:	2032      	movs	r0, #50	; 0x32
 8004ba4:	e6b9      	b.n	800491a <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8004ba6:	2033      	movs	r0, #51	; 0x33
 8004ba8:	e6b7      	b.n	800491a <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8004baa:	2034      	movs	r0, #52	; 0x34
 8004bac:	e6b5      	b.n	800491a <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
    index++;
 8004bae:	2035      	movs	r0, #53	; 0x35
 8004bb0:	e6b3      	b.n	800491a <USBD_AUDIO_Init_Microphone_Descriptor+0x92>
 8004bb2:	bf00      	nop
 8004bb4:	200023c4 	.word	0x200023c4
 8004bb8:	80000102 	.word	0x80000102
 8004bbc:	00040932 	.word	0x00040932
 8004bc0:	01010000 	.word	0x01010000
 8004bc4:	24090000 	.word	0x24090000
 8004bc8:	0c010100 	.word	0x0c010100
 8004bcc:	01020624 	.word	0x01020624

08004bd0 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004bd0:	b178      	cbz	r0, 8004bf2 <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004bd8:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004bdc:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004be0:	b109      	cbz	r1, 8004be6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004be2:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8004bec:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004bee:	f7fb bcff 	b.w	80005f0 <USBD_LL_Init>

  return ret;
}
 8004bf2:	2003      	movs	r0, #3
 8004bf4:	4770      	bx	lr

08004bf6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004bf6:	b513      	push	{r0, r1, r4, lr}
  uint16_t len = 0U;
 8004bf8:	2300      	movs	r3, #0
{
 8004bfa:	4604      	mov	r4, r0
  uint16_t len = 0U;
 8004bfc:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8004c00:	b181      	cbz	r1, 8004c24 <USBD_RegisterClass+0x2e>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004c02:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass[0] = pclass;
 8004c04:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004c08:	b123      	cbz	r3, 8004c14 <USBD_RegisterClass+0x1e>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004c0a:	f10d 0006 	add.w	r0, sp, #6
 8004c0e:	4798      	blx	r3
 8004c10:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004c14:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
 8004c18:	3301      	adds	r3, #1
 8004c1a:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 8004c1e:	2000      	movs	r0, #0
}
 8004c20:	b002      	add	sp, #8
 8004c22:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004c24:	2003      	movs	r0, #3
 8004c26:	e7fb      	b.n	8004c20 <USBD_RegisterClass+0x2a>

08004c28 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004c28:	f7fb bd14 	b.w	8000654 <USBD_LL_Start>

08004c2c <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004c2c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004c30:	b10b      	cbz	r3, 8004c36 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	4770      	bx	lr

08004c3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c3a:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004c3c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8004c44:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8004c46:	bf18      	it	ne
 8004c48:	2003      	movne	r0, #3
 8004c4a:	bd08      	pop	{r3, pc}

08004c4c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004c50:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8004c54:	4628      	mov	r0, r5
 8004c56:	f000 fb3c 	bl	80052d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004c5a:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004c5c:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8004c60:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004c64:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8004c68:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004c6c:	f001 031f 	and.w	r3, r1, #31
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d008      	beq.n	8004c86 <USBD_LL_SetupStage+0x3a>
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d00c      	beq.n	8004c92 <USBD_LL_SetupStage+0x46>
 8004c78:	b98b      	cbnz	r3, 8004c9e <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8004c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c82:	f000 b903 	b.w	8004e8c <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c86:	4629      	mov	r1, r5
 8004c88:	4620      	mov	r0, r4
}
 8004c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c8e:	f000 ba53 	b.w	8005138 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c92:	4629      	mov	r1, r5
 8004c94:	4620      	mov	r0, r4
}
 8004c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c9a:	f000 ba7c 	b.w	8005196 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 8004ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ca8:	f7fb bcf3 	b.w	8000692 <USBD_LL_StallEP>

08004cac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8004cb2:	bb09      	cbnz	r1, 8004cf8 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004cb4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d10c      	bne.n	8004cd6 <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8004cbc:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d90a      	bls.n	8004cda <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 8004cc4:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004cc6:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8004cc8:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004ccc:	bf28      	it	cs
 8004cce:	461a      	movcs	r2, r3
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	f000 fb52 	bl	800537a <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cda:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d106      	bne.n	8004cf0 <USBD_LL_DataOutStage+0x44>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004ce2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	b113      	cbz	r3, 8004cf0 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 8004cea:	f8c0 12d4 	str.w	r1, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004cee:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f000 fb4a 	bl	800538a <USBD_CtlSendStatus>
 8004cf6:	e7ee      	b.n	8004cd6 <USBD_LL_DataOutStage+0x2a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cf8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d1ea      	bne.n	8004cd6 <USBD_LL_DataOutStage+0x2a>
        if (pdev->pClass[idx]->DataOut != NULL)
 8004d00:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0e5      	beq.n	8004cd6 <USBD_LL_DataOutStage+0x2a>
          pdev->classId = idx;
 8004d0a:	2200      	movs	r2, #0
}
 8004d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8004d10:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004d14:	4718      	bx	r3

08004d16 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004d16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d18:	4604      	mov	r4, r0
 8004d1a:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	d141      	bne.n	8004da4 <USBD_LL_DataInStage+0x8e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d20:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004d24:	2a02      	cmp	r2, #2
 8004d26:	d10f      	bne.n	8004d48 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d28:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 8004d2c:	4295      	cmp	r5, r2
 8004d2e:	d914      	bls.n	8004d5a <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8004d30:	1aaa      	subs	r2, r5, r2
 8004d32:	9101      	str	r1, [sp, #4]
 8004d34:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004d36:	4631      	mov	r1, r6
 8004d38:	f000 fb0a 	bl	8005350 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d3c:	9b01      	ldr	r3, [sp, #4]
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4619      	mov	r1, r3
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7fb fcd4 	bl	80006f0 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8004d48:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004d4c:	b113      	cbz	r3, 8004d54 <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8004d54:	2000      	movs	r0, #0
 8004d56:	b002      	add	sp, #8
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8004d5a:	d10e      	bne.n	8004d7a <USBD_LL_DataInStage+0x64>
            (pep->total_length >= pep->maxpacket) &&
 8004d5c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8004d5e:	4295      	cmp	r5, r2
 8004d60:	d80b      	bhi.n	8004d7a <USBD_LL_DataInStage+0x64>
            (pep->total_length >= pep->maxpacket) &&
 8004d62:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8004d66:	42aa      	cmp	r2, r5
 8004d68:	d207      	bcs.n	8004d7a <USBD_LL_DataInStage+0x64>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004d6a:	460a      	mov	r2, r1
 8004d6c:	9101      	str	r1, [sp, #4]
 8004d6e:	f000 faef 	bl	8005350 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004d72:	9b01      	ldr	r3, [sp, #4]
 8004d74:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8004d78:	e7e1      	b.n	8004d3e <USBD_LL_DataInStage+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d7a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d108      	bne.n	8004d94 <USBD_LL_DataInStage+0x7e>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004d82:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	b123      	cbz	r3, 8004d94 <USBD_LL_DataInStage+0x7e>
              pdev->classId = 0U;
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004d90:	4620      	mov	r0, r4
 8004d92:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d94:	2180      	movs	r1, #128	; 0x80
 8004d96:	4620      	mov	r0, r4
 8004d98:	f7fb fc7b 	bl	8000692 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f000 faff 	bl	80053a0 <USBD_CtlReceiveStatus>
 8004da2:	e7d1      	b.n	8004d48 <USBD_LL_DataInStage+0x32>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004da4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d1d3      	bne.n	8004d54 <USBD_LL_DataInStage+0x3e>
        if (pdev->pClass[idx]->DataIn != NULL)
 8004dac:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ce      	beq.n	8004d54 <USBD_LL_DataInStage+0x3e>
          pdev->classId = idx;
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
}
 8004dbc:	b002      	add	sp, #8
 8004dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004dc2:	4718      	bx	r3

08004dc4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004dcc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8004dd0:	2100      	movs	r1, #0
{
 8004dd2:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 8004dd4:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8004dd8:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8004dda:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8004dde:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 8004de2:	b9b3      	cbnz	r3, 8004e12 <USBD_LL_Reset+0x4e>
  USBD_StatusTypeDef ret = USBD_OK;
 8004de4:	2600      	movs	r6, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004de6:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004de8:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dea:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004dec:	2701      	movs	r7, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dee:	2340      	movs	r3, #64	; 0x40
 8004df0:	4620      	mov	r0, r4
 8004df2:	f7fb fc36 	bl	8000662 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004df6:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dfa:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dfe:	462b      	mov	r3, r5
 8004e00:	2200      	movs	r2, #0
 8004e02:	2180      	movs	r1, #128	; 0x80
 8004e04:	4620      	mov	r0, r4
 8004e06:	f7fb fc2c 	bl	8000662 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e0a:	84a7      	strh	r7, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e0c:	6225      	str	r5, [r4, #32]

  return ret;
}
 8004e0e:	4630      	mov	r0, r6
 8004e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pdev->pClass[0]->DeInit != NULL)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0e5      	beq.n	8004de4 <USBD_LL_Reset+0x20>
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004e18:	4798      	blx	r3
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d0e2      	beq.n	8004de4 <USBD_LL_Reset+0x20>
        ret = USBD_FAIL;
 8004e1e:	2603      	movs	r6, #3
 8004e20:	e7e1      	b.n	8004de6 <USBD_LL_Reset+0x22>

08004e22 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004e22:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004e24:	2000      	movs	r0, #0
 8004e26:	4770      	bx	lr

08004e28 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8004e28:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004e32:	2304      	movs	r3, #4
 8004e34:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004e38:	2000      	movs	r0, #0
 8004e3a:	4770      	bx	lr

08004e3c <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004e3c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004e40:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004e42:	bf02      	ittt	eq
 8004e44:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004e48:	b2db      	uxtbeq	r3, r3
 8004e4a:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004e4e:	2000      	movs	r0, #0
 8004e50:	4770      	bx	lr

08004e52 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004e52:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e54:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004e58:	2a03      	cmp	r2, #3
 8004e5a:	d105      	bne.n	8004e68 <USBD_LL_SOF+0x16>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004e5c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004e60:	b113      	cbz	r3, 8004e68 <USBD_LL_SOF+0x16>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	b103      	cbz	r3, 8004e68 <USBD_LL_SOF+0x16>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004e66:	4798      	blx	r3
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8004e68:	2000      	movs	r0, #0
 8004e6a:	bd08      	pop	{r3, pc}

08004e6c <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	4770      	bx	lr

08004e70 <USBD_CoreFindEP>:
 8004e70:	2000      	movs	r0, #0
 8004e72:	4770      	bx	lr

08004e74 <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8004e74:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e76:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8004e78:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e7a:	f7fb fc0a 	bl	8000692 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004e7e:	4620      	mov	r0, r4
 8004e80:	2100      	movs	r1, #0
}
 8004e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8004e86:	f7fb bc04 	b.w	8000692 <USBD_LL_StallEP>
	...

08004e8c <USBD_StdDevReq>:
{
 8004e8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004e90:	780d      	ldrb	r5, [r1, #0]
 8004e92:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e96:	2d20      	cmp	r5, #32
{
 8004e98:	4604      	mov	r4, r0
 8004e9a:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e9c:	d014      	beq.n	8004ec8 <USBD_StdDevReq+0x3c>
 8004e9e:	2d40      	cmp	r5, #64	; 0x40
 8004ea0:	d012      	beq.n	8004ec8 <USBD_StdDevReq+0x3c>
 8004ea2:	2d00      	cmp	r5, #0
 8004ea4:	f040 810a 	bne.w	80050bc <USBD_StdDevReq+0x230>
      switch (req->bRequest)
 8004ea8:	784f      	ldrb	r7, [r1, #1]
 8004eaa:	2f09      	cmp	r7, #9
 8004eac:	f200 8106 	bhi.w	80050bc <USBD_StdDevReq+0x230>
 8004eb0:	e8df f017 	tbh	[pc, r7, lsl #1]
 8004eb4:	0134010b 	.word	0x0134010b
 8004eb8:	01230104 	.word	0x01230104
 8004ebc:	00860104 	.word	0x00860104
 8004ec0:	01040016 	.word	0x01040016
 8004ec4:	00a200f3 	.word	0x00a200f3
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004ec8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8004ecc:	33ae      	adds	r3, #174	; 0xae
 8004ece:	4631      	mov	r1, r6
 8004ed0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	4620      	mov	r0, r4
}
 8004ed8:	b002      	add	sp, #8
 8004eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004ede:	4718      	bx	r3
  uint16_t len = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004ee6:	884b      	ldrh	r3, [r1, #2]
 8004ee8:	0a1a      	lsrs	r2, r3, #8
 8004eea:	3a01      	subs	r2, #1
 8004eec:	2a06      	cmp	r2, #6
 8004eee:	d837      	bhi.n	8004f60 <USBD_StdDevReq+0xd4>
 8004ef0:	e8df f002 	tbb	[pc, r2]
 8004ef4:	36291c04 	.word	0x36291c04
 8004ef8:	5136      	.short	0x5136
 8004efa:	5b          	.byte	0x5b
 8004efb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004efc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f00:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004f02:	7c20      	ldrb	r0, [r4, #16]
 8004f04:	f10d 0106 	add.w	r1, sp, #6
 8004f08:	4798      	blx	r3
  if (req->wLength != 0U)
 8004f0a:	88f2      	ldrh	r2, [r6, #6]
 8004f0c:	2a00      	cmp	r2, #0
 8004f0e:	f000 8101 	beq.w	8005114 <USBD_StdDevReq+0x288>
    if (len != 0U)
 8004f12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004f16:	b31b      	cbz	r3, 8004f60 <USBD_StdDevReq+0xd4>
      len = MIN(len, req->wLength);
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	bf28      	it	cs
 8004f1c:	461a      	movcs	r2, r3
 8004f1e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004f22:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004f24:	4620      	mov	r0, r4
 8004f26:	f000 fa06 	bl	8005336 <USBD_CtlSendData>
        break;
 8004f2a:	e01c      	b.n	8004f66 <USBD_StdDevReq+0xda>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f2c:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8004f2e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f32:	b932      	cbnz	r2, 8004f42 <USBD_StdDevReq+0xb6>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8004f36:	f10d 0006 	add.w	r0, sp, #6
 8004f3a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004f3c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004f3e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004f40:	e7e3      	b.n	8004f0a <USBD_StdDevReq+0x7e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	e7f7      	b.n	8004f36 <USBD_StdDevReq+0xaa>
      switch ((uint8_t)(req->wValue))
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b05      	cmp	r3, #5
 8004f4a:	d809      	bhi.n	8004f60 <USBD_StdDevReq+0xd4>
 8004f4c:	e8df f003 	tbb	[pc, r3]
 8004f50:	17130f03 	.word	0x17130f03
 8004f54:	1f1b      	.short	0x1f1b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004f56:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f5a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1d0      	bne.n	8004f02 <USBD_StdDevReq+0x76>
      USBD_CtlError(pdev, req);
 8004f60:	4620      	mov	r0, r4
 8004f62:	f7ff ff87 	bl	8004e74 <USBD_CtlError.constprop.0>
}
 8004f66:	4628      	mov	r0, r5
 8004f68:	b002      	add	sp, #8
 8004f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004f6e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	e7f2      	b.n	8004f5c <USBD_StdDevReq+0xd0>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004f76:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	e7ee      	b.n	8004f5c <USBD_StdDevReq+0xd0>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004f7e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	e7ea      	b.n	8004f5c <USBD_StdDevReq+0xd0>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004f86:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	e7e6      	b.n	8004f5c <USBD_StdDevReq+0xd0>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004f8e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	e7e2      	b.n	8004f5c <USBD_StdDevReq+0xd0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f96:	7c03      	ldrb	r3, [r0, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e1      	bne.n	8004f60 <USBD_StdDevReq+0xd4>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8004f9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004fa0:	f10d 0006 	add.w	r0, sp, #6
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	4798      	blx	r3
  if (err != 0U)
 8004fa8:	e7af      	b.n	8004f0a <USBD_StdDevReq+0x7e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004faa:	7c03      	ldrb	r3, [r0, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1d7      	bne.n	8004f60 <USBD_StdDevReq+0xd4>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8004fb0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004fb4:	f10d 0006 	add.w	r0, sp, #6
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004fbc:	2307      	movs	r3, #7
 8004fbe:	e7be      	b.n	8004f3e <USBD_StdDevReq+0xb2>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004fc0:	888b      	ldrh	r3, [r1, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1cc      	bne.n	8004f60 <USBD_StdDevReq+0xd4>
 8004fc6:	88cb      	ldrh	r3, [r1, #6]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1c9      	bne.n	8004f60 <USBD_StdDevReq+0xd4>
 8004fcc:	884e      	ldrh	r6, [r1, #2]
 8004fce:	2e7f      	cmp	r6, #127	; 0x7f
 8004fd0:	d8c6      	bhi.n	8004f60 <USBD_StdDevReq+0xd4>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fd2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d0c2      	beq.n	8004f60 <USBD_StdDevReq+0xd4>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004fda:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8004fdc:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004fe0:	f7fb fb78 	bl	80006d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f000 f9d0 	bl	800538a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004fea:	b11e      	cbz	r6, 8004ff4 <USBD_StdDevReq+0x168>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004fec:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004fee:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004ff2:	e7b8      	b.n	8004f66 <USBD_StdDevReq+0xda>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e7fa      	b.n	8004fee <USBD_StdDevReq+0x162>
  cfgidx = (uint8_t)(req->wValue);
 8004ff8:	788e      	ldrb	r6, [r1, #2]
 8004ffa:	4f4e      	ldr	r7, [pc, #312]	; (8005134 <USBD_StdDevReq+0x2a8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004ffc:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8004ffe:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005000:	d903      	bls.n	800500a <USBD_StdDevReq+0x17e>
    USBD_CtlError(pdev, req);
 8005002:	f7ff ff37 	bl	8004e74 <USBD_CtlError.constprop.0>
      ret = USBD_FAIL;
 8005006:	2503      	movs	r5, #3
      break;
 8005008:	e7ad      	b.n	8004f66 <USBD_StdDevReq+0xda>
  switch (pdev->dev_state)
 800500a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800500e:	2b02      	cmp	r3, #2
 8005010:	fa5f f883 	uxtb.w	r8, r3
 8005014:	d009      	beq.n	800502a <USBD_StdDevReq+0x19e>
 8005016:	f1b8 0f03 	cmp.w	r8, #3
 800501a:	d018      	beq.n	800504e <USBD_StdDevReq+0x1c2>
      USBD_CtlError(pdev, req);
 800501c:	f7ff ff2a 	bl	8004e74 <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005020:	7839      	ldrb	r1, [r7, #0]
 8005022:	4620      	mov	r0, r4
 8005024:	f7ff fe09 	bl	8004c3a <USBD_ClrClassConfig>
 8005028:	e7ed      	b.n	8005006 <USBD_StdDevReq+0x17a>
      if (cfgidx != 0U)
 800502a:	2e00      	cmp	r6, #0
 800502c:	d072      	beq.n	8005114 <USBD_StdDevReq+0x288>
        pdev->dev_config = cfgidx;
 800502e:	2101      	movs	r1, #1
 8005030:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005032:	f7ff fdfb 	bl	8004c2c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8005036:	4605      	mov	r5, r0
 8005038:	4620      	mov	r0, r4
 800503a:	b125      	cbz	r5, 8005046 <USBD_StdDevReq+0x1ba>
          USBD_CtlError(pdev, req);
 800503c:	f7ff ff1a 	bl	8004e74 <USBD_CtlError.constprop.0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005040:	f884 829c 	strb.w	r8, [r4, #668]	; 0x29c
 8005044:	e78f      	b.n	8004f66 <USBD_StdDevReq+0xda>
          (void)USBD_CtlSendStatus(pdev);
 8005046:	f000 f9a0 	bl	800538a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800504a:	2303      	movs	r3, #3
 800504c:	e7cf      	b.n	8004fee <USBD_StdDevReq+0x162>
      if (cfgidx == 0U)
 800504e:	b95e      	cbnz	r6, 8005068 <USBD_StdDevReq+0x1dc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005050:	2302      	movs	r3, #2
 8005052:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005056:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005058:	4631      	mov	r1, r6
 800505a:	f7ff fdee 	bl	8004c3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800505e:	4620      	mov	r0, r4
 8005060:	f000 f993 	bl	800538a <USBD_CtlSendStatus>
 8005064:	4635      	mov	r5, r6
 8005066:	e77e      	b.n	8004f66 <USBD_StdDevReq+0xda>
      else if (cfgidx != pdev->dev_config)
 8005068:	6841      	ldr	r1, [r0, #4]
 800506a:	2901      	cmp	r1, #1
 800506c:	d052      	beq.n	8005114 <USBD_StdDevReq+0x288>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800506e:	b2c9      	uxtb	r1, r1
 8005070:	f7ff fde3 	bl	8004c3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005074:	7839      	ldrb	r1, [r7, #0]
 8005076:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005078:	4620      	mov	r0, r4
 800507a:	f7ff fdd7 	bl	8004c2c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800507e:	4606      	mov	r6, r0
 8005080:	2800      	cmp	r0, #0
 8005082:	d047      	beq.n	8005114 <USBD_StdDevReq+0x288>
          USBD_CtlError(pdev, req);
 8005084:	4620      	mov	r0, r4
 8005086:	f7ff fef5 	bl	8004e74 <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800508a:	7921      	ldrb	r1, [r4, #4]
 800508c:	4620      	mov	r0, r4
 800508e:	f7ff fdd4 	bl	8004c3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005092:	2302      	movs	r3, #2
 8005094:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005098:	e7e4      	b.n	8005064 <USBD_StdDevReq+0x1d8>
  if (req->wLength != 1U)
 800509a:	88ca      	ldrh	r2, [r1, #6]
 800509c:	2a01      	cmp	r2, #1
 800509e:	f47f af5f 	bne.w	8004f60 <USBD_StdDevReq+0xd4>
    switch (pdev->dev_state)
 80050a2:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 80050a6:	2902      	cmp	r1, #2
 80050a8:	b2cb      	uxtb	r3, r1
 80050aa:	d805      	bhi.n	80050b8 <USBD_StdDevReq+0x22c>
 80050ac:	b133      	cbz	r3, 80050bc <USBD_StdDevReq+0x230>
        pdev->dev_default_config = 0U;
 80050ae:	4601      	mov	r1, r0
 80050b0:	2300      	movs	r3, #0
 80050b2:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80050b6:	e735      	b.n	8004f24 <USBD_StdDevReq+0x98>
    switch (pdev->dev_state)
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d004      	beq.n	80050c6 <USBD_StdDevReq+0x23a>
        USBD_CtlError(pdev, req);
 80050bc:	4620      	mov	r0, r4
 80050be:	f7ff fed9 	bl	8004e74 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 80050c2:	2500      	movs	r5, #0
        break;
 80050c4:	e74f      	b.n	8004f66 <USBD_StdDevReq+0xda>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80050c6:	1d01      	adds	r1, r0, #4
 80050c8:	e72c      	b.n	8004f24 <USBD_StdDevReq+0x98>
  switch (pdev->dev_state)
 80050ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80050ce:	3b01      	subs	r3, #1
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d8f3      	bhi.n	80050bc <USBD_StdDevReq+0x230>
      if (req->wLength != 0x2U)
 80050d4:	88cb      	ldrh	r3, [r1, #6]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	f47f af42 	bne.w	8004f60 <USBD_StdDevReq+0xd4>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80050dc:	2301      	movs	r3, #1
 80050de:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80050e0:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80050e4:	b10b      	cbz	r3, 80050ea <USBD_StdDevReq+0x25e>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80050e6:	2303      	movs	r3, #3
 80050e8:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80050ea:	2202      	movs	r2, #2
 80050ec:	f104 010c 	add.w	r1, r4, #12
 80050f0:	4620      	mov	r0, r4
 80050f2:	f000 f920 	bl	8005336 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80050f6:	463d      	mov	r5, r7
      break;
 80050f8:	e735      	b.n	8004f66 <USBD_StdDevReq+0xda>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80050fa:	884b      	ldrh	r3, [r1, #2]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d102      	bne.n	8005106 <USBD_StdDevReq+0x27a>
        pdev->dev_remote_wakeup = 0U;
 8005100:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8005104:	e006      	b.n	8005114 <USBD_StdDevReq+0x288>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005106:	2b02      	cmp	r3, #2
 8005108:	f47f af2a 	bne.w	8004f60 <USBD_StdDevReq+0xd4>
    pdev->dev_test_mode = req->wIndex >> 8;
 800510c:	888b      	ldrh	r3, [r1, #4]
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
        (void)USBD_CtlSendStatus(pdev);
 8005114:	4620      	mov	r0, r4
 8005116:	f000 f938 	bl	800538a <USBD_CtlSendStatus>
 800511a:	e724      	b.n	8004f66 <USBD_StdDevReq+0xda>
  switch (pdev->dev_state)
 800511c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005120:	3b01      	subs	r3, #1
 8005122:	2b02      	cmp	r3, #2
 8005124:	d8ca      	bhi.n	80050bc <USBD_StdDevReq+0x230>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005126:	884b      	ldrh	r3, [r1, #2]
 8005128:	2b01      	cmp	r3, #1
 800512a:	f47f af1c 	bne.w	8004f66 <USBD_StdDevReq+0xda>
        pdev->dev_remote_wakeup = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	e7e6      	b.n	8005100 <USBD_StdDevReq+0x274>
 8005132:	bf00      	nop
 8005134:	20002620 	.word	0x20002620

08005138 <USBD_StdItfReq>:
{
 8005138:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800513a:	780b      	ldrb	r3, [r1, #0]
 800513c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005140:	2a40      	cmp	r2, #64	; 0x40
{
 8005142:	4604      	mov	r4, r0
 8005144:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005146:	d001      	beq.n	800514c <USBD_StdItfReq+0x14>
 8005148:	065b      	lsls	r3, r3, #25
 800514a:	d41f      	bmi.n	800518c <USBD_StdItfReq+0x54>
      switch (pdev->dev_state)
 800514c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005150:	3b01      	subs	r3, #1
 8005152:	2b02      	cmp	r3, #2
 8005154:	d81a      	bhi.n	800518c <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005156:	7931      	ldrb	r1, [r6, #4]
 8005158:	2902      	cmp	r1, #2
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800515a:	4620      	mov	r0, r4
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800515c:	d817      	bhi.n	800518e <USBD_StdItfReq+0x56>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800515e:	f7ff fe85 	bl	8004e6c <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005162:	b988      	cbnz	r0, 8005188 <USBD_StdItfReq+0x50>
              if (pdev->pClass[idx]->Setup != NULL)
 8005164:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	b16b      	cbz	r3, 8005188 <USBD_StdItfReq+0x50>
                pdev->classId = idx;
 800516c:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005170:	4631      	mov	r1, r6
 8005172:	4620      	mov	r0, r4
 8005174:	4798      	blx	r3
 8005176:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005178:	88f3      	ldrh	r3, [r6, #6]
 800517a:	b91b      	cbnz	r3, 8005184 <USBD_StdItfReq+0x4c>
 800517c:	b915      	cbnz	r5, 8005184 <USBD_StdItfReq+0x4c>
              (void)USBD_CtlSendStatus(pdev);
 800517e:	4620      	mov	r0, r4
 8005180:	f000 f903 	bl	800538a <USBD_CtlSendStatus>
}
 8005184:	4628      	mov	r0, r5
 8005186:	bd70      	pop	{r4, r5, r6, pc}
              ret = USBD_FAIL;
 8005188:	2503      	movs	r5, #3
 800518a:	e7f5      	b.n	8005178 <USBD_StdItfReq+0x40>
          USBD_CtlError(pdev, req);
 800518c:	4620      	mov	r0, r4
 800518e:	f7ff fe71 	bl	8004e74 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8005192:	2500      	movs	r5, #0
          break;
 8005194:	e7f6      	b.n	8005184 <USBD_StdItfReq+0x4c>

08005196 <USBD_StdEPReq>:
{
 8005196:	b570      	push	{r4, r5, r6, lr}
 8005198:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 800519a:	888a      	ldrh	r2, [r1, #4]
 800519c:	790e      	ldrb	r6, [r1, #4]
 800519e:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051a2:	2b20      	cmp	r3, #32
{
 80051a4:	4604      	mov	r4, r0
 80051a6:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051a8:	d053      	beq.n	8005252 <USBD_StdEPReq+0xbc>
 80051aa:	2b40      	cmp	r3, #64	; 0x40
 80051ac:	d051      	beq.n	8005252 <USBD_StdEPReq+0xbc>
 80051ae:	bb63      	cbnz	r3, 800520a <USBD_StdEPReq+0x74>
      switch (req->bRequest)
 80051b0:	784b      	ldrb	r3, [r1, #1]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d03b      	beq.n	800522e <USBD_StdEPReq+0x98>
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d020      	beq.n	80051fc <USBD_StdEPReq+0x66>
 80051ba:	bb33      	cbnz	r3, 800520a <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 80051bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	b2d9      	uxtb	r1, r3
 80051c4:	d061      	beq.n	800528a <USBD_StdEPReq+0xf4>
 80051c6:	2903      	cmp	r1, #3
 80051c8:	d11f      	bne.n	800520a <USBD_StdEPReq+0x74>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80051ca:	f006 030f 	and.w	r3, r6, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80051ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80051d2:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80051d6:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80051da:	d065      	beq.n	80052a8 <USBD_StdEPReq+0x112>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80051dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051de:	b1a3      	cbz	r3, 800520a <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051e0:	f006 057f 	and.w	r5, r6, #127	; 0x7f
 80051e4:	3501      	adds	r5, #1
 80051e6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80051ea:	eb00 0585 	add.w	r5, r0, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80051ee:	f016 037f 	ands.w	r3, r6, #127	; 0x7f
 80051f2:	d165      	bne.n	80052c0 <USBD_StdEPReq+0x12a>
                pep->status = 0x0001U;
 80051f4:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80051f6:	2202      	movs	r2, #2
 80051f8:	4629      	mov	r1, r5
 80051fa:	e051      	b.n	80052a0 <USBD_StdEPReq+0x10a>
          switch (pdev->dev_state)
 80051fc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005200:	2b02      	cmp	r3, #2
 8005202:	b2da      	uxtb	r2, r3
 8005204:	d037      	beq.n	8005276 <USBD_StdEPReq+0xe0>
 8005206:	2a03      	cmp	r2, #3
 8005208:	d003      	beq.n	8005212 <USBD_StdEPReq+0x7c>
              USBD_CtlError(pdev, req);
 800520a:	4620      	mov	r0, r4
 800520c:	f7ff fe32 	bl	8004e74 <USBD_CtlError.constprop.0>
              break;
 8005210:	e00b      	b.n	800522a <USBD_StdEPReq+0x94>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005212:	884b      	ldrh	r3, [r1, #2]
 8005214:	b933      	cbnz	r3, 8005224 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005216:	0671      	lsls	r1, r6, #25
 8005218:	d004      	beq.n	8005224 <USBD_StdEPReq+0x8e>
 800521a:	88eb      	ldrh	r3, [r5, #6]
 800521c:	b913      	cbnz	r3, 8005224 <USBD_StdEPReq+0x8e>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800521e:	4631      	mov	r1, r6
 8005220:	f7fb fa37 	bl	8000692 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8005224:	4620      	mov	r0, r4
 8005226:	f000 f8b0 	bl	800538a <USBD_CtlSendStatus>
}
 800522a:	2000      	movs	r0, #0
 800522c:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800522e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005232:	2b02      	cmp	r3, #2
 8005234:	b2da      	uxtb	r2, r3
 8005236:	d01e      	beq.n	8005276 <USBD_StdEPReq+0xe0>
 8005238:	2a03      	cmp	r2, #3
 800523a:	d1e6      	bne.n	800520a <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800523c:	884b      	ldrh	r3, [r1, #2]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f3      	bne.n	800522a <USBD_StdEPReq+0x94>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005242:	0673      	lsls	r3, r6, #25
 8005244:	d002      	beq.n	800524c <USBD_StdEPReq+0xb6>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005246:	4631      	mov	r1, r6
 8005248:	f7fb fa2a 	bl	80006a0 <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 800524c:	4620      	mov	r0, r4
 800524e:	f000 f89c 	bl	800538a <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005252:	4631      	mov	r1, r6
 8005254:	4620      	mov	r0, r4
 8005256:	f7ff fe0b 	bl	8004e70 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800525a:	2800      	cmp	r0, #0
 800525c:	d1e5      	bne.n	800522a <USBD_StdEPReq+0x94>
                  if (pdev->pClass[idx]->Setup != NULL)
 800525e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
                  pdev->classId = idx;
 8005262:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0de      	beq.n	800522a <USBD_StdEPReq+0x94>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800526c:	4629      	mov	r1, r5
 800526e:	4620      	mov	r0, r4
}
 8005270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005274:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005276:	0672      	lsls	r2, r6, #25
 8005278:	d0c7      	beq.n	800520a <USBD_StdEPReq+0x74>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800527a:	4631      	mov	r1, r6
 800527c:	f7fb fa09 	bl	8000692 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005280:	2180      	movs	r1, #128	; 0x80
 8005282:	4620      	mov	r0, r4
 8005284:	f7fb fa05 	bl	8000692 <USBD_LL_StallEP>
 8005288:	e7cf      	b.n	800522a <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800528a:	0671      	lsls	r1, r6, #25
 800528c:	d1bd      	bne.n	800520a <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800528e:	0613      	lsls	r3, r2, #24
 8005290:	bf4c      	ite	mi
 8005292:	f100 0114 	addmi.w	r1, r0, #20
 8005296:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800529a:	2300      	movs	r3, #0
 800529c:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800529e:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80052a0:	4620      	mov	r0, r4
 80052a2:	f000 f848 	bl	8005336 <USBD_CtlSendData>
              break;
 80052a6:	e7c0      	b.n	800522a <USBD_StdEPReq+0x94>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80052a8:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0ac      	beq.n	800520a <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052b0:	f006 057f 	and.w	r5, r6, #127	; 0x7f
 80052b4:	2314      	movs	r3, #20
 80052b6:	fb03 0505 	mla	r5, r3, r5, r0
 80052ba:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80052be:	e796      	b.n	80051ee <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80052c0:	4631      	mov	r1, r6
 80052c2:	4620      	mov	r0, r4
 80052c4:	f7fb f9f3 	bl	80006ae <USBD_LL_IsStallEP>
 80052c8:	b108      	cbz	r0, 80052ce <USBD_StdEPReq+0x138>
                pep->status = 0x0001U;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e792      	b.n	80051f4 <USBD_StdEPReq+0x5e>
                pep->status = 0x0000U;
 80052ce:	6028      	str	r0, [r5, #0]
 80052d0:	e791      	b.n	80051f6 <USBD_StdEPReq+0x60>

080052d2 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80052d2:	780b      	ldrb	r3, [r1, #0]
 80052d4:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80052d6:	784b      	ldrb	r3, [r1, #1]
 80052d8:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80052da:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 80052dc:	8043      	strh	r3, [r0, #2]
 80052de:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 80052e0:	8083      	strh	r3, [r0, #4]
 80052e2:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 80052e4:	80c3      	strh	r3, [r0, #6]
}
 80052e6:	4770      	bx	lr

080052e8 <USBD_CtlError>:
{
 80052e8:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80052ea:	2180      	movs	r1, #128	; 0x80
{
 80052ec:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80052ee:	f7fb f9d0 	bl	8000692 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80052f2:	4620      	mov	r0, r4
 80052f4:	2100      	movs	r1, #0
}
 80052f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80052fa:	f7fb b9ca 	b.w	8000692 <USBD_LL_StallEP>

080052fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80052fe:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8005300:	b188      	cbz	r0, 8005326 <USBD_GetString+0x28>
 8005302:	2400      	movs	r4, #0
 8005304:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8005306:	4623      	mov	r3, r4
 8005308:	3401      	adds	r4, #1
 800530a:	5d05      	ldrb	r5, [r0, r4]
 800530c:	2d00      	cmp	r5, #0
 800530e:	d1fa      	bne.n	8005306 <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005310:	b2db      	uxtb	r3, r3
 8005312:	3301      	adds	r3, #1
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8005318:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800531a:	2303      	movs	r3, #3
 800531c:	704b      	strb	r3, [r1, #1]
  idx++;
 800531e:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8005320:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005324:	b902      	cbnz	r2, 8005328 <USBD_GetString+0x2a>
}
 8005326:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 8005328:	54ca      	strb	r2, [r1, r3]
    idx++;
 800532a:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800532c:	b2d2      	uxtb	r2, r2
    idx++;
 800532e:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8005330:	548d      	strb	r5, [r1, r2]
    idx++;
 8005332:	b2db      	uxtb	r3, r3
 8005334:	e7f4      	b.n	8005320 <USBD_GetString+0x22>

08005336 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005336:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005338:	2402      	movs	r4, #2
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800533a:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length = len;
 800533c:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005340:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005344:	460a      	mov	r2, r1
 8005346:	2100      	movs	r1, #0
 8005348:	f7fb f9cb 	bl	80006e2 <USBD_LL_Transmit>

  return USBD_OK;
}
 800534c:	2000      	movs	r0, #0
 800534e:	bd10      	pop	{r4, pc}

08005350 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005350:	b508      	push	{r3, lr}
 8005352:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005354:	460a      	mov	r2, r1
 8005356:	2100      	movs	r1, #0
 8005358:	f7fb f9c3 	bl	80006e2 <USBD_LL_Transmit>

  return USBD_OK;
}
 800535c:	2000      	movs	r0, #0
 800535e:	bd08      	pop	{r3, pc}

08005360 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005360:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005362:	2403      	movs	r4, #3
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005364:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length = len;
 8005366:	e9c0 2256 	strd	r2, r2, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800536a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800536e:	460a      	mov	r2, r1
 8005370:	2100      	movs	r1, #0
 8005372:	f7fb f9bd 	bl	80006f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005376:	2000      	movs	r0, #0
 8005378:	bd10      	pop	{r4, pc}

0800537a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800537a:	b508      	push	{r3, lr}
 800537c:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800537e:	460a      	mov	r2, r1
 8005380:	2100      	movs	r1, #0
 8005382:	f7fb f9b5 	bl	80006f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005386:	2000      	movs	r0, #0
 8005388:	bd08      	pop	{r3, pc}

0800538a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800538a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800538c:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800538e:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005390:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005394:	4619      	mov	r1, r3
 8005396:	461a      	mov	r2, r3
 8005398:	f7fb f9a3 	bl	80006e2 <USBD_LL_Transmit>

  return USBD_OK;
}
 800539c:	2000      	movs	r0, #0
 800539e:	bd08      	pop	{r3, pc}

080053a0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80053a0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80053a2:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053a4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80053a6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053aa:	4619      	mov	r1, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	f7fb f99f 	bl	80006f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80053b2:	2000      	movs	r0, #0
 80053b4:	bd08      	pop	{r3, pc}
	...

080053b8 <D16_GENERIC>:
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	b089      	sub	sp, #36	; 0x24
 80053be:	68d4      	ldr	r4, [r2, #12]
 80053c0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80053c2:	6993      	ldr	r3, [r2, #24]
 80053c4:	9407      	str	r4, [sp, #28]
 80053c6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80053c8:	9306      	str	r3, [sp, #24]
 80053ca:	9402      	str	r4, [sp, #8]
 80053cc:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80053d0:	f8d2 b014 	ldr.w	fp, [r2, #20]
 80053d4:	69d3      	ldr	r3, [r2, #28]
 80053d6:	6896      	ldr	r6, [r2, #8]
 80053d8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80053da:	9103      	str	r1, [sp, #12]
 80053dc:	2d00      	cmp	r5, #0
 80053de:	d066      	beq.n	80054ae <D16_GENERIC+0xf6>
 80053e0:	f004 0510 	and.w	r5, r4, #16
 80053e4:	f004 0420 	and.w	r4, r4, #32
 80053e8:	9504      	str	r5, [sp, #16]
 80053ea:	4938      	ldr	r1, [pc, #224]	; (80054cc <D16_GENERIC+0x114>)
 80053ec:	9405      	str	r4, [sp, #20]
 80053ee:	f04f 0e00 	mov.w	lr, #0
 80053f2:	4635      	mov	r5, r6
 80053f4:	e04f      	b.n	8005496 <D16_GENERIC+0xde>
 80053f6:	5d87      	ldrb	r7, [r0, r6]
 80053f8:	7804      	ldrb	r4, [r0, #0]
 80053fa:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80053fe:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8005402:	b2e6      	uxtb	r6, r4
 8005404:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005408:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800540c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8005410:	4433      	add	r3, r6
 8005412:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8005416:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800541a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800541e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8005422:	0aa3      	lsrs	r3, r4, #10
 8005424:	4c2a      	ldr	r4, [pc, #168]	; (80054d0 <D16_GENERIC+0x118>)
 8005426:	fb26 5404 	smlad	r4, r6, r4, r5
 800542a:	4d2a      	ldr	r5, [pc, #168]	; (80054d4 <D16_GENERIC+0x11c>)
 800542c:	fb26 f505 	smuad	r5, r6, r5
 8005430:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8005434:	eb04 080a 	add.w	r8, r4, sl
 8005438:	eba8 080b 	sub.w	r8, r8, fp
 800543c:	4646      	mov	r6, r8
 800543e:	17f7      	asrs	r7, r6, #31
 8005440:	e9cd 6700 	strd	r6, r7, [sp]
 8005444:	9e04      	ldr	r6, [sp, #16]
 8005446:	f10e 0c01 	add.w	ip, lr, #1
 800544a:	b16e      	cbz	r6, 8005468 <D16_GENERIC+0xb0>
 800544c:	6a16      	ldr	r6, [r2, #32]
 800544e:	9f01      	ldr	r7, [sp, #4]
 8005450:	fba8 8906 	umull	r8, r9, r8, r6
 8005454:	fb06 9907 	mla	r9, r6, r7, r9
 8005458:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800545c:	f149 0900 	adc.w	r9, r9, #0
 8005460:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8005464:	46a3      	mov	fp, r4
 8005466:	4654      	mov	r4, sl
 8005468:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800546a:	9f02      	ldr	r7, [sp, #8]
 800546c:	0424      	lsls	r4, r4, #16
 800546e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005472:	f04f 0900 	mov.w	r9, #0
 8005476:	fb0e fe06 	mul.w	lr, lr, r6
 800547a:	fbc7 8904 	smlal	r8, r9, r7, r4
 800547e:	9e03      	ldr	r6, [sp, #12]
 8005480:	464f      	mov	r7, r9
 8005482:	10bc      	asrs	r4, r7, #2
 8005484:	f304 040f 	ssat	r4, #16, r4
 8005488:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800548c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800548e:	fa1f fe8c 	uxth.w	lr, ip
 8005492:	4574      	cmp	r4, lr
 8005494:	d90a      	bls.n	80054ac <D16_GENERIC+0xf4>
 8005496:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8005498:	2c01      	cmp	r4, #1
 800549a:	b2e6      	uxtb	r6, r4
 800549c:	d1ab      	bne.n	80053f6 <D16_GENERIC+0x3e>
 800549e:	9e05      	ldr	r6, [sp, #20]
 80054a0:	f850 4b02 	ldr.w	r4, [r0], #2
 80054a4:	2e00      	cmp	r6, #0
 80054a6:	d0ac      	beq.n	8005402 <D16_GENERIC+0x4a>
 80054a8:	ba64      	rev16	r4, r4
 80054aa:	e7aa      	b.n	8005402 <D16_GENERIC+0x4a>
 80054ac:	462e      	mov	r6, r5
 80054ae:	9907      	ldr	r1, [sp, #28]
 80054b0:	61d3      	str	r3, [r2, #28]
 80054b2:	9b06      	ldr	r3, [sp, #24]
 80054b4:	6096      	str	r6, [r2, #8]
 80054b6:	2000      	movs	r0, #0
 80054b8:	60d1      	str	r1, [r2, #12]
 80054ba:	f8c2 a010 	str.w	sl, [r2, #16]
 80054be:	f8c2 b014 	str.w	fp, [r2, #20]
 80054c2:	6193      	str	r3, [r2, #24]
 80054c4:	b009      	add	sp, #36	; 0x24
 80054c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ca:	bf00      	nop
 80054cc:	200000cc 	.word	0x200000cc
 80054d0:	00030001 	.word	0x00030001
 80054d4:	00010003 	.word	0x00010003

080054d8 <D24_GENERIC>:
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80054de:	6993      	ldr	r3, [r2, #24]
 80054e0:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80054e2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80054e6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80054ea:	6894      	ldr	r4, [r2, #8]
 80054ec:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80054f0:	b089      	sub	sp, #36	; 0x24
 80054f2:	9307      	str	r3, [sp, #28]
 80054f4:	9503      	str	r5, [sp, #12]
 80054f6:	69d3      	ldr	r3, [r2, #28]
 80054f8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80054fa:	9104      	str	r1, [sp, #16]
 80054fc:	2e00      	cmp	r6, #0
 80054fe:	f000 8096 	beq.w	800562e <D24_GENERIC+0x156>
 8005502:	f005 0610 	and.w	r6, r5, #16
 8005506:	f005 0520 	and.w	r5, r5, #32
 800550a:	4954      	ldr	r1, [pc, #336]	; (800565c <D24_GENERIC+0x184>)
 800550c:	9605      	str	r6, [sp, #20]
 800550e:	9506      	str	r5, [sp, #24]
 8005510:	f04f 0e00 	mov.w	lr, #0
 8005514:	f8cd 9008 	str.w	r9, [sp, #8]
 8005518:	e06a      	b.n	80055f0 <D24_GENERIC+0x118>
 800551a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800551e:	f810 8007 	ldrb.w	r8, [r0, r7]
 8005522:	f890 c000 	ldrb.w	ip, [r0]
 8005526:	042d      	lsls	r5, r5, #16
 8005528:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800552c:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8005530:	44ac      	add	ip, r5
 8005532:	4438      	add	r0, r7
 8005534:	fa5f f68c 	uxtb.w	r6, ip
 8005538:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800553c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8005540:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8005544:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005548:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800554c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005550:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8005554:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8005558:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800555c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8005560:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8005564:	4d3e      	ldr	r5, [pc, #248]	; (8005660 <D24_GENERIC+0x188>)
 8005566:	fb26 b705 	smlad	r7, r6, r5, fp
 800556a:	4d3e      	ldr	r5, [pc, #248]	; (8005664 <D24_GENERIC+0x18c>)
 800556c:	fb26 4b05 	smlad	fp, r6, r5, r4
 8005570:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8005574:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8005578:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800557c:	2401      	movs	r4, #1
 800557e:	fb26 f604 	smuad	r6, r6, r4
 8005582:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8005586:	9f02      	ldr	r7, [sp, #8]
 8005588:	eb0e 0c04 	add.w	ip, lr, r4
 800558c:	eb08 0406 	add.w	r4, r8, r6
 8005590:	eb05 060a 	add.w	r6, r5, sl
 8005594:	1bf6      	subs	r6, r6, r7
 8005596:	4637      	mov	r7, r6
 8005598:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800559c:	e9cd 7800 	strd	r7, r8, [sp]
 80055a0:	9f05      	ldr	r7, [sp, #20]
 80055a2:	b177      	cbz	r7, 80055c2 <D24_GENERIC+0xea>
 80055a4:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80055a8:	9502      	str	r5, [sp, #8]
 80055aa:	fba6 9a08 	umull	r9, sl, r6, r8
 80055ae:	9e01      	ldr	r6, [sp, #4]
 80055b0:	fb08 aa06 	mla	sl, r8, r6, sl
 80055b4:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 80055b8:	f14a 0700 	adc.w	r7, sl, #0
 80055bc:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80055c0:	4655      	mov	r5, sl
 80055c2:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80055c4:	9f03      	ldr	r7, [sp, #12]
 80055c6:	03ad      	lsls	r5, r5, #14
 80055c8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80055cc:	f04f 0900 	mov.w	r9, #0
 80055d0:	fb0e fe06 	mul.w	lr, lr, r6
 80055d4:	fbc7 8905 	smlal	r8, r9, r7, r5
 80055d8:	9e04      	ldr	r6, [sp, #16]
 80055da:	464f      	mov	r7, r9
 80055dc:	10bd      	asrs	r5, r7, #2
 80055de:	f305 050f 	ssat	r5, #16, r5
 80055e2:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 80055e6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80055e8:	fa1f fe8c 	uxth.w	lr, ip
 80055ec:	4575      	cmp	r5, lr
 80055ee:	d91c      	bls.n	800562a <D24_GENERIC+0x152>
 80055f0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80055f2:	b2ef      	uxtb	r7, r5
 80055f4:	2d01      	cmp	r5, #1
 80055f6:	b23e      	sxth	r6, r7
 80055f8:	d18f      	bne.n	800551a <D24_GENERIC+0x42>
 80055fa:	9d06      	ldr	r5, [sp, #24]
 80055fc:	b15d      	cbz	r5, 8005616 <D24_GENERIC+0x13e>
 80055fe:	f01e 0f01 	tst.w	lr, #1
 8005602:	d122      	bne.n	800564a <D24_GENERIC+0x172>
 8005604:	7805      	ldrb	r5, [r0, #0]
 8005606:	78c7      	ldrb	r7, [r0, #3]
 8005608:	7846      	ldrb	r6, [r0, #1]
 800560a:	022d      	lsls	r5, r5, #8
 800560c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8005610:	44b4      	add	ip, r6
 8005612:	3002      	adds	r0, #2
 8005614:	e78e      	b.n	8005534 <D24_GENERIC+0x5c>
 8005616:	7846      	ldrb	r6, [r0, #1]
 8005618:	f890 c002 	ldrb.w	ip, [r0, #2]
 800561c:	f810 5b03 	ldrb.w	r5, [r0], #3
 8005620:	0236      	lsls	r6, r6, #8
 8005622:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8005626:	44ac      	add	ip, r5
 8005628:	e784      	b.n	8005534 <D24_GENERIC+0x5c>
 800562a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800562e:	61d3      	str	r3, [r2, #28]
 8005630:	9b07      	ldr	r3, [sp, #28]
 8005632:	6094      	str	r4, [r2, #8]
 8005634:	2000      	movs	r0, #0
 8005636:	f8c2 b00c 	str.w	fp, [r2, #12]
 800563a:	f8c2 a010 	str.w	sl, [r2, #16]
 800563e:	f8c2 9014 	str.w	r9, [r2, #20]
 8005642:	6193      	str	r3, [r2, #24]
 8005644:	b009      	add	sp, #36	; 0x24
 8005646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564a:	78c5      	ldrb	r5, [r0, #3]
 800564c:	7887      	ldrb	r7, [r0, #2]
 800564e:	f810 6b04 	ldrb.w	r6, [r0], #4
 8005652:	022d      	lsls	r5, r5, #8
 8005654:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8005658:	44b4      	add	ip, r6
 800565a:	e76b      	b.n	8005534 <D24_GENERIC+0x5c>
 800565c:	200000cc 	.word	0x200000cc
 8005660:	00030001 	.word	0x00030001
 8005664:	00060007 	.word	0x00060007

08005668 <D32_GENERIC>:
 8005668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800566e:	6993      	ldr	r3, [r2, #24]
 8005670:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005672:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005676:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800567a:	69d6      	ldr	r6, [r2, #28]
 800567c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8005680:	b089      	sub	sp, #36	; 0x24
 8005682:	9307      	str	r3, [sp, #28]
 8005684:	9403      	str	r4, [sp, #12]
 8005686:	6893      	ldr	r3, [r2, #8]
 8005688:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800568a:	9104      	str	r1, [sp, #16]
 800568c:	2d00      	cmp	r5, #0
 800568e:	f000 809f 	beq.w	80057d0 <D32_GENERIC+0x168>
 8005692:	f004 0510 	and.w	r5, r4, #16
 8005696:	f004 0420 	and.w	r4, r4, #32
 800569a:	9505      	str	r5, [sp, #20]
 800569c:	4953      	ldr	r1, [pc, #332]	; (80057ec <D32_GENERIC+0x184>)
 800569e:	9406      	str	r4, [sp, #24]
 80056a0:	f04f 0c00 	mov.w	ip, #0
 80056a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80056a8:	461d      	mov	r5, r3
 80056aa:	4617      	mov	r7, r2
 80056ac:	e077      	b.n	800579e <D32_GENERIC+0x136>
 80056ae:	f818 3003 	ldrb.w	r3, [r8, r3]
 80056b2:	f810 800e 	ldrb.w	r8, [r0, lr]
 80056b6:	f810 e002 	ldrb.w	lr, [r0, r2]
 80056ba:	7800      	ldrb	r0, [r0, #0]
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80056c2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80056c6:	4403      	add	r3, r0
 80056c8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80056cc:	b2dc      	uxtb	r4, r3
 80056ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80056d2:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80056d6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80056da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80056de:	0e1b      	lsrs	r3, r3, #24
 80056e0:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 80056e4:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 80056e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056ec:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80056f0:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 80056f4:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 80056f8:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80056fc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005700:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005704:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005708:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800570c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005710:	4b37      	ldr	r3, [pc, #220]	; (80057f0 <D32_GENERIC+0x188>)
 8005712:	fb22 b403 	smlad	r4, r2, r3, fp
 8005716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800571a:	fb2e 4803 	smlad	r8, lr, r3, r4
 800571e:	4b35      	ldr	r3, [pc, #212]	; (80057f4 <D32_GENERIC+0x18c>)
 8005720:	fb22 5503 	smlad	r5, r2, r3, r5
 8005724:	4b34      	ldr	r3, [pc, #208]	; (80057f8 <D32_GENERIC+0x190>)
 8005726:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800572a:	2301      	movs	r3, #1
 800572c:	fb22 f203 	smuad	r2, r2, r3
 8005730:	4b32      	ldr	r3, [pc, #200]	; (80057fc <D32_GENERIC+0x194>)
 8005732:	fb2e 2503 	smlad	r5, lr, r3, r2
 8005736:	9b02      	ldr	r3, [sp, #8]
 8005738:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800573c:	eb04 080a 	add.w	r8, r4, sl
 8005740:	eba8 0803 	sub.w	r8, r8, r3
 8005744:	4642      	mov	r2, r8
 8005746:	17d3      	asrs	r3, r2, #31
 8005748:	e9cd 2300 	strd	r2, r3, [sp]
 800574c:	9b05      	ldr	r3, [sp, #20]
 800574e:	f10c 0e01 	add.w	lr, ip, #1
 8005752:	b16b      	cbz	r3, 8005770 <D32_GENERIC+0x108>
 8005754:	6a3a      	ldr	r2, [r7, #32]
 8005756:	9b01      	ldr	r3, [sp, #4]
 8005758:	9402      	str	r4, [sp, #8]
 800575a:	fba8 8902 	umull	r8, r9, r8, r2
 800575e:	fb02 9903 	mla	r9, r2, r3, r9
 8005762:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8005766:	f149 0900 	adc.w	r9, r9, #0
 800576a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800576e:	4654      	mov	r4, sl
 8005770:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005772:	9a04      	ldr	r2, [sp, #16]
 8005774:	fb0c fc03 	mul.w	ip, ip, r3
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	0364      	lsls	r4, r4, #13
 800577c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005780:	f04f 0900 	mov.w	r9, #0
 8005784:	fbc3 8904 	smlal	r8, r9, r3, r4
 8005788:	464b      	mov	r3, r9
 800578a:	109b      	asrs	r3, r3, #2
 800578c:	f303 030f 	ssat	r3, #16, r3
 8005790:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8005794:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005796:	fa1f fc8e 	uxth.w	ip, lr
 800579a:	4563      	cmp	r3, ip
 800579c:	d914      	bls.n	80057c8 <D32_GENERIC+0x160>
 800579e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80057a0:	b2e2      	uxtb	r2, r4
 80057a2:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 80057a6:	eb00 080e 	add.w	r8, r0, lr
 80057aa:	4253      	negs	r3, r2
 80057ac:	2c01      	cmp	r4, #1
 80057ae:	eb08 0403 	add.w	r4, r8, r3
 80057b2:	f47f af7c 	bne.w	80056ae <D32_GENERIC+0x46>
 80057b6:	1d02      	adds	r2, r0, #4
 80057b8:	6803      	ldr	r3, [r0, #0]
 80057ba:	9806      	ldr	r0, [sp, #24]
 80057bc:	b110      	cbz	r0, 80057c4 <D32_GENERIC+0x15c>
 80057be:	ba5b      	rev16	r3, r3
 80057c0:	4610      	mov	r0, r2
 80057c2:	e783      	b.n	80056cc <D32_GENERIC+0x64>
 80057c4:	4610      	mov	r0, r2
 80057c6:	e781      	b.n	80056cc <D32_GENERIC+0x64>
 80057c8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80057cc:	462b      	mov	r3, r5
 80057ce:	463a      	mov	r2, r7
 80057d0:	6093      	str	r3, [r2, #8]
 80057d2:	9b07      	ldr	r3, [sp, #28]
 80057d4:	f8c2 b00c 	str.w	fp, [r2, #12]
 80057d8:	2000      	movs	r0, #0
 80057da:	61d6      	str	r6, [r2, #28]
 80057dc:	f8c2 a010 	str.w	sl, [r2, #16]
 80057e0:	f8c2 9014 	str.w	r9, [r2, #20]
 80057e4:	6193      	str	r3, [r2, #24]
 80057e6:	b009      	add	sp, #36	; 0x24
 80057e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ec:	200000cc 	.word	0x200000cc
 80057f0:	00060003 	.word	0x00060003
 80057f4:	000a000c 	.word	0x000a000c
 80057f8:	000c000a 	.word	0x000c000a
 80057fc:	00030006 	.word	0x00030006

08005800 <D48_GENERIC>:
 8005800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005804:	b089      	sub	sp, #36	; 0x24
 8005806:	6953      	ldr	r3, [r2, #20]
 8005808:	68d4      	ldr	r4, [r2, #12]
 800580a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800580c:	9302      	str	r3, [sp, #8]
 800580e:	9400      	str	r4, [sp, #0]
 8005810:	6993      	ldr	r3, [r2, #24]
 8005812:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005814:	9307      	str	r3, [sp, #28]
 8005816:	9403      	str	r4, [sp, #12]
 8005818:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800581c:	69d6      	ldr	r6, [r2, #28]
 800581e:	6893      	ldr	r3, [r2, #8]
 8005820:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005822:	9104      	str	r1, [sp, #16]
 8005824:	2d00      	cmp	r5, #0
 8005826:	f000 80c5 	beq.w	80059b4 <D48_GENERIC+0x1b4>
 800582a:	f004 0510 	and.w	r5, r4, #16
 800582e:	f004 0420 	and.w	r4, r4, #32
 8005832:	4967      	ldr	r1, [pc, #412]	; (80059d0 <D48_GENERIC+0x1d0>)
 8005834:	9505      	str	r5, [sp, #20]
 8005836:	9406      	str	r4, [sp, #24]
 8005838:	f04f 0c00 	mov.w	ip, #0
 800583c:	4657      	mov	r7, sl
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	e09c      	b.n	800597c <D48_GENERIC+0x17c>
 8005842:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8005846:	f810 b009 	ldrb.w	fp, [r0, r9]
 800584a:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800584e:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8005852:	7800      	ldrb	r0, [r0, #0]
 8005854:	0424      	lsls	r4, r4, #16
 8005856:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800585a:	f818 4005 	ldrb.w	r4, [r8, r5]
 800585e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8005862:	44a8      	add	r8, r5
 8005864:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8005868:	eb0b 0500 	add.w	r5, fp, r0
 800586c:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8005870:	fa5f f885 	uxtb.w	r8, r5
 8005874:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8005878:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800587c:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8005880:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8005884:	0e2d      	lsrs	r5, r5, #24
 8005886:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800588a:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800588e:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8005892:	b2e6      	uxtb	r6, r4
 8005894:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8005898:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800589c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 80058a0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80058a4:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 80058a8:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 80058ac:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80058b0:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 80058b4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80058b8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80058bc:	f3c6 0909 	ubfx	r9, r6, #0, #10
 80058c0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80058c4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80058c8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80058cc:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 80058d0:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 80058d4:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 80058d8:	4c3e      	ldr	r4, [pc, #248]	; (80059d4 <D48_GENERIC+0x1d4>)
 80058da:	9d00      	ldr	r5, [sp, #0]
 80058dc:	fb2a 5404 	smlad	r4, sl, r4, r5
 80058e0:	4d3d      	ldr	r5, [pc, #244]	; (80059d8 <D48_GENERIC+0x1d8>)
 80058e2:	fb28 4405 	smlad	r4, r8, r5, r4
 80058e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058ea:	fb2e 4b03 	smlad	fp, lr, r3, r4
 80058ee:	4c3b      	ldr	r4, [pc, #236]	; (80059dc <D48_GENERIC+0x1dc>)
 80058f0:	9b01      	ldr	r3, [sp, #4]
 80058f2:	fb2a 3304 	smlad	r3, sl, r4, r3
 80058f6:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80058fa:	fb28 3304 	smlad	r3, r8, r4, r3
 80058fe:	4c38      	ldr	r4, [pc, #224]	; (80059e0 <D48_GENERIC+0x1e0>)
 8005900:	fb2e 3304 	smlad	r3, lr, r4, r3
 8005904:	2501      	movs	r5, #1
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	fb2a fa05 	smuad	sl, sl, r5
 800590c:	4b35      	ldr	r3, [pc, #212]	; (80059e4 <D48_GENERIC+0x1e4>)
 800590e:	fb28 a803 	smlad	r8, r8, r3, sl
 8005912:	4b35      	ldr	r3, [pc, #212]	; (80059e8 <D48_GENERIC+0x1e8>)
 8005914:	fb2e 8303 	smlad	r3, lr, r3, r8
 8005918:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	9b02      	ldr	r3, [sp, #8]
 8005920:	eb04 0807 	add.w	r8, r4, r7
 8005924:	eba8 0803 	sub.w	r8, r8, r3
 8005928:	9b05      	ldr	r3, [sp, #20]
 800592a:	4465      	add	r5, ip
 800592c:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8005930:	b163      	cbz	r3, 800594c <D48_GENERIC+0x14c>
 8005932:	6a17      	ldr	r7, [r2, #32]
 8005934:	9402      	str	r4, [sp, #8]
 8005936:	fba8 8907 	umull	r8, r9, r8, r7
 800593a:	fb07 990b 	mla	r9, r7, fp, r9
 800593e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8005942:	f149 0900 	adc.w	r9, r9, #0
 8005946:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800594a:	463c      	mov	r4, r7
 800594c:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8005950:	9b03      	ldr	r3, [sp, #12]
 8005952:	02e4      	lsls	r4, r4, #11
 8005954:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005958:	f04f 0900 	mov.w	r9, #0
 800595c:	fb0c fc0e 	mul.w	ip, ip, lr
 8005960:	fbc3 8904 	smlal	r8, r9, r3, r4
 8005964:	9b04      	ldr	r3, [sp, #16]
 8005966:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800596a:	f304 040f 	ssat	r4, #16, r4
 800596e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8005972:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005974:	fa1f fc85 	uxth.w	ip, r5
 8005978:	4564      	cmp	r4, ip
 800597a:	d919      	bls.n	80059b0 <D48_GENERIC+0x1b0>
 800597c:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800597e:	fa5f fe84 	uxtb.w	lr, r4
 8005982:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8005986:	f1ce 0500 	rsb	r5, lr, #0
 800598a:	eb00 0b09 	add.w	fp, r0, r9
 800598e:	eb0b 0a05 	add.w	sl, fp, r5
 8005992:	2c01      	cmp	r4, #1
 8005994:	eb0a 0809 	add.w	r8, sl, r9
 8005998:	f47f af53 	bne.w	8005842 <D48_GENERIC+0x42>
 800599c:	9b06      	ldr	r3, [sp, #24]
 800599e:	6805      	ldr	r5, [r0, #0]
 80059a0:	6844      	ldr	r4, [r0, #4]
 80059a2:	3006      	adds	r0, #6
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f43f af63 	beq.w	8005870 <D48_GENERIC+0x70>
 80059aa:	ba6d      	rev16	r5, r5
 80059ac:	ba64      	rev16	r4, r4
 80059ae:	e75f      	b.n	8005870 <D48_GENERIC+0x70>
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	46ba      	mov	sl, r7
 80059b4:	6093      	str	r3, [r2, #8]
 80059b6:	9b00      	ldr	r3, [sp, #0]
 80059b8:	60d3      	str	r3, [r2, #12]
 80059ba:	9b02      	ldr	r3, [sp, #8]
 80059bc:	6153      	str	r3, [r2, #20]
 80059be:	9b07      	ldr	r3, [sp, #28]
 80059c0:	61d6      	str	r6, [r2, #28]
 80059c2:	2000      	movs	r0, #0
 80059c4:	f8c2 a010 	str.w	sl, [r2, #16]
 80059c8:	6193      	str	r3, [r2, #24]
 80059ca:	b009      	add	sp, #36	; 0x24
 80059cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d0:	200000cc 	.word	0x200000cc
 80059d4:	000f000a 	.word	0x000f000a
 80059d8:	00060003 	.word	0x00060003
 80059dc:	00150019 	.word	0x00150019
 80059e0:	00190015 	.word	0x00190015
 80059e4:	00030006 	.word	0x00030006
 80059e8:	000a000f 	.word	0x000a000f

080059ec <D64_GENERIC>:
 80059ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f0:	b089      	sub	sp, #36	; 0x24
 80059f2:	6913      	ldr	r3, [r2, #16]
 80059f4:	6895      	ldr	r5, [r2, #8]
 80059f6:	9303      	str	r3, [sp, #12]
 80059f8:	9501      	str	r5, [sp, #4]
 80059fa:	6953      	ldr	r3, [r2, #20]
 80059fc:	68d5      	ldr	r5, [r2, #12]
 80059fe:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005a00:	9304      	str	r3, [sp, #16]
 8005a02:	9500      	str	r5, [sp, #0]
 8005a04:	6993      	ldr	r3, [r2, #24]
 8005a06:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8005a08:	9307      	str	r3, [sp, #28]
 8005a0a:	9505      	str	r5, [sp, #20]
 8005a0c:	69d3      	ldr	r3, [r2, #28]
 8005a0e:	9106      	str	r1, [sp, #24]
 8005a10:	2c00      	cmp	r4, #0
 8005a12:	f000 80d9 	beq.w	8005bc8 <D64_GENERIC+0x1dc>
 8005a16:	6a11      	ldr	r1, [r2, #32]
 8005a18:	9102      	str	r1, [sp, #8]
 8005a1a:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8005c08 <D64_GENERIC+0x21c>
 8005a1e:	f04f 0c00 	mov.w	ip, #0
 8005a22:	4681      	mov	r9, r0
 8005a24:	e0c1      	b.n	8005baa <D64_GENERIC+0x1be>
 8005a26:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8005a2a:	4274      	negs	r4, r6
 8005a2c:	eb09 0708 	add.w	r7, r9, r8
 8005a30:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8005a34:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8005a38:	5d38      	ldrb	r0, [r7, r4]
 8005a3a:	5d29      	ldrb	r1, [r5, r4]
 8005a3c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8005a40:	f819 a008 	ldrb.w	sl, [r9, r8]
 8005a44:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8005a48:	f899 7000 	ldrb.w	r7, [r9]
 8005a4c:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8005a50:	4425      	add	r5, r4
 8005a52:	0409      	lsls	r1, r1, #16
 8005a54:	0400      	lsls	r0, r0, #16
 8005a56:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8005a5a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8005a5e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8005a62:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8005a66:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8005a6a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8005a6e:	4459      	add	r1, fp
 8005a70:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8005a74:	4438      	add	r0, r7
 8005a76:	b2c5      	uxtb	r5, r0
 8005a78:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8005a7c:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8005a80:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8005a84:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8005a88:	0e00      	lsrs	r0, r0, #24
 8005a8a:	eb03 0806 	add.w	r8, r3, r6
 8005a8e:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8005a92:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8005a96:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005a9a:	b2c8      	uxtb	r0, r1
 8005a9c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8005aa0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005aa4:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8005aa8:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8005aac:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8005ab0:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005ab4:	0e09      	lsrs	r1, r1, #24
 8005ab6:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8005aba:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8005abe:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8005ac2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8005ac6:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8005aca:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8005ace:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8005ad2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005ad6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005ada:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005ade:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8005ae2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005ae6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005aea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005aee:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005af2:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8005af6:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8005afa:	0a8b      	lsrs	r3, r1, #10
 8005afc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8005b00:	4939      	ldr	r1, [pc, #228]	; (8005be8 <D64_GENERIC+0x1fc>)
 8005b02:	9c00      	ldr	r4, [sp, #0]
 8005b04:	fb28 4101 	smlad	r1, r8, r1, r4
 8005b08:	4c38      	ldr	r4, [pc, #224]	; (8005bec <D64_GENERIC+0x200>)
 8005b0a:	fb27 1104 	smlad	r1, r7, r4, r1
 8005b0e:	4c38      	ldr	r4, [pc, #224]	; (8005bf0 <D64_GENERIC+0x204>)
 8005b10:	fb20 1104 	smlad	r1, r0, r4, r1
 8005b14:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8005b18:	fb2a 1106 	smlad	r1, sl, r6, r1
 8005b1c:	4c35      	ldr	r4, [pc, #212]	; (8005bf4 <D64_GENERIC+0x208>)
 8005b1e:	9d01      	ldr	r5, [sp, #4]
 8005b20:	fb28 5404 	smlad	r4, r8, r4, r5
 8005b24:	4d33      	ldr	r5, [pc, #204]	; (8005bf4 <D64_GENERIC+0x208>)
 8005b26:	fb2a 4415 	smladx	r4, sl, r5, r4
 8005b2a:	4d33      	ldr	r5, [pc, #204]	; (8005bf8 <D64_GENERIC+0x20c>)
 8005b2c:	fb27 4405 	smlad	r4, r7, r5, r4
 8005b30:	fb20 4415 	smladx	r4, r0, r5, r4
 8005b34:	2501      	movs	r5, #1
 8005b36:	9400      	str	r4, [sp, #0]
 8005b38:	fb28 f805 	smuad	r8, r8, r5
 8005b3c:	4c2f      	ldr	r4, [pc, #188]	; (8005bfc <D64_GENERIC+0x210>)
 8005b3e:	fb27 8704 	smlad	r7, r7, r4, r8
 8005b42:	4c2f      	ldr	r4, [pc, #188]	; (8005c00 <D64_GENERIC+0x214>)
 8005b44:	fb20 7004 	smlad	r0, r0, r4, r7
 8005b48:	4c2e      	ldr	r4, [pc, #184]	; (8005c04 <D64_GENERIC+0x218>)
 8005b4a:	fb2a 0004 	smlad	r0, sl, r4, r0
 8005b4e:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8005b52:	9902      	ldr	r1, [sp, #8]
 8005b54:	9001      	str	r0, [sp, #4]
 8005b56:	b189      	cbz	r1, 8005b7c <D64_GENERIC+0x190>
 8005b58:	9803      	ldr	r0, [sp, #12]
 8005b5a:	9c04      	ldr	r4, [sp, #16]
 8005b5c:	9604      	str	r6, [sp, #16]
 8005b5e:	4430      	add	r0, r6
 8005b60:	1b00      	subs	r0, r0, r4
 8005b62:	17c5      	asrs	r5, r0, #31
 8005b64:	460f      	mov	r7, r1
 8005b66:	fba0 0101 	umull	r0, r1, r0, r1
 8005b6a:	fb07 1105 	mla	r1, r7, r5, r1
 8005b6e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005b72:	f141 0100 	adc.w	r1, r1, #0
 8005b76:	0049      	lsls	r1, r1, #1
 8005b78:	9103      	str	r1, [sp, #12]
 8005b7a:	460e      	mov	r6, r1
 8005b7c:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8005b7e:	9905      	ldr	r1, [sp, #20]
 8005b80:	9806      	ldr	r0, [sp, #24]
 8005b82:	02b6      	lsls	r6, r6, #10
 8005b84:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8005b88:	f04f 0800 	mov.w	r8, #0
 8005b8c:	fb0c f404 	mul.w	r4, ip, r4
 8005b90:	fbc1 7806 	smlal	r7, r8, r1, r6
 8005b94:	4641      	mov	r1, r8
 8005b96:	1089      	asrs	r1, r1, #2
 8005b98:	f301 010f 	ssat	r1, #16, r1
 8005b9c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8005ba0:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8005ba2:	f10c 0c01 	add.w	ip, ip, #1
 8005ba6:	4561      	cmp	r1, ip
 8005ba8:	dd0e      	ble.n	8005bc8 <D64_GENERIC+0x1dc>
 8005baa:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8005bac:	2e01      	cmp	r6, #1
 8005bae:	f47f af3a 	bne.w	8005a26 <D64_GENERIC+0x3a>
 8005bb2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8005bb4:	06b4      	lsls	r4, r6, #26
 8005bb6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8005bba:	f109 0908 	add.w	r9, r9, #8
 8005bbe:	f57f af5a 	bpl.w	8005a76 <D64_GENERIC+0x8a>
 8005bc2:	ba40      	rev16	r0, r0
 8005bc4:	ba49      	rev16	r1, r1
 8005bc6:	e756      	b.n	8005a76 <D64_GENERIC+0x8a>
 8005bc8:	61d3      	str	r3, [r2, #28]
 8005bca:	9b03      	ldr	r3, [sp, #12]
 8005bcc:	9901      	ldr	r1, [sp, #4]
 8005bce:	6113      	str	r3, [r2, #16]
 8005bd0:	9b04      	ldr	r3, [sp, #16]
 8005bd2:	6091      	str	r1, [r2, #8]
 8005bd4:	6153      	str	r3, [r2, #20]
 8005bd6:	9900      	ldr	r1, [sp, #0]
 8005bd8:	9b07      	ldr	r3, [sp, #28]
 8005bda:	60d1      	str	r1, [r2, #12]
 8005bdc:	2000      	movs	r0, #0
 8005bde:	6193      	str	r3, [r2, #24]
 8005be0:	b009      	add	sp, #36	; 0x24
 8005be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be6:	bf00      	nop
 8005be8:	001c0015 	.word	0x001c0015
 8005bec:	000f000a 	.word	0x000f000a
 8005bf0:	00060003 	.word	0x00060003
 8005bf4:	0024002a 	.word	0x0024002a
 8005bf8:	002e0030 	.word	0x002e0030
 8005bfc:	00030006 	.word	0x00030006
 8005c00:	000a000f 	.word	0x000a000f
 8005c04:	0015001c 	.word	0x0015001c
 8005c08:	200000cc 	.word	0x200000cc

08005c0c <D80_GENERIC>:
 8005c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c10:	b08b      	sub	sp, #44	; 0x2c
 8005c12:	6914      	ldr	r4, [r2, #16]
 8005c14:	9404      	str	r4, [sp, #16]
 8005c16:	6954      	ldr	r4, [r2, #20]
 8005c18:	9405      	str	r4, [sp, #20]
 8005c1a:	6994      	ldr	r4, [r2, #24]
 8005c1c:	9409      	str	r4, [sp, #36]	; 0x24
 8005c1e:	6894      	ldr	r4, [r2, #8]
 8005c20:	9402      	str	r4, [sp, #8]
 8005c22:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005c24:	68d4      	ldr	r4, [r2, #12]
 8005c26:	9401      	str	r4, [sp, #4]
 8005c28:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005c2a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8005c2e:	9406      	str	r4, [sp, #24]
 8005c30:	9107      	str	r1, [sp, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 810f 	beq.w	8005e56 <D80_GENERIC+0x24a>
 8005c38:	6a13      	ldr	r3, [r2, #32]
 8005c3a:	9308      	str	r3, [sp, #32]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9200      	str	r2, [sp, #0]
 8005c40:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8005ea8 <D80_GENERIC+0x29c>
 8005c44:	f8cd b00c 	str.w	fp, [sp, #12]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	e0ed      	b.n	8005e28 <D80_GENERIC+0x21c>
 8005c4c:	fa5f fc8c 	uxtb.w	ip, ip
 8005c50:	fa0f f48c 	sxth.w	r4, ip
 8005c54:	0066      	lsls	r6, r4, #1
 8005c56:	eb06 0804 	add.w	r8, r6, r4
 8005c5a:	f1cc 0500 	rsb	r5, ip, #0
 8005c5e:	eb00 0108 	add.w	r1, r0, r8
 8005c62:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005c66:	194b      	adds	r3, r1, r5
 8005c68:	5d49      	ldrb	r1, [r1, r5]
 8005c6a:	f810 a008 	ldrb.w	sl, [r0, r8]
 8005c6e:	f813 b004 	ldrb.w	fp, [r3, r4]
 8005c72:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8005c76:	f890 8000 	ldrb.w	r8, [r0]
 8005c7a:	eb03 0e04 	add.w	lr, r3, r4
 8005c7e:	eb0e 0705 	add.w	r7, lr, r5
 8005c82:	0409      	lsls	r1, r1, #16
 8005c84:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8005c88:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8005c8c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8005c90:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8005c94:	eb0a 0004 	add.w	r0, sl, r4
 8005c98:	041b      	lsls	r3, r3, #16
 8005c9a:	f81a a004 	ldrb.w	sl, [sl, r4]
 8005c9e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8005ca2:	5d44      	ldrb	r4, [r0, r5]
 8005ca4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8005ca8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8005cac:	4428      	add	r0, r5
 8005cae:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8005cb2:	4441      	add	r1, r8
 8005cb4:	4430      	add	r0, r6
 8005cb6:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8005cba:	441f      	add	r7, r3
 8005cbc:	b2cd      	uxtb	r5, r1
 8005cbe:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005cc2:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8005cc6:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8005cca:	9b03      	ldr	r3, [sp, #12]
 8005ccc:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8005cd0:	0e09      	lsrs	r1, r1, #24
 8005cd2:	4433      	add	r3, r6
 8005cd4:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8005cd8:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8005cdc:	b2fd      	uxtb	r5, r7
 8005cde:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8005ce2:	469b      	mov	fp, r3
 8005ce4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8005ce8:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8005cec:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8005cf0:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8005cf4:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8005cf8:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8005cfc:	0e3b      	lsrs	r3, r7, #24
 8005cfe:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8005d02:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8005d06:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005d0a:	fa5f fe84 	uxtb.w	lr, r4
 8005d0e:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8005d12:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005d16:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005d1a:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8005d1e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8005d22:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8005d26:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8005d2a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8005d2e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d36:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005d3a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005d3e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005d42:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005d46:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8005d4a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8005d4e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8005d52:	0aa3      	lsrs	r3, r4, #10
 8005d54:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005d58:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005d5c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005d60:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8005d64:	9303      	str	r3, [sp, #12]
 8005d66:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8005d6a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8005d6e:	4b42      	ldr	r3, [pc, #264]	; (8005e78 <D80_GENERIC+0x26c>)
 8005d70:	9901      	ldr	r1, [sp, #4]
 8005d72:	fb2b 1303 	smlad	r3, fp, r3, r1
 8005d76:	4941      	ldr	r1, [pc, #260]	; (8005e7c <D80_GENERIC+0x270>)
 8005d78:	fb28 3301 	smlad	r3, r8, r1, r3
 8005d7c:	4940      	ldr	r1, [pc, #256]	; (8005e80 <D80_GENERIC+0x274>)
 8005d7e:	fb2c 3301 	smlad	r3, ip, r1, r3
 8005d82:	4940      	ldr	r1, [pc, #256]	; (8005e84 <D80_GENERIC+0x278>)
 8005d84:	fb27 3301 	smlad	r3, r7, r1, r3
 8005d88:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005d8c:	fb2e 3301 	smlad	r3, lr, r1, r3
 8005d90:	493d      	ldr	r1, [pc, #244]	; (8005e88 <D80_GENERIC+0x27c>)
 8005d92:	9c02      	ldr	r4, [sp, #8]
 8005d94:	fb2b 4401 	smlad	r4, fp, r1, r4
 8005d98:	493c      	ldr	r1, [pc, #240]	; (8005e8c <D80_GENERIC+0x280>)
 8005d9a:	fb28 4401 	smlad	r4, r8, r1, r4
 8005d9e:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8005da2:	fb2c 4101 	smlad	r1, ip, r1, r4
 8005da6:	4c3a      	ldr	r4, [pc, #232]	; (8005e90 <D80_GENERIC+0x284>)
 8005da8:	fb27 1104 	smlad	r1, r7, r4, r1
 8005dac:	4c39      	ldr	r4, [pc, #228]	; (8005e94 <D80_GENERIC+0x288>)
 8005dae:	fb2e 1104 	smlad	r1, lr, r4, r1
 8005db2:	9101      	str	r1, [sp, #4]
 8005db4:	2101      	movs	r1, #1
 8005db6:	fb2b fb01 	smuad	fp, fp, r1
 8005dba:	4937      	ldr	r1, [pc, #220]	; (8005e98 <D80_GENERIC+0x28c>)
 8005dbc:	fb28 b801 	smlad	r8, r8, r1, fp
 8005dc0:	4d36      	ldr	r5, [pc, #216]	; (8005e9c <D80_GENERIC+0x290>)
 8005dc2:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8005dc6:	4d36      	ldr	r5, [pc, #216]	; (8005ea0 <D80_GENERIC+0x294>)
 8005dc8:	fb27 c705 	smlad	r7, r7, r5, ip
 8005dcc:	4d35      	ldr	r5, [pc, #212]	; (8005ea4 <D80_GENERIC+0x298>)
 8005dce:	fb2e 7105 	smlad	r1, lr, r5, r7
 8005dd2:	9102      	str	r1, [sp, #8]
 8005dd4:	9908      	ldr	r1, [sp, #32]
 8005dd6:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8005dda:	b181      	cbz	r1, 8005dfe <D80_GENERIC+0x1f2>
 8005ddc:	9c04      	ldr	r4, [sp, #16]
 8005dde:	9d05      	ldr	r5, [sp, #20]
 8005de0:	9305      	str	r3, [sp, #20]
 8005de2:	441c      	add	r4, r3
 8005de4:	1b64      	subs	r4, r4, r5
 8005de6:	17e7      	asrs	r7, r4, #31
 8005de8:	fba4 4501 	umull	r4, r5, r4, r1
 8005dec:	fb01 5507 	mla	r5, r1, r7, r5
 8005df0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8005df4:	f145 0500 	adc.w	r5, r5, #0
 8005df8:	0069      	lsls	r1, r5, #1
 8005dfa:	9104      	str	r1, [sp, #16]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	9e00      	ldr	r6, [sp, #0]
 8005e00:	9f06      	ldr	r7, [sp, #24]
 8005e02:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8005e04:	025b      	lsls	r3, r3, #9
 8005e06:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005e0a:	2500      	movs	r5, #0
 8005e0c:	fb02 f101 	mul.w	r1, r2, r1
 8005e10:	fbc7 4503 	smlal	r4, r5, r7, r3
 8005e14:	9c07      	ldr	r4, [sp, #28]
 8005e16:	10ab      	asrs	r3, r5, #2
 8005e18:	f303 030f 	ssat	r3, #16, r3
 8005e1c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8005e20:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8005e22:	3201      	adds	r2, #1
 8005e24:	4293      	cmp	r3, r2
 8005e26:	dd13      	ble.n	8005e50 <D80_GENERIC+0x244>
 8005e28:	9b00      	ldr	r3, [sp, #0]
 8005e2a:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8005e2e:	f1bc 0f01 	cmp.w	ip, #1
 8005e32:	f47f af0b 	bne.w	8005c4c <D80_GENERIC+0x40>
 8005e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e38:	6884      	ldr	r4, [r0, #8]
 8005e3a:	069b      	lsls	r3, r3, #26
 8005e3c:	e890 0082 	ldmia.w	r0, {r1, r7}
 8005e40:	f100 000a 	add.w	r0, r0, #10
 8005e44:	f57f af3a 	bpl.w	8005cbc <D80_GENERIC+0xb0>
 8005e48:	ba49      	rev16	r1, r1
 8005e4a:	ba7f      	rev16	r7, r7
 8005e4c:	ba64      	rev16	r4, r4
 8005e4e:	e735      	b.n	8005cbc <D80_GENERIC+0xb0>
 8005e50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005e54:	4632      	mov	r2, r6
 8005e56:	9b02      	ldr	r3, [sp, #8]
 8005e58:	6093      	str	r3, [r2, #8]
 8005e5a:	9b01      	ldr	r3, [sp, #4]
 8005e5c:	60d3      	str	r3, [r2, #12]
 8005e5e:	9b04      	ldr	r3, [sp, #16]
 8005e60:	6113      	str	r3, [r2, #16]
 8005e62:	9b05      	ldr	r3, [sp, #20]
 8005e64:	6153      	str	r3, [r2, #20]
 8005e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e68:	f8c2 b01c 	str.w	fp, [r2, #28]
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	6193      	str	r3, [r2, #24]
 8005e70:	b00b      	add	sp, #44	; 0x2c
 8005e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e76:	bf00      	nop
 8005e78:	002d0024 	.word	0x002d0024
 8005e7c:	001c0015 	.word	0x001c0015
 8005e80:	000f000a 	.word	0x000f000a
 8005e84:	00060003 	.word	0x00060003
 8005e88:	0037003f 	.word	0x0037003f
 8005e8c:	00450049 	.word	0x00450049
 8005e90:	00490045 	.word	0x00490045
 8005e94:	003f0037 	.word	0x003f0037
 8005e98:	00030006 	.word	0x00030006
 8005e9c:	000a000f 	.word	0x000a000f
 8005ea0:	0015001c 	.word	0x0015001c
 8005ea4:	0024002d 	.word	0x0024002d
 8005ea8:	200000cc 	.word	0x200000cc

08005eac <D128_GENERIC>:
 8005eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb0:	b093      	sub	sp, #76	; 0x4c
 8005eb2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005eb4:	9005      	str	r0, [sp, #20]
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	9201      	str	r2, [sp, #4]
 8005eba:	6912      	ldr	r2, [r2, #16]
 8005ebc:	920c      	str	r2, [sp, #48]	; 0x30
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	6940      	ldr	r0, [r0, #20]
 8005ec2:	900d      	str	r0, [sp, #52]	; 0x34
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4614      	mov	r4, r2
 8005ec8:	6992      	ldr	r2, [r2, #24]
 8005eca:	9211      	str	r2, [sp, #68]	; 0x44
 8005ecc:	69c2      	ldr	r2, [r0, #28]
 8005ece:	9202      	str	r2, [sp, #8]
 8005ed0:	68e2      	ldr	r2, [r4, #12]
 8005ed2:	6880      	ldr	r0, [r0, #8]
 8005ed4:	9203      	str	r2, [sp, #12]
 8005ed6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005ed8:	9004      	str	r0, [sp, #16]
 8005eda:	920e      	str	r2, [sp, #56]	; 0x38
 8005edc:	910f      	str	r1, [sp, #60]	; 0x3c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 819b 	beq.w	800621a <D128_GENERIC+0x36e>
 8005ee4:	6a23      	ldr	r3, [r4, #32]
 8005ee6:	9310      	str	r3, [sp, #64]	; 0x40
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8006294 <D128_GENERIC+0x3e8>
 8005eee:	9306      	str	r3, [sp, #24]
 8005ef0:	e17a      	b.n	80061e8 <D128_GENERIC+0x33c>
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	9d05      	ldr	r5, [sp, #20]
 8005ef6:	b214      	sxth	r4, r2
 8005ef8:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8005efc:	4250      	negs	r0, r2
 8005efe:	eb05 010a 	add.w	r1, r5, sl
 8005f02:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f06:	eb01 0800 	add.w	r8, r1, r0
 8005f0a:	eb0b 0c04 	add.w	ip, fp, r4
 8005f0e:	eb08 070c 	add.w	r7, r8, ip
 8005f12:	183b      	adds	r3, r7, r0
 8005f14:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8005f18:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8005f1c:	eb0e 0604 	add.w	r6, lr, r4
 8005f20:	9307      	str	r3, [sp, #28]
 8005f22:	1833      	adds	r3, r6, r0
 8005f24:	9305      	str	r3, [sp, #20]
 8005f26:	462b      	mov	r3, r5
 8005f28:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8005f2c:	f8cd a020 	str.w	sl, [sp, #32]
 8005f30:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8005f34:	f813 c002 	ldrb.w	ip, [r3, r2]
 8005f38:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8005f3c:	5c3a      	ldrb	r2, [r7, r0]
 8005f3e:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8005f42:	781f      	ldrb	r7, [r3, #0]
 8005f44:	9b07      	ldr	r3, [sp, #28]
 8005f46:	9d05      	ldr	r5, [sp, #20]
 8005f48:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8005f4c:	5c09      	ldrb	r1, [r1, r0]
 8005f4e:	9709      	str	r7, [sp, #36]	; 0x24
 8005f50:	9307      	str	r3, [sp, #28]
 8005f52:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8005f56:	5c33      	ldrb	r3, [r6, r0]
 8005f58:	0412      	lsls	r2, r2, #16
 8005f5a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8005f5e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8005f62:	9d08      	ldr	r5, [sp, #32]
 8005f64:	eb06 0a04 	add.w	sl, r6, r4
 8005f68:	0409      	lsls	r1, r1, #16
 8005f6a:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8005f6e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8005f72:	5d36      	ldrb	r6, [r6, r4]
 8005f74:	9c05      	ldr	r4, [sp, #20]
 8005f76:	042d      	lsls	r5, r5, #16
 8005f78:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8005f7c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8005f80:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8005f84:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8005f88:	eb0a 0c00 	add.w	ip, sl, r0
 8005f8c:	041b      	lsls	r3, r3, #16
 8005f8e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8005f92:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8005f96:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8005f9a:	9d07      	ldr	r5, [sp, #28]
 8005f9c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8005fa0:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8005fa4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005fa6:	4458      	add	r0, fp
 8005fa8:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8005fac:	9005      	str	r0, [sp, #20]
 8005fae:	4439      	add	r1, r7
 8005fb0:	442a      	add	r2, r5
 8005fb2:	44b2      	add	sl, r6
 8005fb4:	1918      	adds	r0, r3, r4
 8005fb6:	b2cb      	uxtb	r3, r1
 8005fb8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8005fbc:	9e02      	ldr	r6, [sp, #8]
 8005fbe:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005fc2:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8005fc6:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8005fca:	441e      	add	r6, r3
 8005fcc:	0e09      	lsrs	r1, r1, #24
 8005fce:	4633      	mov	r3, r6
 8005fd0:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005fd4:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8005fd8:	b2d4      	uxtb	r4, r2
 8005fda:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005fde:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005fe2:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8005fe6:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005fea:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005fee:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005ff2:	0e12      	lsrs	r2, r2, #24
 8005ff4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8005ff8:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8005ffc:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8006000:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8006004:	9702      	str	r7, [sp, #8]
 8006006:	b2c2      	uxtb	r2, r0
 8006008:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800600c:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8006010:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8006014:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8006018:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800601c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8006020:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8006024:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8006028:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800602c:	0e00      	lsrs	r0, r0, #24
 800602e:	fa5f f68a 	uxtb.w	r6, sl
 8006032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006036:	9309      	str	r3, [sp, #36]	; 0x24
 8006038:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800603c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8006040:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8006044:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8006048:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800604c:	950a      	str	r5, [sp, #40]	; 0x28
 800604e:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8006052:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8006056:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800605a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800605e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8006062:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006066:	920b      	str	r2, [sp, #44]	; 0x2c
 8006068:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800606c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800606e:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8006072:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8006076:	9307      	str	r3, [sp, #28]
 8006078:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800607c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8006080:	9b02      	ldr	r3, [sp, #8]
 8006082:	f8cd c008 	str.w	ip, [sp, #8]
 8006086:	4694      	mov	ip, r2
 8006088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800608a:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800608e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8006092:	9a02      	ldr	r2, [sp, #8]
 8006094:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006098:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800609c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80060a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060a2:	f8cd a020 	str.w	sl, [sp, #32]
 80060a6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80060aa:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80060ae:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80060b2:	9b07      	ldr	r3, [sp, #28]
 80060b4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80060b8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80060bc:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 80060c0:	9a08      	ldr	r2, [sp, #32]
 80060c2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80060c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ca:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80060ce:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80060d2:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 80060d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80060da:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80060de:	0a96      	lsrs	r6, r2, #10
 80060e0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80060e4:	9602      	str	r6, [sp, #8]
 80060e6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80060ea:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80060ee:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 80060f2:	4e53      	ldr	r6, [pc, #332]	; (8006240 <D128_GENERIC+0x394>)
 80060f4:	9f03      	ldr	r7, [sp, #12]
 80060f6:	fb2c 7606 	smlad	r6, ip, r6, r7
 80060fa:	4f52      	ldr	r7, [pc, #328]	; (8006244 <D128_GENERIC+0x398>)
 80060fc:	fb2a 6607 	smlad	r6, sl, r7, r6
 8006100:	4f51      	ldr	r7, [pc, #324]	; (8006248 <D128_GENERIC+0x39c>)
 8006102:	fb21 6607 	smlad	r6, r1, r7, r6
 8006106:	4f51      	ldr	r7, [pc, #324]	; (800624c <D128_GENERIC+0x3a0>)
 8006108:	fb24 6607 	smlad	r6, r4, r7, r6
 800610c:	4f50      	ldr	r7, [pc, #320]	; (8006250 <D128_GENERIC+0x3a4>)
 800610e:	fb28 6607 	smlad	r6, r8, r7, r6
 8006112:	4f50      	ldr	r7, [pc, #320]	; (8006254 <D128_GENERIC+0x3a8>)
 8006114:	fb20 6607 	smlad	r6, r0, r7, r6
 8006118:	4f4f      	ldr	r7, [pc, #316]	; (8006258 <D128_GENERIC+0x3ac>)
 800611a:	fb23 6607 	smlad	r6, r3, r7, r6
 800611e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8006122:	fb25 6607 	smlad	r6, r5, r7, r6
 8006126:	4f4d      	ldr	r7, [pc, #308]	; (800625c <D128_GENERIC+0x3b0>)
 8006128:	9a04      	ldr	r2, [sp, #16]
 800612a:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800612e:	4a4c      	ldr	r2, [pc, #304]	; (8006260 <D128_GENERIC+0x3b4>)
 8006130:	fb2a ee02 	smlad	lr, sl, r2, lr
 8006134:	4f4b      	ldr	r7, [pc, #300]	; (8006264 <D128_GENERIC+0x3b8>)
 8006136:	fb21 ee07 	smlad	lr, r1, r7, lr
 800613a:	4f4b      	ldr	r7, [pc, #300]	; (8006268 <D128_GENERIC+0x3bc>)
 800613c:	fb24 ee07 	smlad	lr, r4, r7, lr
 8006140:	4f4a      	ldr	r7, [pc, #296]	; (800626c <D128_GENERIC+0x3c0>)
 8006142:	fb28 ee07 	smlad	lr, r8, r7, lr
 8006146:	4f4a      	ldr	r7, [pc, #296]	; (8006270 <D128_GENERIC+0x3c4>)
 8006148:	fb20 ee07 	smlad	lr, r0, r7, lr
 800614c:	4f49      	ldr	r7, [pc, #292]	; (8006274 <D128_GENERIC+0x3c8>)
 800614e:	fb23 e707 	smlad	r7, r3, r7, lr
 8006152:	f8df e144 	ldr.w	lr, [pc, #324]	; 8006298 <D128_GENERIC+0x3ec>
 8006156:	fb25 720e 	smlad	r2, r5, lr, r7
 800615a:	f04f 0b01 	mov.w	fp, #1
 800615e:	9203      	str	r2, [sp, #12]
 8006160:	fb2c fb0b 	smuad	fp, ip, fp
 8006164:	4f44      	ldr	r7, [pc, #272]	; (8006278 <D128_GENERIC+0x3cc>)
 8006166:	fb2a ba07 	smlad	sl, sl, r7, fp
 800616a:	4f44      	ldr	r7, [pc, #272]	; (800627c <D128_GENERIC+0x3d0>)
 800616c:	fb21 aa07 	smlad	sl, r1, r7, sl
 8006170:	4f43      	ldr	r7, [pc, #268]	; (8006280 <D128_GENERIC+0x3d4>)
 8006172:	fb24 aa07 	smlad	sl, r4, r7, sl
 8006176:	4f43      	ldr	r7, [pc, #268]	; (8006284 <D128_GENERIC+0x3d8>)
 8006178:	fb28 a707 	smlad	r7, r8, r7, sl
 800617c:	4a42      	ldr	r2, [pc, #264]	; (8006288 <D128_GENERIC+0x3dc>)
 800617e:	fb20 7702 	smlad	r7, r0, r2, r7
 8006182:	4a42      	ldr	r2, [pc, #264]	; (800628c <D128_GENERIC+0x3e0>)
 8006184:	fb23 7702 	smlad	r7, r3, r2, r7
 8006188:	4b41      	ldr	r3, [pc, #260]	; (8006290 <D128_GENERIC+0x3e4>)
 800618a:	fb25 7303 	smlad	r3, r5, r3, r7
 800618e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006190:	9304      	str	r3, [sp, #16]
 8006192:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8006196:	b185      	cbz	r5, 80061ba <D128_GENERIC+0x30e>
 8006198:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800619a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800619c:	960d      	str	r6, [sp, #52]	; 0x34
 800619e:	4432      	add	r2, r6
 80061a0:	1a52      	subs	r2, r2, r1
 80061a2:	17d1      	asrs	r1, r2, #31
 80061a4:	fba2 2305 	umull	r2, r3, r2, r5
 80061a8:	fb05 3301 	mla	r3, r5, r1, r3
 80061ac:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80061b0:	f143 0300 	adc.w	r3, r3, #0
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	930c      	str	r3, [sp, #48]	; 0x30
 80061b8:	461e      	mov	r6, r3
 80061ba:	9801      	ldr	r0, [sp, #4]
 80061bc:	9c06      	ldr	r4, [sp, #24]
 80061be:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80061c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80061c2:	01f6      	lsls	r6, r6, #7
 80061c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061c8:	2300      	movs	r3, #0
 80061ca:	fbc5 2306 	smlal	r2, r3, r5, r6
 80061ce:	fb04 f101 	mul.w	r1, r4, r1
 80061d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061d4:	109b      	asrs	r3, r3, #2
 80061d6:	f303 030f 	ssat	r3, #16, r3
 80061da:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80061de:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80061e0:	1c62      	adds	r2, r4, #1
 80061e2:	4293      	cmp	r3, r2
 80061e4:	9206      	str	r2, [sp, #24]
 80061e6:	dd18      	ble.n	800621a <D128_GENERIC+0x36e>
 80061e8:	9b01      	ldr	r3, [sp, #4]
 80061ea:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80061ec:	2a01      	cmp	r2, #1
 80061ee:	f47f ae80 	bne.w	8005ef2 <D128_GENERIC+0x46>
 80061f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f4:	9d05      	ldr	r5, [sp, #20]
 80061f6:	069b      	lsls	r3, r3, #26
 80061f8:	6829      	ldr	r1, [r5, #0]
 80061fa:	686a      	ldr	r2, [r5, #4]
 80061fc:	68a8      	ldr	r0, [r5, #8]
 80061fe:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8006202:	f105 0410 	add.w	r4, r5, #16
 8006206:	d506      	bpl.n	8006216 <D128_GENERIC+0x36a>
 8006208:	ba49      	rev16	r1, r1
 800620a:	ba52      	rev16	r2, r2
 800620c:	ba40      	rev16	r0, r0
 800620e:	fa9a fa9a 	rev16.w	sl, sl
 8006212:	9405      	str	r4, [sp, #20]
 8006214:	e6cf      	b.n	8005fb6 <D128_GENERIC+0x10a>
 8006216:	9405      	str	r4, [sp, #20]
 8006218:	e6cd      	b.n	8005fb6 <D128_GENERIC+0x10a>
 800621a:	9a01      	ldr	r2, [sp, #4]
 800621c:	9904      	ldr	r1, [sp, #16]
 800621e:	6091      	str	r1, [r2, #8]
 8006220:	9903      	ldr	r1, [sp, #12]
 8006222:	60d1      	str	r1, [r2, #12]
 8006224:	9b02      	ldr	r3, [sp, #8]
 8006226:	61d3      	str	r3, [r2, #28]
 8006228:	4611      	mov	r1, r2
 800622a:	4613      	mov	r3, r2
 800622c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800622e:	610a      	str	r2, [r1, #16]
 8006230:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006232:	6159      	str	r1, [r3, #20]
 8006234:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006236:	6199      	str	r1, [r3, #24]
 8006238:	2000      	movs	r0, #0
 800623a:	b013      	add	sp, #76	; 0x4c
 800623c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006240:	00780069 	.word	0x00780069
 8006244:	005b004e 	.word	0x005b004e
 8006248:	00420037 	.word	0x00420037
 800624c:	002d0024 	.word	0x002d0024
 8006250:	001c0015 	.word	0x001c0015
 8006254:	000f000a 	.word	0x000f000a
 8006258:	00060003 	.word	0x00060003
 800625c:	00880096 	.word	0x00880096
 8006260:	00a200ac 	.word	0x00a200ac
 8006264:	00b400ba 	.word	0x00b400ba
 8006268:	00be00c0 	.word	0x00be00c0
 800626c:	00c000be 	.word	0x00c000be
 8006270:	00ba00b4 	.word	0x00ba00b4
 8006274:	00ac00a2 	.word	0x00ac00a2
 8006278:	00030006 	.word	0x00030006
 800627c:	000a000f 	.word	0x000a000f
 8006280:	0015001c 	.word	0x0015001c
 8006284:	0024002d 	.word	0x0024002d
 8006288:	00370042 	.word	0x00370042
 800628c:	004e005b 	.word	0x004e005b
 8006290:	00690078 	.word	0x00690078
 8006294:	200000cc 	.word	0x200000cc
 8006298:	00960088 	.word	0x00960088

0800629c <D16_1CH_HTONS_VOL_HP>:
 800629c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a0:	4691      	mov	r9, r2
 80062a2:	b083      	sub	sp, #12
 80062a4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80062a6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80062aa:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	4680      	mov	r8, r0
 80062b2:	f8d9 7014 	ldr.w	r7, [r9, #20]
 80062b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80062ba:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80062be:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80062c2:	9401      	str	r4, [sp, #4]
 80062c4:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 80062c8:	f8d9 e020 	ldr.w	lr, [r9, #32]
 80062cc:	2a00      	cmp	r2, #0
 80062ce:	d04e      	beq.n	800636e <D16_1CH_HTONS_VOL_HP+0xd2>
 80062d0:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800637c <D16_1CH_HTONS_VOL_HP+0xe0>
 80062d4:	1e8c      	subs	r4, r1, #2
 80062d6:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 80062da:	f858 2b02 	ldr.w	r2, [r8], #2
 80062de:	ba52      	rev16	r2, r2
 80062e0:	b2d6      	uxtb	r6, r2
 80062e2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80062e6:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 80062ea:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80062ee:	4413      	add	r3, r2
 80062f0:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 80062f4:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80062f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006300:	0a93      	lsrs	r3, r2, #10
 8006302:	4a1c      	ldr	r2, [pc, #112]	; (8006374 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8006304:	fb21 5202 	smlad	r2, r1, r2, r5
 8006308:	4d1b      	ldr	r5, [pc, #108]	; (8006378 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800630a:	fb21 f505 	smuad	r5, r1, r5
 800630e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8006312:	4410      	add	r0, r2
 8006314:	1bc0      	subs	r0, r0, r7
 8006316:	17c7      	asrs	r7, r0, #31
 8006318:	fba0 010e 	umull	r0, r1, r0, lr
 800631c:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006320:	fb0e 1107 	mla	r1, lr, r7, r1
 8006324:	f141 0100 	adc.w	r1, r1, #0
 8006328:	0448      	lsls	r0, r1, #17
 800632a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800632e:	2700      	movs	r7, #0
 8006330:	fbc0 670a 	smlal	r6, r7, r0, sl
 8006334:	45d8      	cmp	r8, fp
 8006336:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800633a:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800633e:	4617      	mov	r7, r2
 8006340:	f301 010f 	ssat	r1, #16, r1
 8006344:	f824 1f02 	strh.w	r1, [r4, #2]!
 8006348:	d1c7      	bne.n	80062da <D16_1CH_HTONS_VOL_HP+0x3e>
 800634a:	9901      	ldr	r1, [sp, #4]
 800634c:	f8c9 301c 	str.w	r3, [r9, #28]
 8006350:	9b00      	ldr	r3, [sp, #0]
 8006352:	f8c9 0010 	str.w	r0, [r9, #16]
 8006356:	2000      	movs	r0, #0
 8006358:	f8c9 5008 	str.w	r5, [r9, #8]
 800635c:	f8c9 100c 	str.w	r1, [r9, #12]
 8006360:	f8c9 2014 	str.w	r2, [r9, #20]
 8006364:	f8c9 3018 	str.w	r3, [r9, #24]
 8006368:	b003      	add	sp, #12
 800636a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636e:	463a      	mov	r2, r7
 8006370:	4621      	mov	r1, r4
 8006372:	e7eb      	b.n	800634c <D16_1CH_HTONS_VOL_HP+0xb0>
 8006374:	00030001 	.word	0x00030001
 8006378:	00010003 	.word	0x00010003
 800637c:	200000cc 	.word	0x200000cc

08006380 <D24_1CH_HTONS_VOL_HP>:
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	b089      	sub	sp, #36	; 0x24
 8006386:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006388:	6996      	ldr	r6, [r2, #24]
 800638a:	9304      	str	r3, [sp, #16]
 800638c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800638e:	9207      	str	r2, [sp, #28]
 8006390:	6915      	ldr	r5, [r2, #16]
 8006392:	6954      	ldr	r4, [r2, #20]
 8006394:	9606      	str	r6, [sp, #24]
 8006396:	6893      	ldr	r3, [r2, #8]
 8006398:	69d6      	ldr	r6, [r2, #28]
 800639a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800639e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80063a2:	9a04      	ldr	r2, [sp, #16]
 80063a4:	9705      	str	r7, [sp, #20]
 80063a6:	2a00      	cmp	r2, #0
 80063a8:	d07e      	beq.n	80064a8 <D24_1CH_HTONS_VOL_HP+0x128>
 80063aa:	f1a1 0b02 	sub.w	fp, r1, #2
 80063ae:	2700      	movs	r7, #0
 80063b0:	46a8      	mov	r8, r5
 80063b2:	f8cd b004 	str.w	fp, [sp, #4]
 80063b6:	4655      	mov	r5, sl
 80063b8:	46e3      	mov	fp, ip
 80063ba:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 80064b4 <D24_1CH_HTONS_VOL_HP+0x134>
 80063be:	46ba      	mov	sl, r7
 80063c0:	469c      	mov	ip, r3
 80063c2:	e055      	b.n	8006470 <D24_1CH_HTONS_VOL_HP+0xf0>
 80063c4:	7802      	ldrb	r2, [r0, #0]
 80063c6:	78c3      	ldrb	r3, [r0, #3]
 80063c8:	7841      	ldrb	r1, [r0, #1]
 80063ca:	0212      	lsls	r2, r2, #8
 80063cc:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80063d0:	440b      	add	r3, r1
 80063d2:	3002      	adds	r0, #2
 80063d4:	b2d9      	uxtb	r1, r3
 80063d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80063da:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 80063de:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 80063e2:	0c1b      	lsrs	r3, r3, #16
 80063e4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80063e8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80063ec:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 80063f0:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80063f4:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80063f8:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80063fc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8006400:	4a2a      	ldr	r2, [pc, #168]	; (80064ac <D24_1CH_HTONS_VOL_HP+0x12c>)
 8006402:	fb23 b102 	smlad	r1, r3, r2, fp
 8006406:	4a2a      	ldr	r2, [pc, #168]	; (80064b0 <D24_1CH_HTONS_VOL_HP+0x130>)
 8006408:	fb23 cb02 	smlad	fp, r3, r2, ip
 800640c:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8006410:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8006414:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8006418:	2201      	movs	r2, #1
 800641a:	fb23 f702 	smuad	r7, r3, r2
 800641e:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8006422:	eb01 0208 	add.w	r2, r1, r8
 8006426:	1b12      	subs	r2, r2, r4
 8006428:	17d4      	asrs	r4, r2, #31
 800642a:	fba2 2305 	umull	r2, r3, r2, r5
 800642e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006432:	fb05 3304 	mla	r3, r5, r4, r3
 8006436:	f143 0300 	adc.w	r3, r3, #0
 800643a:	9c05      	ldr	r4, [sp, #20]
 800643c:	03da      	lsls	r2, r3, #15
 800643e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006442:	f04f 0900 	mov.w	r9, #0
 8006446:	fbc4 8902 	smlal	r8, r9, r4, r2
 800644a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800644e:	9a01      	ldr	r2, [sp, #4]
 8006450:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8006454:	9b03      	ldr	r3, [sp, #12]
 8006456:	109b      	asrs	r3, r3, #2
 8006458:	f303 030f 	ssat	r3, #16, r3
 800645c:	f822 3f02 	strh.w	r3, [r2, #2]!
 8006460:	9b04      	ldr	r3, [sp, #16]
 8006462:	9201      	str	r2, [sp, #4]
 8006464:	f10a 0a01 	add.w	sl, sl, #1
 8006468:	459a      	cmp	sl, r3
 800646a:	44bc      	add	ip, r7
 800646c:	460c      	mov	r4, r1
 800646e:	d00b      	beq.n	8006488 <D24_1CH_HTONS_VOL_HP+0x108>
 8006470:	f01a 0f01 	tst.w	sl, #1
 8006474:	d0a6      	beq.n	80063c4 <D24_1CH_HTONS_VOL_HP+0x44>
 8006476:	78c2      	ldrb	r2, [r0, #3]
 8006478:	7883      	ldrb	r3, [r0, #2]
 800647a:	f810 1b04 	ldrb.w	r1, [r0], #4
 800647e:	0212      	lsls	r2, r2, #8
 8006480:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8006484:	440b      	add	r3, r1
 8006486:	e7a5      	b.n	80063d4 <D24_1CH_HTONS_VOL_HP+0x54>
 8006488:	4663      	mov	r3, ip
 800648a:	4645      	mov	r5, r8
 800648c:	46dc      	mov	ip, fp
 800648e:	9807      	ldr	r0, [sp, #28]
 8006490:	6141      	str	r1, [r0, #20]
 8006492:	9906      	ldr	r1, [sp, #24]
 8006494:	6083      	str	r3, [r0, #8]
 8006496:	f8c0 c00c 	str.w	ip, [r0, #12]
 800649a:	61c6      	str	r6, [r0, #28]
 800649c:	6105      	str	r5, [r0, #16]
 800649e:	6181      	str	r1, [r0, #24]
 80064a0:	2000      	movs	r0, #0
 80064a2:	b009      	add	sp, #36	; 0x24
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	4621      	mov	r1, r4
 80064aa:	e7f0      	b.n	800648e <D24_1CH_HTONS_VOL_HP+0x10e>
 80064ac:	00030001 	.word	0x00030001
 80064b0:	00060007 	.word	0x00060007
 80064b4:	200000cc 	.word	0x200000cc

080064b8 <D32_1CH_HTONS_VOL_HP>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	4692      	mov	sl, r2
 80064be:	b087      	sub	sp, #28
 80064c0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80064c2:	f8da 3018 	ldr.w	r3, [sl, #24]
 80064c6:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 80064ca:	9304      	str	r3, [sp, #16]
 80064cc:	f8da 4010 	ldr.w	r4, [sl, #16]
 80064d0:	f8da 8014 	ldr.w	r8, [sl, #20]
 80064d4:	f8da 601c 	ldr.w	r6, [sl, #28]
 80064d8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80064dc:	f8da e00c 	ldr.w	lr, [sl, #12]
 80064e0:	9501      	str	r5, [sp, #4]
 80064e2:	f8da c020 	ldr.w	ip, [sl, #32]
 80064e6:	2a00      	cmp	r2, #0
 80064e8:	d07b      	beq.n	80065e2 <D32_1CH_HTONS_VOL_HP+0x12a>
 80064ea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80064ee:	4f3e      	ldr	r7, [pc, #248]	; (80065e8 <D32_1CH_HTONS_VOL_HP+0x130>)
 80064f0:	f8cd c00c 	str.w	ip, [sp, #12]
 80064f4:	9202      	str	r2, [sp, #8]
 80064f6:	460d      	mov	r5, r1
 80064f8:	46a1      	mov	r9, r4
 80064fa:	4684      	mov	ip, r0
 80064fc:	f8cd a014 	str.w	sl, [sp, #20]
 8006500:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006504:	ba49      	rev16	r1, r1
 8006506:	b2c8      	uxtb	r0, r1
 8006508:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800650c:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8006510:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8006514:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006518:	0e09      	lsrs	r1, r1, #24
 800651a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800651e:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8006522:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8006526:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800652a:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800652e:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8006532:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006536:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800653a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800653e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006542:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8006546:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800654a:	4a28      	ldr	r2, [pc, #160]	; (80065ec <D32_1CH_HTONS_VOL_HP+0x134>)
 800654c:	fb20 e202 	smlad	r2, r0, r2, lr
 8006550:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006554:	fb2a 2101 	smlad	r1, sl, r1, r2
 8006558:	4a25      	ldr	r2, [pc, #148]	; (80065f0 <D32_1CH_HTONS_VOL_HP+0x138>)
 800655a:	fb20 3302 	smlad	r3, r0, r2, r3
 800655e:	4a25      	ldr	r2, [pc, #148]	; (80065f4 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8006560:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8006564:	2301      	movs	r3, #1
 8006566:	fb20 f003 	smuad	r0, r0, r3
 800656a:	4b23      	ldr	r3, [pc, #140]	; (80065f8 <D32_1CH_HTONS_VOL_HP+0x140>)
 800656c:	fb2a 0303 	smlad	r3, sl, r3, r0
 8006570:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8006574:	9c03      	ldr	r4, [sp, #12]
 8006576:	eb02 0009 	add.w	r0, r2, r9
 800657a:	eba0 0008 	sub.w	r0, r0, r8
 800657e:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8006582:	fba0 0104 	umull	r0, r1, r0, r4
 8006586:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800658a:	fb04 110b 	mla	r1, r4, fp, r1
 800658e:	f141 0100 	adc.w	r1, r1, #0
 8006592:	9c01      	ldr	r4, [sp, #4]
 8006594:	0388      	lsls	r0, r1, #14
 8006596:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800659a:	f04f 0900 	mov.w	r9, #0
 800659e:	fbc0 8904 	smlal	r8, r9, r0, r4
 80065a2:	ea4f 00a9 	mov.w	r0, r9, asr #2
 80065a6:	ea4f 0941 	mov.w	r9, r1, lsl #1
 80065aa:	f300 000f 	ssat	r0, #16, r0
 80065ae:	9902      	ldr	r1, [sp, #8]
 80065b0:	f825 0b02 	strh.w	r0, [r5], #2
 80065b4:	428d      	cmp	r5, r1
 80065b6:	4690      	mov	r8, r2
 80065b8:	d1a2      	bne.n	8006500 <D32_1CH_HTONS_VOL_HP+0x48>
 80065ba:	f8dd a014 	ldr.w	sl, [sp, #20]
 80065be:	464c      	mov	r4, r9
 80065c0:	f8ca 3008 	str.w	r3, [sl, #8]
 80065c4:	9b04      	ldr	r3, [sp, #16]
 80065c6:	f8ca e00c 	str.w	lr, [sl, #12]
 80065ca:	2000      	movs	r0, #0
 80065cc:	f8ca 601c 	str.w	r6, [sl, #28]
 80065d0:	f8ca 4010 	str.w	r4, [sl, #16]
 80065d4:	f8ca 2014 	str.w	r2, [sl, #20]
 80065d8:	f8ca 3018 	str.w	r3, [sl, #24]
 80065dc:	b007      	add	sp, #28
 80065de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e2:	4642      	mov	r2, r8
 80065e4:	e7ec      	b.n	80065c0 <D32_1CH_HTONS_VOL_HP+0x108>
 80065e6:	bf00      	nop
 80065e8:	200000cc 	.word	0x200000cc
 80065ec:	00060003 	.word	0x00060003
 80065f0:	000a000c 	.word	0x000a000c
 80065f4:	000c000a 	.word	0x000c000a
 80065f8:	00030006 	.word	0x00030006

080065fc <D48_1CH_HTONS_VOL_HP>:
 80065fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	4613      	mov	r3, r2
 8006602:	461c      	mov	r4, r3
 8006604:	b087      	sub	sp, #28
 8006606:	4625      	mov	r5, r4
 8006608:	4626      	mov	r6, r4
 800660a:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800660c:	9205      	str	r2, [sp, #20]
 800660e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006610:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8006614:	9501      	str	r5, [sp, #4]
 8006616:	4680      	mov	r8, r0
 8006618:	6a35      	ldr	r5, [r6, #32]
 800661a:	6918      	ldr	r0, [r3, #16]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	9304      	str	r3, [sp, #16]
 8006620:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8006624:	68a3      	ldr	r3, [r4, #8]
 8006626:	9502      	str	r5, [sp, #8]
 8006628:	68e4      	ldr	r4, [r4, #12]
 800662a:	2a00      	cmp	r2, #0
 800662c:	f000 808c 	beq.w	8006748 <D48_1CH_HTONS_VOL_HP+0x14c>
 8006630:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006634:	4d45      	ldr	r5, [pc, #276]	; (800674c <D48_1CH_HTONS_VOL_HP+0x150>)
 8006636:	9203      	str	r2, [sp, #12]
 8006638:	468c      	mov	ip, r1
 800663a:	e898 0044 	ldmia.w	r8, {r2, r6}
 800663e:	f108 0806 	add.w	r8, r8, #6
 8006642:	ba52      	rev16	r2, r2
 8006644:	ba76      	rev16	r6, r6
 8006646:	b2d7      	uxtb	r7, r2
 8006648:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800664c:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8006650:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8006654:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8006658:	0e12      	lsrs	r2, r2, #24
 800665a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800665e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8006662:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8006666:	fa5f fb86 	uxtb.w	fp, r6
 800666a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800666e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8006672:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8006676:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800667a:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800667e:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8006682:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8006686:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800668a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800668e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006692:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8006696:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800669a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800669e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80066a2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80066a6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80066aa:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 80066ae:	4a28      	ldr	r2, [pc, #160]	; (8006750 <D48_1CH_HTONS_VOL_HP+0x154>)
 80066b0:	fb2a 4202 	smlad	r2, sl, r2, r4
 80066b4:	4927      	ldr	r1, [pc, #156]	; (8006754 <D48_1CH_HTONS_VOL_HP+0x158>)
 80066b6:	fb27 2201 	smlad	r2, r7, r1, r2
 80066ba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80066be:	fb26 2201 	smlad	r2, r6, r1, r2
 80066c2:	4925      	ldr	r1, [pc, #148]	; (8006758 <D48_1CH_HTONS_VOL_HP+0x15c>)
 80066c4:	fb2a 3401 	smlad	r4, sl, r1, r3
 80066c8:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 80066cc:	fb27 4403 	smlad	r4, r7, r3, r4
 80066d0:	4b22      	ldr	r3, [pc, #136]	; (800675c <D48_1CH_HTONS_VOL_HP+0x160>)
 80066d2:	fb26 4403 	smlad	r4, r6, r3, r4
 80066d6:	2101      	movs	r1, #1
 80066d8:	fb2a fa01 	smuad	sl, sl, r1
 80066dc:	4b20      	ldr	r3, [pc, #128]	; (8006760 <D48_1CH_HTONS_VOL_HP+0x164>)
 80066de:	fb27 a703 	smlad	r7, r7, r3, sl
 80066e2:	4b20      	ldr	r3, [pc, #128]	; (8006764 <D48_1CH_HTONS_VOL_HP+0x168>)
 80066e4:	fb26 7303 	smlad	r3, r6, r3, r7
 80066e8:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 80066ec:	9e02      	ldr	r6, [sp, #8]
 80066ee:	9f01      	ldr	r7, [sp, #4]
 80066f0:	4410      	add	r0, r2
 80066f2:	eba0 0009 	sub.w	r0, r0, r9
 80066f6:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 80066fa:	fba0 0106 	umull	r0, r1, r0, r6
 80066fe:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006702:	fb06 110a 	mla	r1, r6, sl, r1
 8006706:	f141 0100 	adc.w	r1, r1, #0
 800670a:	0308      	lsls	r0, r1, #12
 800670c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8006710:	f04f 0a00 	mov.w	sl, #0
 8006714:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8006718:	4657      	mov	r7, sl
 800671a:	10b8      	asrs	r0, r7, #2
 800671c:	f300 000f 	ssat	r0, #16, r0
 8006720:	f82c 0b02 	strh.w	r0, [ip], #2
 8006724:	0048      	lsls	r0, r1, #1
 8006726:	9903      	ldr	r1, [sp, #12]
 8006728:	458c      	cmp	ip, r1
 800672a:	4691      	mov	r9, r2
 800672c:	d185      	bne.n	800663a <D48_1CH_HTONS_VOL_HP+0x3e>
 800672e:	9d05      	ldr	r5, [sp, #20]
 8006730:	616a      	str	r2, [r5, #20]
 8006732:	9a04      	ldr	r2, [sp, #16]
 8006734:	6128      	str	r0, [r5, #16]
 8006736:	2000      	movs	r0, #0
 8006738:	60ab      	str	r3, [r5, #8]
 800673a:	60ec      	str	r4, [r5, #12]
 800673c:	f8c5 e01c 	str.w	lr, [r5, #28]
 8006740:	61aa      	str	r2, [r5, #24]
 8006742:	b007      	add	sp, #28
 8006744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006748:	464a      	mov	r2, r9
 800674a:	e7f0      	b.n	800672e <D48_1CH_HTONS_VOL_HP+0x132>
 800674c:	200000cc 	.word	0x200000cc
 8006750:	000f000a 	.word	0x000f000a
 8006754:	00060003 	.word	0x00060003
 8006758:	00150019 	.word	0x00150019
 800675c:	00190015 	.word	0x00190015
 8006760:	00030006 	.word	0x00030006
 8006764:	000a000f 	.word	0x000a000f

08006768 <D64_1CH_HTONS_VOL_HP>:
 8006768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676c:	b089      	sub	sp, #36	; 0x24
 800676e:	4614      	mov	r4, r2
 8006770:	9207      	str	r2, [sp, #28]
 8006772:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006774:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8006778:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800677c:	6992      	ldr	r2, [r2, #24]
 800677e:	9206      	str	r2, [sp, #24]
 8006780:	68e2      	ldr	r2, [r4, #12]
 8006782:	9201      	str	r2, [sp, #4]
 8006784:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006786:	9203      	str	r2, [sp, #12]
 8006788:	6a22      	ldr	r2, [r4, #32]
 800678a:	69e5      	ldr	r5, [r4, #28]
 800678c:	68a6      	ldr	r6, [r4, #8]
 800678e:	9204      	str	r2, [sp, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 80b0 	beq.w	80068f6 <D64_1CH_HTONS_VOL_HP+0x18e>
 8006796:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800679a:	4f58      	ldr	r7, [pc, #352]	; (80068fc <D64_1CH_HTONS_VOL_HP+0x194>)
 800679c:	9305      	str	r3, [sp, #20]
 800679e:	9102      	str	r1, [sp, #8]
 80067a0:	f850 2b08 	ldr.w	r2, [r0], #8
 80067a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80067a8:	ba52      	rev16	r2, r2
 80067aa:	fa93 f993 	rev16.w	r9, r3
 80067ae:	b2d4      	uxtb	r4, r2
 80067b0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80067b4:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 80067b8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80067bc:	9901      	ldr	r1, [sp, #4]
 80067be:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80067c2:	0e12      	lsrs	r2, r2, #24
 80067c4:	44ab      	add	fp, r5
 80067c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80067ca:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 80067ce:	fa5f f289 	uxtb.w	r2, r9
 80067d2:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 80067d6:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80067da:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 80067de:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80067e2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80067e6:	f3c9 4507 	ubfx	r5, r9, #16, #8
 80067ea:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 80067ee:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80067f2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80067f6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80067fa:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 80067fe:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8006802:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006806:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800680a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800680e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8006812:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800681a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800681e:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8006822:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006826:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800682a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800682e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8006832:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8006836:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800683a:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800683e:	4b30      	ldr	r3, [pc, #192]	; (8006900 <D64_1CH_HTONS_VOL_HP+0x198>)
 8006840:	fb2b 1303 	smlad	r3, fp, r3, r1
 8006844:	492f      	ldr	r1, [pc, #188]	; (8006904 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8006846:	fb24 3301 	smlad	r3, r4, r1, r3
 800684a:	492f      	ldr	r1, [pc, #188]	; (8006908 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800684c:	fb22 3301 	smlad	r3, r2, r1, r3
 8006850:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8006854:	fb2e 390a 	smlad	r9, lr, sl, r3
 8006858:	4b2c      	ldr	r3, [pc, #176]	; (800690c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800685a:	fb2b 6603 	smlad	r6, fp, r3, r6
 800685e:	fb2e 6613 	smladx	r6, lr, r3, r6
 8006862:	4b2b      	ldr	r3, [pc, #172]	; (8006910 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8006864:	fb24 6603 	smlad	r6, r4, r3, r6
 8006868:	fb22 6313 	smladx	r3, r2, r3, r6
 800686c:	f04f 0a01 	mov.w	sl, #1
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	fb2b fb0a 	smuad	fp, fp, sl
 8006876:	4b27      	ldr	r3, [pc, #156]	; (8006914 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8006878:	fb24 ba03 	smlad	sl, r4, r3, fp
 800687c:	4b26      	ldr	r3, [pc, #152]	; (8006918 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800687e:	fb22 a203 	smlad	r2, r2, r3, sl
 8006882:	4b26      	ldr	r3, [pc, #152]	; (800691c <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8006884:	fb2e 2603 	smlad	r6, lr, r3, r2
 8006888:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800688c:	eb0a 020c 	add.w	r2, sl, ip
 8006890:	9c04      	ldr	r4, [sp, #16]
 8006892:	9903      	ldr	r1, [sp, #12]
 8006894:	eba2 0208 	sub.w	r2, r2, r8
 8006898:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800689c:	fba2 2304 	umull	r2, r3, r2, r4
 80068a0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80068a4:	fb04 3309 	mla	r3, r4, r9, r3
 80068a8:	f143 0300 	adc.w	r3, r3, #0
 80068ac:	02da      	lsls	r2, r3, #11
 80068ae:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80068b2:	f04f 0900 	mov.w	r9, #0
 80068b6:	fbc1 8902 	smlal	r8, r9, r1, r2
 80068ba:	9902      	ldr	r1, [sp, #8]
 80068bc:	ea4f 02a9 	mov.w	r2, r9, asr #2
 80068c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80068c4:	f302 020f 	ssat	r2, #16, r2
 80068c8:	9b05      	ldr	r3, [sp, #20]
 80068ca:	f821 2b02 	strh.w	r2, [r1], #2
 80068ce:	4299      	cmp	r1, r3
 80068d0:	9102      	str	r1, [sp, #8]
 80068d2:	46d0      	mov	r8, sl
 80068d4:	f47f af64 	bne.w	80067a0 <D64_1CH_HTONS_VOL_HP+0x38>
 80068d8:	9a07      	ldr	r2, [sp, #28]
 80068da:	9901      	ldr	r1, [sp, #4]
 80068dc:	60d1      	str	r1, [r2, #12]
 80068de:	9906      	ldr	r1, [sp, #24]
 80068e0:	6096      	str	r6, [r2, #8]
 80068e2:	2000      	movs	r0, #0
 80068e4:	61d5      	str	r5, [r2, #28]
 80068e6:	f8c2 c010 	str.w	ip, [r2, #16]
 80068ea:	f8c2 a014 	str.w	sl, [r2, #20]
 80068ee:	6191      	str	r1, [r2, #24]
 80068f0:	b009      	add	sp, #36	; 0x24
 80068f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f6:	46c2      	mov	sl, r8
 80068f8:	4622      	mov	r2, r4
 80068fa:	e7ee      	b.n	80068da <D64_1CH_HTONS_VOL_HP+0x172>
 80068fc:	200000cc 	.word	0x200000cc
 8006900:	001c0015 	.word	0x001c0015
 8006904:	000f000a 	.word	0x000f000a
 8006908:	00060003 	.word	0x00060003
 800690c:	0024002a 	.word	0x0024002a
 8006910:	002e0030 	.word	0x002e0030
 8006914:	00030006 	.word	0x00030006
 8006918:	000a000f 	.word	0x000a000f
 800691c:	0015001c 	.word	0x0015001c

08006920 <D80_1CH_HTONS_VOL_HP>:
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	4613      	mov	r3, r2
 8006926:	b089      	sub	sp, #36	; 0x24
 8006928:	4686      	mov	lr, r0
 800692a:	6918      	ldr	r0, [r3, #16]
 800692c:	9000      	str	r0, [sp, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	461c      	mov	r4, r3
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	9302      	str	r3, [sp, #8]
 8006936:	6983      	ldr	r3, [r0, #24]
 8006938:	9306      	str	r3, [sp, #24]
 800693a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800693e:	69c3      	ldr	r3, [r0, #28]
 8006940:	68c0      	ldr	r0, [r0, #12]
 8006942:	9207      	str	r2, [sp, #28]
 8006944:	9001      	str	r0, [sp, #4]
 8006946:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006948:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800694a:	9003      	str	r0, [sp, #12]
 800694c:	6a20      	ldr	r0, [r4, #32]
 800694e:	9004      	str	r0, [sp, #16]
 8006950:	2a00      	cmp	r2, #0
 8006952:	f000 80d2 	beq.w	8006afa <D80_1CH_HTONS_VOL_HP+0x1da>
 8006956:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800695a:	4869      	ldr	r0, [pc, #420]	; (8006b00 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800695c:	9205      	str	r2, [sp, #20]
 800695e:	461c      	mov	r4, r3
 8006960:	f8de 5000 	ldr.w	r5, [lr]
 8006964:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006968:	f8de 3008 	ldr.w	r3, [lr, #8]
 800696c:	f10e 0e0a 	add.w	lr, lr, #10
 8006970:	ba6d      	rev16	r5, r5
 8006972:	ba52      	rev16	r2, r2
 8006974:	fa93 fb93 	rev16.w	fp, r3
 8006978:	b2ee      	uxtb	r6, r5
 800697a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800697e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8006982:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006986:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800698a:	eb04 0a07 	add.w	sl, r4, r7
 800698e:	0e2d      	lsrs	r5, r5, #24
 8006990:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8006994:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8006998:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800699c:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 80069a0:	b2d5      	uxtb	r5, r2
 80069a2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80069a6:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 80069aa:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 80069ae:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80069b2:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80069b6:	0e12      	lsrs	r2, r2, #24
 80069b8:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 80069bc:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 80069c0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80069c4:	fa5f f48b 	uxtb.w	r4, fp
 80069c8:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80069cc:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80069d0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80069d4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80069d8:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 80069dc:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80069e0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 80069e4:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 80069e8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80069ec:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80069f0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80069f4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80069f8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80069fc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006a00:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8006a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a08:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8006a0c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006a10:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006a14:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8006a18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006a1c:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8006a20:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006a24:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8006a28:	4d36      	ldr	r5, [pc, #216]	; (8006b04 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8006a2a:	9f01      	ldr	r7, [sp, #4]
 8006a2c:	fb23 7505 	smlad	r5, r3, r5, r7
 8006a30:	4f35      	ldr	r7, [pc, #212]	; (8006b08 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8006a32:	fb29 5507 	smlad	r5, r9, r7, r5
 8006a36:	4f35      	ldr	r7, [pc, #212]	; (8006b0c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8006a38:	fb28 5507 	smlad	r5, r8, r7, r5
 8006a3c:	4f34      	ldr	r7, [pc, #208]	; (8006b10 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8006a3e:	fb22 5507 	smlad	r5, r2, r7, r5
 8006a42:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8006a46:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8006a4a:	4d32      	ldr	r5, [pc, #200]	; (8006b14 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8006a4c:	fb23 cc05 	smlad	ip, r3, r5, ip
 8006a50:	4d31      	ldr	r5, [pc, #196]	; (8006b18 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8006a52:	fb29 cc05 	smlad	ip, r9, r5, ip
 8006a56:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8006a5a:	fb28 c505 	smlad	r5, r8, r5, ip
 8006a5e:	4f2f      	ldr	r7, [pc, #188]	; (8006b1c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8006a60:	fb22 5507 	smlad	r5, r2, r7, r5
 8006a64:	4f2e      	ldr	r7, [pc, #184]	; (8006b20 <D80_1CH_HTONS_VOL_HP+0x200>)
 8006a66:	fb26 5507 	smlad	r5, r6, r7, r5
 8006a6a:	f04f 0a01 	mov.w	sl, #1
 8006a6e:	9501      	str	r5, [sp, #4]
 8006a70:	fb23 fa0a 	smuad	sl, r3, sl
 8006a74:	4b2b      	ldr	r3, [pc, #172]	; (8006b24 <D80_1CH_HTONS_VOL_HP+0x204>)
 8006a76:	fb29 a903 	smlad	r9, r9, r3, sl
 8006a7a:	4d2b      	ldr	r5, [pc, #172]	; (8006b28 <D80_1CH_HTONS_VOL_HP+0x208>)
 8006a7c:	fb28 9805 	smlad	r8, r8, r5, r9
 8006a80:	4d2a      	ldr	r5, [pc, #168]	; (8006b2c <D80_1CH_HTONS_VOL_HP+0x20c>)
 8006a82:	fb22 8205 	smlad	r2, r2, r5, r8
 8006a86:	4b2a      	ldr	r3, [pc, #168]	; (8006b30 <D80_1CH_HTONS_VOL_HP+0x210>)
 8006a88:	fb26 2c03 	smlad	ip, r6, r3, r2
 8006a8c:	9b00      	ldr	r3, [sp, #0]
 8006a8e:	9d04      	ldr	r5, [sp, #16]
 8006a90:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8006a94:	4453      	add	r3, sl
 8006a96:	461a      	mov	r2, r3
 8006a98:	9b02      	ldr	r3, [sp, #8]
 8006a9a:	f8cd a008 	str.w	sl, [sp, #8]
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	17d7      	asrs	r7, r2, #31
 8006aa2:	fba2 2305 	umull	r2, r3, r2, r5
 8006aa6:	fb05 3307 	mla	r3, r5, r7, r3
 8006aaa:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006aae:	f143 0300 	adc.w	r3, r3, #0
 8006ab2:	9d03      	ldr	r5, [sp, #12]
 8006ab4:	029a      	lsls	r2, r3, #10
 8006ab6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006aba:	2700      	movs	r7, #0
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	fbc5 6702 	smlal	r6, r7, r5, r2
 8006ac2:	10ba      	asrs	r2, r7, #2
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	f302 020f 	ssat	r2, #16, r2
 8006aca:	9b05      	ldr	r3, [sp, #20]
 8006acc:	f821 2b02 	strh.w	r2, [r1], #2
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	f47f af45 	bne.w	8006960 <D80_1CH_HTONS_VOL_HP+0x40>
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	9907      	ldr	r1, [sp, #28]
 8006ada:	9801      	ldr	r0, [sp, #4]
 8006adc:	60c8      	str	r0, [r1, #12]
 8006ade:	9a00      	ldr	r2, [sp, #0]
 8006ae0:	f8c1 c008 	str.w	ip, [r1, #8]
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	61cb      	str	r3, [r1, #28]
 8006ae8:	610a      	str	r2, [r1, #16]
 8006aea:	f8c1 a014 	str.w	sl, [r1, #20]
 8006aee:	9906      	ldr	r1, [sp, #24]
 8006af0:	6181      	str	r1, [r0, #24]
 8006af2:	2000      	movs	r0, #0
 8006af4:	b009      	add	sp, #36	; 0x24
 8006af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afa:	f8dd a008 	ldr.w	sl, [sp, #8]
 8006afe:	e7eb      	b.n	8006ad8 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8006b00:	200000cc 	.word	0x200000cc
 8006b04:	002d0024 	.word	0x002d0024
 8006b08:	001c0015 	.word	0x001c0015
 8006b0c:	000f000a 	.word	0x000f000a
 8006b10:	00060003 	.word	0x00060003
 8006b14:	0037003f 	.word	0x0037003f
 8006b18:	00450049 	.word	0x00450049
 8006b1c:	00490045 	.word	0x00490045
 8006b20:	003f0037 	.word	0x003f0037
 8006b24:	00030006 	.word	0x00030006
 8006b28:	000a000f 	.word	0x000a000f
 8006b2c:	0015001c 	.word	0x0015001c
 8006b30:	0024002d 	.word	0x0024002d

08006b34 <D128_1CH_HTONS_VOL_HP>:
 8006b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b38:	b093      	sub	sp, #76	; 0x4c
 8006b3a:	4614      	mov	r4, r2
 8006b3c:	9211      	str	r2, [sp, #68]	; 0x44
 8006b3e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006b40:	6912      	ldr	r2, [r2, #16]
 8006b42:	9203      	str	r2, [sp, #12]
 8006b44:	4622      	mov	r2, r4
 8006b46:	4615      	mov	r5, r2
 8006b48:	6964      	ldr	r4, [r4, #20]
 8006b4a:	9406      	str	r4, [sp, #24]
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	6992      	ldr	r2, [r2, #24]
 8006b50:	9210      	str	r2, [sp, #64]	; 0x40
 8006b52:	68ea      	ldr	r2, [r5, #12]
 8006b54:	9204      	str	r2, [sp, #16]
 8006b56:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006b58:	69e6      	ldr	r6, [r4, #28]
 8006b5a:	920d      	str	r2, [sp, #52]	; 0x34
 8006b5c:	68a4      	ldr	r4, [r4, #8]
 8006b5e:	6a2a      	ldr	r2, [r5, #32]
 8006b60:	9405      	str	r4, [sp, #20]
 8006b62:	920e      	str	r2, [sp, #56]	; 0x38
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8145 	beq.w	8006df4 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8006b6a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b70:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8006e50 <D128_1CH_HTONS_VOL_HP+0x31c>
 8006b74:	9107      	str	r1, [sp, #28]
 8006b76:	f100 0310 	add.w	r3, r0, #16
 8006b7a:	4699      	mov	r9, r3
 8006b7c:	f1a9 0110 	sub.w	r1, r9, #16
 8006b80:	c90e      	ldmia	r1, {r1, r2, r3}
 8006b82:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8006b86:	ba49      	rev16	r1, r1
 8006b88:	ba52      	rev16	r2, r2
 8006b8a:	ba5b      	rev16	r3, r3
 8006b8c:	fa90 fa90 	rev16.w	sl, r0
 8006b90:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8006b94:	b2cc      	uxtb	r4, r1
 8006b96:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8006b9a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8006b9e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8006ba2:	0e09      	lsrs	r1, r1, #24
 8006ba4:	4426      	add	r6, r4
 8006ba6:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8006baa:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8006bae:	b2d0      	uxtb	r0, r2
 8006bb0:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8006bb4:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8006bb8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006bbc:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8006bc0:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8006bc4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8006bc8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8006bcc:	0e12      	lsrs	r2, r2, #24
 8006bce:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8006bd2:	9701      	str	r7, [sp, #4]
 8006bd4:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8006bd8:	4627      	mov	r7, r4
 8006bda:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8006bde:	9702      	str	r7, [sp, #8]
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8006be6:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8006bea:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8006bee:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8006bf2:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8006bf6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006bfa:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8006bfe:	0e1b      	lsrs	r3, r3, #24
 8006c00:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8006c04:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8006c08:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8006c0c:	fa5f f38a 	uxtb.w	r3, sl
 8006c10:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006c14:	960a      	str	r6, [sp, #40]	; 0x28
 8006c16:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8006c1a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8006c1e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006c22:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8006c26:	950b      	str	r5, [sp, #44]	; 0x2c
 8006c28:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8006c2c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8006c30:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8006c34:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8006c38:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8006c3c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8006c40:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8006c44:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8006c48:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8006c4c:	9308      	str	r3, [sp, #32]
 8006c4e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006c52:	9b01      	ldr	r3, [sp, #4]
 8006c54:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8006c58:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006c5c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8006c60:	9b02      	ldr	r3, [sp, #8]
 8006c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c66:	9302      	str	r3, [sp, #8]
 8006c68:	9b08      	ldr	r3, [sp, #32]
 8006c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c6e:	9308      	str	r3, [sp, #32]
 8006c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c72:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006c76:	950c      	str	r5, [sp, #48]	; 0x30
 8006c78:	461d      	mov	r5, r3
 8006c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c7c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006c80:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006c84:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8006c88:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	9b02      	ldr	r3, [sp, #8]
 8006c90:	9202      	str	r2, [sp, #8]
 8006c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c96:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006c9a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006c9e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006ca2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006ca6:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8006caa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006cae:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8006cb2:	9b08      	ldr	r3, [sp, #32]
 8006cb4:	9f01      	ldr	r7, [sp, #4]
 8006cb6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8006cba:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8006cbe:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006cc2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006cc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006cca:	46be      	mov	lr, r7
 8006ccc:	0a96      	lsrs	r6, r2, #10
 8006cce:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8006cd2:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8006cd6:	4f49      	ldr	r7, [pc, #292]	; (8006dfc <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8006cd8:	9a04      	ldr	r2, [sp, #16]
 8006cda:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8006cde:	4a48      	ldr	r2, [pc, #288]	; (8006e00 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8006ce0:	fb2a ee02 	smlad	lr, sl, r2, lr
 8006ce4:	4a47      	ldr	r2, [pc, #284]	; (8006e04 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8006ce6:	fb21 ee02 	smlad	lr, r1, r2, lr
 8006cea:	4a47      	ldr	r2, [pc, #284]	; (8006e08 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8006cec:	fb24 ee02 	smlad	lr, r4, r2, lr
 8006cf0:	4a46      	ldr	r2, [pc, #280]	; (8006e0c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8006cf2:	9f02      	ldr	r7, [sp, #8]
 8006cf4:	fb27 ee02 	smlad	lr, r7, r2, lr
 8006cf8:	4a45      	ldr	r2, [pc, #276]	; (8006e10 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8006cfa:	fb20 ee02 	smlad	lr, r0, r2, lr
 8006cfe:	4a45      	ldr	r2, [pc, #276]	; (8006e14 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8006d00:	fb23 e702 	smlad	r7, r3, r2, lr
 8006d04:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8006d08:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8006d0c:	9f01      	ldr	r7, [sp, #4]
 8006d0e:	4a42      	ldr	r2, [pc, #264]	; (8006e18 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8006d10:	46bc      	mov	ip, r7
 8006d12:	9f05      	ldr	r7, [sp, #20]
 8006d14:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8006d18:	4a40      	ldr	r2, [pc, #256]	; (8006e1c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8006d1a:	fb2a cc02 	smlad	ip, sl, r2, ip
 8006d1e:	4f40      	ldr	r7, [pc, #256]	; (8006e20 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8006d20:	fb21 cc07 	smlad	ip, r1, r7, ip
 8006d24:	4f3f      	ldr	r7, [pc, #252]	; (8006e24 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8006d26:	fb24 cc07 	smlad	ip, r4, r7, ip
 8006d2a:	4f3f      	ldr	r7, [pc, #252]	; (8006e28 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8006d2c:	9a02      	ldr	r2, [sp, #8]
 8006d2e:	fb22 cc07 	smlad	ip, r2, r7, ip
 8006d32:	4f3e      	ldr	r7, [pc, #248]	; (8006e2c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8006d34:	fb20 cc07 	smlad	ip, r0, r7, ip
 8006d38:	4f3d      	ldr	r7, [pc, #244]	; (8006e30 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8006d3a:	fb23 c707 	smlad	r7, r3, r7, ip
 8006d3e:	f8df c114 	ldr.w	ip, [pc, #276]	; 8006e54 <D128_1CH_HTONS_VOL_HP+0x320>
 8006d42:	fb25 720c 	smlad	r2, r5, ip, r7
 8006d46:	f04f 0b01 	mov.w	fp, #1
 8006d4a:	9204      	str	r2, [sp, #16]
 8006d4c:	9f01      	ldr	r7, [sp, #4]
 8006d4e:	fb27 fb0b 	smuad	fp, r7, fp
 8006d52:	4f38      	ldr	r7, [pc, #224]	; (8006e34 <D128_1CH_HTONS_VOL_HP+0x300>)
 8006d54:	fb2a ba07 	smlad	sl, sl, r7, fp
 8006d58:	4f37      	ldr	r7, [pc, #220]	; (8006e38 <D128_1CH_HTONS_VOL_HP+0x304>)
 8006d5a:	fb21 aa07 	smlad	sl, r1, r7, sl
 8006d5e:	4f37      	ldr	r7, [pc, #220]	; (8006e3c <D128_1CH_HTONS_VOL_HP+0x308>)
 8006d60:	fb24 aa07 	smlad	sl, r4, r7, sl
 8006d64:	4f36      	ldr	r7, [pc, #216]	; (8006e40 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8006d66:	9a02      	ldr	r2, [sp, #8]
 8006d68:	fb22 a707 	smlad	r7, r2, r7, sl
 8006d6c:	4a35      	ldr	r2, [pc, #212]	; (8006e44 <D128_1CH_HTONS_VOL_HP+0x310>)
 8006d6e:	fb20 7702 	smlad	r7, r0, r2, r7
 8006d72:	4a35      	ldr	r2, [pc, #212]	; (8006e48 <D128_1CH_HTONS_VOL_HP+0x314>)
 8006d74:	fb23 7702 	smlad	r7, r3, r2, r7
 8006d78:	4b34      	ldr	r3, [pc, #208]	; (8006e4c <D128_1CH_HTONS_VOL_HP+0x318>)
 8006d7a:	fb25 7303 	smlad	r3, r5, r3, r7
 8006d7e:	9305      	str	r3, [sp, #20]
 8006d80:	9b03      	ldr	r3, [sp, #12]
 8006d82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006d84:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8006d88:	4473      	add	r3, lr
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	9b06      	ldr	r3, [sp, #24]
 8006d8e:	f8cd e018 	str.w	lr, [sp, #24]
 8006d92:	1ad2      	subs	r2, r2, r3
 8006d94:	17d1      	asrs	r1, r2, #31
 8006d96:	fba2 2304 	umull	r2, r3, r2, r4
 8006d9a:	fb04 3301 	mla	r3, r4, r1, r3
 8006d9e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006da2:	f143 0300 	adc.w	r3, r3, #0
 8006da6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006da8:	021a      	lsls	r2, r3, #8
 8006daa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006dae:	2100      	movs	r1, #0
 8006db0:	fbc4 0102 	smlal	r0, r1, r4, r2
 8006db4:	108a      	asrs	r2, r1, #2
 8006db6:	9907      	ldr	r1, [sp, #28]
 8006db8:	f302 020f 	ssat	r2, #16, r2
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	f821 2b02 	strh.w	r2, [r1], #2
 8006dc2:	9303      	str	r3, [sp, #12]
 8006dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dc6:	9107      	str	r1, [sp, #28]
 8006dc8:	4299      	cmp	r1, r3
 8006dca:	f109 0910 	add.w	r9, r9, #16
 8006dce:	f47f aed5 	bne.w	8006b7c <D128_1CH_HTONS_VOL_HP+0x48>
 8006dd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006dd4:	9905      	ldr	r1, [sp, #20]
 8006dd6:	6091      	str	r1, [r2, #8]
 8006dd8:	9904      	ldr	r1, [sp, #16]
 8006dda:	60d1      	str	r1, [r2, #12]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	61d6      	str	r6, [r2, #28]
 8006de0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006de2:	9a03      	ldr	r2, [sp, #12]
 8006de4:	611a      	str	r2, [r3, #16]
 8006de6:	2000      	movs	r0, #0
 8006de8:	f8c3 e014 	str.w	lr, [r3, #20]
 8006dec:	6199      	str	r1, [r3, #24]
 8006dee:	b013      	add	sp, #76	; 0x4c
 8006df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df4:	f8dd e018 	ldr.w	lr, [sp, #24]
 8006df8:	e7eb      	b.n	8006dd2 <D128_1CH_HTONS_VOL_HP+0x29e>
 8006dfa:	bf00      	nop
 8006dfc:	00780069 	.word	0x00780069
 8006e00:	005b004e 	.word	0x005b004e
 8006e04:	00420037 	.word	0x00420037
 8006e08:	002d0024 	.word	0x002d0024
 8006e0c:	001c0015 	.word	0x001c0015
 8006e10:	000f000a 	.word	0x000f000a
 8006e14:	00060003 	.word	0x00060003
 8006e18:	00880096 	.word	0x00880096
 8006e1c:	00a200ac 	.word	0x00a200ac
 8006e20:	00b400ba 	.word	0x00b400ba
 8006e24:	00be00c0 	.word	0x00be00c0
 8006e28:	00c000be 	.word	0x00c000be
 8006e2c:	00ba00b4 	.word	0x00ba00b4
 8006e30:	00ac00a2 	.word	0x00ac00a2
 8006e34:	00030006 	.word	0x00030006
 8006e38:	000a000f 	.word	0x000a000f
 8006e3c:	0015001c 	.word	0x0015001c
 8006e40:	0024002d 	.word	0x0024002d
 8006e44:	00370042 	.word	0x00370042
 8006e48:	004e005b 	.word	0x004e005b
 8006e4c:	00690078 	.word	0x00690078
 8006e50:	200000cc 	.word	0x200000cc
 8006e54:	00960088 	.word	0x00960088

08006e58 <PDM_Filter_Init>:
 8006e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5a:	2240      	movs	r2, #64	; 0x40
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	2100      	movs	r1, #0
 8006e60:	300c      	adds	r0, #12
 8006e62:	f000 fb9f 	bl	80075a4 <memset>
 8006e66:	493b      	ldr	r1, [pc, #236]	; (8006f54 <PDM_Filter_Init+0xfc>)
 8006e68:	483b      	ldr	r0, [pc, #236]	; (8006f58 <PDM_Filter_Init+0x100>)
 8006e6a:	f000 f98d 	bl	8007188 <CRC_Lock>
 8006e6e:	8822      	ldrh	r2, [r4, #0]
 8006e70:	8963      	ldrh	r3, [r4, #10]
 8006e72:	4938      	ldr	r1, [pc, #224]	; (8006f54 <PDM_Filter_Init+0xfc>)
 8006e74:	8925      	ldrh	r5, [r4, #8]
 8006e76:	86a3      	strh	r3, [r4, #52]	; 0x34
 8006e78:	2801      	cmp	r0, #1
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	bf18      	it	ne
 8006e80:	2100      	movne	r1, #0
 8006e82:	2a01      	cmp	r2, #1
 8006e84:	6461      	str	r1, [r4, #68]	; 0x44
 8006e86:	86e5      	strh	r5, [r4, #54]	; 0x36
 8006e88:	61a3      	str	r3, [r4, #24]
 8006e8a:	6123      	str	r3, [r4, #16]
 8006e8c:	6163      	str	r3, [r4, #20]
 8006e8e:	60e3      	str	r3, [r4, #12]
 8006e90:	6263      	str	r3, [r4, #36]	; 0x24
 8006e92:	61e3      	str	r3, [r4, #28]
 8006e94:	6223      	str	r3, [r4, #32]
 8006e96:	6423      	str	r3, [r4, #64]	; 0x40
 8006e98:	d918      	bls.n	8006ecc <PDM_Filter_Init+0x74>
 8006e9a:	2003      	movs	r0, #3
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	8862      	ldrh	r2, [r4, #2]
 8006ea0:	2a01      	cmp	r2, #1
 8006ea2:	d91d      	bls.n	8006ee0 <PDM_Filter_Init+0x88>
 8006ea4:	2140      	movs	r1, #64	; 0x40
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006eaa:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8006eae:	6862      	ldr	r2, [r4, #4]
 8006eb0:	bf04      	itt	eq
 8006eb2:	6421      	streq	r1, [r4, #64]	; 0x40
 8006eb4:	460b      	moveq	r3, r1
 8006eb6:	b11a      	cbz	r2, 8006ec0 <PDM_Filter_Init+0x68>
 8006eb8:	f043 0310 	orr.w	r3, r3, #16
 8006ebc:	6423      	str	r3, [r4, #64]	; 0x40
 8006ebe:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	8722      	strh	r2, [r4, #56]	; 0x38
 8006ec4:	b908      	cbnz	r0, 8006eca <PDM_Filter_Init+0x72>
 8006ec6:	3380      	adds	r3, #128	; 0x80
 8006ec8:	6423      	str	r3, [r4, #64]	; 0x40
 8006eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ecc:	4d23      	ldr	r5, [pc, #140]	; (8006f5c <PDM_Filter_Init+0x104>)
 8006ece:	d010      	beq.n	8006ef2 <PDM_Filter_Init+0x9a>
 8006ed0:	782a      	ldrb	r2, [r5, #0]
 8006ed2:	2a01      	cmp	r2, #1
 8006ed4:	d027      	beq.n	8006f26 <PDM_Filter_Init+0xce>
 8006ed6:	8862      	ldrh	r2, [r4, #2]
 8006ed8:	2a01      	cmp	r2, #1
 8006eda:	f04f 0001 	mov.w	r0, #1
 8006ede:	d8e1      	bhi.n	8006ea4 <PDM_Filter_Init+0x4c>
 8006ee0:	d001      	beq.n	8006ee6 <PDM_Filter_Init+0x8e>
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	e7de      	b.n	8006ea4 <PDM_Filter_Init+0x4c>
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	4618      	mov	r0, r3
 8006eea:	6422      	str	r2, [r4, #64]	; 0x40
 8006eec:	4613      	mov	r3, r2
 8006eee:	2160      	movs	r1, #96	; 0x60
 8006ef0:	e7da      	b.n	8006ea8 <PDM_Filter_Init+0x50>
 8006ef2:	7829      	ldrb	r1, [r5, #0]
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	d1ee      	bne.n	8006ed6 <PDM_Filter_Init+0x7e>
 8006ef8:	4919      	ldr	r1, [pc, #100]	; (8006f60 <PDM_Filter_Init+0x108>)
 8006efa:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8006f68 <PDM_Filter_Init+0x110>
 8006efe:	4f19      	ldr	r7, [pc, #100]	; (8006f64 <PDM_Filter_Init+0x10c>)
 8006f00:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8006f04:	684a      	ldr	r2, [r1, #4]
 8006f06:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8006f0a:	ea02 0007 	and.w	r0, r2, r7
 8006f0e:	4303      	orrs	r3, r0
 8006f10:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8006f14:	4413      	add	r3, r2
 8006f16:	f841 3f04 	str.w	r3, [r1, #4]!
 8006f1a:	428e      	cmp	r6, r1
 8006f1c:	d1f2      	bne.n	8006f04 <PDM_Filter_Init+0xac>
 8006f1e:	2001      	movs	r0, #1
 8006f20:	7028      	strb	r0, [r5, #0]
 8006f22:	2300      	movs	r3, #0
 8006f24:	e7bb      	b.n	8006e9e <PDM_Filter_Init+0x46>
 8006f26:	490e      	ldr	r1, [pc, #56]	; (8006f60 <PDM_Filter_Init+0x108>)
 8006f28:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8006f68 <PDM_Filter_Init+0x110>
 8006f2c:	4f0d      	ldr	r7, [pc, #52]	; (8006f64 <PDM_Filter_Init+0x10c>)
 8006f2e:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8006f32:	684a      	ldr	r2, [r1, #4]
 8006f34:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8006f38:	ea02 0007 	and.w	r0, r2, r7
 8006f3c:	4303      	orrs	r3, r0
 8006f3e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8006f42:	4413      	add	r3, r2
 8006f44:	f841 3f04 	str.w	r3, [r1, #4]!
 8006f48:	428e      	cmp	r6, r1
 8006f4a:	d1f2      	bne.n	8006f32 <PDM_Filter_Init+0xda>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	702b      	strb	r3, [r5, #0]
 8006f50:	e7c1      	b.n	8006ed6 <PDM_Filter_Init+0x7e>
 8006f52:	bf00      	nop
 8006f54:	b5e8b5cd 	.word	0xb5e8b5cd
 8006f58:	f407a5c2 	.word	0xf407a5c2
 8006f5c:	20002621 	.word	0x20002621
 8006f60:	200000c8 	.word	0x200000c8
 8006f64:	000ffc00 	.word	0x000ffc00
 8006f68:	3ff00000 	.word	0x3ff00000

08006f6c <PDM_Filter_setConfig>:
 8006f6c:	4b66      	ldr	r3, [pc, #408]	; (8007108 <PDM_Filter_setConfig+0x19c>)
 8006f6e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d001      	beq.n	8006f78 <PDM_Filter_setConfig+0xc>
 8006f74:	2004      	movs	r0, #4
 8006f76:	4770      	bx	lr
 8006f78:	b530      	push	{r4, r5, lr}
 8006f7a:	880a      	ldrh	r2, [r1, #0]
 8006f7c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006f7e:	ed2d 8b04 	vpush	{d8-d9}
 8006f82:	4604      	mov	r4, r0
 8006f84:	460d      	mov	r5, r1
 8006f86:	1e51      	subs	r1, r2, #1
 8006f88:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8006f8c:	2906      	cmp	r1, #6
 8006f8e:	b083      	sub	sp, #12
 8006f90:	6420      	str	r0, [r4, #64]	; 0x40
 8006f92:	d91a      	bls.n	8006fca <PDM_Filter_setConfig+0x5e>
 8006f94:	2008      	movs	r0, #8
 8006f96:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8006f9a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006f9e:	4299      	cmp	r1, r3
 8006fa0:	d07e      	beq.n	80070a0 <PDM_Filter_setConfig+0x134>
 8006fa2:	f113 0f0c 	cmn.w	r3, #12
 8006fa6:	da2a      	bge.n	8006ffe <PDM_Filter_setConfig+0x92>
 8006fa8:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8006fac:	3040      	adds	r0, #64	; 0x40
 8006fae:	80ab      	strh	r3, [r5, #4]
 8006fb0:	8622      	strh	r2, [r4, #48]	; 0x30
 8006fb2:	886b      	ldrh	r3, [r5, #2]
 8006fb4:	8663      	strh	r3, [r4, #50]	; 0x32
 8006fb6:	b920      	cbnz	r0, 8006fc2 <PDM_Filter_setConfig+0x56>
 8006fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fbe:	6423      	str	r3, [r4, #64]	; 0x40
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	b003      	add	sp, #12
 8006fc4:	ecbd 8b04 	vpop	{d8-d9}
 8006fc8:	bd30      	pop	{r4, r5, pc}
 8006fca:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8006fcc:	4291      	cmp	r1, r2
 8006fce:	d06c      	beq.n	80070aa <PDM_Filter_setConfig+0x13e>
 8006fd0:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8006fde:	6423      	str	r3, [r4, #64]	; 0x40
 8006fe0:	2970      	cmp	r1, #112	; 0x70
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006fea:	d066      	beq.n	80070ba <PDM_Filter_setConfig+0x14e>
 8006fec:	2b06      	cmp	r3, #6
 8006fee:	f200 8089 	bhi.w	8007104 <PDM_Filter_setConfig+0x198>
 8006ff2:	e8df f003 	tbb	[pc, r3]
 8006ff6:	4f52      	.short	0x4f52
 8006ff8:	3d43494c 	.word	0x3d43494c
 8006ffc:	46          	.byte	0x46
 8006ffd:	00          	.byte	0x00
 8006ffe:	2b33      	cmp	r3, #51	; 0x33
 8007000:	dc32      	bgt.n	8007068 <PDM_Filter_setConfig+0xfc>
 8007002:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007004:	f002 020f 	and.w	r2, r2, #15
 8007008:	3a01      	subs	r2, #1
 800700a:	2a06      	cmp	r2, #6
 800700c:	d872      	bhi.n	80070f4 <PDM_Filter_setConfig+0x188>
 800700e:	493f      	ldr	r1, [pc, #252]	; (800710c <PDM_Filter_setConfig+0x1a0>)
 8007010:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007014:	ed92 9a00 	vldr	s18, [r2]
 8007018:	ed92 8a07 	vldr	s16, [r2, #28]
 800701c:	9001      	str	r0, [sp, #4]
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007026:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800702a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800702e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8007032:	f000 fbe1 	bl	80077f8 <powf>
 8007036:	eddf 0a36 	vldr	s1, [pc, #216]	; 8007110 <PDM_Filter_setConfig+0x1a4>
 800703a:	eef0 8a40 	vmov.f32	s17, s0
 800703e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8007042:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007046:	f000 fbd7 	bl	80077f8 <powf>
 800704a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800704e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007052:	f000 fbad 	bl	80077b0 <roundf>
 8007056:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800705a:	88ab      	ldrh	r3, [r5, #4]
 800705c:	882a      	ldrh	r2, [r5, #0]
 800705e:	9801      	ldr	r0, [sp, #4]
 8007060:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8007064:	8723      	strh	r3, [r4, #56]	; 0x38
 8007066:	e7a3      	b.n	8006fb0 <PDM_Filter_setConfig+0x44>
 8007068:	2333      	movs	r3, #51	; 0x33
 800706a:	3040      	adds	r0, #64	; 0x40
 800706c:	80ab      	strh	r3, [r5, #4]
 800706e:	e79f      	b.n	8006fb0 <PDM_Filter_setConfig+0x44>
 8007070:	4b28      	ldr	r3, [pc, #160]	; (8007114 <PDM_Filter_setConfig+0x1a8>)
 8007072:	64a3      	str	r3, [r4, #72]	; 0x48
 8007074:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8007078:	2000      	movs	r0, #0
 800707a:	e792      	b.n	8006fa2 <PDM_Filter_setConfig+0x36>
 800707c:	4b26      	ldr	r3, [pc, #152]	; (8007118 <PDM_Filter_setConfig+0x1ac>)
 800707e:	64a3      	str	r3, [r4, #72]	; 0x48
 8007080:	e7f8      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 8007082:	4b26      	ldr	r3, [pc, #152]	; (800711c <PDM_Filter_setConfig+0x1b0>)
 8007084:	64a3      	str	r3, [r4, #72]	; 0x48
 8007086:	e7f5      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 8007088:	4b25      	ldr	r3, [pc, #148]	; (8007120 <PDM_Filter_setConfig+0x1b4>)
 800708a:	64a3      	str	r3, [r4, #72]	; 0x48
 800708c:	e7f2      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 800708e:	4b25      	ldr	r3, [pc, #148]	; (8007124 <PDM_Filter_setConfig+0x1b8>)
 8007090:	64a3      	str	r3, [r4, #72]	; 0x48
 8007092:	e7ef      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 8007094:	4b24      	ldr	r3, [pc, #144]	; (8007128 <PDM_Filter_setConfig+0x1bc>)
 8007096:	64a3      	str	r3, [r4, #72]	; 0x48
 8007098:	e7ec      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 800709a:	4b24      	ldr	r3, [pc, #144]	; (800712c <PDM_Filter_setConfig+0x1c0>)
 800709c:	64a3      	str	r3, [r4, #72]	; 0x48
 800709e:	e7e9      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 80070a0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80070a2:	4291      	cmp	r1, r2
 80070a4:	f47f af7d 	bne.w	8006fa2 <PDM_Filter_setConfig+0x36>
 80070a8:	e783      	b.n	8006fb2 <PDM_Filter_setConfig+0x46>
 80070aa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80070ae:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80070b2:	4299      	cmp	r1, r3
 80070b4:	d023      	beq.n	80070fe <PDM_Filter_setConfig+0x192>
 80070b6:	2000      	movs	r0, #0
 80070b8:	e773      	b.n	8006fa2 <PDM_Filter_setConfig+0x36>
 80070ba:	2b06      	cmp	r3, #6
 80070bc:	d822      	bhi.n	8007104 <PDM_Filter_setConfig+0x198>
 80070be:	e8df f003 	tbb	[pc, r3]
 80070c2:	1316      	.short	0x1316
 80070c4:	070a0d10 	.word	0x070a0d10
 80070c8:	04          	.byte	0x04
 80070c9:	00          	.byte	0x00
 80070ca:	4b19      	ldr	r3, [pc, #100]	; (8007130 <PDM_Filter_setConfig+0x1c4>)
 80070cc:	64a3      	str	r3, [r4, #72]	; 0x48
 80070ce:	e7d1      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 80070d0:	4b18      	ldr	r3, [pc, #96]	; (8007134 <PDM_Filter_setConfig+0x1c8>)
 80070d2:	64a3      	str	r3, [r4, #72]	; 0x48
 80070d4:	e7ce      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 80070d6:	4b18      	ldr	r3, [pc, #96]	; (8007138 <PDM_Filter_setConfig+0x1cc>)
 80070d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80070da:	e7cb      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 80070dc:	4b17      	ldr	r3, [pc, #92]	; (800713c <PDM_Filter_setConfig+0x1d0>)
 80070de:	64a3      	str	r3, [r4, #72]	; 0x48
 80070e0:	e7c8      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 80070e2:	4b17      	ldr	r3, [pc, #92]	; (8007140 <PDM_Filter_setConfig+0x1d4>)
 80070e4:	64a3      	str	r3, [r4, #72]	; 0x48
 80070e6:	e7c5      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 80070e8:	4b16      	ldr	r3, [pc, #88]	; (8007144 <PDM_Filter_setConfig+0x1d8>)
 80070ea:	64a3      	str	r3, [r4, #72]	; 0x48
 80070ec:	e7c2      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 80070ee:	4b16      	ldr	r3, [pc, #88]	; (8007148 <PDM_Filter_setConfig+0x1dc>)
 80070f0:	64a3      	str	r3, [r4, #72]	; 0x48
 80070f2:	e7bf      	b.n	8007074 <PDM_Filter_setConfig+0x108>
 80070f4:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800714c <PDM_Filter_setConfig+0x1e0>
 80070f8:	eeb0 9a48 	vmov.f32	s18, s16
 80070fc:	e78e      	b.n	800701c <PDM_Filter_setConfig+0xb0>
 80070fe:	886b      	ldrh	r3, [r5, #2]
 8007100:	8663      	strh	r3, [r4, #50]	; 0x32
 8007102:	e759      	b.n	8006fb8 <PDM_Filter_setConfig+0x4c>
 8007104:	2000      	movs	r0, #0
 8007106:	e746      	b.n	8006f96 <PDM_Filter_setConfig+0x2a>
 8007108:	b5e8b5cd 	.word	0xb5e8b5cd
 800710c:	08008258 	.word	0x08008258
 8007110:	42000000 	.word	0x42000000
 8007114:	080054d9 	.word	0x080054d9
 8007118:	080053b9 	.word	0x080053b9
 800711c:	08005669 	.word	0x08005669
 8007120:	08005ead 	.word	0x08005ead
 8007124:	08005c0d 	.word	0x08005c0d
 8007128:	080059ed 	.word	0x080059ed
 800712c:	08005801 	.word	0x08005801
 8007130:	080064b9 	.word	0x080064b9
 8007134:	08006381 	.word	0x08006381
 8007138:	0800629d 	.word	0x0800629d
 800713c:	08006b35 	.word	0x08006b35
 8007140:	08006921 	.word	0x08006921
 8007144:	08006769 	.word	0x08006769
 8007148:	080065fd 	.word	0x080065fd
 800714c:	00000000 	.word	0x00000000

08007150 <PDM_Filter>:
 8007150:	b410      	push	{r4}
 8007152:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <PDM_Filter+0x34>)
 8007154:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8007156:	429c      	cmp	r4, r3
 8007158:	d003      	beq.n	8007162 <PDM_Filter+0x12>
 800715a:	2004      	movs	r0, #4
 800715c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007164:	05dc      	lsls	r4, r3, #23
 8007166:	d407      	bmi.n	8007178 <PDM_Filter+0x28>
 8007168:	f013 0f80 	tst.w	r3, #128	; 0x80
 800716c:	bf14      	ite	ne
 800716e:	2020      	movne	r0, #32
 8007170:	2030      	moveq	r0, #48	; 0x30
 8007172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800717a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800717e:	320c      	adds	r2, #12
 8007180:	4718      	bx	r3
 8007182:	bf00      	nop
 8007184:	b5e8b5cd 	.word	0xb5e8b5cd

08007188 <CRC_Lock>:
 8007188:	4a17      	ldr	r2, [pc, #92]	; (80071e8 <CRC_Lock+0x60>)
 800718a:	6813      	ldr	r3, [r2, #0]
 800718c:	b410      	push	{r4}
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	4c16      	ldr	r4, [pc, #88]	; (80071ec <CRC_Lock+0x64>)
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	b933      	cbnz	r3, 80071a8 <CRC_Lock+0x20>
 800719a:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <CRC_Lock+0x68>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071a2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80071a6:	d00f      	beq.n	80071c8 <CRC_Lock+0x40>
 80071a8:	4a12      	ldr	r2, [pc, #72]	; (80071f4 <CRC_Lock+0x6c>)
 80071aa:	2301      	movs	r3, #1
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	6813      	ldr	r3, [r2, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1fc      	bne.n	80071ae <CRC_Lock+0x26>
 80071b4:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <CRC_Lock+0x70>)
 80071b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071ba:	6018      	str	r0, [r3, #0]
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	1a08      	subs	r0, r1, r0
 80071c0:	fab0 f080 	clz	r0, r0
 80071c4:	0940      	lsrs	r0, r0, #5
 80071c6:	4770      	bx	lr
 80071c8:	4a0c      	ldr	r2, [pc, #48]	; (80071fc <CRC_Lock+0x74>)
 80071ca:	2301      	movs	r3, #1
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	6813      	ldr	r3, [r2, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1fc      	bne.n	80071ce <CRC_Lock+0x46>
 80071d4:	4b0a      	ldr	r3, [pc, #40]	; (8007200 <CRC_Lock+0x78>)
 80071d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071da:	6018      	str	r0, [r3, #0]
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	1a40      	subs	r0, r0, r1
 80071e0:	fab0 f080 	clz	r0, r0
 80071e4:	0940      	lsrs	r0, r0, #5
 80071e6:	4770      	bx	lr
 80071e8:	e0002000 	.word	0xe0002000
 80071ec:	e0042000 	.word	0xe0042000
 80071f0:	5c001000 	.word	0x5c001000
 80071f4:	40023008 	.word	0x40023008
 80071f8:	40023000 	.word	0x40023000
 80071fc:	58024c08 	.word	0x58024c08
 8007200:	58024c00 	.word	0x58024c00

08007204 <arm_fir_decimate_q15>:
 8007204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	4604      	mov	r4, r0
 800720a:	8845      	ldrh	r5, [r0, #2]
 800720c:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8007210:	6866      	ldr	r6, [r4, #4]
 8007212:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
 8007216:	b08f      	sub	sp, #60	; 0x3c
 8007218:	3c01      	subs	r4, #1
 800721a:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 800721e:	9002      	str	r0, [sp, #8]
 8007220:	9401      	str	r4, [sp, #4]
 8007222:	7800      	ldrb	r0, [r0, #0]
 8007224:	fbb3 f3f0 	udiv	r3, r3, r0
 8007228:	f003 0401 	and.w	r4, r3, #1
 800722c:	940c      	str	r4, [sp, #48]	; 0x30
 800722e:	085c      	lsrs	r4, r3, #1
 8007230:	950a      	str	r5, [sp, #40]	; 0x28
 8007232:	9606      	str	r6, [sp, #24]
 8007234:	920b      	str	r2, [sp, #44]	; 0x2c
 8007236:	940d      	str	r4, [sp, #52]	; 0x34
 8007238:	f000 8096 	beq.w	8007368 <arm_fir_decimate_q15+0x164>
 800723c:	462b      	mov	r3, r5
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	9308      	str	r3, [sp, #32]
 8007244:	4613      	mov	r3, r2
 8007246:	3304      	adds	r3, #4
 8007248:	08ad      	lsrs	r5, r5, #2
 800724a:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800724e:	9507      	str	r5, [sp, #28]
 8007250:	00ed      	lsls	r5, r5, #3
 8007252:	9509      	str	r5, [sp, #36]	; 0x24
 8007254:	eb06 0805 	add.w	r8, r6, r5
 8007258:	9c01      	ldr	r4, [sp, #4]
 800725a:	1d0a      	adds	r2, r1, #4
 800725c:	1d23      	adds	r3, r4, #4
 800725e:	2602      	movs	r6, #2
 8007260:	4299      	cmp	r1, r3
 8007262:	bf38      	it	cc
 8007264:	4294      	cmpcc	r4, r2
 8007266:	fb10 f506 	smulbb	r5, r0, r6
 800726a:	d36d      	bcc.n	8007348 <arm_fir_decimate_q15+0x144>
 800726c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007270:	fb16 2000 	smlabb	r0, r6, r0, r2
 8007274:	2809      	cmp	r0, #9
 8007276:	d967      	bls.n	8007348 <arm_fir_decimate_q15+0x144>
 8007278:	1eae      	subs	r6, r5, #2
 800727a:	0876      	lsrs	r6, r6, #1
 800727c:	3601      	adds	r6, #1
 800727e:	4608      	mov	r0, r1
 8007280:	4622      	mov	r2, r4
 8007282:	2300      	movs	r3, #0
 8007284:	3301      	adds	r3, #1
 8007286:	f850 4b04 	ldr.w	r4, [r0], #4
 800728a:	f842 4b04 	str.w	r4, [r2], #4
 800728e:	429e      	cmp	r6, r3
 8007290:	d8f8      	bhi.n	8007284 <arm_fir_decimate_q15+0x80>
 8007292:	9b02      	ldr	r3, [sp, #8]
 8007294:	9a01      	ldr	r2, [sp, #4]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	9305      	str	r3, [sp, #20]
 800729a:	006d      	lsls	r5, r5, #1
 800729c:	eb09 0e43 	add.w	lr, r9, r3, lsl #1
 80072a0:	9b07      	ldr	r3, [sp, #28]
 80072a2:	442a      	add	r2, r5
 80072a4:	9201      	str	r2, [sp, #4]
 80072a6:	4429      	add	r1, r5
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 80f2 	beq.w	8007492 <arm_fir_decimate_q15+0x28e>
 80072ae:	2300      	movs	r3, #0
 80072b0:	9d06      	ldr	r5, [sp, #24]
 80072b2:	461c      	mov	r4, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	4618      	mov	r0, r3
 80072b8:	46f4      	mov	ip, lr
 80072ba:	464f      	mov	r7, r9
 80072bc:	682e      	ldr	r6, [r5, #0]
 80072be:	f8d7 b000 	ldr.w	fp, [r7]
 80072c2:	f8dc a000 	ldr.w	sl, [ip]
 80072c6:	fbcb 20c6 	smlald	r2, r0, fp, r6
 80072ca:	fbca 34c6 	smlald	r3, r4, sl, r6
 80072ce:	686e      	ldr	r6, [r5, #4]
 80072d0:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80072d4:	f8dc a004 	ldr.w	sl, [ip, #4]
 80072d8:	3508      	adds	r5, #8
 80072da:	3708      	adds	r7, #8
 80072dc:	f10c 0c08 	add.w	ip, ip, #8
 80072e0:	fbcb 20c6 	smlald	r2, r0, fp, r6
 80072e4:	fbca 34c6 	smlald	r3, r4, sl, r6
 80072e8:	45a8      	cmp	r8, r5
 80072ea:	d1e7      	bne.n	80072bc <arm_fir_decimate_q15+0xb8>
 80072ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80072ee:	44b6      	add	lr, r6
 80072f0:	eb09 0a06 	add.w	sl, r9, r6
 80072f4:	9e08      	ldr	r6, [sp, #32]
 80072f6:	b166      	cbz	r6, 8007312 <arm_fir_decimate_q15+0x10e>
 80072f8:	4637      	mov	r7, r6
 80072fa:	f93e cb02 	ldrsh.w	ip, [lr], #2
 80072fe:	f93a bb02 	ldrsh.w	fp, [sl], #2
 8007302:	f935 6b02 	ldrsh.w	r6, [r5], #2
 8007306:	fbcb 20c6 	smlald	r2, r0, fp, r6
 800730a:	fbcc 34c6 	smlald	r3, r4, ip, r6
 800730e:	3f01      	subs	r7, #1
 8007310:	d1f3      	bne.n	80072fa <arm_fir_decimate_q15+0xf6>
 8007312:	0bd2      	lsrs	r2, r2, #15
 8007314:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
 8007318:	9804      	ldr	r0, [sp, #16]
 800731a:	f302 020f 	ssat	r2, #16, r2
 800731e:	0bdb      	lsrs	r3, r3, #15
 8007320:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
 8007324:	f303 030f 	ssat	r3, #16, r3
 8007328:	f820 3c02 	strh.w	r3, [r0, #-2]
 800732c:	9b05      	ldr	r3, [sp, #20]
 800732e:	f820 2c04 	strh.w	r2, [r0, #-4]
 8007332:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 8007336:	1d03      	adds	r3, r0, #4
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	3b01      	subs	r3, #1
 800733e:	9303      	str	r3, [sp, #12]
 8007340:	d00d      	beq.n	800735e <arm_fir_decimate_q15+0x15a>
 8007342:	9b02      	ldr	r3, [sp, #8]
 8007344:	7818      	ldrb	r0, [r3, #0]
 8007346:	e787      	b.n	8007258 <arm_fir_decimate_q15+0x54>
 8007348:	9b01      	ldr	r3, [sp, #4]
 800734a:	460a      	mov	r2, r1
 800734c:	1e98      	subs	r0, r3, #2
 800734e:	462b      	mov	r3, r5
 8007350:	f932 4b02 	ldrsh.w	r4, [r2], #2
 8007354:	f820 4f02 	strh.w	r4, [r0, #2]!
 8007358:	3b01      	subs	r3, #1
 800735a:	d1f9      	bne.n	8007350 <arm_fir_decimate_q15+0x14c>
 800735c:	e799      	b.n	8007292 <arm_fir_decimate_q15+0x8e>
 800735e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007360:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007362:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007366:	930b      	str	r3, [sp, #44]	; 0x2c
 8007368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800736a:	2b00      	cmp	r3, #0
 800736c:	d054      	beq.n	8007418 <arm_fir_decimate_q15+0x214>
 800736e:	9801      	ldr	r0, [sp, #4]
 8007370:	9c02      	ldr	r4, [sp, #8]
 8007372:	1d02      	adds	r2, r0, #4
 8007374:	1d0b      	adds	r3, r1, #4
 8007376:	7825      	ldrb	r5, [r4, #0]
 8007378:	4298      	cmp	r0, r3
 800737a:	bf38      	it	cc
 800737c:	4291      	cmpcc	r1, r2
 800737e:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007382:	f0c0 808c 	bcc.w	800749e <arm_fir_decimate_q15+0x29a>
 8007386:	2a09      	cmp	r2, #9
 8007388:	f240 8089 	bls.w	800749e <arm_fir_decimate_q15+0x29a>
 800738c:	1eab      	subs	r3, r5, #2
 800738e:	085b      	lsrs	r3, r3, #1
 8007390:	3301      	adds	r3, #1
 8007392:	460c      	mov	r4, r1
 8007394:	2200      	movs	r2, #0
 8007396:	3201      	adds	r2, #1
 8007398:	f854 6b04 	ldr.w	r6, [r4], #4
 800739c:	f840 6b04 	str.w	r6, [r0], #4
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d8f8      	bhi.n	8007396 <arm_fir_decimate_q15+0x192>
 80073a4:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 80073a8:	d004      	beq.n	80073b4 <arm_fir_decimate_q15+0x1b0>
 80073aa:	f931 2023 	ldrsh.w	r2, [r1, r3, lsl #2]
 80073ae:	9901      	ldr	r1, [sp, #4]
 80073b0:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
 80073b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b6:	089a      	lsrs	r2, r3, #2
 80073b8:	d07e      	beq.n	80074b8 <arm_fir_decimate_q15+0x2b4>
 80073ba:	00d5      	lsls	r5, r2, #3
 80073bc:	9806      	ldr	r0, [sp, #24]
 80073be:	2200      	movs	r2, #0
 80073c0:	eb09 0405 	add.w	r4, r9, r5
 80073c4:	4613      	mov	r3, r2
 80073c6:	4649      	mov	r1, r9
 80073c8:	f8d0 c000 	ldr.w	ip, [r0]
 80073cc:	6847      	ldr	r7, [r0, #4]
 80073ce:	680e      	ldr	r6, [r1, #0]
 80073d0:	3008      	adds	r0, #8
 80073d2:	fbc6 23cc 	smlald	r2, r3, r6, ip
 80073d6:	684e      	ldr	r6, [r1, #4]
 80073d8:	3108      	adds	r1, #8
 80073da:	fbc6 23c7 	smlald	r2, r3, r6, r7
 80073de:	428c      	cmp	r4, r1
 80073e0:	d1f2      	bne.n	80073c8 <arm_fir_decimate_q15+0x1c4>
 80073e2:	9806      	ldr	r0, [sp, #24]
 80073e4:	4428      	add	r0, r5
 80073e6:	9006      	str	r0, [sp, #24]
 80073e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073ea:	f010 0003 	ands.w	r0, r0, #3
 80073ee:	d008      	beq.n	8007402 <arm_fir_decimate_q15+0x1fe>
 80073f0:	9e06      	ldr	r6, [sp, #24]
 80073f2:	f931 4b02 	ldrsh.w	r4, [r1], #2
 80073f6:	f936 5b02 	ldrsh.w	r5, [r6], #2
 80073fa:	fbc4 23c5 	smlald	r2, r3, r4, r5
 80073fe:	3801      	subs	r0, #1
 8007400:	d1f7      	bne.n	80073f2 <arm_fir_decimate_q15+0x1ee>
 8007402:	9902      	ldr	r1, [sp, #8]
 8007404:	0bd2      	lsrs	r2, r2, #15
 8007406:	7809      	ldrb	r1, [r1, #0]
 8007408:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800740c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800740e:	f302 020f 	ssat	r2, #16, r2
 8007412:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8007416:	801a      	strh	r2, [r3, #0]
 8007418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800741a:	1e5e      	subs	r6, r3, #1
 800741c:	9b02      	ldr	r3, [sp, #8]
 800741e:	08b0      	lsrs	r0, r6, #2
 8007420:	689f      	ldr	r7, [r3, #8]
 8007422:	d023      	beq.n	800746c <arm_fir_decimate_q15+0x268>
 8007424:	f109 0308 	add.w	r3, r9, #8
 8007428:	f107 0208 	add.w	r2, r7, #8
 800742c:	4591      	cmp	r9, r2
 800742e:	bf38      	it	cc
 8007430:	429f      	cmpcc	r7, r3
 8007432:	bf2c      	ite	cs
 8007434:	2301      	movcs	r3, #1
 8007436:	2300      	movcc	r3, #0
 8007438:	1e42      	subs	r2, r0, #1
 800743a:	2a04      	cmp	r2, #4
 800743c:	bf94      	ite	ls
 800743e:	2300      	movls	r3, #0
 8007440:	f003 0301 	andhi.w	r3, r3, #1
 8007444:	2b00      	cmp	r3, #0
 8007446:	d03a      	beq.n	80074be <arm_fir_decimate_q15+0x2ba>
 8007448:	ea47 0309 	orr.w	r3, r7, r9
 800744c:	075b      	lsls	r3, r3, #29
 800744e:	d136      	bne.n	80074be <arm_fir_decimate_q15+0x2ba>
 8007450:	f1a9 0108 	sub.w	r1, r9, #8
 8007454:	463a      	mov	r2, r7
 8007456:	2300      	movs	r3, #0
 8007458:	e9f1 4502 	ldrd	r4, r5, [r1, #8]!
 800745c:	3301      	adds	r3, #1
 800745e:	4298      	cmp	r0, r3
 8007460:	e8e2 4502 	strd	r4, r5, [r2], #8
 8007464:	d1f8      	bne.n	8007458 <arm_fir_decimate_q15+0x254>
 8007466:	00c0      	lsls	r0, r0, #3
 8007468:	4407      	add	r7, r0
 800746a:	4481      	add	r9, r0
 800746c:	f016 0603 	ands.w	r6, r6, #3
 8007470:	d00c      	beq.n	800748c <arm_fir_decimate_q15+0x288>
 8007472:	f9b9 3000 	ldrsh.w	r3, [r9]
 8007476:	803b      	strh	r3, [r7, #0]
 8007478:	3e01      	subs	r6, #1
 800747a:	d007      	beq.n	800748c <arm_fir_decimate_q15+0x288>
 800747c:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 8007480:	807b      	strh	r3, [r7, #2]
 8007482:	2e01      	cmp	r6, #1
 8007484:	bf1c      	itt	ne
 8007486:	f9b9 3004 	ldrshne.w	r3, [r9, #4]
 800748a:	80bb      	strhne	r3, [r7, #4]
 800748c:	b00f      	add	sp, #60	; 0x3c
 800748e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007492:	4618      	mov	r0, r3
 8007494:	46ca      	mov	sl, r9
 8007496:	9d06      	ldr	r5, [sp, #24]
 8007498:	461c      	mov	r4, r3
 800749a:	461a      	mov	r2, r3
 800749c:	e72a      	b.n	80072f4 <arm_fir_decimate_q15+0xf0>
 800749e:	9b01      	ldr	r3, [sp, #4]
 80074a0:	3b02      	subs	r3, #2
 80074a2:	e000      	b.n	80074a6 <arm_fir_decimate_q15+0x2a2>
 80074a4:	3a01      	subs	r2, #1
 80074a6:	f931 0b02 	ldrsh.w	r0, [r1], #2
 80074aa:	f823 0f02 	strh.w	r0, [r3, #2]!
 80074ae:	2a00      	cmp	r2, #0
 80074b0:	d1f8      	bne.n	80074a4 <arm_fir_decimate_q15+0x2a0>
 80074b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b4:	089a      	lsrs	r2, r3, #2
 80074b6:	d180      	bne.n	80073ba <arm_fir_decimate_q15+0x1b6>
 80074b8:	4613      	mov	r3, r2
 80074ba:	4649      	mov	r1, r9
 80074bc:	e794      	b.n	80073e8 <arm_fir_decimate_q15+0x1e4>
 80074be:	463a      	mov	r2, r7
 80074c0:	464b      	mov	r3, r9
 80074c2:	4601      	mov	r1, r0
 80074c4:	681c      	ldr	r4, [r3, #0]
 80074c6:	6014      	str	r4, [r2, #0]
 80074c8:	685c      	ldr	r4, [r3, #4]
 80074ca:	6054      	str	r4, [r2, #4]
 80074cc:	3901      	subs	r1, #1
 80074ce:	f103 0308 	add.w	r3, r3, #8
 80074d2:	f102 0208 	add.w	r2, r2, #8
 80074d6:	d1f5      	bne.n	80074c4 <arm_fir_decimate_q15+0x2c0>
 80074d8:	e7c5      	b.n	8007466 <arm_fir_decimate_q15+0x262>
 80074da:	bf00      	nop

080074dc <arm_fir_decimate_init_q15>:
 80074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074de:	e9dd 7c06 	ldrd	r7, ip, [sp, #24]
 80074e2:	fbbc f4f2 	udiv	r4, ip, r2
 80074e6:	fb02 c414 	mls	r4, r2, r4, ip
 80074ea:	b984      	cbnz	r4, 800750e <arm_fir_decimate_init_q15+0x32>
 80074ec:	4616      	mov	r6, r2
 80074ee:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
 80074f2:	3a01      	subs	r2, #1
 80074f4:	4605      	mov	r5, r0
 80074f6:	4462      	add	r2, ip
 80074f8:	8041      	strh	r1, [r0, #2]
 80074fa:	6043      	str	r3, [r0, #4]
 80074fc:	0052      	lsls	r2, r2, #1
 80074fe:	4621      	mov	r1, r4
 8007500:	4638      	mov	r0, r7
 8007502:	f000 f84f 	bl	80075a4 <memset>
 8007506:	60af      	str	r7, [r5, #8]
 8007508:	702e      	strb	r6, [r5, #0]
 800750a:	4620      	mov	r0, r4
 800750c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800750e:	f06f 0001 	mvn.w	r0, #1
 8007512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007514 <__errno>:
 8007514:	4b01      	ldr	r3, [pc, #4]	; (800751c <__errno+0x8>)
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	200004cc 	.word	0x200004cc

08007520 <__libc_init_array>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	4d0d      	ldr	r5, [pc, #52]	; (8007558 <__libc_init_array+0x38>)
 8007524:	4c0d      	ldr	r4, [pc, #52]	; (800755c <__libc_init_array+0x3c>)
 8007526:	1b64      	subs	r4, r4, r5
 8007528:	10a4      	asrs	r4, r4, #2
 800752a:	2600      	movs	r6, #0
 800752c:	42a6      	cmp	r6, r4
 800752e:	d109      	bne.n	8007544 <__libc_init_array+0x24>
 8007530:	4d0b      	ldr	r5, [pc, #44]	; (8007560 <__libc_init_array+0x40>)
 8007532:	4c0c      	ldr	r4, [pc, #48]	; (8007564 <__libc_init_array+0x44>)
 8007534:	f000 fd32 	bl	8007f9c <_init>
 8007538:	1b64      	subs	r4, r4, r5
 800753a:	10a4      	asrs	r4, r4, #2
 800753c:	2600      	movs	r6, #0
 800753e:	42a6      	cmp	r6, r4
 8007540:	d105      	bne.n	800754e <__libc_init_array+0x2e>
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	f855 3b04 	ldr.w	r3, [r5], #4
 8007548:	4798      	blx	r3
 800754a:	3601      	adds	r6, #1
 800754c:	e7ee      	b.n	800752c <__libc_init_array+0xc>
 800754e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007552:	4798      	blx	r3
 8007554:	3601      	adds	r6, #1
 8007556:	e7f2      	b.n	800753e <__libc_init_array+0x1e>
 8007558:	08008334 	.word	0x08008334
 800755c:	08008334 	.word	0x08008334
 8007560:	08008334 	.word	0x08008334
 8007564:	08008338 	.word	0x08008338

08007568 <malloc>:
 8007568:	4b02      	ldr	r3, [pc, #8]	; (8007574 <malloc+0xc>)
 800756a:	4601      	mov	r1, r0
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	f000 b88d 	b.w	800768c <_malloc_r>
 8007572:	bf00      	nop
 8007574:	200004cc 	.word	0x200004cc

08007578 <free>:
 8007578:	4b02      	ldr	r3, [pc, #8]	; (8007584 <free+0xc>)
 800757a:	4601      	mov	r1, r0
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	f000 b819 	b.w	80075b4 <_free_r>
 8007582:	bf00      	nop
 8007584:	200004cc 	.word	0x200004cc

08007588 <memcpy>:
 8007588:	440a      	add	r2, r1
 800758a:	4291      	cmp	r1, r2
 800758c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007590:	d100      	bne.n	8007594 <memcpy+0xc>
 8007592:	4770      	bx	lr
 8007594:	b510      	push	{r4, lr}
 8007596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800759a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800759e:	4291      	cmp	r1, r2
 80075a0:	d1f9      	bne.n	8007596 <memcpy+0xe>
 80075a2:	bd10      	pop	{r4, pc}

080075a4 <memset>:
 80075a4:	4402      	add	r2, r0
 80075a6:	4603      	mov	r3, r0
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d100      	bne.n	80075ae <memset+0xa>
 80075ac:	4770      	bx	lr
 80075ae:	f803 1b01 	strb.w	r1, [r3], #1
 80075b2:	e7f9      	b.n	80075a8 <memset+0x4>

080075b4 <_free_r>:
 80075b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075b6:	2900      	cmp	r1, #0
 80075b8:	d044      	beq.n	8007644 <_free_r+0x90>
 80075ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075be:	9001      	str	r0, [sp, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f1a1 0404 	sub.w	r4, r1, #4
 80075c6:	bfb8      	it	lt
 80075c8:	18e4      	addlt	r4, r4, r3
 80075ca:	f000 f8e3 	bl	8007794 <__malloc_lock>
 80075ce:	4a1e      	ldr	r2, [pc, #120]	; (8007648 <_free_r+0x94>)
 80075d0:	9801      	ldr	r0, [sp, #4]
 80075d2:	6813      	ldr	r3, [r2, #0]
 80075d4:	b933      	cbnz	r3, 80075e4 <_free_r+0x30>
 80075d6:	6063      	str	r3, [r4, #4]
 80075d8:	6014      	str	r4, [r2, #0]
 80075da:	b003      	add	sp, #12
 80075dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075e0:	f000 b8de 	b.w	80077a0 <__malloc_unlock>
 80075e4:	42a3      	cmp	r3, r4
 80075e6:	d908      	bls.n	80075fa <_free_r+0x46>
 80075e8:	6825      	ldr	r5, [r4, #0]
 80075ea:	1961      	adds	r1, r4, r5
 80075ec:	428b      	cmp	r3, r1
 80075ee:	bf01      	itttt	eq
 80075f0:	6819      	ldreq	r1, [r3, #0]
 80075f2:	685b      	ldreq	r3, [r3, #4]
 80075f4:	1949      	addeq	r1, r1, r5
 80075f6:	6021      	streq	r1, [r4, #0]
 80075f8:	e7ed      	b.n	80075d6 <_free_r+0x22>
 80075fa:	461a      	mov	r2, r3
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	b10b      	cbz	r3, 8007604 <_free_r+0x50>
 8007600:	42a3      	cmp	r3, r4
 8007602:	d9fa      	bls.n	80075fa <_free_r+0x46>
 8007604:	6811      	ldr	r1, [r2, #0]
 8007606:	1855      	adds	r5, r2, r1
 8007608:	42a5      	cmp	r5, r4
 800760a:	d10b      	bne.n	8007624 <_free_r+0x70>
 800760c:	6824      	ldr	r4, [r4, #0]
 800760e:	4421      	add	r1, r4
 8007610:	1854      	adds	r4, r2, r1
 8007612:	42a3      	cmp	r3, r4
 8007614:	6011      	str	r1, [r2, #0]
 8007616:	d1e0      	bne.n	80075da <_free_r+0x26>
 8007618:	681c      	ldr	r4, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	6053      	str	r3, [r2, #4]
 800761e:	4421      	add	r1, r4
 8007620:	6011      	str	r1, [r2, #0]
 8007622:	e7da      	b.n	80075da <_free_r+0x26>
 8007624:	d902      	bls.n	800762c <_free_r+0x78>
 8007626:	230c      	movs	r3, #12
 8007628:	6003      	str	r3, [r0, #0]
 800762a:	e7d6      	b.n	80075da <_free_r+0x26>
 800762c:	6825      	ldr	r5, [r4, #0]
 800762e:	1961      	adds	r1, r4, r5
 8007630:	428b      	cmp	r3, r1
 8007632:	bf04      	itt	eq
 8007634:	6819      	ldreq	r1, [r3, #0]
 8007636:	685b      	ldreq	r3, [r3, #4]
 8007638:	6063      	str	r3, [r4, #4]
 800763a:	bf04      	itt	eq
 800763c:	1949      	addeq	r1, r1, r5
 800763e:	6021      	streq	r1, [r4, #0]
 8007640:	6054      	str	r4, [r2, #4]
 8007642:	e7ca      	b.n	80075da <_free_r+0x26>
 8007644:	b003      	add	sp, #12
 8007646:	bd30      	pop	{r4, r5, pc}
 8007648:	20002624 	.word	0x20002624

0800764c <sbrk_aligned>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4e0e      	ldr	r6, [pc, #56]	; (8007688 <sbrk_aligned+0x3c>)
 8007650:	460c      	mov	r4, r1
 8007652:	6831      	ldr	r1, [r6, #0]
 8007654:	4605      	mov	r5, r0
 8007656:	b911      	cbnz	r1, 800765e <sbrk_aligned+0x12>
 8007658:	f000 f88c 	bl	8007774 <_sbrk_r>
 800765c:	6030      	str	r0, [r6, #0]
 800765e:	4621      	mov	r1, r4
 8007660:	4628      	mov	r0, r5
 8007662:	f000 f887 	bl	8007774 <_sbrk_r>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	d00a      	beq.n	8007680 <sbrk_aligned+0x34>
 800766a:	1cc4      	adds	r4, r0, #3
 800766c:	f024 0403 	bic.w	r4, r4, #3
 8007670:	42a0      	cmp	r0, r4
 8007672:	d007      	beq.n	8007684 <sbrk_aligned+0x38>
 8007674:	1a21      	subs	r1, r4, r0
 8007676:	4628      	mov	r0, r5
 8007678:	f000 f87c 	bl	8007774 <_sbrk_r>
 800767c:	3001      	adds	r0, #1
 800767e:	d101      	bne.n	8007684 <sbrk_aligned+0x38>
 8007680:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007684:	4620      	mov	r0, r4
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	20002628 	.word	0x20002628

0800768c <_malloc_r>:
 800768c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007690:	1ccd      	adds	r5, r1, #3
 8007692:	f025 0503 	bic.w	r5, r5, #3
 8007696:	3508      	adds	r5, #8
 8007698:	2d0c      	cmp	r5, #12
 800769a:	bf38      	it	cc
 800769c:	250c      	movcc	r5, #12
 800769e:	2d00      	cmp	r5, #0
 80076a0:	4607      	mov	r7, r0
 80076a2:	db01      	blt.n	80076a8 <_malloc_r+0x1c>
 80076a4:	42a9      	cmp	r1, r5
 80076a6:	d905      	bls.n	80076b4 <_malloc_r+0x28>
 80076a8:	230c      	movs	r3, #12
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	2600      	movs	r6, #0
 80076ae:	4630      	mov	r0, r6
 80076b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b4:	4e2e      	ldr	r6, [pc, #184]	; (8007770 <_malloc_r+0xe4>)
 80076b6:	f000 f86d 	bl	8007794 <__malloc_lock>
 80076ba:	6833      	ldr	r3, [r6, #0]
 80076bc:	461c      	mov	r4, r3
 80076be:	bb34      	cbnz	r4, 800770e <_malloc_r+0x82>
 80076c0:	4629      	mov	r1, r5
 80076c2:	4638      	mov	r0, r7
 80076c4:	f7ff ffc2 	bl	800764c <sbrk_aligned>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	4604      	mov	r4, r0
 80076cc:	d14d      	bne.n	800776a <_malloc_r+0xde>
 80076ce:	6834      	ldr	r4, [r6, #0]
 80076d0:	4626      	mov	r6, r4
 80076d2:	2e00      	cmp	r6, #0
 80076d4:	d140      	bne.n	8007758 <_malloc_r+0xcc>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	4631      	mov	r1, r6
 80076da:	4638      	mov	r0, r7
 80076dc:	eb04 0803 	add.w	r8, r4, r3
 80076e0:	f000 f848 	bl	8007774 <_sbrk_r>
 80076e4:	4580      	cmp	r8, r0
 80076e6:	d13a      	bne.n	800775e <_malloc_r+0xd2>
 80076e8:	6821      	ldr	r1, [r4, #0]
 80076ea:	3503      	adds	r5, #3
 80076ec:	1a6d      	subs	r5, r5, r1
 80076ee:	f025 0503 	bic.w	r5, r5, #3
 80076f2:	3508      	adds	r5, #8
 80076f4:	2d0c      	cmp	r5, #12
 80076f6:	bf38      	it	cc
 80076f8:	250c      	movcc	r5, #12
 80076fa:	4629      	mov	r1, r5
 80076fc:	4638      	mov	r0, r7
 80076fe:	f7ff ffa5 	bl	800764c <sbrk_aligned>
 8007702:	3001      	adds	r0, #1
 8007704:	d02b      	beq.n	800775e <_malloc_r+0xd2>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	442b      	add	r3, r5
 800770a:	6023      	str	r3, [r4, #0]
 800770c:	e00e      	b.n	800772c <_malloc_r+0xa0>
 800770e:	6822      	ldr	r2, [r4, #0]
 8007710:	1b52      	subs	r2, r2, r5
 8007712:	d41e      	bmi.n	8007752 <_malloc_r+0xc6>
 8007714:	2a0b      	cmp	r2, #11
 8007716:	d916      	bls.n	8007746 <_malloc_r+0xba>
 8007718:	1961      	adds	r1, r4, r5
 800771a:	42a3      	cmp	r3, r4
 800771c:	6025      	str	r5, [r4, #0]
 800771e:	bf18      	it	ne
 8007720:	6059      	strne	r1, [r3, #4]
 8007722:	6863      	ldr	r3, [r4, #4]
 8007724:	bf08      	it	eq
 8007726:	6031      	streq	r1, [r6, #0]
 8007728:	5162      	str	r2, [r4, r5]
 800772a:	604b      	str	r3, [r1, #4]
 800772c:	4638      	mov	r0, r7
 800772e:	f104 060b 	add.w	r6, r4, #11
 8007732:	f000 f835 	bl	80077a0 <__malloc_unlock>
 8007736:	f026 0607 	bic.w	r6, r6, #7
 800773a:	1d23      	adds	r3, r4, #4
 800773c:	1af2      	subs	r2, r6, r3
 800773e:	d0b6      	beq.n	80076ae <_malloc_r+0x22>
 8007740:	1b9b      	subs	r3, r3, r6
 8007742:	50a3      	str	r3, [r4, r2]
 8007744:	e7b3      	b.n	80076ae <_malloc_r+0x22>
 8007746:	6862      	ldr	r2, [r4, #4]
 8007748:	42a3      	cmp	r3, r4
 800774a:	bf0c      	ite	eq
 800774c:	6032      	streq	r2, [r6, #0]
 800774e:	605a      	strne	r2, [r3, #4]
 8007750:	e7ec      	b.n	800772c <_malloc_r+0xa0>
 8007752:	4623      	mov	r3, r4
 8007754:	6864      	ldr	r4, [r4, #4]
 8007756:	e7b2      	b.n	80076be <_malloc_r+0x32>
 8007758:	4634      	mov	r4, r6
 800775a:	6876      	ldr	r6, [r6, #4]
 800775c:	e7b9      	b.n	80076d2 <_malloc_r+0x46>
 800775e:	230c      	movs	r3, #12
 8007760:	603b      	str	r3, [r7, #0]
 8007762:	4638      	mov	r0, r7
 8007764:	f000 f81c 	bl	80077a0 <__malloc_unlock>
 8007768:	e7a1      	b.n	80076ae <_malloc_r+0x22>
 800776a:	6025      	str	r5, [r4, #0]
 800776c:	e7de      	b.n	800772c <_malloc_r+0xa0>
 800776e:	bf00      	nop
 8007770:	20002624 	.word	0x20002624

08007774 <_sbrk_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d06      	ldr	r5, [pc, #24]	; (8007790 <_sbrk_r+0x1c>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	f7f8 fd26 	bl	80001d0 <_sbrk>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_sbrk_r+0x1a>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b103      	cbz	r3, 800778e <_sbrk_r+0x1a>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	2000262c 	.word	0x2000262c

08007794 <__malloc_lock>:
 8007794:	4801      	ldr	r0, [pc, #4]	; (800779c <__malloc_lock+0x8>)
 8007796:	f000 b809 	b.w	80077ac <__retarget_lock_acquire_recursive>
 800779a:	bf00      	nop
 800779c:	20002630 	.word	0x20002630

080077a0 <__malloc_unlock>:
 80077a0:	4801      	ldr	r0, [pc, #4]	; (80077a8 <__malloc_unlock+0x8>)
 80077a2:	f000 b804 	b.w	80077ae <__retarget_lock_release_recursive>
 80077a6:	bf00      	nop
 80077a8:	20002630 	.word	0x20002630

080077ac <__retarget_lock_acquire_recursive>:
 80077ac:	4770      	bx	lr

080077ae <__retarget_lock_release_recursive>:
 80077ae:	4770      	bx	lr

080077b0 <roundf>:
 80077b0:	ee10 0a10 	vmov	r0, s0
 80077b4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80077b8:	3a7f      	subs	r2, #127	; 0x7f
 80077ba:	2a16      	cmp	r2, #22
 80077bc:	dc15      	bgt.n	80077ea <roundf+0x3a>
 80077be:	2a00      	cmp	r2, #0
 80077c0:	da08      	bge.n	80077d4 <roundf+0x24>
 80077c2:	3201      	adds	r2, #1
 80077c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80077c8:	d101      	bne.n	80077ce <roundf+0x1e>
 80077ca:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80077ce:	ee00 3a10 	vmov	s0, r3
 80077d2:	4770      	bx	lr
 80077d4:	4907      	ldr	r1, [pc, #28]	; (80077f4 <roundf+0x44>)
 80077d6:	4111      	asrs	r1, r2
 80077d8:	4208      	tst	r0, r1
 80077da:	d0fa      	beq.n	80077d2 <roundf+0x22>
 80077dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80077e0:	4113      	asrs	r3, r2
 80077e2:	4403      	add	r3, r0
 80077e4:	ea23 0301 	bic.w	r3, r3, r1
 80077e8:	e7f1      	b.n	80077ce <roundf+0x1e>
 80077ea:	2a80      	cmp	r2, #128	; 0x80
 80077ec:	d1f1      	bne.n	80077d2 <roundf+0x22>
 80077ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80077f2:	4770      	bx	lr
 80077f4:	007fffff 	.word	0x007fffff

080077f8 <powf>:
 80077f8:	b508      	push	{r3, lr}
 80077fa:	ed2d 8b04 	vpush	{d8-d9}
 80077fe:	eeb0 8a60 	vmov.f32	s16, s1
 8007802:	eeb0 9a40 	vmov.f32	s18, s0
 8007806:	f000 f84f 	bl	80078a8 <__ieee754_powf>
 800780a:	eeb4 8a48 	vcmp.f32	s16, s16
 800780e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007812:	eef0 8a40 	vmov.f32	s17, s0
 8007816:	d63e      	bvs.n	8007896 <powf+0x9e>
 8007818:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800781c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007820:	d112      	bne.n	8007848 <powf+0x50>
 8007822:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782a:	d039      	beq.n	80078a0 <powf+0xa8>
 800782c:	eeb0 0a48 	vmov.f32	s0, s16
 8007830:	f000 fb35 	bl	8007e9e <finitef>
 8007834:	b378      	cbz	r0, 8007896 <powf+0x9e>
 8007836:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800783a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783e:	d52a      	bpl.n	8007896 <powf+0x9e>
 8007840:	f7ff fe68 	bl	8007514 <__errno>
 8007844:	2322      	movs	r3, #34	; 0x22
 8007846:	e014      	b.n	8007872 <powf+0x7a>
 8007848:	f000 fb29 	bl	8007e9e <finitef>
 800784c:	b998      	cbnz	r0, 8007876 <powf+0x7e>
 800784e:	eeb0 0a49 	vmov.f32	s0, s18
 8007852:	f000 fb24 	bl	8007e9e <finitef>
 8007856:	b170      	cbz	r0, 8007876 <powf+0x7e>
 8007858:	eeb0 0a48 	vmov.f32	s0, s16
 800785c:	f000 fb1f 	bl	8007e9e <finitef>
 8007860:	b148      	cbz	r0, 8007876 <powf+0x7e>
 8007862:	eef4 8a68 	vcmp.f32	s17, s17
 8007866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800786a:	d7e9      	bvc.n	8007840 <powf+0x48>
 800786c:	f7ff fe52 	bl	8007514 <__errno>
 8007870:	2321      	movs	r3, #33	; 0x21
 8007872:	6003      	str	r3, [r0, #0]
 8007874:	e00f      	b.n	8007896 <powf+0x9e>
 8007876:	eef5 8a40 	vcmp.f32	s17, #0.0
 800787a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800787e:	d10a      	bne.n	8007896 <powf+0x9e>
 8007880:	eeb0 0a49 	vmov.f32	s0, s18
 8007884:	f000 fb0b 	bl	8007e9e <finitef>
 8007888:	b128      	cbz	r0, 8007896 <powf+0x9e>
 800788a:	eeb0 0a48 	vmov.f32	s0, s16
 800788e:	f000 fb06 	bl	8007e9e <finitef>
 8007892:	2800      	cmp	r0, #0
 8007894:	d1d4      	bne.n	8007840 <powf+0x48>
 8007896:	eeb0 0a68 	vmov.f32	s0, s17
 800789a:	ecbd 8b04 	vpop	{d8-d9}
 800789e:	bd08      	pop	{r3, pc}
 80078a0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80078a4:	e7f7      	b.n	8007896 <powf+0x9e>
	...

080078a8 <__ieee754_powf>:
 80078a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ac:	ee10 4a90 	vmov	r4, s1
 80078b0:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80078b4:	ed2d 8b02 	vpush	{d8}
 80078b8:	ee10 6a10 	vmov	r6, s0
 80078bc:	eeb0 8a40 	vmov.f32	s16, s0
 80078c0:	eef0 8a60 	vmov.f32	s17, s1
 80078c4:	d10c      	bne.n	80078e0 <__ieee754_powf+0x38>
 80078c6:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80078ca:	0076      	lsls	r6, r6, #1
 80078cc:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80078d0:	f240 8296 	bls.w	8007e00 <__ieee754_powf+0x558>
 80078d4:	ee38 0a28 	vadd.f32	s0, s16, s17
 80078d8:	ecbd 8b02 	vpop	{d8}
 80078dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80078e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80078e8:	dcf4      	bgt.n	80078d4 <__ieee754_powf+0x2c>
 80078ea:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80078ee:	dd08      	ble.n	8007902 <__ieee754_powf+0x5a>
 80078f0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80078f4:	d1ee      	bne.n	80078d4 <__ieee754_powf+0x2c>
 80078f6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80078fa:	0064      	lsls	r4, r4, #1
 80078fc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007900:	e7e6      	b.n	80078d0 <__ieee754_powf+0x28>
 8007902:	2e00      	cmp	r6, #0
 8007904:	da20      	bge.n	8007948 <__ieee754_powf+0xa0>
 8007906:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800790a:	da2d      	bge.n	8007968 <__ieee754_powf+0xc0>
 800790c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007910:	f2c0 827f 	blt.w	8007e12 <__ieee754_powf+0x56a>
 8007914:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8007918:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800791c:	fa48 f703 	asr.w	r7, r8, r3
 8007920:	fa07 f303 	lsl.w	r3, r7, r3
 8007924:	4543      	cmp	r3, r8
 8007926:	f040 8274 	bne.w	8007e12 <__ieee754_powf+0x56a>
 800792a:	f007 0701 	and.w	r7, r7, #1
 800792e:	f1c7 0702 	rsb	r7, r7, #2
 8007932:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007936:	d11f      	bne.n	8007978 <__ieee754_powf+0xd0>
 8007938:	2c00      	cmp	r4, #0
 800793a:	f280 8267 	bge.w	8007e0c <__ieee754_powf+0x564>
 800793e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007942:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007946:	e7c7      	b.n	80078d8 <__ieee754_powf+0x30>
 8007948:	2700      	movs	r7, #0
 800794a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800794e:	d1f0      	bne.n	8007932 <__ieee754_powf+0x8a>
 8007950:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8007954:	f000 8254 	beq.w	8007e00 <__ieee754_powf+0x558>
 8007958:	dd08      	ble.n	800796c <__ieee754_powf+0xc4>
 800795a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8007c64 <__ieee754_powf+0x3bc>
 800795e:	2c00      	cmp	r4, #0
 8007960:	bfa8      	it	ge
 8007962:	eeb0 0a68 	vmovge.f32	s0, s17
 8007966:	e7b7      	b.n	80078d8 <__ieee754_powf+0x30>
 8007968:	2702      	movs	r7, #2
 800796a:	e7ee      	b.n	800794a <__ieee754_powf+0xa2>
 800796c:	2c00      	cmp	r4, #0
 800796e:	f280 824a 	bge.w	8007e06 <__ieee754_powf+0x55e>
 8007972:	eeb1 0a68 	vneg.f32	s0, s17
 8007976:	e7af      	b.n	80078d8 <__ieee754_powf+0x30>
 8007978:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800797c:	d102      	bne.n	8007984 <__ieee754_powf+0xdc>
 800797e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007982:	e7a9      	b.n	80078d8 <__ieee754_powf+0x30>
 8007984:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007988:	eeb0 0a48 	vmov.f32	s0, s16
 800798c:	d107      	bne.n	800799e <__ieee754_powf+0xf6>
 800798e:	2e00      	cmp	r6, #0
 8007990:	db05      	blt.n	800799e <__ieee754_powf+0xf6>
 8007992:	ecbd 8b02 	vpop	{d8}
 8007996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800799a:	f000 ba53 	b.w	8007e44 <__ieee754_sqrtf>
 800799e:	f000 fa77 	bl	8007e90 <fabsf>
 80079a2:	b125      	cbz	r5, 80079ae <__ieee754_powf+0x106>
 80079a4:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80079a8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80079ac:	d116      	bne.n	80079dc <__ieee754_powf+0x134>
 80079ae:	2c00      	cmp	r4, #0
 80079b0:	bfbc      	itt	lt
 80079b2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80079b6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	da8c      	bge.n	80078d8 <__ieee754_powf+0x30>
 80079be:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80079c2:	ea55 0307 	orrs.w	r3, r5, r7
 80079c6:	d104      	bne.n	80079d2 <__ieee754_powf+0x12a>
 80079c8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80079cc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80079d0:	e782      	b.n	80078d8 <__ieee754_powf+0x30>
 80079d2:	2f01      	cmp	r7, #1
 80079d4:	d180      	bne.n	80078d8 <__ieee754_powf+0x30>
 80079d6:	eeb1 0a40 	vneg.f32	s0, s0
 80079da:	e77d      	b.n	80078d8 <__ieee754_powf+0x30>
 80079dc:	0ff0      	lsrs	r0, r6, #31
 80079de:	3801      	subs	r0, #1
 80079e0:	ea57 0300 	orrs.w	r3, r7, r0
 80079e4:	d104      	bne.n	80079f0 <__ieee754_powf+0x148>
 80079e6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80079ea:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80079ee:	e773      	b.n	80078d8 <__ieee754_powf+0x30>
 80079f0:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80079f4:	dd74      	ble.n	8007ae0 <__ieee754_powf+0x238>
 80079f6:	4b9c      	ldr	r3, [pc, #624]	; (8007c68 <__ieee754_powf+0x3c0>)
 80079f8:	429d      	cmp	r5, r3
 80079fa:	dc08      	bgt.n	8007a0e <__ieee754_powf+0x166>
 80079fc:	2c00      	cmp	r4, #0
 80079fe:	da0b      	bge.n	8007a18 <__ieee754_powf+0x170>
 8007a00:	2000      	movs	r0, #0
 8007a02:	ecbd 8b02 	vpop	{d8}
 8007a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0a:	f000 ba3b 	b.w	8007e84 <__math_oflowf>
 8007a0e:	4b97      	ldr	r3, [pc, #604]	; (8007c6c <__ieee754_powf+0x3c4>)
 8007a10:	429d      	cmp	r5, r3
 8007a12:	dd08      	ble.n	8007a26 <__ieee754_powf+0x17e>
 8007a14:	2c00      	cmp	r4, #0
 8007a16:	dcf3      	bgt.n	8007a00 <__ieee754_powf+0x158>
 8007a18:	2000      	movs	r0, #0
 8007a1a:	ecbd 8b02 	vpop	{d8}
 8007a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a22:	f000 ba29 	b.w	8007e78 <__math_uflowf>
 8007a26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007a2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a2e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007c70 <__ieee754_powf+0x3c8>
 8007a32:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007a36:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007a3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007a3e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007a42:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007c74 <__ieee754_powf+0x3cc>
 8007a4e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007a52:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8007c78 <__ieee754_powf+0x3d0>
 8007a56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007a5a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8007c7c <__ieee754_powf+0x3d4>
 8007a5e:	eef0 6a67 	vmov.f32	s13, s15
 8007a62:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007a66:	ee16 3a90 	vmov	r3, s13
 8007a6a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007a6e:	f023 030f 	bic.w	r3, r3, #15
 8007a72:	ee00 3a90 	vmov	s1, r3
 8007a76:	eee0 0a47 	vfms.f32	s1, s0, s14
 8007a7a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007a7e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8007a82:	f024 040f 	bic.w	r4, r4, #15
 8007a86:	ee07 4a10 	vmov	s14, r4
 8007a8a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007a8e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007a9a:	3f01      	subs	r7, #1
 8007a9c:	ea57 0200 	orrs.w	r2, r7, r0
 8007aa0:	ee07 4a10 	vmov	s14, r4
 8007aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007aa8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007aac:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007ab0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007ab4:	ee17 4a10 	vmov	r4, s14
 8007ab8:	bf08      	it	eq
 8007aba:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007abe:	2c00      	cmp	r4, #0
 8007ac0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007ac4:	f340 817e 	ble.w	8007dc4 <__ieee754_powf+0x51c>
 8007ac8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007acc:	f340 80f8 	ble.w	8007cc0 <__ieee754_powf+0x418>
 8007ad0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad8:	bf4c      	ite	mi
 8007ada:	2001      	movmi	r0, #1
 8007adc:	2000      	movpl	r0, #0
 8007ade:	e790      	b.n	8007a02 <__ieee754_powf+0x15a>
 8007ae0:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8007ae4:	bf01      	itttt	eq
 8007ae6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8007c80 <__ieee754_powf+0x3d8>
 8007aea:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007aee:	f06f 0217 	mvneq.w	r2, #23
 8007af2:	ee17 5a90 	vmoveq	r5, s15
 8007af6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007afa:	bf18      	it	ne
 8007afc:	2200      	movne	r2, #0
 8007afe:	3b7f      	subs	r3, #127	; 0x7f
 8007b00:	4413      	add	r3, r2
 8007b02:	4a60      	ldr	r2, [pc, #384]	; (8007c84 <__ieee754_powf+0x3dc>)
 8007b04:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8007b08:	4295      	cmp	r5, r2
 8007b0a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8007b0e:	dd06      	ble.n	8007b1e <__ieee754_powf+0x276>
 8007b10:	4a5d      	ldr	r2, [pc, #372]	; (8007c88 <__ieee754_powf+0x3e0>)
 8007b12:	4295      	cmp	r5, r2
 8007b14:	f340 80a4 	ble.w	8007c60 <__ieee754_powf+0x3b8>
 8007b18:	3301      	adds	r3, #1
 8007b1a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007b1e:	2500      	movs	r5, #0
 8007b20:	4a5a      	ldr	r2, [pc, #360]	; (8007c8c <__ieee754_powf+0x3e4>)
 8007b22:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8007b26:	ee07 1a90 	vmov	s15, r1
 8007b2a:	ed92 7a00 	vldr	s14, [r2]
 8007b2e:	4a58      	ldr	r2, [pc, #352]	; (8007c90 <__ieee754_powf+0x3e8>)
 8007b30:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007b34:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007b38:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007b3c:	1049      	asrs	r1, r1, #1
 8007b3e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007b42:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007b46:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8007b4a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8007b4e:	ee06 1a10 	vmov	s12, r1
 8007b52:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007b56:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007b5a:	ee14 6a90 	vmov	r6, s9
 8007b5e:	4016      	ands	r6, r2
 8007b60:	ee05 6a90 	vmov	s11, r6
 8007b64:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007b68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b6c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007c94 <__ieee754_powf+0x3ec>
 8007b70:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8007b74:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007b78:	ee25 6a26 	vmul.f32	s12, s10, s13
 8007b7c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8007c98 <__ieee754_powf+0x3f0>
 8007b80:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007b84:	eddf 6a45 	vldr	s13, [pc, #276]	; 8007c9c <__ieee754_powf+0x3f4>
 8007b88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007b8c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007c70 <__ieee754_powf+0x3c8>
 8007b90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007b94:	eddf 6a42 	vldr	s13, [pc, #264]	; 8007ca0 <__ieee754_powf+0x3f8>
 8007b98:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007b9c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8007ca4 <__ieee754_powf+0x3fc>
 8007ba0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ba4:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007ba8:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007bac:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007bb0:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007bb4:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007bb8:	eef0 7a45 	vmov.f32	s15, s10
 8007bbc:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc4:	ee17 1a90 	vmov	r1, s15
 8007bc8:	4011      	ands	r1, r2
 8007bca:	ee07 1a90 	vmov	s15, r1
 8007bce:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8007bd2:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8007bd6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007bda:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007bde:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007be2:	eeb0 6a47 	vmov.f32	s12, s14
 8007be6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8007bea:	ee16 1a10 	vmov	r1, s12
 8007bee:	4011      	ands	r1, r2
 8007bf0:	ee06 1a90 	vmov	s13, r1
 8007bf4:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007bf8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007ca8 <__ieee754_powf+0x400>
 8007bfc:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8007cac <__ieee754_powf+0x404>
 8007c00:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007c04:	ee06 1a10 	vmov	s12, r1
 8007c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c0c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007cb0 <__ieee754_powf+0x408>
 8007c10:	4928      	ldr	r1, [pc, #160]	; (8007cb4 <__ieee754_powf+0x40c>)
 8007c12:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007c16:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8007c1a:	edd1 7a00 	vldr	s15, [r1]
 8007c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	4b24      	ldr	r3, [pc, #144]	; (8007cb8 <__ieee754_powf+0x410>)
 8007c28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007c2c:	eef0 7a47 	vmov.f32	s15, s14
 8007c30:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007c34:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007c38:	edd5 0a00 	vldr	s1, [r5]
 8007c3c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c44:	ee17 3a90 	vmov	r3, s15
 8007c48:	4013      	ands	r3, r2
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007c52:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007c56:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007c5a:	ee77 7a66 	vsub.f32	s15, s14, s13
 8007c5e:	e70e      	b.n	8007a7e <__ieee754_powf+0x1d6>
 8007c60:	2501      	movs	r5, #1
 8007c62:	e75d      	b.n	8007b20 <__ieee754_powf+0x278>
 8007c64:	00000000 	.word	0x00000000
 8007c68:	3f7ffff3 	.word	0x3f7ffff3
 8007c6c:	3f800007 	.word	0x3f800007
 8007c70:	3eaaaaab 	.word	0x3eaaaaab
 8007c74:	3fb8aa3b 	.word	0x3fb8aa3b
 8007c78:	36eca570 	.word	0x36eca570
 8007c7c:	3fb8aa00 	.word	0x3fb8aa00
 8007c80:	4b800000 	.word	0x4b800000
 8007c84:	001cc471 	.word	0x001cc471
 8007c88:	005db3d6 	.word	0x005db3d6
 8007c8c:	0800831c 	.word	0x0800831c
 8007c90:	fffff000 	.word	0xfffff000
 8007c94:	3e6c3255 	.word	0x3e6c3255
 8007c98:	3e53f142 	.word	0x3e53f142
 8007c9c:	3e8ba305 	.word	0x3e8ba305
 8007ca0:	3edb6db7 	.word	0x3edb6db7
 8007ca4:	3f19999a 	.word	0x3f19999a
 8007ca8:	3f76384f 	.word	0x3f76384f
 8007cac:	3f763800 	.word	0x3f763800
 8007cb0:	369dc3a0 	.word	0x369dc3a0
 8007cb4:	0800832c 	.word	0x0800832c
 8007cb8:	08008324 	.word	0x08008324
 8007cbc:	3338aa3c 	.word	0x3338aa3c
 8007cc0:	f040 8095 	bne.w	8007dee <__ieee754_powf+0x546>
 8007cc4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007cbc <__ieee754_powf+0x414>
 8007cc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007ccc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007cd0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd8:	f73f aefa 	bgt.w	8007ad0 <__ieee754_powf+0x228>
 8007cdc:	15db      	asrs	r3, r3, #23
 8007cde:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8007ce2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007ce6:	4103      	asrs	r3, r0
 8007ce8:	4423      	add	r3, r4
 8007cea:	494b      	ldr	r1, [pc, #300]	; (8007e18 <__ieee754_powf+0x570>)
 8007cec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007cf0:	3a7f      	subs	r2, #127	; 0x7f
 8007cf2:	4111      	asrs	r1, r2
 8007cf4:	ea23 0101 	bic.w	r1, r3, r1
 8007cf8:	ee07 1a10 	vmov	s14, r1
 8007cfc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007d04:	f1c2 0217 	rsb	r2, r2, #23
 8007d08:	4110      	asrs	r0, r2
 8007d0a:	2c00      	cmp	r4, #0
 8007d0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d10:	bfb8      	it	lt
 8007d12:	4240      	neglt	r0, r0
 8007d14:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007d18:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8007e1c <__ieee754_powf+0x574>
 8007d1c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8007e20 <__ieee754_powf+0x578>
 8007d20:	ee17 3a10 	vmov	r3, s14
 8007d24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007d28:	f023 030f 	bic.w	r3, r3, #15
 8007d2c:	ee07 3a10 	vmov	s14, r3
 8007d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d34:	ee27 0a00 	vmul.f32	s0, s14, s0
 8007d38:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007d3c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007e24 <__ieee754_powf+0x57c>
 8007d40:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8007d44:	eef0 7a40 	vmov.f32	s15, s0
 8007d48:	eee7 7a26 	vfma.f32	s15, s14, s13
 8007d4c:	eeb0 6a67 	vmov.f32	s12, s15
 8007d50:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007d54:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007d58:	ee30 0a46 	vsub.f32	s0, s0, s12
 8007d5c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8007e28 <__ieee754_powf+0x580>
 8007d60:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007e2c <__ieee754_powf+0x584>
 8007d64:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007d68:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8007e30 <__ieee754_powf+0x588>
 8007d6c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007d70:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007e34 <__ieee754_powf+0x58c>
 8007d74:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007d78:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007e38 <__ieee754_powf+0x590>
 8007d7c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007d80:	eef0 6a67 	vmov.f32	s13, s15
 8007d84:	eee6 6a47 	vfms.f32	s13, s12, s14
 8007d88:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007d8c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8007d90:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8007d94:	eea7 0a80 	vfma.f32	s0, s15, s0
 8007d98:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007d9c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8007da0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007da4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007da8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007dac:	ee10 3a10 	vmov	r3, s0
 8007db0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007db4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007db8:	da1f      	bge.n	8007dfa <__ieee754_powf+0x552>
 8007dba:	f000 f87d 	bl	8007eb8 <scalbnf>
 8007dbe:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007dc2:	e589      	b.n	80078d8 <__ieee754_powf+0x30>
 8007dc4:	4a1d      	ldr	r2, [pc, #116]	; (8007e3c <__ieee754_powf+0x594>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	dd07      	ble.n	8007dda <__ieee754_powf+0x532>
 8007dca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd2:	bf4c      	ite	mi
 8007dd4:	2001      	movmi	r0, #1
 8007dd6:	2000      	movpl	r0, #0
 8007dd8:	e61f      	b.n	8007a1a <__ieee754_powf+0x172>
 8007dda:	d108      	bne.n	8007dee <__ieee754_powf+0x546>
 8007ddc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007de0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de8:	f6ff af78 	blt.w	8007cdc <__ieee754_powf+0x434>
 8007dec:	e7ed      	b.n	8007dca <__ieee754_powf+0x522>
 8007dee:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007df2:	f73f af73 	bgt.w	8007cdc <__ieee754_powf+0x434>
 8007df6:	2000      	movs	r0, #0
 8007df8:	e78c      	b.n	8007d14 <__ieee754_powf+0x46c>
 8007dfa:	ee00 3a10 	vmov	s0, r3
 8007dfe:	e7de      	b.n	8007dbe <__ieee754_powf+0x516>
 8007e00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007e04:	e568      	b.n	80078d8 <__ieee754_powf+0x30>
 8007e06:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007e40 <__ieee754_powf+0x598>
 8007e0a:	e565      	b.n	80078d8 <__ieee754_powf+0x30>
 8007e0c:	eeb0 0a48 	vmov.f32	s0, s16
 8007e10:	e562      	b.n	80078d8 <__ieee754_powf+0x30>
 8007e12:	2700      	movs	r7, #0
 8007e14:	e58d      	b.n	8007932 <__ieee754_powf+0x8a>
 8007e16:	bf00      	nop
 8007e18:	007fffff 	.word	0x007fffff
 8007e1c:	35bfbe8c 	.word	0x35bfbe8c
 8007e20:	3f317200 	.word	0x3f317200
 8007e24:	3f317218 	.word	0x3f317218
 8007e28:	b5ddea0e 	.word	0xb5ddea0e
 8007e2c:	3331bb4c 	.word	0x3331bb4c
 8007e30:	388ab355 	.word	0x388ab355
 8007e34:	bb360b61 	.word	0xbb360b61
 8007e38:	3e2aaaab 	.word	0x3e2aaaab
 8007e3c:	43160000 	.word	0x43160000
 8007e40:	00000000 	.word	0x00000000

08007e44 <__ieee754_sqrtf>:
 8007e44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007e48:	4770      	bx	lr

08007e4a <with_errnof>:
 8007e4a:	b513      	push	{r0, r1, r4, lr}
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007e52:	f7ff fb5f 	bl	8007514 <__errno>
 8007e56:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007e5a:	6004      	str	r4, [r0, #0]
 8007e5c:	b002      	add	sp, #8
 8007e5e:	bd10      	pop	{r4, pc}

08007e60 <xflowf>:
 8007e60:	b130      	cbz	r0, 8007e70 <xflowf+0x10>
 8007e62:	eef1 7a40 	vneg.f32	s15, s0
 8007e66:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007e6a:	2022      	movs	r0, #34	; 0x22
 8007e6c:	f7ff bfed 	b.w	8007e4a <with_errnof>
 8007e70:	eef0 7a40 	vmov.f32	s15, s0
 8007e74:	e7f7      	b.n	8007e66 <xflowf+0x6>
	...

08007e78 <__math_uflowf>:
 8007e78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007e80 <__math_uflowf+0x8>
 8007e7c:	f7ff bff0 	b.w	8007e60 <xflowf>
 8007e80:	10000000 	.word	0x10000000

08007e84 <__math_oflowf>:
 8007e84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007e8c <__math_oflowf+0x8>
 8007e88:	f7ff bfea 	b.w	8007e60 <xflowf>
 8007e8c:	70000000 	.word	0x70000000

08007e90 <fabsf>:
 8007e90:	ee10 3a10 	vmov	r3, s0
 8007e94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e98:	ee00 3a10 	vmov	s0, r3
 8007e9c:	4770      	bx	lr

08007e9e <finitef>:
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007ea4:	9801      	ldr	r0, [sp, #4]
 8007ea6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007eaa:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007eae:	bfac      	ite	ge
 8007eb0:	2000      	movge	r0, #0
 8007eb2:	2001      	movlt	r0, #1
 8007eb4:	b002      	add	sp, #8
 8007eb6:	4770      	bx	lr

08007eb8 <scalbnf>:
 8007eb8:	ee10 3a10 	vmov	r3, s0
 8007ebc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007ec0:	d025      	beq.n	8007f0e <scalbnf+0x56>
 8007ec2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007ec6:	d302      	bcc.n	8007ece <scalbnf+0x16>
 8007ec8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007ecc:	4770      	bx	lr
 8007ece:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007ed2:	d122      	bne.n	8007f1a <scalbnf+0x62>
 8007ed4:	4b2a      	ldr	r3, [pc, #168]	; (8007f80 <scalbnf+0xc8>)
 8007ed6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007f84 <scalbnf+0xcc>
 8007eda:	4298      	cmp	r0, r3
 8007edc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007ee0:	db16      	blt.n	8007f10 <scalbnf+0x58>
 8007ee2:	ee10 3a10 	vmov	r3, s0
 8007ee6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007eea:	3a19      	subs	r2, #25
 8007eec:	4402      	add	r2, r0
 8007eee:	2afe      	cmp	r2, #254	; 0xfe
 8007ef0:	dd15      	ble.n	8007f1e <scalbnf+0x66>
 8007ef2:	ee10 3a10 	vmov	r3, s0
 8007ef6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007f88 <scalbnf+0xd0>
 8007efa:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007f8c <scalbnf+0xd4>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	eeb0 7a67 	vmov.f32	s14, s15
 8007f04:	bfb8      	it	lt
 8007f06:	eef0 7a66 	vmovlt.f32	s15, s13
 8007f0a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007f0e:	4770      	bx	lr
 8007f10:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007f90 <scalbnf+0xd8>
 8007f14:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007f18:	4770      	bx	lr
 8007f1a:	0dd2      	lsrs	r2, r2, #23
 8007f1c:	e7e6      	b.n	8007eec <scalbnf+0x34>
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	dd06      	ble.n	8007f30 <scalbnf+0x78>
 8007f22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f26:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007f2a:	ee00 3a10 	vmov	s0, r3
 8007f2e:	4770      	bx	lr
 8007f30:	f112 0f16 	cmn.w	r2, #22
 8007f34:	da1a      	bge.n	8007f6c <scalbnf+0xb4>
 8007f36:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007f3a:	4298      	cmp	r0, r3
 8007f3c:	ee10 3a10 	vmov	r3, s0
 8007f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f44:	dd0a      	ble.n	8007f5c <scalbnf+0xa4>
 8007f46:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007f88 <scalbnf+0xd0>
 8007f4a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007f8c <scalbnf+0xd4>
 8007f4e:	eef0 7a40 	vmov.f32	s15, s0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bf18      	it	ne
 8007f56:	eeb0 0a47 	vmovne.f32	s0, s14
 8007f5a:	e7db      	b.n	8007f14 <scalbnf+0x5c>
 8007f5c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007f90 <scalbnf+0xd8>
 8007f60:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007f94 <scalbnf+0xdc>
 8007f64:	eef0 7a40 	vmov.f32	s15, s0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	e7f3      	b.n	8007f54 <scalbnf+0x9c>
 8007f6c:	3219      	adds	r2, #25
 8007f6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f72:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007f76:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007f98 <scalbnf+0xe0>
 8007f7a:	ee07 3a10 	vmov	s14, r3
 8007f7e:	e7c4      	b.n	8007f0a <scalbnf+0x52>
 8007f80:	ffff3cb0 	.word	0xffff3cb0
 8007f84:	4c000000 	.word	0x4c000000
 8007f88:	7149f2ca 	.word	0x7149f2ca
 8007f8c:	f149f2ca 	.word	0xf149f2ca
 8007f90:	0da24260 	.word	0x0da24260
 8007f94:	8da24260 	.word	0x8da24260
 8007f98:	33000000 	.word	0x33000000

08007f9c <_init>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	bf00      	nop
 8007fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa2:	bc08      	pop	{r3}
 8007fa4:	469e      	mov	lr, r3
 8007fa6:	4770      	bx	lr

08007fa8 <_fini>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	bf00      	nop
 8007fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fae:	bc08      	pop	{r3}
 8007fb0:	469e      	mov	lr, r3
 8007fb2:	4770      	bx	lr
